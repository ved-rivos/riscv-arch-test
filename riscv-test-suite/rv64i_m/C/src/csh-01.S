
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.11.1
// timestamp : Tue Jun 20 09:44:07 2023 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/abd/abd-data/riscv-ctg/sample_cgfs/dataset.cgf \
//                  --cgf /home/abd/abd-data/riscv-ctg/sample_cgfs/rv64i_zcb.cgf \
 \
//                  -- xlen 64  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the c.sh instruction of the RISC-V RV64_Zca_Zcb extension for the csh covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV64I_Zca_Zcb")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*64.*I.*Zca.*Zcb.*);def TEST_CASE_1=True;",csh)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 != rs2, rs1==x11, rs2==x13, imm_val == 0, 
// opcode:c.sh; op1:x11; op2:x13; op2val:-0x800000001; immval:0x0
TEST_STORE(x1,x2,0,x11,x13,-0x800000001,0x0,0*XLEN/8,c.sh,0)

inst_1:
// rs1==x10, rs2==x9, imm_val == 2, 
// opcode:c.sh; op1:x10; op2:x9; op2val:0x2000000000; immval:0x2
TEST_STORE(x1,x2,0,x10,x9,0x2000000000,0x2,1*XLEN/8,c.sh,0)

inst_2:
// rs1==x9, rs2==x12, 
// opcode:c.sh; op1:x9; op2:x12; op2val:0x0; immval:0x0
TEST_STORE(x1,x2,0,x9,x12,0x0,0x0,2*XLEN/8,c.sh,0)

inst_3:
// rs1==x13, rs2==x14, 
// opcode:c.sh; op1:x13; op2:x14; op2val:0x0; immval:0x0
TEST_STORE(x1,x2,0,x13,x14,0x0,0x0,3*XLEN/8,c.sh,0)

inst_4:
// rs1==x15, rs2==x11, 
// opcode:c.sh; op1:x15; op2:x11; op2val:0x0; immval:0x0
TEST_STORE(x1,x2,0,x15,x11,0x0,0x0,4*XLEN/8,c.sh,0)

inst_5:
// rs1==x8, rs2==x10, 
// opcode:c.sh; op1:x8; op2:x10; op2val:0x0; immval:0x0
TEST_STORE(x1,x2,0,x8,x10,0x0,0x0,5*XLEN/8,c.sh,0)

inst_6:
// rs1==x14, rs2==x8, 
// opcode:c.sh; op1:x14; op2:x8; op2val:0x0; immval:0x0
TEST_STORE(x1,x2,0,x14,x8,0x0,0x0,6*XLEN/8,c.sh,0)

inst_7:
// rs1==x12, rs2==x15, 
// opcode:c.sh; op1:x12; op2:x15; op2val:0x0; immval:0x0
TEST_STORE(x1,x2,0,x12,x15,0x0,0x0,7*XLEN/8,c.sh,0)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x1_1:
    .fill 8*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
