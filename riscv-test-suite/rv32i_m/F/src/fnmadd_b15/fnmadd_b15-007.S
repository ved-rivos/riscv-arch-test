
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_4608:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55b2a1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5b2a1; op2val:0x0;
op3val:0xbfff800; valaddr_reg:x3; val_offset:13824*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13824*0 + 3*0*FLEN/8, x4, x1, x2)

inst_4609:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55b2a1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5b2a1; op2val:0x0;
op3val:0xbfffc00; valaddr_reg:x3; val_offset:13827*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13827*0 + 3*1*FLEN/8, x4, x1, x2)

inst_4610:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55b2a1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5b2a1; op2val:0x0;
op3val:0xbfffe00; valaddr_reg:x3; val_offset:13830*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13830*0 + 3*2*FLEN/8, x4, x1, x2)

inst_4611:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55b2a1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5b2a1; op2val:0x0;
op3val:0xbffff00; valaddr_reg:x3; val_offset:13833*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13833*0 + 3*3*FLEN/8, x4, x1, x2)

inst_4612:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55b2a1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5b2a1; op2val:0x0;
op3val:0xbffff80; valaddr_reg:x3; val_offset:13836*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13836*0 + 3*4*FLEN/8, x4, x1, x2)

inst_4613:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55b2a1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5b2a1; op2val:0x0;
op3val:0xbffffc0; valaddr_reg:x3; val_offset:13839*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13839*0 + 3*5*FLEN/8, x4, x1, x2)

inst_4614:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55b2a1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5b2a1; op2val:0x0;
op3val:0xbffffe0; valaddr_reg:x3; val_offset:13842*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13842*0 + 3*6*FLEN/8, x4, x1, x2)

inst_4615:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55b2a1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5b2a1; op2val:0x0;
op3val:0xbfffff0; valaddr_reg:x3; val_offset:13845*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13845*0 + 3*7*FLEN/8, x4, x1, x2)

inst_4616:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55b2a1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5b2a1; op2val:0x0;
op3val:0xbfffff8; valaddr_reg:x3; val_offset:13848*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13848*0 + 3*8*FLEN/8, x4, x1, x2)

inst_4617:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55b2a1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5b2a1; op2val:0x0;
op3val:0xbfffffc; valaddr_reg:x3; val_offset:13851*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13851*0 + 3*9*FLEN/8, x4, x1, x2)

inst_4618:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55b2a1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5b2a1; op2val:0x0;
op3val:0xbfffffe; valaddr_reg:x3; val_offset:13854*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13854*0 + 3*10*FLEN/8, x4, x1, x2)

inst_4619:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x55b2a1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x17 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd5b2a1; op2val:0x0;
op3val:0xbffffff; valaddr_reg:x3; val_offset:13857*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13857*0 + 3*11*FLEN/8, x4, x1, x2)

inst_4620:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:13860*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13860*0 + 3*12*FLEN/8, x4, x1, x2)

inst_4621:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:13863*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13863*0 + 3*13*FLEN/8, x4, x1, x2)

inst_4622:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:13866*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13866*0 + 3*14*FLEN/8, x4, x1, x2)

inst_4623:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:13869*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13869*0 + 3*15*FLEN/8, x4, x1, x2)

inst_4624:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:13872*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13872*0 + 3*16*FLEN/8, x4, x1, x2)

inst_4625:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:13875*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13875*0 + 3*17*FLEN/8, x4, x1, x2)

inst_4626:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:13878*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13878*0 + 3*18*FLEN/8, x4, x1, x2)

inst_4627:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:13881*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13881*0 + 3*19*FLEN/8, x4, x1, x2)

inst_4628:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:13884*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13884*0 + 3*20*FLEN/8, x4, x1, x2)

inst_4629:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:13887*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13887*0 + 3*21*FLEN/8, x4, x1, x2)

inst_4630:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:13890*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13890*0 + 3*22*FLEN/8, x4, x1, x2)

inst_4631:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:13893*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13893*0 + 3*23*FLEN/8, x4, x1, x2)

inst_4632:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:13896*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13896*0 + 3*24*FLEN/8, x4, x1, x2)

inst_4633:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:13899*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13899*0 + 3*25*FLEN/8, x4, x1, x2)

inst_4634:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:13902*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13902*0 + 3*26*FLEN/8, x4, x1, x2)

inst_4635:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:13905*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13905*0 + 3*27*FLEN/8, x4, x1, x2)

inst_4636:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e000000; valaddr_reg:x3; val_offset:13908*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13908*0 + 3*28*FLEN/8, x4, x1, x2)

inst_4637:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e000001; valaddr_reg:x3; val_offset:13911*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13911*0 + 3*29*FLEN/8, x4, x1, x2)

inst_4638:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e000003; valaddr_reg:x3; val_offset:13914*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13914*0 + 3*30*FLEN/8, x4, x1, x2)

inst_4639:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e000007; valaddr_reg:x3; val_offset:13917*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13917*0 + 3*31*FLEN/8, x4, x1, x2)

inst_4640:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e00000f; valaddr_reg:x3; val_offset:13920*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13920*0 + 3*32*FLEN/8, x4, x1, x2)

inst_4641:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e00001f; valaddr_reg:x3; val_offset:13923*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13923*0 + 3*33*FLEN/8, x4, x1, x2)

inst_4642:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e00003f; valaddr_reg:x3; val_offset:13926*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13926*0 + 3*34*FLEN/8, x4, x1, x2)

inst_4643:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e00007f; valaddr_reg:x3; val_offset:13929*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13929*0 + 3*35*FLEN/8, x4, x1, x2)

inst_4644:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e0000ff; valaddr_reg:x3; val_offset:13932*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13932*0 + 3*36*FLEN/8, x4, x1, x2)

inst_4645:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e0001ff; valaddr_reg:x3; val_offset:13935*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13935*0 + 3*37*FLEN/8, x4, x1, x2)

inst_4646:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e0003ff; valaddr_reg:x3; val_offset:13938*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13938*0 + 3*38*FLEN/8, x4, x1, x2)

inst_4647:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e0007ff; valaddr_reg:x3; val_offset:13941*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13941*0 + 3*39*FLEN/8, x4, x1, x2)

inst_4648:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e000fff; valaddr_reg:x3; val_offset:13944*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13944*0 + 3*40*FLEN/8, x4, x1, x2)

inst_4649:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e001fff; valaddr_reg:x3; val_offset:13947*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13947*0 + 3*41*FLEN/8, x4, x1, x2)

inst_4650:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e003fff; valaddr_reg:x3; val_offset:13950*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13950*0 + 3*42*FLEN/8, x4, x1, x2)

inst_4651:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e007fff; valaddr_reg:x3; val_offset:13953*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13953*0 + 3*43*FLEN/8, x4, x1, x2)

inst_4652:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e00ffff; valaddr_reg:x3; val_offset:13956*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13956*0 + 3*44*FLEN/8, x4, x1, x2)

inst_4653:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e01ffff; valaddr_reg:x3; val_offset:13959*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13959*0 + 3*45*FLEN/8, x4, x1, x2)

inst_4654:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e03ffff; valaddr_reg:x3; val_offset:13962*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13962*0 + 3*46*FLEN/8, x4, x1, x2)

inst_4655:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e07ffff; valaddr_reg:x3; val_offset:13965*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13965*0 + 3*47*FLEN/8, x4, x1, x2)

inst_4656:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e0fffff; valaddr_reg:x3; val_offset:13968*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13968*0 + 3*48*FLEN/8, x4, x1, x2)

inst_4657:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e1fffff; valaddr_reg:x3; val_offset:13971*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13971*0 + 3*49*FLEN/8, x4, x1, x2)

inst_4658:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e3fffff; valaddr_reg:x3; val_offset:13974*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13974*0 + 3*50*FLEN/8, x4, x1, x2)

inst_4659:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e400000; valaddr_reg:x3; val_offset:13977*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13977*0 + 3*51*FLEN/8, x4, x1, x2)

inst_4660:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e600000; valaddr_reg:x3; val_offset:13980*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13980*0 + 3*52*FLEN/8, x4, x1, x2)

inst_4661:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e700000; valaddr_reg:x3; val_offset:13983*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13983*0 + 3*53*FLEN/8, x4, x1, x2)

inst_4662:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e780000; valaddr_reg:x3; val_offset:13986*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13986*0 + 3*54*FLEN/8, x4, x1, x2)

inst_4663:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e7c0000; valaddr_reg:x3; val_offset:13989*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13989*0 + 3*55*FLEN/8, x4, x1, x2)

inst_4664:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e7e0000; valaddr_reg:x3; val_offset:13992*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13992*0 + 3*56*FLEN/8, x4, x1, x2)

inst_4665:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e7f0000; valaddr_reg:x3; val_offset:13995*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13995*0 + 3*57*FLEN/8, x4, x1, x2)

inst_4666:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e7f8000; valaddr_reg:x3; val_offset:13998*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 13998*0 + 3*58*FLEN/8, x4, x1, x2)

inst_4667:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e7fc000; valaddr_reg:x3; val_offset:14001*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14001*0 + 3*59*FLEN/8, x4, x1, x2)

inst_4668:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e7fe000; valaddr_reg:x3; val_offset:14004*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14004*0 + 3*60*FLEN/8, x4, x1, x2)

inst_4669:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e7ff000; valaddr_reg:x3; val_offset:14007*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14007*0 + 3*61*FLEN/8, x4, x1, x2)

inst_4670:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e7ff800; valaddr_reg:x3; val_offset:14010*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14010*0 + 3*62*FLEN/8, x4, x1, x2)

inst_4671:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e7ffc00; valaddr_reg:x3; val_offset:14013*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14013*0 + 3*63*FLEN/8, x4, x1, x2)

inst_4672:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e7ffe00; valaddr_reg:x3; val_offset:14016*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14016*0 + 3*64*FLEN/8, x4, x1, x2)

inst_4673:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e7fff00; valaddr_reg:x3; val_offset:14019*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14019*0 + 3*65*FLEN/8, x4, x1, x2)

inst_4674:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e7fff80; valaddr_reg:x3; val_offset:14022*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14022*0 + 3*66*FLEN/8, x4, x1, x2)

inst_4675:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e7fffc0; valaddr_reg:x3; val_offset:14025*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14025*0 + 3*67*FLEN/8, x4, x1, x2)

inst_4676:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e7fffe0; valaddr_reg:x3; val_offset:14028*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14028*0 + 3*68*FLEN/8, x4, x1, x2)

inst_4677:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e7ffff0; valaddr_reg:x3; val_offset:14031*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14031*0 + 3*69*FLEN/8, x4, x1, x2)

inst_4678:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e7ffff8; valaddr_reg:x3; val_offset:14034*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14034*0 + 3*70*FLEN/8, x4, x1, x2)

inst_4679:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e7ffffc; valaddr_reg:x3; val_offset:14037*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14037*0 + 3*71*FLEN/8, x4, x1, x2)

inst_4680:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e7ffffe; valaddr_reg:x3; val_offset:14040*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14040*0 + 3*72*FLEN/8, x4, x1, x2)

inst_4681:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x596713 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd96713; op2val:0x80000000;
op3val:0x8e7fffff; valaddr_reg:x3; val_offset:14043*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14043*0 + 3*73*FLEN/8, x4, x1, x2)

inst_4682:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x0; valaddr_reg:x3; val_offset:14046*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14046*0 + 3*74*FLEN/8, x4, x1, x2)

inst_4683:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:14049*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14049*0 + 3*75*FLEN/8, x4, x1, x2)

inst_4684:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:14052*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14052*0 + 3*76*FLEN/8, x4, x1, x2)

inst_4685:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:14055*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14055*0 + 3*77*FLEN/8, x4, x1, x2)

inst_4686:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0xf; valaddr_reg:x3; val_offset:14058*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14058*0 + 3*78*FLEN/8, x4, x1, x2)

inst_4687:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x1f; valaddr_reg:x3; val_offset:14061*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14061*0 + 3*79*FLEN/8, x4, x1, x2)

inst_4688:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x3f; valaddr_reg:x3; val_offset:14064*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14064*0 + 3*80*FLEN/8, x4, x1, x2)

inst_4689:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x7f; valaddr_reg:x3; val_offset:14067*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14067*0 + 3*81*FLEN/8, x4, x1, x2)

inst_4690:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0xff; valaddr_reg:x3; val_offset:14070*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14070*0 + 3*82*FLEN/8, x4, x1, x2)

inst_4691:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x1ff; valaddr_reg:x3; val_offset:14073*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14073*0 + 3*83*FLEN/8, x4, x1, x2)

inst_4692:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x3ff; valaddr_reg:x3; val_offset:14076*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14076*0 + 3*84*FLEN/8, x4, x1, x2)

inst_4693:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x7ff; valaddr_reg:x3; val_offset:14079*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14079*0 + 3*85*FLEN/8, x4, x1, x2)

inst_4694:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0xfff; valaddr_reg:x3; val_offset:14082*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14082*0 + 3*86*FLEN/8, x4, x1, x2)

inst_4695:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x1fff; valaddr_reg:x3; val_offset:14085*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14085*0 + 3*87*FLEN/8, x4, x1, x2)

inst_4696:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x3fff; valaddr_reg:x3; val_offset:14088*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14088*0 + 3*88*FLEN/8, x4, x1, x2)

inst_4697:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x7fff; valaddr_reg:x3; val_offset:14091*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14091*0 + 3*89*FLEN/8, x4, x1, x2)

inst_4698:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0xffff; valaddr_reg:x3; val_offset:14094*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14094*0 + 3*90*FLEN/8, x4, x1, x2)

inst_4699:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x1ffff; valaddr_reg:x3; val_offset:14097*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14097*0 + 3*91*FLEN/8, x4, x1, x2)

inst_4700:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x3ffff; valaddr_reg:x3; val_offset:14100*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14100*0 + 3*92*FLEN/8, x4, x1, x2)

inst_4701:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x7ffff; valaddr_reg:x3; val_offset:14103*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14103*0 + 3*93*FLEN/8, x4, x1, x2)

inst_4702:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0xfffff; valaddr_reg:x3; val_offset:14106*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14106*0 + 3*94*FLEN/8, x4, x1, x2)

inst_4703:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:14109*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14109*0 + 3*95*FLEN/8, x4, x1, x2)

inst_4704:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x1fffff; valaddr_reg:x3; val_offset:14112*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14112*0 + 3*96*FLEN/8, x4, x1, x2)

inst_4705:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:14115*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14115*0 + 3*97*FLEN/8, x4, x1, x2)

inst_4706:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:14118*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14118*0 + 3*98*FLEN/8, x4, x1, x2)

inst_4707:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:14121*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14121*0 + 3*99*FLEN/8, x4, x1, x2)

inst_4708:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:14124*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14124*0 + 3*100*FLEN/8, x4, x1, x2)

inst_4709:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x3fffff; valaddr_reg:x3; val_offset:14127*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14127*0 + 3*101*FLEN/8, x4, x1, x2)

inst_4710:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x400000; valaddr_reg:x3; val_offset:14130*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14130*0 + 3*102*FLEN/8, x4, x1, x2)

inst_4711:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:14133*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14133*0 + 3*103*FLEN/8, x4, x1, x2)

inst_4712:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:14136*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14136*0 + 3*104*FLEN/8, x4, x1, x2)

inst_4713:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:14139*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14139*0 + 3*105*FLEN/8, x4, x1, x2)

inst_4714:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x600000; valaddr_reg:x3; val_offset:14142*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14142*0 + 3*106*FLEN/8, x4, x1, x2)

inst_4715:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:14145*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14145*0 + 3*107*FLEN/8, x4, x1, x2)

inst_4716:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:14148*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14148*0 + 3*108*FLEN/8, x4, x1, x2)

inst_4717:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x700000; valaddr_reg:x3; val_offset:14151*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14151*0 + 3*109*FLEN/8, x4, x1, x2)

inst_4718:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x780000; valaddr_reg:x3; val_offset:14154*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14154*0 + 3*110*FLEN/8, x4, x1, x2)

inst_4719:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x7c0000; valaddr_reg:x3; val_offset:14157*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14157*0 + 3*111*FLEN/8, x4, x1, x2)

inst_4720:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x7e0000; valaddr_reg:x3; val_offset:14160*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14160*0 + 3*112*FLEN/8, x4, x1, x2)

inst_4721:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x7f0000; valaddr_reg:x3; val_offset:14163*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14163*0 + 3*113*FLEN/8, x4, x1, x2)

inst_4722:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x7f8000; valaddr_reg:x3; val_offset:14166*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14166*0 + 3*114*FLEN/8, x4, x1, x2)

inst_4723:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x7fc000; valaddr_reg:x3; val_offset:14169*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14169*0 + 3*115*FLEN/8, x4, x1, x2)

inst_4724:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x7fe000; valaddr_reg:x3; val_offset:14172*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14172*0 + 3*116*FLEN/8, x4, x1, x2)

inst_4725:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x7ff000; valaddr_reg:x3; val_offset:14175*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14175*0 + 3*117*FLEN/8, x4, x1, x2)

inst_4726:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x7ff800; valaddr_reg:x3; val_offset:14178*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14178*0 + 3*118*FLEN/8, x4, x1, x2)

inst_4727:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x7ffc00; valaddr_reg:x3; val_offset:14181*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14181*0 + 3*119*FLEN/8, x4, x1, x2)

inst_4728:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x7ffe00; valaddr_reg:x3; val_offset:14184*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14184*0 + 3*120*FLEN/8, x4, x1, x2)

inst_4729:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x7fff00; valaddr_reg:x3; val_offset:14187*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14187*0 + 3*121*FLEN/8, x4, x1, x2)

inst_4730:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x7fff80; valaddr_reg:x3; val_offset:14190*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14190*0 + 3*122*FLEN/8, x4, x1, x2)

inst_4731:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x7fffc0; valaddr_reg:x3; val_offset:14193*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14193*0 + 3*123*FLEN/8, x4, x1, x2)

inst_4732:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x7fffe0; valaddr_reg:x3; val_offset:14196*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14196*0 + 3*124*FLEN/8, x4, x1, x2)

inst_4733:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x7ffff0; valaddr_reg:x3; val_offset:14199*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14199*0 + 3*125*FLEN/8, x4, x1, x2)

inst_4734:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:14202*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14202*0 + 3*126*FLEN/8, x4, x1, x2)

inst_4735:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:14205*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14205*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_4736:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:14208*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14208*0 + 3*128*FLEN/8, x4, x1, x2)

inst_4737:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x599f18 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dd99f18; op2val:0x0;
op3val:0x7fffff; valaddr_reg:x3; val_offset:14211*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14211*0 + 3*129*FLEN/8, x4, x1, x2)

inst_4738:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbf800000; valaddr_reg:x3; val_offset:14214*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14214*0 + 3*130*FLEN/8, x4, x1, x2)

inst_4739:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbf800001; valaddr_reg:x3; val_offset:14217*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14217*0 + 3*131*FLEN/8, x4, x1, x2)

inst_4740:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbf800003; valaddr_reg:x3; val_offset:14220*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14220*0 + 3*132*FLEN/8, x4, x1, x2)

inst_4741:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbf800007; valaddr_reg:x3; val_offset:14223*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14223*0 + 3*133*FLEN/8, x4, x1, x2)

inst_4742:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbf80000f; valaddr_reg:x3; val_offset:14226*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14226*0 + 3*134*FLEN/8, x4, x1, x2)

inst_4743:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbf80001f; valaddr_reg:x3; val_offset:14229*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14229*0 + 3*135*FLEN/8, x4, x1, x2)

inst_4744:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbf80003f; valaddr_reg:x3; val_offset:14232*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14232*0 + 3*136*FLEN/8, x4, x1, x2)

inst_4745:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbf80007f; valaddr_reg:x3; val_offset:14235*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14235*0 + 3*137*FLEN/8, x4, x1, x2)

inst_4746:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbf8000ff; valaddr_reg:x3; val_offset:14238*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14238*0 + 3*138*FLEN/8, x4, x1, x2)

inst_4747:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbf8001ff; valaddr_reg:x3; val_offset:14241*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14241*0 + 3*139*FLEN/8, x4, x1, x2)

inst_4748:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbf8003ff; valaddr_reg:x3; val_offset:14244*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14244*0 + 3*140*FLEN/8, x4, x1, x2)

inst_4749:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbf8007ff; valaddr_reg:x3; val_offset:14247*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14247*0 + 3*141*FLEN/8, x4, x1, x2)

inst_4750:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbf800fff; valaddr_reg:x3; val_offset:14250*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14250*0 + 3*142*FLEN/8, x4, x1, x2)

inst_4751:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbf801fff; valaddr_reg:x3; val_offset:14253*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14253*0 + 3*143*FLEN/8, x4, x1, x2)

inst_4752:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbf803fff; valaddr_reg:x3; val_offset:14256*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14256*0 + 3*144*FLEN/8, x4, x1, x2)

inst_4753:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbf807fff; valaddr_reg:x3; val_offset:14259*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14259*0 + 3*145*FLEN/8, x4, x1, x2)

inst_4754:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbf80ffff; valaddr_reg:x3; val_offset:14262*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14262*0 + 3*146*FLEN/8, x4, x1, x2)

inst_4755:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbf81ffff; valaddr_reg:x3; val_offset:14265*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14265*0 + 3*147*FLEN/8, x4, x1, x2)

inst_4756:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbf83ffff; valaddr_reg:x3; val_offset:14268*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14268*0 + 3*148*FLEN/8, x4, x1, x2)

inst_4757:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbf87ffff; valaddr_reg:x3; val_offset:14271*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14271*0 + 3*149*FLEN/8, x4, x1, x2)

inst_4758:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbf8fffff; valaddr_reg:x3; val_offset:14274*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14274*0 + 3*150*FLEN/8, x4, x1, x2)

inst_4759:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbf999999; valaddr_reg:x3; val_offset:14277*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14277*0 + 3*151*FLEN/8, x4, x1, x2)

inst_4760:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbf9fffff; valaddr_reg:x3; val_offset:14280*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14280*0 + 3*152*FLEN/8, x4, x1, x2)

inst_4761:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:14283*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14283*0 + 3*153*FLEN/8, x4, x1, x2)

inst_4762:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:14286*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14286*0 + 3*154*FLEN/8, x4, x1, x2)

inst_4763:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:14289*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14289*0 + 3*155*FLEN/8, x4, x1, x2)

inst_4764:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:14292*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14292*0 + 3*156*FLEN/8, x4, x1, x2)

inst_4765:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbfbfffff; valaddr_reg:x3; val_offset:14295*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14295*0 + 3*157*FLEN/8, x4, x1, x2)

inst_4766:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbfc00000; valaddr_reg:x3; val_offset:14298*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14298*0 + 3*158*FLEN/8, x4, x1, x2)

inst_4767:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:14301*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14301*0 + 3*159*FLEN/8, x4, x1, x2)

inst_4768:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:14304*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14304*0 + 3*160*FLEN/8, x4, x1, x2)

inst_4769:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:14307*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14307*0 + 3*161*FLEN/8, x4, x1, x2)

inst_4770:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbfe00000; valaddr_reg:x3; val_offset:14310*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14310*0 + 3*162*FLEN/8, x4, x1, x2)

inst_4771:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:14313*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14313*0 + 3*163*FLEN/8, x4, x1, x2)

inst_4772:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:14316*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14316*0 + 3*164*FLEN/8, x4, x1, x2)

inst_4773:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbff00000; valaddr_reg:x3; val_offset:14319*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14319*0 + 3*165*FLEN/8, x4, x1, x2)

inst_4774:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbff80000; valaddr_reg:x3; val_offset:14322*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14322*0 + 3*166*FLEN/8, x4, x1, x2)

inst_4775:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbffc0000; valaddr_reg:x3; val_offset:14325*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14325*0 + 3*167*FLEN/8, x4, x1, x2)

inst_4776:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbffe0000; valaddr_reg:x3; val_offset:14328*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14328*0 + 3*168*FLEN/8, x4, x1, x2)

inst_4777:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbfff0000; valaddr_reg:x3; val_offset:14331*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14331*0 + 3*169*FLEN/8, x4, x1, x2)

inst_4778:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbfff8000; valaddr_reg:x3; val_offset:14334*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14334*0 + 3*170*FLEN/8, x4, x1, x2)

inst_4779:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbfffc000; valaddr_reg:x3; val_offset:14337*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14337*0 + 3*171*FLEN/8, x4, x1, x2)

inst_4780:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbfffe000; valaddr_reg:x3; val_offset:14340*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14340*0 + 3*172*FLEN/8, x4, x1, x2)

inst_4781:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbffff000; valaddr_reg:x3; val_offset:14343*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14343*0 + 3*173*FLEN/8, x4, x1, x2)

inst_4782:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbffff800; valaddr_reg:x3; val_offset:14346*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14346*0 + 3*174*FLEN/8, x4, x1, x2)

inst_4783:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbffffc00; valaddr_reg:x3; val_offset:14349*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14349*0 + 3*175*FLEN/8, x4, x1, x2)

inst_4784:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbffffe00; valaddr_reg:x3; val_offset:14352*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14352*0 + 3*176*FLEN/8, x4, x1, x2)

inst_4785:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbfffff00; valaddr_reg:x3; val_offset:14355*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14355*0 + 3*177*FLEN/8, x4, x1, x2)

inst_4786:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbfffff80; valaddr_reg:x3; val_offset:14358*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14358*0 + 3*178*FLEN/8, x4, x1, x2)

inst_4787:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbfffffc0; valaddr_reg:x3; val_offset:14361*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14361*0 + 3*179*FLEN/8, x4, x1, x2)

inst_4788:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbfffffe0; valaddr_reg:x3; val_offset:14364*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14364*0 + 3*180*FLEN/8, x4, x1, x2)

inst_4789:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbffffff0; valaddr_reg:x3; val_offset:14367*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14367*0 + 3*181*FLEN/8, x4, x1, x2)

inst_4790:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:14370*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14370*0 + 3*182*FLEN/8, x4, x1, x2)

inst_4791:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:14373*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14373*0 + 3*183*FLEN/8, x4, x1, x2)

inst_4792:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:14376*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14376*0 + 3*184*FLEN/8, x4, x1, x2)

inst_4793:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x624be0 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x10cd1e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de24be0; op2val:0x8110cd1e;
op3val:0xbfffffff; valaddr_reg:x3; val_offset:14379*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14379*0 + 3*185*FLEN/8, x4, x1, x2)

inst_4794:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa000000; valaddr_reg:x3; val_offset:14382*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14382*0 + 3*186*FLEN/8, x4, x1, x2)

inst_4795:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa000001; valaddr_reg:x3; val_offset:14385*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14385*0 + 3*187*FLEN/8, x4, x1, x2)

inst_4796:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa000003; valaddr_reg:x3; val_offset:14388*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14388*0 + 3*188*FLEN/8, x4, x1, x2)

inst_4797:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa000007; valaddr_reg:x3; val_offset:14391*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14391*0 + 3*189*FLEN/8, x4, x1, x2)

inst_4798:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa00000f; valaddr_reg:x3; val_offset:14394*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14394*0 + 3*190*FLEN/8, x4, x1, x2)

inst_4799:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa00001f; valaddr_reg:x3; val_offset:14397*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14397*0 + 3*191*FLEN/8, x4, x1, x2)

inst_4800:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa00003f; valaddr_reg:x3; val_offset:14400*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14400*0 + 3*192*FLEN/8, x4, x1, x2)

inst_4801:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa00007f; valaddr_reg:x3; val_offset:14403*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14403*0 + 3*193*FLEN/8, x4, x1, x2)

inst_4802:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa0000ff; valaddr_reg:x3; val_offset:14406*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14406*0 + 3*194*FLEN/8, x4, x1, x2)

inst_4803:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa0001ff; valaddr_reg:x3; val_offset:14409*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14409*0 + 3*195*FLEN/8, x4, x1, x2)

inst_4804:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa0003ff; valaddr_reg:x3; val_offset:14412*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14412*0 + 3*196*FLEN/8, x4, x1, x2)

inst_4805:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa0007ff; valaddr_reg:x3; val_offset:14415*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14415*0 + 3*197*FLEN/8, x4, x1, x2)

inst_4806:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa000fff; valaddr_reg:x3; val_offset:14418*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14418*0 + 3*198*FLEN/8, x4, x1, x2)

inst_4807:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa001fff; valaddr_reg:x3; val_offset:14421*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14421*0 + 3*199*FLEN/8, x4, x1, x2)

inst_4808:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa003fff; valaddr_reg:x3; val_offset:14424*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14424*0 + 3*200*FLEN/8, x4, x1, x2)

inst_4809:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa007fff; valaddr_reg:x3; val_offset:14427*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14427*0 + 3*201*FLEN/8, x4, x1, x2)

inst_4810:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa00ffff; valaddr_reg:x3; val_offset:14430*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14430*0 + 3*202*FLEN/8, x4, x1, x2)

inst_4811:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa01ffff; valaddr_reg:x3; val_offset:14433*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14433*0 + 3*203*FLEN/8, x4, x1, x2)

inst_4812:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa03ffff; valaddr_reg:x3; val_offset:14436*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14436*0 + 3*204*FLEN/8, x4, x1, x2)

inst_4813:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa07ffff; valaddr_reg:x3; val_offset:14439*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14439*0 + 3*205*FLEN/8, x4, x1, x2)

inst_4814:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa0fffff; valaddr_reg:x3; val_offset:14442*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14442*0 + 3*206*FLEN/8, x4, x1, x2)

inst_4815:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa1fffff; valaddr_reg:x3; val_offset:14445*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14445*0 + 3*207*FLEN/8, x4, x1, x2)

inst_4816:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa3fffff; valaddr_reg:x3; val_offset:14448*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14448*0 + 3*208*FLEN/8, x4, x1, x2)

inst_4817:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa400000; valaddr_reg:x3; val_offset:14451*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14451*0 + 3*209*FLEN/8, x4, x1, x2)

inst_4818:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa600000; valaddr_reg:x3; val_offset:14454*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14454*0 + 3*210*FLEN/8, x4, x1, x2)

inst_4819:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa700000; valaddr_reg:x3; val_offset:14457*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14457*0 + 3*211*FLEN/8, x4, x1, x2)

inst_4820:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa780000; valaddr_reg:x3; val_offset:14460*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14460*0 + 3*212*FLEN/8, x4, x1, x2)

inst_4821:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa7c0000; valaddr_reg:x3; val_offset:14463*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14463*0 + 3*213*FLEN/8, x4, x1, x2)

inst_4822:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa7e0000; valaddr_reg:x3; val_offset:14466*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14466*0 + 3*214*FLEN/8, x4, x1, x2)

inst_4823:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa7f0000; valaddr_reg:x3; val_offset:14469*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14469*0 + 3*215*FLEN/8, x4, x1, x2)

inst_4824:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa7f8000; valaddr_reg:x3; val_offset:14472*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14472*0 + 3*216*FLEN/8, x4, x1, x2)

inst_4825:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa7fc000; valaddr_reg:x3; val_offset:14475*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14475*0 + 3*217*FLEN/8, x4, x1, x2)

inst_4826:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa7fe000; valaddr_reg:x3; val_offset:14478*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14478*0 + 3*218*FLEN/8, x4, x1, x2)

inst_4827:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa7ff000; valaddr_reg:x3; val_offset:14481*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14481*0 + 3*219*FLEN/8, x4, x1, x2)

inst_4828:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa7ff800; valaddr_reg:x3; val_offset:14484*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14484*0 + 3*220*FLEN/8, x4, x1, x2)

inst_4829:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa7ffc00; valaddr_reg:x3; val_offset:14487*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14487*0 + 3*221*FLEN/8, x4, x1, x2)

inst_4830:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa7ffe00; valaddr_reg:x3; val_offset:14490*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14490*0 + 3*222*FLEN/8, x4, x1, x2)

inst_4831:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa7fff00; valaddr_reg:x3; val_offset:14493*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14493*0 + 3*223*FLEN/8, x4, x1, x2)

inst_4832:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa7fff80; valaddr_reg:x3; val_offset:14496*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14496*0 + 3*224*FLEN/8, x4, x1, x2)

inst_4833:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa7fffc0; valaddr_reg:x3; val_offset:14499*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14499*0 + 3*225*FLEN/8, x4, x1, x2)

inst_4834:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa7fffe0; valaddr_reg:x3; val_offset:14502*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14502*0 + 3*226*FLEN/8, x4, x1, x2)

inst_4835:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa7ffff0; valaddr_reg:x3; val_offset:14505*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14505*0 + 3*227*FLEN/8, x4, x1, x2)

inst_4836:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa7ffff8; valaddr_reg:x3; val_offset:14508*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14508*0 + 3*228*FLEN/8, x4, x1, x2)

inst_4837:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa7ffffc; valaddr_reg:x3; val_offset:14511*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14511*0 + 3*229*FLEN/8, x4, x1, x2)

inst_4838:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa7ffffe; valaddr_reg:x3; val_offset:14514*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14514*0 + 3*230*FLEN/8, x4, x1, x2)

inst_4839:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xf4 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xfa7fffff; valaddr_reg:x3; val_offset:14517*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14517*0 + 3*231*FLEN/8, x4, x1, x2)

inst_4840:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xff000001; valaddr_reg:x3; val_offset:14520*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14520*0 + 3*232*FLEN/8, x4, x1, x2)

inst_4841:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xff000003; valaddr_reg:x3; val_offset:14523*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14523*0 + 3*233*FLEN/8, x4, x1, x2)

inst_4842:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xff000007; valaddr_reg:x3; val_offset:14526*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14526*0 + 3*234*FLEN/8, x4, x1, x2)

inst_4843:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xff199999; valaddr_reg:x3; val_offset:14529*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14529*0 + 3*235*FLEN/8, x4, x1, x2)

inst_4844:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xff249249; valaddr_reg:x3; val_offset:14532*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14532*0 + 3*236*FLEN/8, x4, x1, x2)

inst_4845:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xff333333; valaddr_reg:x3; val_offset:14535*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14535*0 + 3*237*FLEN/8, x4, x1, x2)

inst_4846:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:14538*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14538*0 + 3*238*FLEN/8, x4, x1, x2)

inst_4847:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:14541*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14541*0 + 3*239*FLEN/8, x4, x1, x2)

inst_4848:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xff444444; valaddr_reg:x3; val_offset:14544*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14544*0 + 3*240*FLEN/8, x4, x1, x2)

inst_4849:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:14547*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14547*0 + 3*241*FLEN/8, x4, x1, x2)

inst_4850:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:14550*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14550*0 + 3*242*FLEN/8, x4, x1, x2)

inst_4851:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xff666666; valaddr_reg:x3; val_offset:14553*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14553*0 + 3*243*FLEN/8, x4, x1, x2)

inst_4852:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:14556*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14556*0 + 3*244*FLEN/8, x4, x1, x2)

inst_4853:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:14559*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14559*0 + 3*245*FLEN/8, x4, x1, x2)

inst_4854:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:14562*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14562*0 + 3*246*FLEN/8, x4, x1, x2)

inst_4855:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x639ac5 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0ff80e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de39ac5; op2val:0xc10ff80e;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:14565*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14565*0 + 3*247*FLEN/8, x4, x1, x2)

inst_4856:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:14568*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14568*0 + 3*248*FLEN/8, x4, x1, x2)

inst_4857:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:14571*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14571*0 + 3*249*FLEN/8, x4, x1, x2)

inst_4858:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:14574*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14574*0 + 3*250*FLEN/8, x4, x1, x2)

inst_4859:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:14577*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14577*0 + 3*251*FLEN/8, x4, x1, x2)

inst_4860:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:14580*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14580*0 + 3*252*FLEN/8, x4, x1, x2)

inst_4861:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:14583*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14583*0 + 3*253*FLEN/8, x4, x1, x2)

inst_4862:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:14586*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14586*0 + 3*254*FLEN/8, x4, x1, x2)

inst_4863:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:14589*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14589*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_4864:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:14592*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14592*0 + 3*256*FLEN/8, x4, x1, x2)

inst_4865:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:14595*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14595*0 + 3*257*FLEN/8, x4, x1, x2)

inst_4866:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:14598*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14598*0 + 3*258*FLEN/8, x4, x1, x2)

inst_4867:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:14601*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14601*0 + 3*259*FLEN/8, x4, x1, x2)

inst_4868:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:14604*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14604*0 + 3*260*FLEN/8, x4, x1, x2)

inst_4869:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:14607*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14607*0 + 3*261*FLEN/8, x4, x1, x2)

inst_4870:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:14610*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14610*0 + 3*262*FLEN/8, x4, x1, x2)

inst_4871:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:14613*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14613*0 + 3*263*FLEN/8, x4, x1, x2)

inst_4872:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x89000000; valaddr_reg:x3; val_offset:14616*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14616*0 + 3*264*FLEN/8, x4, x1, x2)

inst_4873:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x89000001; valaddr_reg:x3; val_offset:14619*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14619*0 + 3*265*FLEN/8, x4, x1, x2)

inst_4874:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x89000003; valaddr_reg:x3; val_offset:14622*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14622*0 + 3*266*FLEN/8, x4, x1, x2)

inst_4875:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x89000007; valaddr_reg:x3; val_offset:14625*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14625*0 + 3*267*FLEN/8, x4, x1, x2)

inst_4876:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x8900000f; valaddr_reg:x3; val_offset:14628*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14628*0 + 3*268*FLEN/8, x4, x1, x2)

inst_4877:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x8900001f; valaddr_reg:x3; val_offset:14631*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14631*0 + 3*269*FLEN/8, x4, x1, x2)

inst_4878:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x8900003f; valaddr_reg:x3; val_offset:14634*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14634*0 + 3*270*FLEN/8, x4, x1, x2)

inst_4879:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x8900007f; valaddr_reg:x3; val_offset:14637*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14637*0 + 3*271*FLEN/8, x4, x1, x2)

inst_4880:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x890000ff; valaddr_reg:x3; val_offset:14640*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14640*0 + 3*272*FLEN/8, x4, x1, x2)

inst_4881:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x890001ff; valaddr_reg:x3; val_offset:14643*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14643*0 + 3*273*FLEN/8, x4, x1, x2)

inst_4882:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x890003ff; valaddr_reg:x3; val_offset:14646*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14646*0 + 3*274*FLEN/8, x4, x1, x2)

inst_4883:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x890007ff; valaddr_reg:x3; val_offset:14649*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14649*0 + 3*275*FLEN/8, x4, x1, x2)

inst_4884:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x89000fff; valaddr_reg:x3; val_offset:14652*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14652*0 + 3*276*FLEN/8, x4, x1, x2)

inst_4885:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x89001fff; valaddr_reg:x3; val_offset:14655*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14655*0 + 3*277*FLEN/8, x4, x1, x2)

inst_4886:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x89003fff; valaddr_reg:x3; val_offset:14658*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14658*0 + 3*278*FLEN/8, x4, x1, x2)

inst_4887:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x89007fff; valaddr_reg:x3; val_offset:14661*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14661*0 + 3*279*FLEN/8, x4, x1, x2)

inst_4888:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x8900ffff; valaddr_reg:x3; val_offset:14664*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14664*0 + 3*280*FLEN/8, x4, x1, x2)

inst_4889:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x8901ffff; valaddr_reg:x3; val_offset:14667*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14667*0 + 3*281*FLEN/8, x4, x1, x2)

inst_4890:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x8903ffff; valaddr_reg:x3; val_offset:14670*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14670*0 + 3*282*FLEN/8, x4, x1, x2)

inst_4891:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x8907ffff; valaddr_reg:x3; val_offset:14673*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14673*0 + 3*283*FLEN/8, x4, x1, x2)

inst_4892:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x890fffff; valaddr_reg:x3; val_offset:14676*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14676*0 + 3*284*FLEN/8, x4, x1, x2)

inst_4893:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x891fffff; valaddr_reg:x3; val_offset:14679*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14679*0 + 3*285*FLEN/8, x4, x1, x2)

inst_4894:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x893fffff; valaddr_reg:x3; val_offset:14682*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14682*0 + 3*286*FLEN/8, x4, x1, x2)

inst_4895:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x89400000; valaddr_reg:x3; val_offset:14685*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14685*0 + 3*287*FLEN/8, x4, x1, x2)

inst_4896:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x89600000; valaddr_reg:x3; val_offset:14688*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14688*0 + 3*288*FLEN/8, x4, x1, x2)

inst_4897:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x89700000; valaddr_reg:x3; val_offset:14691*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14691*0 + 3*289*FLEN/8, x4, x1, x2)

inst_4898:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x89780000; valaddr_reg:x3; val_offset:14694*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14694*0 + 3*290*FLEN/8, x4, x1, x2)

inst_4899:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x897c0000; valaddr_reg:x3; val_offset:14697*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14697*0 + 3*291*FLEN/8, x4, x1, x2)

inst_4900:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x897e0000; valaddr_reg:x3; val_offset:14700*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14700*0 + 3*292*FLEN/8, x4, x1, x2)

inst_4901:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x897f0000; valaddr_reg:x3; val_offset:14703*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14703*0 + 3*293*FLEN/8, x4, x1, x2)

inst_4902:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x897f8000; valaddr_reg:x3; val_offset:14706*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14706*0 + 3*294*FLEN/8, x4, x1, x2)

inst_4903:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x897fc000; valaddr_reg:x3; val_offset:14709*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14709*0 + 3*295*FLEN/8, x4, x1, x2)

inst_4904:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x897fe000; valaddr_reg:x3; val_offset:14712*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14712*0 + 3*296*FLEN/8, x4, x1, x2)

inst_4905:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x897ff000; valaddr_reg:x3; val_offset:14715*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14715*0 + 3*297*FLEN/8, x4, x1, x2)

inst_4906:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x897ff800; valaddr_reg:x3; val_offset:14718*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14718*0 + 3*298*FLEN/8, x4, x1, x2)

inst_4907:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x897ffc00; valaddr_reg:x3; val_offset:14721*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14721*0 + 3*299*FLEN/8, x4, x1, x2)

inst_4908:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x897ffe00; valaddr_reg:x3; val_offset:14724*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14724*0 + 3*300*FLEN/8, x4, x1, x2)

inst_4909:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x897fff00; valaddr_reg:x3; val_offset:14727*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14727*0 + 3*301*FLEN/8, x4, x1, x2)

inst_4910:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x897fff80; valaddr_reg:x3; val_offset:14730*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14730*0 + 3*302*FLEN/8, x4, x1, x2)

inst_4911:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x897fffc0; valaddr_reg:x3; val_offset:14733*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14733*0 + 3*303*FLEN/8, x4, x1, x2)

inst_4912:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x897fffe0; valaddr_reg:x3; val_offset:14736*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14736*0 + 3*304*FLEN/8, x4, x1, x2)

inst_4913:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x897ffff0; valaddr_reg:x3; val_offset:14739*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14739*0 + 3*305*FLEN/8, x4, x1, x2)

inst_4914:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x897ffff8; valaddr_reg:x3; val_offset:14742*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14742*0 + 3*306*FLEN/8, x4, x1, x2)

inst_4915:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x897ffffc; valaddr_reg:x3; val_offset:14745*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14745*0 + 3*307*FLEN/8, x4, x1, x2)

inst_4916:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x897ffffe; valaddr_reg:x3; val_offset:14748*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14748*0 + 3*308*FLEN/8, x4, x1, x2)

inst_4917:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x63f55b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x12 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de3f55b; op2val:0x80000000;
op3val:0x897fffff; valaddr_reg:x3; val_offset:14751*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14751*0 + 3*309*FLEN/8, x4, x1, x2)

inst_4918:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:14754*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14754*0 + 3*310*FLEN/8, x4, x1, x2)

inst_4919:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:14757*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14757*0 + 3*311*FLEN/8, x4, x1, x2)

inst_4920:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:14760*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14760*0 + 3*312*FLEN/8, x4, x1, x2)

inst_4921:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:14763*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14763*0 + 3*313*FLEN/8, x4, x1, x2)

inst_4922:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:14766*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14766*0 + 3*314*FLEN/8, x4, x1, x2)

inst_4923:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:14769*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14769*0 + 3*315*FLEN/8, x4, x1, x2)

inst_4924:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:14772*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14772*0 + 3*316*FLEN/8, x4, x1, x2)

inst_4925:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:14775*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14775*0 + 3*317*FLEN/8, x4, x1, x2)

inst_4926:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:14778*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14778*0 + 3*318*FLEN/8, x4, x1, x2)

inst_4927:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:14781*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14781*0 + 3*319*FLEN/8, x4, x1, x2)

inst_4928:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:14784*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14784*0 + 3*320*FLEN/8, x4, x1, x2)

inst_4929:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:14787*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14787*0 + 3*321*FLEN/8, x4, x1, x2)

inst_4930:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:14790*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14790*0 + 3*322*FLEN/8, x4, x1, x2)

inst_4931:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:14793*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14793*0 + 3*323*FLEN/8, x4, x1, x2)

inst_4932:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:14796*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14796*0 + 3*324*FLEN/8, x4, x1, x2)

inst_4933:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:14799*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14799*0 + 3*325*FLEN/8, x4, x1, x2)

inst_4934:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8d800000; valaddr_reg:x3; val_offset:14802*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14802*0 + 3*326*FLEN/8, x4, x1, x2)

inst_4935:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8d800001; valaddr_reg:x3; val_offset:14805*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14805*0 + 3*327*FLEN/8, x4, x1, x2)

inst_4936:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8d800003; valaddr_reg:x3; val_offset:14808*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14808*0 + 3*328*FLEN/8, x4, x1, x2)

inst_4937:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8d800007; valaddr_reg:x3; val_offset:14811*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14811*0 + 3*329*FLEN/8, x4, x1, x2)

inst_4938:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8d80000f; valaddr_reg:x3; val_offset:14814*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14814*0 + 3*330*FLEN/8, x4, x1, x2)

inst_4939:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8d80001f; valaddr_reg:x3; val_offset:14817*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14817*0 + 3*331*FLEN/8, x4, x1, x2)

inst_4940:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8d80003f; valaddr_reg:x3; val_offset:14820*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14820*0 + 3*332*FLEN/8, x4, x1, x2)

inst_4941:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8d80007f; valaddr_reg:x3; val_offset:14823*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14823*0 + 3*333*FLEN/8, x4, x1, x2)

inst_4942:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8d8000ff; valaddr_reg:x3; val_offset:14826*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14826*0 + 3*334*FLEN/8, x4, x1, x2)

inst_4943:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8d8001ff; valaddr_reg:x3; val_offset:14829*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14829*0 + 3*335*FLEN/8, x4, x1, x2)

inst_4944:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8d8003ff; valaddr_reg:x3; val_offset:14832*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14832*0 + 3*336*FLEN/8, x4, x1, x2)

inst_4945:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8d8007ff; valaddr_reg:x3; val_offset:14835*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14835*0 + 3*337*FLEN/8, x4, x1, x2)

inst_4946:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8d800fff; valaddr_reg:x3; val_offset:14838*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14838*0 + 3*338*FLEN/8, x4, x1, x2)

inst_4947:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8d801fff; valaddr_reg:x3; val_offset:14841*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14841*0 + 3*339*FLEN/8, x4, x1, x2)

inst_4948:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8d803fff; valaddr_reg:x3; val_offset:14844*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14844*0 + 3*340*FLEN/8, x4, x1, x2)

inst_4949:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8d807fff; valaddr_reg:x3; val_offset:14847*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14847*0 + 3*341*FLEN/8, x4, x1, x2)

inst_4950:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8d80ffff; valaddr_reg:x3; val_offset:14850*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14850*0 + 3*342*FLEN/8, x4, x1, x2)

inst_4951:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8d81ffff; valaddr_reg:x3; val_offset:14853*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14853*0 + 3*343*FLEN/8, x4, x1, x2)

inst_4952:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8d83ffff; valaddr_reg:x3; val_offset:14856*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14856*0 + 3*344*FLEN/8, x4, x1, x2)

inst_4953:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8d87ffff; valaddr_reg:x3; val_offset:14859*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14859*0 + 3*345*FLEN/8, x4, x1, x2)

inst_4954:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8d8fffff; valaddr_reg:x3; val_offset:14862*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14862*0 + 3*346*FLEN/8, x4, x1, x2)

inst_4955:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8d9fffff; valaddr_reg:x3; val_offset:14865*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14865*0 + 3*347*FLEN/8, x4, x1, x2)

inst_4956:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8dbfffff; valaddr_reg:x3; val_offset:14868*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14868*0 + 3*348*FLEN/8, x4, x1, x2)

inst_4957:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8dc00000; valaddr_reg:x3; val_offset:14871*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14871*0 + 3*349*FLEN/8, x4, x1, x2)

inst_4958:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8de00000; valaddr_reg:x3; val_offset:14874*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14874*0 + 3*350*FLEN/8, x4, x1, x2)

inst_4959:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8df00000; valaddr_reg:x3; val_offset:14877*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14877*0 + 3*351*FLEN/8, x4, x1, x2)

inst_4960:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8df80000; valaddr_reg:x3; val_offset:14880*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14880*0 + 3*352*FLEN/8, x4, x1, x2)

inst_4961:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8dfc0000; valaddr_reg:x3; val_offset:14883*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14883*0 + 3*353*FLEN/8, x4, x1, x2)

inst_4962:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8dfe0000; valaddr_reg:x3; val_offset:14886*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14886*0 + 3*354*FLEN/8, x4, x1, x2)

inst_4963:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8dff0000; valaddr_reg:x3; val_offset:14889*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14889*0 + 3*355*FLEN/8, x4, x1, x2)

inst_4964:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8dff8000; valaddr_reg:x3; val_offset:14892*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14892*0 + 3*356*FLEN/8, x4, x1, x2)

inst_4965:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8dffc000; valaddr_reg:x3; val_offset:14895*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14895*0 + 3*357*FLEN/8, x4, x1, x2)

inst_4966:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8dffe000; valaddr_reg:x3; val_offset:14898*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14898*0 + 3*358*FLEN/8, x4, x1, x2)

inst_4967:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8dfff000; valaddr_reg:x3; val_offset:14901*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14901*0 + 3*359*FLEN/8, x4, x1, x2)

inst_4968:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8dfff800; valaddr_reg:x3; val_offset:14904*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14904*0 + 3*360*FLEN/8, x4, x1, x2)

inst_4969:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8dfffc00; valaddr_reg:x3; val_offset:14907*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14907*0 + 3*361*FLEN/8, x4, x1, x2)

inst_4970:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8dfffe00; valaddr_reg:x3; val_offset:14910*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14910*0 + 3*362*FLEN/8, x4, x1, x2)

inst_4971:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8dffff00; valaddr_reg:x3; val_offset:14913*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14913*0 + 3*363*FLEN/8, x4, x1, x2)

inst_4972:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8dffff80; valaddr_reg:x3; val_offset:14916*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14916*0 + 3*364*FLEN/8, x4, x1, x2)

inst_4973:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8dffffc0; valaddr_reg:x3; val_offset:14919*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14919*0 + 3*365*FLEN/8, x4, x1, x2)

inst_4974:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8dffffe0; valaddr_reg:x3; val_offset:14922*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14922*0 + 3*366*FLEN/8, x4, x1, x2)

inst_4975:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8dfffff0; valaddr_reg:x3; val_offset:14925*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14925*0 + 3*367*FLEN/8, x4, x1, x2)

inst_4976:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8dfffff8; valaddr_reg:x3; val_offset:14928*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14928*0 + 3*368*FLEN/8, x4, x1, x2)

inst_4977:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8dfffffc; valaddr_reg:x3; val_offset:14931*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14931*0 + 3*369*FLEN/8, x4, x1, x2)

inst_4978:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8dfffffe; valaddr_reg:x3; val_offset:14934*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14934*0 + 3*370*FLEN/8, x4, x1, x2)

inst_4979:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x65ba89 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de5ba89; op2val:0x80000000;
op3val:0x8dffffff; valaddr_reg:x3; val_offset:14937*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14937*0 + 3*371*FLEN/8, x4, x1, x2)

inst_4980:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad000000; valaddr_reg:x3; val_offset:14940*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14940*0 + 3*372*FLEN/8, x4, x1, x2)

inst_4981:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad000001; valaddr_reg:x3; val_offset:14943*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14943*0 + 3*373*FLEN/8, x4, x1, x2)

inst_4982:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad000003; valaddr_reg:x3; val_offset:14946*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14946*0 + 3*374*FLEN/8, x4, x1, x2)

inst_4983:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad000007; valaddr_reg:x3; val_offset:14949*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14949*0 + 3*375*FLEN/8, x4, x1, x2)

inst_4984:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad00000f; valaddr_reg:x3; val_offset:14952*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14952*0 + 3*376*FLEN/8, x4, x1, x2)

inst_4985:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad00001f; valaddr_reg:x3; val_offset:14955*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14955*0 + 3*377*FLEN/8, x4, x1, x2)

inst_4986:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad00003f; valaddr_reg:x3; val_offset:14958*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14958*0 + 3*378*FLEN/8, x4, x1, x2)

inst_4987:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad00007f; valaddr_reg:x3; val_offset:14961*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14961*0 + 3*379*FLEN/8, x4, x1, x2)

inst_4988:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad0000ff; valaddr_reg:x3; val_offset:14964*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14964*0 + 3*380*FLEN/8, x4, x1, x2)

inst_4989:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad0001ff; valaddr_reg:x3; val_offset:14967*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14967*0 + 3*381*FLEN/8, x4, x1, x2)

inst_4990:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad0003ff; valaddr_reg:x3; val_offset:14970*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14970*0 + 3*382*FLEN/8, x4, x1, x2)

inst_4991:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad0007ff; valaddr_reg:x3; val_offset:14973*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14973*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_4992:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad000fff; valaddr_reg:x3; val_offset:14976*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14976*0 + 3*384*FLEN/8, x4, x1, x2)

inst_4993:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad001fff; valaddr_reg:x3; val_offset:14979*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14979*0 + 3*385*FLEN/8, x4, x1, x2)

inst_4994:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad003fff; valaddr_reg:x3; val_offset:14982*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14982*0 + 3*386*FLEN/8, x4, x1, x2)

inst_4995:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad007fff; valaddr_reg:x3; val_offset:14985*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14985*0 + 3*387*FLEN/8, x4, x1, x2)

inst_4996:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad00ffff; valaddr_reg:x3; val_offset:14988*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14988*0 + 3*388*FLEN/8, x4, x1, x2)

inst_4997:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad01ffff; valaddr_reg:x3; val_offset:14991*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14991*0 + 3*389*FLEN/8, x4, x1, x2)

inst_4998:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad03ffff; valaddr_reg:x3; val_offset:14994*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14994*0 + 3*390*FLEN/8, x4, x1, x2)

inst_4999:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad07ffff; valaddr_reg:x3; val_offset:14997*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 14997*0 + 3*391*FLEN/8, x4, x1, x2)

inst_5000:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad0fffff; valaddr_reg:x3; val_offset:15000*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15000*0 + 3*392*FLEN/8, x4, x1, x2)

inst_5001:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad1fffff; valaddr_reg:x3; val_offset:15003*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15003*0 + 3*393*FLEN/8, x4, x1, x2)

inst_5002:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad3fffff; valaddr_reg:x3; val_offset:15006*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15006*0 + 3*394*FLEN/8, x4, x1, x2)

inst_5003:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad400000; valaddr_reg:x3; val_offset:15009*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15009*0 + 3*395*FLEN/8, x4, x1, x2)

inst_5004:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad600000; valaddr_reg:x3; val_offset:15012*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15012*0 + 3*396*FLEN/8, x4, x1, x2)

inst_5005:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad700000; valaddr_reg:x3; val_offset:15015*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15015*0 + 3*397*FLEN/8, x4, x1, x2)

inst_5006:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad780000; valaddr_reg:x3; val_offset:15018*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15018*0 + 3*398*FLEN/8, x4, x1, x2)

inst_5007:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad7c0000; valaddr_reg:x3; val_offset:15021*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15021*0 + 3*399*FLEN/8, x4, x1, x2)

inst_5008:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad7e0000; valaddr_reg:x3; val_offset:15024*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15024*0 + 3*400*FLEN/8, x4, x1, x2)

inst_5009:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad7f0000; valaddr_reg:x3; val_offset:15027*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15027*0 + 3*401*FLEN/8, x4, x1, x2)

inst_5010:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad7f8000; valaddr_reg:x3; val_offset:15030*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15030*0 + 3*402*FLEN/8, x4, x1, x2)

inst_5011:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad7fc000; valaddr_reg:x3; val_offset:15033*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15033*0 + 3*403*FLEN/8, x4, x1, x2)

inst_5012:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad7fe000; valaddr_reg:x3; val_offset:15036*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15036*0 + 3*404*FLEN/8, x4, x1, x2)

inst_5013:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad7ff000; valaddr_reg:x3; val_offset:15039*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15039*0 + 3*405*FLEN/8, x4, x1, x2)

inst_5014:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad7ff800; valaddr_reg:x3; val_offset:15042*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15042*0 + 3*406*FLEN/8, x4, x1, x2)

inst_5015:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad7ffc00; valaddr_reg:x3; val_offset:15045*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15045*0 + 3*407*FLEN/8, x4, x1, x2)

inst_5016:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad7ffe00; valaddr_reg:x3; val_offset:15048*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15048*0 + 3*408*FLEN/8, x4, x1, x2)

inst_5017:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad7fff00; valaddr_reg:x3; val_offset:15051*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15051*0 + 3*409*FLEN/8, x4, x1, x2)

inst_5018:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad7fff80; valaddr_reg:x3; val_offset:15054*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15054*0 + 3*410*FLEN/8, x4, x1, x2)

inst_5019:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad7fffc0; valaddr_reg:x3; val_offset:15057*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15057*0 + 3*411*FLEN/8, x4, x1, x2)

inst_5020:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad7fffe0; valaddr_reg:x3; val_offset:15060*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15060*0 + 3*412*FLEN/8, x4, x1, x2)

inst_5021:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad7ffff0; valaddr_reg:x3; val_offset:15063*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15063*0 + 3*413*FLEN/8, x4, x1, x2)

inst_5022:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad7ffff8; valaddr_reg:x3; val_offset:15066*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15066*0 + 3*414*FLEN/8, x4, x1, x2)

inst_5023:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad7ffffc; valaddr_reg:x3; val_offset:15069*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15069*0 + 3*415*FLEN/8, x4, x1, x2)

inst_5024:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad7ffffe; valaddr_reg:x3; val_offset:15072*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15072*0 + 3*416*FLEN/8, x4, x1, x2)

inst_5025:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x5a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xad7fffff; valaddr_reg:x3; val_offset:15075*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15075*0 + 3*417*FLEN/8, x4, x1, x2)

inst_5026:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xbf800001; valaddr_reg:x3; val_offset:15078*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15078*0 + 3*418*FLEN/8, x4, x1, x2)

inst_5027:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xbf800003; valaddr_reg:x3; val_offset:15081*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15081*0 + 3*419*FLEN/8, x4, x1, x2)

inst_5028:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xbf800007; valaddr_reg:x3; val_offset:15084*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15084*0 + 3*420*FLEN/8, x4, x1, x2)

inst_5029:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xbf999999; valaddr_reg:x3; val_offset:15087*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15087*0 + 3*421*FLEN/8, x4, x1, x2)

inst_5030:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:15090*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15090*0 + 3*422*FLEN/8, x4, x1, x2)

inst_5031:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:15093*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15093*0 + 3*423*FLEN/8, x4, x1, x2)

inst_5032:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:15096*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15096*0 + 3*424*FLEN/8, x4, x1, x2)

inst_5033:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:15099*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15099*0 + 3*425*FLEN/8, x4, x1, x2)

inst_5034:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:15102*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15102*0 + 3*426*FLEN/8, x4, x1, x2)

inst_5035:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:15105*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15105*0 + 3*427*FLEN/8, x4, x1, x2)

inst_5036:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:15108*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15108*0 + 3*428*FLEN/8, x4, x1, x2)

inst_5037:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:15111*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15111*0 + 3*429*FLEN/8, x4, x1, x2)

inst_5038:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:15114*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15114*0 + 3*430*FLEN/8, x4, x1, x2)

inst_5039:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:15117*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15117*0 + 3*431*FLEN/8, x4, x1, x2)

inst_5040:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:15120*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15120*0 + 3*432*FLEN/8, x4, x1, x2)

inst_5041:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x711943 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x07e941 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df11943; op2val:0x8107e941;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:15123*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15123*0 + 3*433*FLEN/8, x4, x1, x2)

inst_5042:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:15126*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15126*0 + 3*434*FLEN/8, x4, x1, x2)

inst_5043:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:15129*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15129*0 + 3*435*FLEN/8, x4, x1, x2)

inst_5044:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:15132*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15132*0 + 3*436*FLEN/8, x4, x1, x2)

inst_5045:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:15135*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15135*0 + 3*437*FLEN/8, x4, x1, x2)

inst_5046:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:15138*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15138*0 + 3*438*FLEN/8, x4, x1, x2)

inst_5047:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:15141*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15141*0 + 3*439*FLEN/8, x4, x1, x2)

inst_5048:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:15144*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15144*0 + 3*440*FLEN/8, x4, x1, x2)

inst_5049:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:15147*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15147*0 + 3*441*FLEN/8, x4, x1, x2)

inst_5050:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:15150*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15150*0 + 3*442*FLEN/8, x4, x1, x2)

inst_5051:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:15153*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15153*0 + 3*443*FLEN/8, x4, x1, x2)

inst_5052:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:15156*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15156*0 + 3*444*FLEN/8, x4, x1, x2)

inst_5053:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:15159*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15159*0 + 3*445*FLEN/8, x4, x1, x2)

inst_5054:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:15162*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15162*0 + 3*446*FLEN/8, x4, x1, x2)

inst_5055:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:15165*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15165*0 + 3*447*FLEN/8, x4, x1, x2)

inst_5056:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:15168*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15168*0 + 3*448*FLEN/8, x4, x1, x2)

inst_5057:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:15171*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15171*0 + 3*449*FLEN/8, x4, x1, x2)

inst_5058:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x6000000; valaddr_reg:x3; val_offset:15174*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15174*0 + 3*450*FLEN/8, x4, x1, x2)

inst_5059:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x6000001; valaddr_reg:x3; val_offset:15177*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15177*0 + 3*451*FLEN/8, x4, x1, x2)

inst_5060:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x6000003; valaddr_reg:x3; val_offset:15180*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15180*0 + 3*452*FLEN/8, x4, x1, x2)

inst_5061:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x6000007; valaddr_reg:x3; val_offset:15183*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15183*0 + 3*453*FLEN/8, x4, x1, x2)

inst_5062:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x600000f; valaddr_reg:x3; val_offset:15186*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15186*0 + 3*454*FLEN/8, x4, x1, x2)

inst_5063:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x600001f; valaddr_reg:x3; val_offset:15189*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15189*0 + 3*455*FLEN/8, x4, x1, x2)

inst_5064:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x600003f; valaddr_reg:x3; val_offset:15192*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15192*0 + 3*456*FLEN/8, x4, x1, x2)

inst_5065:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x600007f; valaddr_reg:x3; val_offset:15195*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15195*0 + 3*457*FLEN/8, x4, x1, x2)

inst_5066:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x60000ff; valaddr_reg:x3; val_offset:15198*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15198*0 + 3*458*FLEN/8, x4, x1, x2)

inst_5067:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x60001ff; valaddr_reg:x3; val_offset:15201*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15201*0 + 3*459*FLEN/8, x4, x1, x2)

inst_5068:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x60003ff; valaddr_reg:x3; val_offset:15204*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15204*0 + 3*460*FLEN/8, x4, x1, x2)

inst_5069:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x60007ff; valaddr_reg:x3; val_offset:15207*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15207*0 + 3*461*FLEN/8, x4, x1, x2)

inst_5070:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x6000fff; valaddr_reg:x3; val_offset:15210*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15210*0 + 3*462*FLEN/8, x4, x1, x2)

inst_5071:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x6001fff; valaddr_reg:x3; val_offset:15213*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15213*0 + 3*463*FLEN/8, x4, x1, x2)

inst_5072:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x6003fff; valaddr_reg:x3; val_offset:15216*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15216*0 + 3*464*FLEN/8, x4, x1, x2)

inst_5073:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x6007fff; valaddr_reg:x3; val_offset:15219*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15219*0 + 3*465*FLEN/8, x4, x1, x2)

inst_5074:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x600ffff; valaddr_reg:x3; val_offset:15222*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15222*0 + 3*466*FLEN/8, x4, x1, x2)

inst_5075:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x601ffff; valaddr_reg:x3; val_offset:15225*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15225*0 + 3*467*FLEN/8, x4, x1, x2)

inst_5076:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x603ffff; valaddr_reg:x3; val_offset:15228*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15228*0 + 3*468*FLEN/8, x4, x1, x2)

inst_5077:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x607ffff; valaddr_reg:x3; val_offset:15231*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15231*0 + 3*469*FLEN/8, x4, x1, x2)

inst_5078:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x60fffff; valaddr_reg:x3; val_offset:15234*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15234*0 + 3*470*FLEN/8, x4, x1, x2)

inst_5079:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x61fffff; valaddr_reg:x3; val_offset:15237*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15237*0 + 3*471*FLEN/8, x4, x1, x2)

inst_5080:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x63fffff; valaddr_reg:x3; val_offset:15240*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15240*0 + 3*472*FLEN/8, x4, x1, x2)

inst_5081:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x6400000; valaddr_reg:x3; val_offset:15243*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15243*0 + 3*473*FLEN/8, x4, x1, x2)

inst_5082:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x6600000; valaddr_reg:x3; val_offset:15246*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15246*0 + 3*474*FLEN/8, x4, x1, x2)

inst_5083:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x6700000; valaddr_reg:x3; val_offset:15249*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15249*0 + 3*475*FLEN/8, x4, x1, x2)

inst_5084:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x6780000; valaddr_reg:x3; val_offset:15252*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15252*0 + 3*476*FLEN/8, x4, x1, x2)

inst_5085:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67c0000; valaddr_reg:x3; val_offset:15255*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15255*0 + 3*477*FLEN/8, x4, x1, x2)

inst_5086:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67e0000; valaddr_reg:x3; val_offset:15258*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15258*0 + 3*478*FLEN/8, x4, x1, x2)

inst_5087:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67f0000; valaddr_reg:x3; val_offset:15261*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15261*0 + 3*479*FLEN/8, x4, x1, x2)

inst_5088:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67f8000; valaddr_reg:x3; val_offset:15264*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15264*0 + 3*480*FLEN/8, x4, x1, x2)

inst_5089:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67fc000; valaddr_reg:x3; val_offset:15267*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15267*0 + 3*481*FLEN/8, x4, x1, x2)

inst_5090:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67fe000; valaddr_reg:x3; val_offset:15270*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15270*0 + 3*482*FLEN/8, x4, x1, x2)

inst_5091:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67ff000; valaddr_reg:x3; val_offset:15273*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15273*0 + 3*483*FLEN/8, x4, x1, x2)

inst_5092:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67ff800; valaddr_reg:x3; val_offset:15276*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15276*0 + 3*484*FLEN/8, x4, x1, x2)

inst_5093:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67ffc00; valaddr_reg:x3; val_offset:15279*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15279*0 + 3*485*FLEN/8, x4, x1, x2)

inst_5094:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67ffe00; valaddr_reg:x3; val_offset:15282*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15282*0 + 3*486*FLEN/8, x4, x1, x2)

inst_5095:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67fff00; valaddr_reg:x3; val_offset:15285*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15285*0 + 3*487*FLEN/8, x4, x1, x2)

inst_5096:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67fff80; valaddr_reg:x3; val_offset:15288*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15288*0 + 3*488*FLEN/8, x4, x1, x2)

inst_5097:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67fffc0; valaddr_reg:x3; val_offset:15291*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15291*0 + 3*489*FLEN/8, x4, x1, x2)

inst_5098:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67fffe0; valaddr_reg:x3; val_offset:15294*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15294*0 + 3*490*FLEN/8, x4, x1, x2)

inst_5099:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67ffff0; valaddr_reg:x3; val_offset:15297*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15297*0 + 3*491*FLEN/8, x4, x1, x2)

inst_5100:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67ffff8; valaddr_reg:x3; val_offset:15300*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15300*0 + 3*492*FLEN/8, x4, x1, x2)

inst_5101:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67ffffc; valaddr_reg:x3; val_offset:15303*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15303*0 + 3*493*FLEN/8, x4, x1, x2)

inst_5102:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67ffffe; valaddr_reg:x3; val_offset:15306*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15306*0 + 3*494*FLEN/8, x4, x1, x2)

inst_5103:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x72879a and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df2879a; op2val:0x0;
op3val:0x67fffff; valaddr_reg:x3; val_offset:15309*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15309*0 + 3*495*FLEN/8, x4, x1, x2)

inst_5104:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9f800000; valaddr_reg:x3; val_offset:15312*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15312*0 + 3*496*FLEN/8, x4, x1, x2)

inst_5105:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9f800001; valaddr_reg:x3; val_offset:15315*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15315*0 + 3*497*FLEN/8, x4, x1, x2)

inst_5106:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9f800003; valaddr_reg:x3; val_offset:15318*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15318*0 + 3*498*FLEN/8, x4, x1, x2)

inst_5107:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9f800007; valaddr_reg:x3; val_offset:15321*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15321*0 + 3*499*FLEN/8, x4, x1, x2)

inst_5108:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9f80000f; valaddr_reg:x3; val_offset:15324*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15324*0 + 3*500*FLEN/8, x4, x1, x2)

inst_5109:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9f80001f; valaddr_reg:x3; val_offset:15327*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15327*0 + 3*501*FLEN/8, x4, x1, x2)

inst_5110:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9f80003f; valaddr_reg:x3; val_offset:15330*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15330*0 + 3*502*FLEN/8, x4, x1, x2)

inst_5111:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9f80007f; valaddr_reg:x3; val_offset:15333*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15333*0 + 3*503*FLEN/8, x4, x1, x2)

inst_5112:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9f8000ff; valaddr_reg:x3; val_offset:15336*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15336*0 + 3*504*FLEN/8, x4, x1, x2)

inst_5113:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9f8001ff; valaddr_reg:x3; val_offset:15339*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15339*0 + 3*505*FLEN/8, x4, x1, x2)

inst_5114:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9f8003ff; valaddr_reg:x3; val_offset:15342*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15342*0 + 3*506*FLEN/8, x4, x1, x2)

inst_5115:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9f8007ff; valaddr_reg:x3; val_offset:15345*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15345*0 + 3*507*FLEN/8, x4, x1, x2)

inst_5116:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9f800fff; valaddr_reg:x3; val_offset:15348*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15348*0 + 3*508*FLEN/8, x4, x1, x2)

inst_5117:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9f801fff; valaddr_reg:x3; val_offset:15351*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15351*0 + 3*509*FLEN/8, x4, x1, x2)

inst_5118:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9f803fff; valaddr_reg:x3; val_offset:15354*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15354*0 + 3*510*FLEN/8, x4, x1, x2)

inst_5119:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9f807fff; valaddr_reg:x3; val_offset:15357*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15357*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_5120:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9f80ffff; valaddr_reg:x3; val_offset:15360*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15360*0 + 3*512*FLEN/8, x4, x1, x2)

inst_5121:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9f81ffff; valaddr_reg:x3; val_offset:15363*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15363*0 + 3*513*FLEN/8, x4, x1, x2)

inst_5122:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9f83ffff; valaddr_reg:x3; val_offset:15366*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15366*0 + 3*514*FLEN/8, x4, x1, x2)

inst_5123:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9f87ffff; valaddr_reg:x3; val_offset:15369*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15369*0 + 3*515*FLEN/8, x4, x1, x2)

inst_5124:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9f8fffff; valaddr_reg:x3; val_offset:15372*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15372*0 + 3*516*FLEN/8, x4, x1, x2)

inst_5125:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9f9fffff; valaddr_reg:x3; val_offset:15375*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15375*0 + 3*517*FLEN/8, x4, x1, x2)

inst_5126:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9fbfffff; valaddr_reg:x3; val_offset:15378*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15378*0 + 3*518*FLEN/8, x4, x1, x2)

inst_5127:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9fc00000; valaddr_reg:x3; val_offset:15381*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15381*0 + 3*519*FLEN/8, x4, x1, x2)

inst_5128:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9fe00000; valaddr_reg:x3; val_offset:15384*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15384*0 + 3*520*FLEN/8, x4, x1, x2)

inst_5129:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9ff00000; valaddr_reg:x3; val_offset:15387*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15387*0 + 3*521*FLEN/8, x4, x1, x2)

inst_5130:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9ff80000; valaddr_reg:x3; val_offset:15390*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15390*0 + 3*522*FLEN/8, x4, x1, x2)

inst_5131:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9ffc0000; valaddr_reg:x3; val_offset:15393*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15393*0 + 3*523*FLEN/8, x4, x1, x2)

inst_5132:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9ffe0000; valaddr_reg:x3; val_offset:15396*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15396*0 + 3*524*FLEN/8, x4, x1, x2)

inst_5133:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9fff0000; valaddr_reg:x3; val_offset:15399*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15399*0 + 3*525*FLEN/8, x4, x1, x2)

inst_5134:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9fff8000; valaddr_reg:x3; val_offset:15402*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15402*0 + 3*526*FLEN/8, x4, x1, x2)

inst_5135:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9fffc000; valaddr_reg:x3; val_offset:15405*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15405*0 + 3*527*FLEN/8, x4, x1, x2)

inst_5136:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9fffe000; valaddr_reg:x3; val_offset:15408*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15408*0 + 3*528*FLEN/8, x4, x1, x2)

inst_5137:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9ffff000; valaddr_reg:x3; val_offset:15411*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15411*0 + 3*529*FLEN/8, x4, x1, x2)

inst_5138:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9ffff800; valaddr_reg:x3; val_offset:15414*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15414*0 + 3*530*FLEN/8, x4, x1, x2)

inst_5139:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9ffffc00; valaddr_reg:x3; val_offset:15417*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15417*0 + 3*531*FLEN/8, x4, x1, x2)

inst_5140:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9ffffe00; valaddr_reg:x3; val_offset:15420*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15420*0 + 3*532*FLEN/8, x4, x1, x2)

inst_5141:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9fffff00; valaddr_reg:x3; val_offset:15423*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15423*0 + 3*533*FLEN/8, x4, x1, x2)

inst_5142:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9fffff80; valaddr_reg:x3; val_offset:15426*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15426*0 + 3*534*FLEN/8, x4, x1, x2)

inst_5143:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9fffffc0; valaddr_reg:x3; val_offset:15429*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15429*0 + 3*535*FLEN/8, x4, x1, x2)

inst_5144:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9fffffe0; valaddr_reg:x3; val_offset:15432*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15432*0 + 3*536*FLEN/8, x4, x1, x2)

inst_5145:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9ffffff0; valaddr_reg:x3; val_offset:15435*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15435*0 + 3*537*FLEN/8, x4, x1, x2)

inst_5146:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9ffffff8; valaddr_reg:x3; val_offset:15438*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15438*0 + 3*538*FLEN/8, x4, x1, x2)

inst_5147:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9ffffffc; valaddr_reg:x3; val_offset:15441*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15441*0 + 3*539*FLEN/8, x4, x1, x2)

inst_5148:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9ffffffe; valaddr_reg:x3; val_offset:15444*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15444*0 + 3*540*FLEN/8, x4, x1, x2)

inst_5149:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x3f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0x9fffffff; valaddr_reg:x3; val_offset:15447*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15447*0 + 3*541*FLEN/8, x4, x1, x2)

inst_5150:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0xbf800001; valaddr_reg:x3; val_offset:15450*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15450*0 + 3*542*FLEN/8, x4, x1, x2)

inst_5151:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0xbf800003; valaddr_reg:x3; val_offset:15453*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15453*0 + 3*543*FLEN/8, x4, x1, x2)

inst_5152:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0xbf800007; valaddr_reg:x3; val_offset:15456*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15456*0 + 3*544*FLEN/8, x4, x1, x2)

inst_5153:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0xbf999999; valaddr_reg:x3; val_offset:15459*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15459*0 + 3*545*FLEN/8, x4, x1, x2)

inst_5154:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:15462*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15462*0 + 3*546*FLEN/8, x4, x1, x2)

inst_5155:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:15465*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15465*0 + 3*547*FLEN/8, x4, x1, x2)

inst_5156:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:15468*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15468*0 + 3*548*FLEN/8, x4, x1, x2)

inst_5157:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:15471*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15471*0 + 3*549*FLEN/8, x4, x1, x2)

inst_5158:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:15474*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15474*0 + 3*550*FLEN/8, x4, x1, x2)

inst_5159:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:15477*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15477*0 + 3*551*FLEN/8, x4, x1, x2)

inst_5160:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:15480*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15480*0 + 3*552*FLEN/8, x4, x1, x2)

inst_5161:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:15483*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15483*0 + 3*553*FLEN/8, x4, x1, x2)

inst_5162:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:15486*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15486*0 + 3*554*FLEN/8, x4, x1, x2)

inst_5163:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:15489*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15489*0 + 3*555*FLEN/8, x4, x1, x2)

inst_5164:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:15492*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15492*0 + 3*556*FLEN/8, x4, x1, x2)

inst_5165:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x7301ac and fs2 == 1 and fe2 == 0x02 and fm2 == 0x06d817 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df301ac; op2val:0x8106d817;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:15495*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15495*0 + 3*557*FLEN/8, x4, x1, x2)

inst_5166:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xbf800001; valaddr_reg:x3; val_offset:15498*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15498*0 + 3*558*FLEN/8, x4, x1, x2)

inst_5167:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xbf800003; valaddr_reg:x3; val_offset:15501*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15501*0 + 3*559*FLEN/8, x4, x1, x2)

inst_5168:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xbf800007; valaddr_reg:x3; val_offset:15504*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15504*0 + 3*560*FLEN/8, x4, x1, x2)

inst_5169:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xbf999999; valaddr_reg:x3; val_offset:15507*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15507*0 + 3*561*FLEN/8, x4, x1, x2)

inst_5170:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:15510*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15510*0 + 3*562*FLEN/8, x4, x1, x2)

inst_5171:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:15513*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15513*0 + 3*563*FLEN/8, x4, x1, x2)

inst_5172:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:15516*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15516*0 + 3*564*FLEN/8, x4, x1, x2)

inst_5173:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:15519*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15519*0 + 3*565*FLEN/8, x4, x1, x2)

inst_5174:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:15522*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15522*0 + 3*566*FLEN/8, x4, x1, x2)

inst_5175:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:15525*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15525*0 + 3*567*FLEN/8, x4, x1, x2)

inst_5176:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:15528*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15528*0 + 3*568*FLEN/8, x4, x1, x2)

inst_5177:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:15531*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15531*0 + 3*569*FLEN/8, x4, x1, x2)

inst_5178:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:15534*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15534*0 + 3*570*FLEN/8, x4, x1, x2)

inst_5179:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:15537*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15537*0 + 3*571*FLEN/8, x4, x1, x2)

inst_5180:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:15540*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15540*0 + 3*572*FLEN/8, x4, x1, x2)

inst_5181:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:15543*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15543*0 + 3*573*FLEN/8, x4, x1, x2)

inst_5182:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd800000; valaddr_reg:x3; val_offset:15546*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15546*0 + 3*574*FLEN/8, x4, x1, x2)

inst_5183:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd800001; valaddr_reg:x3; val_offset:15549*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15549*0 + 3*575*FLEN/8, x4, x1, x2)

inst_5184:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd800003; valaddr_reg:x3; val_offset:15552*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15552*0 + 3*576*FLEN/8, x4, x1, x2)

inst_5185:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd800007; valaddr_reg:x3; val_offset:15555*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15555*0 + 3*577*FLEN/8, x4, x1, x2)

inst_5186:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd80000f; valaddr_reg:x3; val_offset:15558*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15558*0 + 3*578*FLEN/8, x4, x1, x2)

inst_5187:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd80001f; valaddr_reg:x3; val_offset:15561*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15561*0 + 3*579*FLEN/8, x4, x1, x2)

inst_5188:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd80003f; valaddr_reg:x3; val_offset:15564*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15564*0 + 3*580*FLEN/8, x4, x1, x2)

inst_5189:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd80007f; valaddr_reg:x3; val_offset:15567*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15567*0 + 3*581*FLEN/8, x4, x1, x2)

inst_5190:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd8000ff; valaddr_reg:x3; val_offset:15570*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15570*0 + 3*582*FLEN/8, x4, x1, x2)

inst_5191:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd8001ff; valaddr_reg:x3; val_offset:15573*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15573*0 + 3*583*FLEN/8, x4, x1, x2)

inst_5192:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd8003ff; valaddr_reg:x3; val_offset:15576*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15576*0 + 3*584*FLEN/8, x4, x1, x2)

inst_5193:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd8007ff; valaddr_reg:x3; val_offset:15579*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15579*0 + 3*585*FLEN/8, x4, x1, x2)

inst_5194:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd800fff; valaddr_reg:x3; val_offset:15582*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15582*0 + 3*586*FLEN/8, x4, x1, x2)

inst_5195:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd801fff; valaddr_reg:x3; val_offset:15585*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15585*0 + 3*587*FLEN/8, x4, x1, x2)

inst_5196:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd803fff; valaddr_reg:x3; val_offset:15588*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15588*0 + 3*588*FLEN/8, x4, x1, x2)

inst_5197:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd807fff; valaddr_reg:x3; val_offset:15591*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15591*0 + 3*589*FLEN/8, x4, x1, x2)

inst_5198:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd80ffff; valaddr_reg:x3; val_offset:15594*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15594*0 + 3*590*FLEN/8, x4, x1, x2)

inst_5199:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd81ffff; valaddr_reg:x3; val_offset:15597*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15597*0 + 3*591*FLEN/8, x4, x1, x2)

inst_5200:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd83ffff; valaddr_reg:x3; val_offset:15600*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15600*0 + 3*592*FLEN/8, x4, x1, x2)

inst_5201:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd87ffff; valaddr_reg:x3; val_offset:15603*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15603*0 + 3*593*FLEN/8, x4, x1, x2)

inst_5202:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd8fffff; valaddr_reg:x3; val_offset:15606*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15606*0 + 3*594*FLEN/8, x4, x1, x2)

inst_5203:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcd9fffff; valaddr_reg:x3; val_offset:15609*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15609*0 + 3*595*FLEN/8, x4, x1, x2)

inst_5204:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdbfffff; valaddr_reg:x3; val_offset:15612*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15612*0 + 3*596*FLEN/8, x4, x1, x2)

inst_5205:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdc00000; valaddr_reg:x3; val_offset:15615*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15615*0 + 3*597*FLEN/8, x4, x1, x2)

inst_5206:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcde00000; valaddr_reg:x3; val_offset:15618*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15618*0 + 3*598*FLEN/8, x4, x1, x2)

inst_5207:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdf00000; valaddr_reg:x3; val_offset:15621*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15621*0 + 3*599*FLEN/8, x4, x1, x2)

inst_5208:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdf80000; valaddr_reg:x3; val_offset:15624*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15624*0 + 3*600*FLEN/8, x4, x1, x2)

inst_5209:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdfc0000; valaddr_reg:x3; val_offset:15627*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15627*0 + 3*601*FLEN/8, x4, x1, x2)

inst_5210:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdfe0000; valaddr_reg:x3; val_offset:15630*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15630*0 + 3*602*FLEN/8, x4, x1, x2)

inst_5211:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdff0000; valaddr_reg:x3; val_offset:15633*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15633*0 + 3*603*FLEN/8, x4, x1, x2)

inst_5212:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdff8000; valaddr_reg:x3; val_offset:15636*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15636*0 + 3*604*FLEN/8, x4, x1, x2)

inst_5213:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdffc000; valaddr_reg:x3; val_offset:15639*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15639*0 + 3*605*FLEN/8, x4, x1, x2)

inst_5214:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdffe000; valaddr_reg:x3; val_offset:15642*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15642*0 + 3*606*FLEN/8, x4, x1, x2)

inst_5215:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdfff000; valaddr_reg:x3; val_offset:15645*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15645*0 + 3*607*FLEN/8, x4, x1, x2)

inst_5216:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdfff800; valaddr_reg:x3; val_offset:15648*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15648*0 + 3*608*FLEN/8, x4, x1, x2)

inst_5217:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdfffc00; valaddr_reg:x3; val_offset:15651*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15651*0 + 3*609*FLEN/8, x4, x1, x2)

inst_5218:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdfffe00; valaddr_reg:x3; val_offset:15654*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15654*0 + 3*610*FLEN/8, x4, x1, x2)

inst_5219:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdffff00; valaddr_reg:x3; val_offset:15657*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15657*0 + 3*611*FLEN/8, x4, x1, x2)

inst_5220:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdffff80; valaddr_reg:x3; val_offset:15660*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15660*0 + 3*612*FLEN/8, x4, x1, x2)

inst_5221:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdffffc0; valaddr_reg:x3; val_offset:15663*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15663*0 + 3*613*FLEN/8, x4, x1, x2)

inst_5222:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdffffe0; valaddr_reg:x3; val_offset:15666*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15666*0 + 3*614*FLEN/8, x4, x1, x2)

inst_5223:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdfffff0; valaddr_reg:x3; val_offset:15669*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15669*0 + 3*615*FLEN/8, x4, x1, x2)

inst_5224:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdfffff8; valaddr_reg:x3; val_offset:15672*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15672*0 + 3*616*FLEN/8, x4, x1, x2)

inst_5225:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdfffffc; valaddr_reg:x3; val_offset:15675*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15675*0 + 3*617*FLEN/8, x4, x1, x2)

inst_5226:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdfffffe; valaddr_reg:x3; val_offset:15678*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15678*0 + 3*618*FLEN/8, x4, x1, x2)

inst_5227:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x74239e and fs2 == 1 and fe2 == 0x02 and fm2 == 0x0637f2 and fs3 == 1 and fe3 == 0x9b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df4239e; op2val:0x810637f2;
op3val:0xcdffffff; valaddr_reg:x3; val_offset:15681*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15681*0 + 3*619*FLEN/8, x4, x1, x2)

inst_5228:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe4000000; valaddr_reg:x3; val_offset:15684*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15684*0 + 3*620*FLEN/8, x4, x1, x2)

inst_5229:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe4000001; valaddr_reg:x3; val_offset:15687*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15687*0 + 3*621*FLEN/8, x4, x1, x2)

inst_5230:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe4000003; valaddr_reg:x3; val_offset:15690*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15690*0 + 3*622*FLEN/8, x4, x1, x2)

inst_5231:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe4000007; valaddr_reg:x3; val_offset:15693*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15693*0 + 3*623*FLEN/8, x4, x1, x2)

inst_5232:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe400000f; valaddr_reg:x3; val_offset:15696*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15696*0 + 3*624*FLEN/8, x4, x1, x2)

inst_5233:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe400001f; valaddr_reg:x3; val_offset:15699*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15699*0 + 3*625*FLEN/8, x4, x1, x2)

inst_5234:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe400003f; valaddr_reg:x3; val_offset:15702*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15702*0 + 3*626*FLEN/8, x4, x1, x2)

inst_5235:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe400007f; valaddr_reg:x3; val_offset:15705*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15705*0 + 3*627*FLEN/8, x4, x1, x2)

inst_5236:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe40000ff; valaddr_reg:x3; val_offset:15708*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15708*0 + 3*628*FLEN/8, x4, x1, x2)

inst_5237:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe40001ff; valaddr_reg:x3; val_offset:15711*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15711*0 + 3*629*FLEN/8, x4, x1, x2)

inst_5238:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe40003ff; valaddr_reg:x3; val_offset:15714*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15714*0 + 3*630*FLEN/8, x4, x1, x2)

inst_5239:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe40007ff; valaddr_reg:x3; val_offset:15717*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15717*0 + 3*631*FLEN/8, x4, x1, x2)

inst_5240:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe4000fff; valaddr_reg:x3; val_offset:15720*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15720*0 + 3*632*FLEN/8, x4, x1, x2)

inst_5241:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe4001fff; valaddr_reg:x3; val_offset:15723*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15723*0 + 3*633*FLEN/8, x4, x1, x2)

inst_5242:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe4003fff; valaddr_reg:x3; val_offset:15726*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15726*0 + 3*634*FLEN/8, x4, x1, x2)

inst_5243:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe4007fff; valaddr_reg:x3; val_offset:15729*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15729*0 + 3*635*FLEN/8, x4, x1, x2)

inst_5244:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe400ffff; valaddr_reg:x3; val_offset:15732*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15732*0 + 3*636*FLEN/8, x4, x1, x2)

inst_5245:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe401ffff; valaddr_reg:x3; val_offset:15735*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15735*0 + 3*637*FLEN/8, x4, x1, x2)

inst_5246:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe403ffff; valaddr_reg:x3; val_offset:15738*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15738*0 + 3*638*FLEN/8, x4, x1, x2)

inst_5247:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe407ffff; valaddr_reg:x3; val_offset:15741*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15741*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_5248:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe40fffff; valaddr_reg:x3; val_offset:15744*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15744*0 + 3*640*FLEN/8, x4, x1, x2)

inst_5249:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe41fffff; valaddr_reg:x3; val_offset:15747*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15747*0 + 3*641*FLEN/8, x4, x1, x2)

inst_5250:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe43fffff; valaddr_reg:x3; val_offset:15750*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15750*0 + 3*642*FLEN/8, x4, x1, x2)

inst_5251:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe4400000; valaddr_reg:x3; val_offset:15753*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15753*0 + 3*643*FLEN/8, x4, x1, x2)

inst_5252:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe4600000; valaddr_reg:x3; val_offset:15756*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15756*0 + 3*644*FLEN/8, x4, x1, x2)

inst_5253:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe4700000; valaddr_reg:x3; val_offset:15759*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15759*0 + 3*645*FLEN/8, x4, x1, x2)

inst_5254:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe4780000; valaddr_reg:x3; val_offset:15762*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15762*0 + 3*646*FLEN/8, x4, x1, x2)

inst_5255:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe47c0000; valaddr_reg:x3; val_offset:15765*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15765*0 + 3*647*FLEN/8, x4, x1, x2)

inst_5256:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe47e0000; valaddr_reg:x3; val_offset:15768*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15768*0 + 3*648*FLEN/8, x4, x1, x2)

inst_5257:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe47f0000; valaddr_reg:x3; val_offset:15771*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15771*0 + 3*649*FLEN/8, x4, x1, x2)

inst_5258:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe47f8000; valaddr_reg:x3; val_offset:15774*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15774*0 + 3*650*FLEN/8, x4, x1, x2)

inst_5259:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe47fc000; valaddr_reg:x3; val_offset:15777*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15777*0 + 3*651*FLEN/8, x4, x1, x2)

inst_5260:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe47fe000; valaddr_reg:x3; val_offset:15780*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15780*0 + 3*652*FLEN/8, x4, x1, x2)

inst_5261:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe47ff000; valaddr_reg:x3; val_offset:15783*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15783*0 + 3*653*FLEN/8, x4, x1, x2)

inst_5262:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe47ff800; valaddr_reg:x3; val_offset:15786*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15786*0 + 3*654*FLEN/8, x4, x1, x2)

inst_5263:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe47ffc00; valaddr_reg:x3; val_offset:15789*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15789*0 + 3*655*FLEN/8, x4, x1, x2)

inst_5264:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe47ffe00; valaddr_reg:x3; val_offset:15792*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15792*0 + 3*656*FLEN/8, x4, x1, x2)

inst_5265:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe47fff00; valaddr_reg:x3; val_offset:15795*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15795*0 + 3*657*FLEN/8, x4, x1, x2)

inst_5266:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe47fff80; valaddr_reg:x3; val_offset:15798*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15798*0 + 3*658*FLEN/8, x4, x1, x2)

inst_5267:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe47fffc0; valaddr_reg:x3; val_offset:15801*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15801*0 + 3*659*FLEN/8, x4, x1, x2)

inst_5268:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe47fffe0; valaddr_reg:x3; val_offset:15804*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15804*0 + 3*660*FLEN/8, x4, x1, x2)

inst_5269:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe47ffff0; valaddr_reg:x3; val_offset:15807*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15807*0 + 3*661*FLEN/8, x4, x1, x2)

inst_5270:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe47ffff8; valaddr_reg:x3; val_offset:15810*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15810*0 + 3*662*FLEN/8, x4, x1, x2)

inst_5271:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe47ffffc; valaddr_reg:x3; val_offset:15813*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15813*0 + 3*663*FLEN/8, x4, x1, x2)

inst_5272:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe47ffffe; valaddr_reg:x3; val_offset:15816*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15816*0 + 3*664*FLEN/8, x4, x1, x2)

inst_5273:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xc8 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xe47fffff; valaddr_reg:x3; val_offset:15819*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15819*0 + 3*665*FLEN/8, x4, x1, x2)

inst_5274:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xff000001; valaddr_reg:x3; val_offset:15822*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15822*0 + 3*666*FLEN/8, x4, x1, x2)

inst_5275:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xff000003; valaddr_reg:x3; val_offset:15825*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15825*0 + 3*667*FLEN/8, x4, x1, x2)

inst_5276:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xff000007; valaddr_reg:x3; val_offset:15828*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15828*0 + 3*668*FLEN/8, x4, x1, x2)

inst_5277:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xff199999; valaddr_reg:x3; val_offset:15831*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15831*0 + 3*669*FLEN/8, x4, x1, x2)

inst_5278:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xff249249; valaddr_reg:x3; val_offset:15834*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15834*0 + 3*670*FLEN/8, x4, x1, x2)

inst_5279:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xff333333; valaddr_reg:x3; val_offset:15837*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15837*0 + 3*671*FLEN/8, x4, x1, x2)

inst_5280:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:15840*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15840*0 + 3*672*FLEN/8, x4, x1, x2)

inst_5281:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:15843*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15843*0 + 3*673*FLEN/8, x4, x1, x2)

inst_5282:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xff444444; valaddr_reg:x3; val_offset:15846*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15846*0 + 3*674*FLEN/8, x4, x1, x2)

inst_5283:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:15849*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15849*0 + 3*675*FLEN/8, x4, x1, x2)

inst_5284:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:15852*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15852*0 + 3*676*FLEN/8, x4, x1, x2)

inst_5285:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xff666666; valaddr_reg:x3; val_offset:15855*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15855*0 + 3*677*FLEN/8, x4, x1, x2)

inst_5286:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:15858*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15858*0 + 3*678*FLEN/8, x4, x1, x2)

inst_5287:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:15861*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15861*0 + 3*679*FLEN/8, x4, x1, x2)

inst_5288:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:15864*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15864*0 + 3*680*FLEN/8, x4, x1, x2)

inst_5289:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x784260 and fs2 == 1 and fe2 == 0x82 and fm2 == 0x03fdb3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df84260; op2val:0xc103fdb3;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:15867*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15867*0 + 3*681*FLEN/8, x4, x1, x2)

inst_5290:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xbf800001; valaddr_reg:x3; val_offset:15870*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15870*0 + 3*682*FLEN/8, x4, x1, x2)

inst_5291:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xbf800003; valaddr_reg:x3; val_offset:15873*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15873*0 + 3*683*FLEN/8, x4, x1, x2)

inst_5292:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xbf800007; valaddr_reg:x3; val_offset:15876*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15876*0 + 3*684*FLEN/8, x4, x1, x2)

inst_5293:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xbf999999; valaddr_reg:x3; val_offset:15879*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15879*0 + 3*685*FLEN/8, x4, x1, x2)

inst_5294:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:15882*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15882*0 + 3*686*FLEN/8, x4, x1, x2)

inst_5295:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:15885*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15885*0 + 3*687*FLEN/8, x4, x1, x2)

inst_5296:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:15888*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15888*0 + 3*688*FLEN/8, x4, x1, x2)

inst_5297:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:15891*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15891*0 + 3*689*FLEN/8, x4, x1, x2)

inst_5298:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:15894*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15894*0 + 3*690*FLEN/8, x4, x1, x2)

inst_5299:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:15897*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15897*0 + 3*691*FLEN/8, x4, x1, x2)

inst_5300:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:15900*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15900*0 + 3*692*FLEN/8, x4, x1, x2)

inst_5301:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:15903*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15903*0 + 3*693*FLEN/8, x4, x1, x2)

inst_5302:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:15906*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15906*0 + 3*694*FLEN/8, x4, x1, x2)

inst_5303:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:15909*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15909*0 + 3*695*FLEN/8, x4, x1, x2)

inst_5304:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:15912*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15912*0 + 3*696*FLEN/8, x4, x1, x2)

inst_5305:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:15915*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15915*0 + 3*697*FLEN/8, x4, x1, x2)

inst_5306:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc000000; valaddr_reg:x3; val_offset:15918*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15918*0 + 3*698*FLEN/8, x4, x1, x2)

inst_5307:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc000001; valaddr_reg:x3; val_offset:15921*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15921*0 + 3*699*FLEN/8, x4, x1, x2)

inst_5308:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc000003; valaddr_reg:x3; val_offset:15924*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15924*0 + 3*700*FLEN/8, x4, x1, x2)

inst_5309:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc000007; valaddr_reg:x3; val_offset:15927*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15927*0 + 3*701*FLEN/8, x4, x1, x2)

inst_5310:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc00000f; valaddr_reg:x3; val_offset:15930*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15930*0 + 3*702*FLEN/8, x4, x1, x2)

inst_5311:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc00001f; valaddr_reg:x3; val_offset:15933*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15933*0 + 3*703*FLEN/8, x4, x1, x2)

inst_5312:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc00003f; valaddr_reg:x3; val_offset:15936*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15936*0 + 3*704*FLEN/8, x4, x1, x2)

inst_5313:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc00007f; valaddr_reg:x3; val_offset:15939*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15939*0 + 3*705*FLEN/8, x4, x1, x2)

inst_5314:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc0000ff; valaddr_reg:x3; val_offset:15942*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15942*0 + 3*706*FLEN/8, x4, x1, x2)

inst_5315:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc0001ff; valaddr_reg:x3; val_offset:15945*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15945*0 + 3*707*FLEN/8, x4, x1, x2)

inst_5316:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc0003ff; valaddr_reg:x3; val_offset:15948*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15948*0 + 3*708*FLEN/8, x4, x1, x2)

inst_5317:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc0007ff; valaddr_reg:x3; val_offset:15951*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15951*0 + 3*709*FLEN/8, x4, x1, x2)

inst_5318:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc000fff; valaddr_reg:x3; val_offset:15954*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15954*0 + 3*710*FLEN/8, x4, x1, x2)

inst_5319:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc001fff; valaddr_reg:x3; val_offset:15957*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15957*0 + 3*711*FLEN/8, x4, x1, x2)

inst_5320:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc003fff; valaddr_reg:x3; val_offset:15960*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15960*0 + 3*712*FLEN/8, x4, x1, x2)

inst_5321:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc007fff; valaddr_reg:x3; val_offset:15963*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15963*0 + 3*713*FLEN/8, x4, x1, x2)

inst_5322:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc00ffff; valaddr_reg:x3; val_offset:15966*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15966*0 + 3*714*FLEN/8, x4, x1, x2)

inst_5323:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc01ffff; valaddr_reg:x3; val_offset:15969*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15969*0 + 3*715*FLEN/8, x4, x1, x2)

inst_5324:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc03ffff; valaddr_reg:x3; val_offset:15972*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15972*0 + 3*716*FLEN/8, x4, x1, x2)

inst_5325:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc07ffff; valaddr_reg:x3; val_offset:15975*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15975*0 + 3*717*FLEN/8, x4, x1, x2)

inst_5326:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc0fffff; valaddr_reg:x3; val_offset:15978*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15978*0 + 3*718*FLEN/8, x4, x1, x2)

inst_5327:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc1fffff; valaddr_reg:x3; val_offset:15981*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15981*0 + 3*719*FLEN/8, x4, x1, x2)

inst_5328:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc3fffff; valaddr_reg:x3; val_offset:15984*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15984*0 + 3*720*FLEN/8, x4, x1, x2)

inst_5329:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc400000; valaddr_reg:x3; val_offset:15987*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15987*0 + 3*721*FLEN/8, x4, x1, x2)

inst_5330:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc600000; valaddr_reg:x3; val_offset:15990*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15990*0 + 3*722*FLEN/8, x4, x1, x2)

inst_5331:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc700000; valaddr_reg:x3; val_offset:15993*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15993*0 + 3*723*FLEN/8, x4, x1, x2)

inst_5332:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc780000; valaddr_reg:x3; val_offset:15996*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15996*0 + 3*724*FLEN/8, x4, x1, x2)

inst_5333:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc7c0000; valaddr_reg:x3; val_offset:15999*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 15999*0 + 3*725*FLEN/8, x4, x1, x2)

inst_5334:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc7e0000; valaddr_reg:x3; val_offset:16002*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16002*0 + 3*726*FLEN/8, x4, x1, x2)

inst_5335:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc7f0000; valaddr_reg:x3; val_offset:16005*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16005*0 + 3*727*FLEN/8, x4, x1, x2)

inst_5336:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc7f8000; valaddr_reg:x3; val_offset:16008*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16008*0 + 3*728*FLEN/8, x4, x1, x2)

inst_5337:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc7fc000; valaddr_reg:x3; val_offset:16011*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16011*0 + 3*729*FLEN/8, x4, x1, x2)

inst_5338:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc7fe000; valaddr_reg:x3; val_offset:16014*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16014*0 + 3*730*FLEN/8, x4, x1, x2)

inst_5339:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc7ff000; valaddr_reg:x3; val_offset:16017*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16017*0 + 3*731*FLEN/8, x4, x1, x2)

inst_5340:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc7ff800; valaddr_reg:x3; val_offset:16020*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16020*0 + 3*732*FLEN/8, x4, x1, x2)

inst_5341:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc7ffc00; valaddr_reg:x3; val_offset:16023*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16023*0 + 3*733*FLEN/8, x4, x1, x2)

inst_5342:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc7ffe00; valaddr_reg:x3; val_offset:16026*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16026*0 + 3*734*FLEN/8, x4, x1, x2)

inst_5343:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc7fff00; valaddr_reg:x3; val_offset:16029*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16029*0 + 3*735*FLEN/8, x4, x1, x2)

inst_5344:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc7fff80; valaddr_reg:x3; val_offset:16032*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16032*0 + 3*736*FLEN/8, x4, x1, x2)

inst_5345:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc7fffc0; valaddr_reg:x3; val_offset:16035*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16035*0 + 3*737*FLEN/8, x4, x1, x2)

inst_5346:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc7fffe0; valaddr_reg:x3; val_offset:16038*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16038*0 + 3*738*FLEN/8, x4, x1, x2)

inst_5347:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc7ffff0; valaddr_reg:x3; val_offset:16041*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16041*0 + 3*739*FLEN/8, x4, x1, x2)

inst_5348:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc7ffff8; valaddr_reg:x3; val_offset:16044*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16044*0 + 3*740*FLEN/8, x4, x1, x2)

inst_5349:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc7ffffc; valaddr_reg:x3; val_offset:16047*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16047*0 + 3*741*FLEN/8, x4, x1, x2)

inst_5350:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc7ffffe; valaddr_reg:x3; val_offset:16050*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16050*0 + 3*742*FLEN/8, x4, x1, x2)

inst_5351:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x78dcc9 and fs2 == 1 and fe2 == 0x02 and fm2 == 0x03abce and fs3 == 1 and fe3 == 0x98 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df8dcc9; op2val:0x8103abce;
op3val:0xcc7fffff; valaddr_reg:x3; val_offset:16053*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16053*0 + 3*743*FLEN/8, x4, x1, x2)

inst_5352:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x79a7ac and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0340cd and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df9a7ac; op2val:0xc10340cd;
op3val:0xfb800000; valaddr_reg:x3; val_offset:16056*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16056*0 + 3*744*FLEN/8, x4, x1, x2)

inst_5353:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x79a7ac and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0340cd and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df9a7ac; op2val:0xc10340cd;
op3val:0xfb800001; valaddr_reg:x3; val_offset:16059*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16059*0 + 3*745*FLEN/8, x4, x1, x2)

inst_5354:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x79a7ac and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0340cd and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df9a7ac; op2val:0xc10340cd;
op3val:0xfb800003; valaddr_reg:x3; val_offset:16062*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16062*0 + 3*746*FLEN/8, x4, x1, x2)

inst_5355:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x79a7ac and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0340cd and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df9a7ac; op2val:0xc10340cd;
op3val:0xfb800007; valaddr_reg:x3; val_offset:16065*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16065*0 + 3*747*FLEN/8, x4, x1, x2)

inst_5356:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x79a7ac and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0340cd and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df9a7ac; op2val:0xc10340cd;
op3val:0xfb80000f; valaddr_reg:x3; val_offset:16068*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16068*0 + 3*748*FLEN/8, x4, x1, x2)

inst_5357:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x79a7ac and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0340cd and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df9a7ac; op2val:0xc10340cd;
op3val:0xfb80001f; valaddr_reg:x3; val_offset:16071*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16071*0 + 3*749*FLEN/8, x4, x1, x2)

inst_5358:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x79a7ac and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0340cd and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df9a7ac; op2val:0xc10340cd;
op3val:0xfb80003f; valaddr_reg:x3; val_offset:16074*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16074*0 + 3*750*FLEN/8, x4, x1, x2)

inst_5359:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x79a7ac and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0340cd and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df9a7ac; op2val:0xc10340cd;
op3val:0xfb80007f; valaddr_reg:x3; val_offset:16077*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16077*0 + 3*751*FLEN/8, x4, x1, x2)

inst_5360:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x79a7ac and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0340cd and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df9a7ac; op2val:0xc10340cd;
op3val:0xfb8000ff; valaddr_reg:x3; val_offset:16080*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16080*0 + 3*752*FLEN/8, x4, x1, x2)

inst_5361:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x79a7ac and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0340cd and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df9a7ac; op2val:0xc10340cd;
op3val:0xfb8001ff; valaddr_reg:x3; val_offset:16083*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16083*0 + 3*753*FLEN/8, x4, x1, x2)

inst_5362:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x79a7ac and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0340cd and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df9a7ac; op2val:0xc10340cd;
op3val:0xfb8003ff; valaddr_reg:x3; val_offset:16086*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16086*0 + 3*754*FLEN/8, x4, x1, x2)

inst_5363:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x79a7ac and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0340cd and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df9a7ac; op2val:0xc10340cd;
op3val:0xfb8007ff; valaddr_reg:x3; val_offset:16089*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16089*0 + 3*755*FLEN/8, x4, x1, x2)

inst_5364:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x79a7ac and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0340cd and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df9a7ac; op2val:0xc10340cd;
op3val:0xfb800fff; valaddr_reg:x3; val_offset:16092*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16092*0 + 3*756*FLEN/8, x4, x1, x2)

inst_5365:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x79a7ac and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0340cd and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df9a7ac; op2val:0xc10340cd;
op3val:0xfb801fff; valaddr_reg:x3; val_offset:16095*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16095*0 + 3*757*FLEN/8, x4, x1, x2)

inst_5366:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x79a7ac and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0340cd and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df9a7ac; op2val:0xc10340cd;
op3val:0xfb803fff; valaddr_reg:x3; val_offset:16098*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16098*0 + 3*758*FLEN/8, x4, x1, x2)

inst_5367:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x79a7ac and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0340cd and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df9a7ac; op2val:0xc10340cd;
op3val:0xfb807fff; valaddr_reg:x3; val_offset:16101*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16101*0 + 3*759*FLEN/8, x4, x1, x2)

inst_5368:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x79a7ac and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0340cd and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df9a7ac; op2val:0xc10340cd;
op3val:0xfb80ffff; valaddr_reg:x3; val_offset:16104*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16104*0 + 3*760*FLEN/8, x4, x1, x2)

inst_5369:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x79a7ac and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0340cd and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df9a7ac; op2val:0xc10340cd;
op3val:0xfb81ffff; valaddr_reg:x3; val_offset:16107*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16107*0 + 3*761*FLEN/8, x4, x1, x2)

inst_5370:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x79a7ac and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0340cd and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df9a7ac; op2val:0xc10340cd;
op3val:0xfb83ffff; valaddr_reg:x3; val_offset:16110*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16110*0 + 3*762*FLEN/8, x4, x1, x2)

inst_5371:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x79a7ac and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0340cd and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df9a7ac; op2val:0xc10340cd;
op3val:0xfb87ffff; valaddr_reg:x3; val_offset:16113*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16113*0 + 3*763*FLEN/8, x4, x1, x2)

inst_5372:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x79a7ac and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0340cd and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df9a7ac; op2val:0xc10340cd;
op3val:0xfb8fffff; valaddr_reg:x3; val_offset:16116*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16116*0 + 3*764*FLEN/8, x4, x1, x2)

inst_5373:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x79a7ac and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0340cd and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df9a7ac; op2val:0xc10340cd;
op3val:0xfb9fffff; valaddr_reg:x3; val_offset:16119*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16119*0 + 3*765*FLEN/8, x4, x1, x2)

inst_5374:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x79a7ac and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0340cd and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df9a7ac; op2val:0xc10340cd;
op3val:0xfbbfffff; valaddr_reg:x3; val_offset:16122*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16122*0 + 3*766*FLEN/8, x4, x1, x2)

inst_5375:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x79a7ac and fs2 == 1 and fe2 == 0x82 and fm2 == 0x0340cd and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7df9a7ac; op2val:0xc10340cd;
op3val:0xfbc00000; valaddr_reg:x3; val_offset:16125*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 16125*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(0x7dd5b2a1111156897,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xbfff80001324544,32,FLEN)
NAN_BOXED(0x7dd5b2a1111156897,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xbfffc0001325568,32,FLEN)
NAN_BOXED(0x7dd5b2a1111156897,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xbfffe0001326080,32,FLEN)
NAN_BOXED(0x7dd5b2a1111156897,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xbffff0001326336,32,FLEN)
NAN_BOXED(0x7dd5b2a1111156897,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xbffff8001326464,32,FLEN)
NAN_BOXED(0x7dd5b2a1111156897,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xbffffc001326528,32,FLEN)
NAN_BOXED(0x7dd5b2a1111156897,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xbffffe001326560,32,FLEN)
NAN_BOXED(0x7dd5b2a1111156897,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xbfffff001326576,32,FLEN)
NAN_BOXED(0x7dd5b2a1111156897,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xbfffff801326584,32,FLEN)
NAN_BOXED(0x7dd5b2a1111156897,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xbfffffc01326588,32,FLEN)
NAN_BOXED(0x7dd5b2a1111156897,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xbfffffe01326590,32,FLEN)
NAN_BOXED(0x7dd5b2a1111156897,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xbffffff01326591,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000001147483649,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000003147483651,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000007147483655,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80199999149161369,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80249249149880393,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80333333150839091,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8036db6d151078765,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x803bbbbb151398331,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80444444151957572,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x804ccccc152516812,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x805b6db6153475510,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80666666154194534,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x806db6db154673883,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffff8155872248,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffc155872252,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffe155872254,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e000000382364672,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e000001382364673,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e000003382364675,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e000007382364679,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e00000f382364687,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e00001f382364703,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e00003f382364735,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e00007f382364799,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e0000ff382364927,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e0001ff382365183,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e0003ff382365695,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e0007ff382366719,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e000fff382368767,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e001fff382372863,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e003fff382381055,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e007fff382397439,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e00ffff382430207,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e01ffff382495743,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e03ffff382626815,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e07ffff382888959,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e0fffff383413247,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e1fffff384461823,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e3fffff386558975,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e400000386558976,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e600000388656128,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e700000389704704,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e780000390228992,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7c0000390491136,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7e0000390622208,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7f0000390687744,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7f8000390720512,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7fc000390736896,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7fe000390745088,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7ff000390749184,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7ff800390751232,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7ffc00390752256,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7ffe00390752768,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7fff00390753024,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7fff80390753152,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7fffc0390753216,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7fffe0390753248,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7ffff0390753264,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7ffff8390753272,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7ffffc390753276,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7ffffe390753278,32,FLEN)
NAN_BOXED(0x7dd96713111399699,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7fffff390753279,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x3,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xf5,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1f1,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x3f3,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7f27,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xff55,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1ff11,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x3ff023,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ff047,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xfff095,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1fff191,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x3fff6383,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7fff2767,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xffff5535,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1ffff31071,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x3ffff62143,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffff24287,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xfffff048575,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x199999677721,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1fffff097151,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x249249396745,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x333333355443,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x36db6d595117,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x3bbbbb914683,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x3fffff194303,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x400000194304,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x444444473924,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x4ccccc033164,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5b6db6991862,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x600000291456,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x666666710886,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x6db6db190235,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x700000340032,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x780000864320,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7c0000126464,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7e0000257536,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7f0000323072,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7f8000355840,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7fc000372224,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7fe000380416,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ff000384512,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ff800386560,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffc00387584,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffe00388096,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7fff00388352,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7fff80388480,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7fffc0388544,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7fffe0388576,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffff0388592,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffff8388600,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffffc388604,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffffe388606,32,FLEN)
NAN_BOXED(0x7dd99f18111414040,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7fffff388607,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbf800000212836864,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbf800001212836865,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbf800003212836867,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbf800007212836871,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbf80000f212836879,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbf80001f212836895,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbf80003f212836927,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbf80007f212836991,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbf8000ff212837119,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbf8001ff212837375,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbf8003ff212837887,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbf8007ff212838911,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbf800fff212840959,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbf801fff212845055,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbf803fff212853247,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbf807fff212869631,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbf80ffff212902399,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbf81ffff212967935,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbf83ffff213099007,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbf87ffff213361151,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbf8fffff213885439,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbf999999214514585,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbf9fffff214934015,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbfa49249215233609,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbfb33333216192307,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbfb6db6d216431981,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbfbbbbbb216751547,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbfbfffff217031167,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbfc00000217031168,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbfc44444217310788,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbfcccccc217870028,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbfdb6db6218828726,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbfe00000219128320,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbfe66666219547750,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbfedb6db220027099,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbff00000220176896,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbff80000220701184,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbffc0000220963328,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbffe0000221094400,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbfff0000221159936,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbfff8000221192704,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbfffc000221209088,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbfffe000221217280,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbffff000221221376,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbffff800221223424,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbffffc00221224448,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbffffe00221224960,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbfffff00221225216,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbfffff80221225344,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbfffffc0221225408,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbfffffe0221225440,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbffffff0221225456,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbffffff8221225464,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbffffffc221225468,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbffffffe221225470,32,FLEN)
NAN_BOXED(0x7de24be0111982560,32,FLEN)
NAN_BOXED(0x8110cd1e165361950,32,FLEN)
NAN_BOXED(0xbfffffff221225471,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa000000194304000,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa000001194304001,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa000003194304003,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa000007194304007,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa00000f194304015,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa00001f194304031,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa00003f194304063,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa00007f194304127,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa0000ff194304255,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa0001ff194304511,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa0003ff194305023,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa0007ff194306047,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa000fff194308095,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa001fff194312191,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa003fff194320383,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa007fff194336767,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa00ffff194369535,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa01ffff194435071,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa03ffff194566143,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa07ffff194828287,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa0fffff195352575,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa1fffff196401151,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa3fffff198498303,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa400000198498304,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa600000200595456,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa700000201644032,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa780000202168320,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa7c0000202430464,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa7e0000202561536,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa7f0000202627072,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa7f8000202659840,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa7fc000202676224,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa7fe000202684416,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa7ff000202688512,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa7ff800202690560,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa7ffc00202691584,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa7ffe00202692096,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa7fff00202692352,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa7fff80202692480,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa7fffc0202692544,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa7fffe0202692576,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa7ffff0202692592,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa7ffff8202692600,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa7ffffc202692604,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa7ffffe202692606,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xfa7fffff202692607,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xff000001278190081,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xff000003278190083,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xff000007278190087,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xff199999279867801,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xff249249280586825,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xff333333281545523,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xff36db6d281785197,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xff3bbbbb282104763,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xff444444282664004,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xff4ccccc283223244,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xff5b6db6284181942,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xff666666284900966,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xff6db6db285380315,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xff7ffff8286578680,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xff7ffffc286578684,32,FLEN)
NAN_BOXED(0x7de39ac5112068293,32,FLEN)
NAN_BOXED(0xc10ff80e239049230,32,FLEN)
NAN_BOXED(0xff7ffffe286578686,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80800001155872257,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80800003155872259,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80800007155872263,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80999999157549977,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80a49249158269001,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80b33333159227699,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80b6db6d159467373,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80bbbbbb159786939,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80c44444160346180,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80cccccc160905420,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80db6db6161864118,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80e66666162583142,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80edb6db163062491,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80fffff8164260856,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80fffffc164260860,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80fffffe164260862,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x89000000298478592,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x89000001298478593,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x89000003298478595,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x89000007298478599,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8900000f298478607,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8900001f298478623,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8900003f298478655,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8900007f298478719,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x890000ff298478847,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x890001ff298479103,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x890003ff298479615,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x890007ff298480639,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x89000fff298482687,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x89001fff298486783,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x89003fff298494975,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x89007fff298511359,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8900ffff298544127,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8901ffff298609663,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8903ffff298740735,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8907ffff299002879,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x890fffff299527167,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x891fffff300575743,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x893fffff302672895,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x89400000302672896,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x89600000304770048,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x89700000305818624,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x89780000306342912,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x897c0000306605056,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x897e0000306736128,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x897f0000306801664,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x897f8000306834432,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x897fc000306850816,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x897fe000306859008,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x897ff000306863104,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x897ff800306865152,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x897ffc00306866176,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x897ffe00306866688,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x897fff00306866944,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x897fff80306867072,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x897fffc0306867136,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x897fffe0306867168,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x897ffff0306867184,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x897ffff8306867192,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x897ffffc306867196,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x897ffffe306867198,32,FLEN)
NAN_BOXED(0x7de3f55b112091483,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x897fffff306867199,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000001147483649,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000003147483651,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000007147483655,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80199999149161369,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80249249149880393,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80333333150839091,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8036db6d151078765,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x803bbbbb151398331,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80444444151957572,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x804ccccc152516812,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x805b6db6153475510,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80666666154194534,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x806db6db154673883,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffff8155872248,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffc155872252,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffe155872254,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8d800000373976064,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8d800001373976065,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8d800003373976067,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8d800007373976071,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8d80000f373976079,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8d80001f373976095,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8d80003f373976127,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8d80007f373976191,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8d8000ff373976319,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8d8001ff373976575,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8d8003ff373977087,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8d8007ff373978111,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8d800fff373980159,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8d801fff373984255,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8d803fff373992447,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8d807fff374008831,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8d80ffff374041599,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8d81ffff374107135,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8d83ffff374238207,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8d87ffff374500351,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8d8fffff375024639,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8d9fffff376073215,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8dbfffff378170367,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8dc00000378170368,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8de00000380267520,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8df00000381316096,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8df80000381840384,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8dfc0000382102528,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8dfe0000382233600,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8dff0000382299136,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8dff8000382331904,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8dffc000382348288,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8dffe000382356480,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8dfff000382360576,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8dfff800382362624,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8dfffc00382363648,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8dfffe00382364160,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8dffff00382364416,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8dffff80382364544,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8dffffc0382364608,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8dffffe0382364640,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8dfffff0382364656,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8dfffff8382364664,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8dfffffc382364668,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8dfffffe382364670,32,FLEN)
NAN_BOXED(0x7de5ba89112207497,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8dffffff382364671,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad000000902458368,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad000001902458369,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad000003902458371,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad000007902458375,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad00000f902458383,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad00001f902458399,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad00003f902458431,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad00007f902458495,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad0000ff902458623,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad0001ff902458879,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad0003ff902459391,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad0007ff902460415,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad000fff902462463,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad001fff902466559,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad003fff902474751,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad007fff902491135,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad00ffff902523903,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad01ffff902589439,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad03ffff902720511,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad07ffff902982655,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad0fffff903506943,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad1fffff904555519,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad3fffff906652671,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad400000906652672,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad600000908749824,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad700000909798400,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad780000910322688,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad7c0000910584832,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad7e0000910715904,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad7f0000910781440,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad7f8000910814208,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad7fc000910830592,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad7fe000910838784,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad7ff000910842880,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad7ff800910844928,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad7ffc00910845952,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad7ffe00910846464,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad7fff00910846720,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad7fff80910846848,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad7fffc0910846912,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad7fffe0910846944,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad7ffff0910846960,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad7ffff8910846968,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad7ffffc910846972,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad7ffffe910846974,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xad7fffff910846975,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xbf800001212836865,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xbf800003212836867,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xbf800007212836871,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xbf999999214514585,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xbfa49249215233609,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xbfb33333216192307,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xbfb6db6d216431981,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xbfbbbbbb216751547,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xbfc44444217310788,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xbfcccccc217870028,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xbfdb6db6218828726,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xbfe66666219547750,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xbfedb6db220027099,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xbffffff8221225464,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xbffffffc221225468,32,FLEN)
NAN_BOXED(0x7df11943112952643,32,FLEN)
NAN_BOXED(0x8107e941164779329,32,FLEN)
NAN_BOXED(0xbffffffe221225470,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x3,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x199999677721,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x249249396745,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x333333355443,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x36db6d595117,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x3bbbbb914683,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x444444473924,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x4ccccc033164,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5b6db6991862,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x666666710886,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x6db6db190235,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffff8388600,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffffc388604,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffffe388606,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x600000000663296,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x600000100663297,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x600000300663299,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x600000700663303,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x600000f00663311,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x600001f00663327,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x600003f00663359,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x600007f00663423,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x60000ff00663551,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x60001ff00663807,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x60003ff00664319,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x60007ff00665343,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x6000fff00667391,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x6001fff00671487,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x6003fff00679679,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x6007fff00696063,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x600ffff00728831,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x601ffff00794367,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x603ffff00925439,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x607ffff01187583,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x60fffff01711871,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x61fffff02760447,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x63fffff04857599,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x640000004857600,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x660000006954752,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x670000008003328,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x678000008527616,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x67c000008789760,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x67e000008920832,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x67f000008986368,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x67f800009019136,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x67fc00009035520,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x67fe00009043712,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x67ff00009047808,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x67ff80009049856,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x67ffc0009050880,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x67ffe0009051392,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x67fff0009051648,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x67fff8009051776,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x67fffc009051840,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x67fffe009051872,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x67ffff009051888,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x67ffff809051896,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x67ffffc09051900,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x67ffffe09051902,32,FLEN)
NAN_BOXED(0x7df2879a113046426,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x67fffff09051903,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9f800000675965952,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9f800001675965953,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9f800003675965955,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9f800007675965959,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9f80000f675965967,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9f80001f675965983,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9f80003f675966015,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9f80007f675966079,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9f8000ff675966207,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9f8001ff675966463,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9f8003ff675966975,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9f8007ff675967999,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9f800fff675970047,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9f801fff675974143,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9f803fff675982335,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9f807fff675998719,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9f80ffff676031487,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9f81ffff676097023,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9f83ffff676228095,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9f87ffff676490239,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9f8fffff677014527,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9f9fffff678063103,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9fbfffff680160255,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9fc00000680160256,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9fe00000682257408,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9ff00000683305984,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9ff80000683830272,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9ffc0000684092416,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9ffe0000684223488,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9fff0000684289024,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9fff8000684321792,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9fffc000684338176,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9fffe000684346368,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9ffff000684350464,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9ffff800684352512,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9ffffc00684353536,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9ffffe00684354048,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9fffff00684354304,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9fffff80684354432,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9fffffc0684354496,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9fffffe0684354528,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9ffffff0684354544,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9ffffff8684354552,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9ffffffc684354556,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9ffffffe684354558,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0x9fffffff684354559,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0xbf800001212836865,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0xbf800003212836867,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0xbf800007212836871,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0xbf999999214514585,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0xbfa49249215233609,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0xbfb33333216192307,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0xbfb6db6d216431981,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0xbfbbbbbb216751547,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0xbfc44444217310788,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0xbfcccccc217870028,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0xbfdb6db6218828726,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0xbfe66666219547750,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0xbfedb6db220027099,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0xbffffff8221225464,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0xbffffffc221225468,32,FLEN)
NAN_BOXED(0x7df301ac113077676,32,FLEN)
NAN_BOXED(0x8106d817164709399,32,FLEN)
NAN_BOXED(0xbffffffe221225470,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xbf800001212836865,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xbf800003212836867,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xbf800007212836871,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xbf999999214514585,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xbfa49249215233609,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xbfb33333216192307,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xbfb6db6d216431981,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xbfbbbbbb216751547,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xbfc44444217310788,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xbfcccccc217870028,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xbfdb6db6218828726,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xbfe66666219547750,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xbfedb6db220027099,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xbffffff8221225464,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xbffffffc221225468,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xbffffffe221225470,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcd800000447717888,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcd800001447717889,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcd800003447717891,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcd800007447717895,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcd80000f447717903,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcd80001f447717919,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcd80003f447717951,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcd80007f447718015,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcd8000ff447718143,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcd8001ff447718399,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcd8003ff447718911,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcd8007ff447719935,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcd800fff447721983,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcd801fff447726079,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcd803fff447734271,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcd807fff447750655,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcd80ffff447783423,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcd81ffff447848959,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcd83ffff447980031,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcd87ffff448242175,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcd8fffff448766463,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcd9fffff449815039,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcdbfffff451912191,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcdc00000451912192,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcde00000454009344,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcdf00000455057920,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcdf80000455582208,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcdfc0000455844352,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcdfe0000455975424,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcdff0000456040960,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcdff8000456073728,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcdffc000456090112,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcdffe000456098304,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcdfff000456102400,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcdfff800456104448,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcdfffc00456105472,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcdfffe00456105984,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcdffff00456106240,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcdffff80456106368,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcdffffc0456106432,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcdffffe0456106464,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcdfffff0456106480,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcdfffff8456106488,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcdfffffc456106492,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcdfffffe456106494,32,FLEN)
NAN_BOXED(0x7df4239e113151902,32,FLEN)
NAN_BOXED(0x810637f2164668402,32,FLEN)
NAN_BOXED(0xcdffffff456106495,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe4000000825205248,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe4000001825205249,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe4000003825205251,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe4000007825205255,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe400000f825205263,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe400001f825205279,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe400003f825205311,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe400007f825205375,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe40000ff825205503,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe40001ff825205759,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe40003ff825206271,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe40007ff825207295,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe4000fff825209343,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe4001fff825213439,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe4003fff825221631,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe4007fff825238015,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe400ffff825270783,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe401ffff825336319,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe403ffff825467391,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe407ffff825729535,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe40fffff826253823,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe41fffff827302399,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe43fffff829399551,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe4400000829399552,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe4600000831496704,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe4700000832545280,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe4780000833069568,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe47c0000833331712,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe47e0000833462784,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe47f0000833528320,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe47f8000833561088,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe47fc000833577472,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe47fe000833585664,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe47ff000833589760,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe47ff800833591808,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe47ffc00833592832,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe47ffe00833593344,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe47fff00833593600,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe47fff80833593728,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe47fffc0833593792,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe47fffe0833593824,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe47ffff0833593840,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe47ffff8833593848,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe47ffffc833593852,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe47ffffe833593854,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xe47fffff833593855,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xff000001278190081,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xff000003278190083,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xff000007278190087,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xff199999279867801,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xff249249280586825,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xff333333281545523,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xff36db6d281785197,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xff3bbbbb282104763,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xff444444282664004,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xff4ccccc283223244,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xff5b6db6284181942,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xff666666284900966,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xff6db6db285380315,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xff7ffff8286578680,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xff7ffffc286578684,32,FLEN)
NAN_BOXED(0x7df84260113421920,32,FLEN)
NAN_BOXED(0xc103fdb3238264243,32,FLEN)
NAN_BOXED(0xff7ffffe286578686,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xbf800001212836865,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xbf800003212836867,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xbf800007212836871,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xbf999999214514585,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xbfa49249215233609,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xbfb33333216192307,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xbfb6db6d216431981,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xbfbbbbbb216751547,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xbfc44444217310788,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xbfcccccc217870028,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xbfdb6db6218828726,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xbfe66666219547750,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xbfedb6db220027099,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xbffffff8221225464,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xbffffffc221225468,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xbffffffe221225470,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc000000422552064,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc000001422552065,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc000003422552067,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc000007422552071,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc00000f422552079,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc00001f422552095,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc00003f422552127,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc00007f422552191,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc0000ff422552319,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc0001ff422552575,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc0003ff422553087,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc0007ff422554111,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc000fff422556159,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc001fff422560255,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc003fff422568447,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc007fff422584831,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc00ffff422617599,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc01ffff422683135,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc03ffff422814207,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc07ffff423076351,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc0fffff423600639,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc1fffff424649215,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc3fffff426746367,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc400000426746368,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc600000428843520,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc700000429892096,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc780000430416384,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc7c0000430678528,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc7e0000430809600,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc7f0000430875136,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc7f8000430907904,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc7fc000430924288,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc7fe000430932480,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc7ff000430936576,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc7ff800430938624,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc7ffc00430939648,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc7ffe00430940160,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc7fff00430940416,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc7fff80430940544,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc7fffc0430940608,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc7fffe0430940640,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc7ffff0430940656,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc7ffff8430940664,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc7ffffc430940668,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc7ffffe430940670,32,FLEN)
NAN_BOXED(0x7df8dcc9113461449,32,FLEN)
NAN_BOXED(0x8103abce164501454,32,FLEN)
NAN_BOXED(0xcc7fffff430940671,32,FLEN)
NAN_BOXED(0x7df9a7ac113513388,32,FLEN)
NAN_BOXED(0xc10340cd238215885,32,FLEN)
NAN_BOXED(0xfb800000219469824,32,FLEN)
NAN_BOXED(0x7df9a7ac113513388,32,FLEN)
NAN_BOXED(0xc10340cd238215885,32,FLEN)
NAN_BOXED(0xfb800001219469825,32,FLEN)
NAN_BOXED(0x7df9a7ac113513388,32,FLEN)
NAN_BOXED(0xc10340cd238215885,32,FLEN)
NAN_BOXED(0xfb800003219469827,32,FLEN)
NAN_BOXED(0x7df9a7ac113513388,32,FLEN)
NAN_BOXED(0xc10340cd238215885,32,FLEN)
NAN_BOXED(0xfb800007219469831,32,FLEN)
NAN_BOXED(0x7df9a7ac113513388,32,FLEN)
NAN_BOXED(0xc10340cd238215885,32,FLEN)
NAN_BOXED(0xfb80000f219469839,32,FLEN)
NAN_BOXED(0x7df9a7ac113513388,32,FLEN)
NAN_BOXED(0xc10340cd238215885,32,FLEN)
NAN_BOXED(0xfb80001f219469855,32,FLEN)
NAN_BOXED(0x7df9a7ac113513388,32,FLEN)
NAN_BOXED(0xc10340cd238215885,32,FLEN)
NAN_BOXED(0xfb80003f219469887,32,FLEN)
NAN_BOXED(0x7df9a7ac113513388,32,FLEN)
NAN_BOXED(0xc10340cd238215885,32,FLEN)
NAN_BOXED(0xfb80007f219469951,32,FLEN)
NAN_BOXED(0x7df9a7ac113513388,32,FLEN)
NAN_BOXED(0xc10340cd238215885,32,FLEN)
NAN_BOXED(0xfb8000ff219470079,32,FLEN)
NAN_BOXED(0x7df9a7ac113513388,32,FLEN)
NAN_BOXED(0xc10340cd238215885,32,FLEN)
NAN_BOXED(0xfb8001ff219470335,32,FLEN)
NAN_BOXED(0x7df9a7ac113513388,32,FLEN)
NAN_BOXED(0xc10340cd238215885,32,FLEN)
NAN_BOXED(0xfb8003ff219470847,32,FLEN)
NAN_BOXED(0x7df9a7ac113513388,32,FLEN)
NAN_BOXED(0xc10340cd238215885,32,FLEN)
NAN_BOXED(0xfb8007ff219471871,32,FLEN)
NAN_BOXED(0x7df9a7ac113513388,32,FLEN)
NAN_BOXED(0xc10340cd238215885,32,FLEN)
NAN_BOXED(0xfb800fff219473919,32,FLEN)
NAN_BOXED(0x7df9a7ac113513388,32,FLEN)
NAN_BOXED(0xc10340cd238215885,32,FLEN)
NAN_BOXED(0xfb801fff219478015,32,FLEN)
NAN_BOXED(0x7df9a7ac113513388,32,FLEN)
NAN_BOXED(0xc10340cd238215885,32,FLEN)
NAN_BOXED(0xfb803fff219486207,32,FLEN)
NAN_BOXED(0x7df9a7ac113513388,32,FLEN)
NAN_BOXED(0xc10340cd238215885,32,FLEN)
NAN_BOXED(0xfb807fff219502591,32,FLEN)
NAN_BOXED(0x7df9a7ac113513388,32,FLEN)
NAN_BOXED(0xc10340cd238215885,32,FLEN)
NAN_BOXED(0xfb80ffff219535359,32,FLEN)
NAN_BOXED(0x7df9a7ac113513388,32,FLEN)
NAN_BOXED(0xc10340cd238215885,32,FLEN)
NAN_BOXED(0xfb81ffff219600895,32,FLEN)
NAN_BOXED(0x7df9a7ac113513388,32,FLEN)
NAN_BOXED(0xc10340cd238215885,32,FLEN)
NAN_BOXED(0xfb83ffff219731967,32,FLEN)
NAN_BOXED(0x7df9a7ac113513388,32,FLEN)
NAN_BOXED(0xc10340cd238215885,32,FLEN)
NAN_BOXED(0xfb87ffff219994111,32,FLEN)
NAN_BOXED(0x7df9a7ac113513388,32,FLEN)
NAN_BOXED(0xc10340cd238215885,32,FLEN)
NAN_BOXED(0xfb8fffff220518399,32,FLEN)
NAN_BOXED(0x7df9a7ac113513388,32,FLEN)
NAN_BOXED(0xc10340cd238215885,32,FLEN)
NAN_BOXED(0xfb9fffff221566975,32,FLEN)
NAN_BOXED(0x7df9a7ac113513388,32,FLEN)
NAN_BOXED(0xc10340cd238215885,32,FLEN)
NAN_BOXED(0xfbbfffff223664127,32,FLEN)
NAN_BOXED(0x7df9a7ac113513388,32,FLEN)
NAN_BOXED(0xc10340cd238215885,32,FLEN)
NAN_BOXED(0xfbc00000223664128,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
