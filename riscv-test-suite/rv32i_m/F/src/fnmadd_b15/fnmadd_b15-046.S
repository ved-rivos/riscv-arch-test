
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_34560:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30b93e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30b93e; op2val:0x80000000;
op3val:0x843fffff; valaddr_reg:x3; val_offset:103680*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103680*0 + 3*0*FLEN/8, x4, x1, x2)

inst_34561:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30b93e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30b93e; op2val:0x80000000;
op3val:0x84400000; valaddr_reg:x3; val_offset:103683*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103683*0 + 3*1*FLEN/8, x4, x1, x2)

inst_34562:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30b93e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30b93e; op2val:0x80000000;
op3val:0x84600000; valaddr_reg:x3; val_offset:103686*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103686*0 + 3*2*FLEN/8, x4, x1, x2)

inst_34563:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30b93e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30b93e; op2val:0x80000000;
op3val:0x84700000; valaddr_reg:x3; val_offset:103689*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103689*0 + 3*3*FLEN/8, x4, x1, x2)

inst_34564:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30b93e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30b93e; op2val:0x80000000;
op3val:0x84780000; valaddr_reg:x3; val_offset:103692*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103692*0 + 3*4*FLEN/8, x4, x1, x2)

inst_34565:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30b93e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30b93e; op2val:0x80000000;
op3val:0x847c0000; valaddr_reg:x3; val_offset:103695*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103695*0 + 3*5*FLEN/8, x4, x1, x2)

inst_34566:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30b93e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30b93e; op2val:0x80000000;
op3val:0x847e0000; valaddr_reg:x3; val_offset:103698*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103698*0 + 3*6*FLEN/8, x4, x1, x2)

inst_34567:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30b93e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30b93e; op2val:0x80000000;
op3val:0x847f0000; valaddr_reg:x3; val_offset:103701*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103701*0 + 3*7*FLEN/8, x4, x1, x2)

inst_34568:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30b93e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30b93e; op2val:0x80000000;
op3val:0x847f8000; valaddr_reg:x3; val_offset:103704*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103704*0 + 3*8*FLEN/8, x4, x1, x2)

inst_34569:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30b93e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30b93e; op2val:0x80000000;
op3val:0x847fc000; valaddr_reg:x3; val_offset:103707*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103707*0 + 3*9*FLEN/8, x4, x1, x2)

inst_34570:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30b93e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30b93e; op2val:0x80000000;
op3val:0x847fe000; valaddr_reg:x3; val_offset:103710*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103710*0 + 3*10*FLEN/8, x4, x1, x2)

inst_34571:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30b93e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30b93e; op2val:0x80000000;
op3val:0x847ff000; valaddr_reg:x3; val_offset:103713*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103713*0 + 3*11*FLEN/8, x4, x1, x2)

inst_34572:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30b93e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30b93e; op2val:0x80000000;
op3val:0x847ff800; valaddr_reg:x3; val_offset:103716*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103716*0 + 3*12*FLEN/8, x4, x1, x2)

inst_34573:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30b93e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30b93e; op2val:0x80000000;
op3val:0x847ffc00; valaddr_reg:x3; val_offset:103719*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103719*0 + 3*13*FLEN/8, x4, x1, x2)

inst_34574:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30b93e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30b93e; op2val:0x80000000;
op3val:0x847ffe00; valaddr_reg:x3; val_offset:103722*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103722*0 + 3*14*FLEN/8, x4, x1, x2)

inst_34575:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30b93e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30b93e; op2val:0x80000000;
op3val:0x847fff00; valaddr_reg:x3; val_offset:103725*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103725*0 + 3*15*FLEN/8, x4, x1, x2)

inst_34576:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30b93e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30b93e; op2val:0x80000000;
op3val:0x847fff80; valaddr_reg:x3; val_offset:103728*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103728*0 + 3*16*FLEN/8, x4, x1, x2)

inst_34577:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30b93e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30b93e; op2val:0x80000000;
op3val:0x847fffc0; valaddr_reg:x3; val_offset:103731*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103731*0 + 3*17*FLEN/8, x4, x1, x2)

inst_34578:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30b93e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30b93e; op2val:0x80000000;
op3val:0x847fffe0; valaddr_reg:x3; val_offset:103734*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103734*0 + 3*18*FLEN/8, x4, x1, x2)

inst_34579:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30b93e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30b93e; op2val:0x80000000;
op3val:0x847ffff0; valaddr_reg:x3; val_offset:103737*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103737*0 + 3*19*FLEN/8, x4, x1, x2)

inst_34580:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30b93e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30b93e; op2val:0x80000000;
op3val:0x847ffff8; valaddr_reg:x3; val_offset:103740*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103740*0 + 3*20*FLEN/8, x4, x1, x2)

inst_34581:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30b93e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30b93e; op2val:0x80000000;
op3val:0x847ffffc; valaddr_reg:x3; val_offset:103743*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103743*0 + 3*21*FLEN/8, x4, x1, x2)

inst_34582:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30b93e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30b93e; op2val:0x80000000;
op3val:0x847ffffe; valaddr_reg:x3; val_offset:103746*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103746*0 + 3*22*FLEN/8, x4, x1, x2)

inst_34583:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30b93e and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x08 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30b93e; op2val:0x80000000;
op3val:0x847fffff; valaddr_reg:x3; val_offset:103749*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103749*0 + 3*23*FLEN/8, x4, x1, x2)

inst_34584:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:103752*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103752*0 + 3*24*FLEN/8, x4, x1, x2)

inst_34585:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:103755*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103755*0 + 3*25*FLEN/8, x4, x1, x2)

inst_34586:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:103758*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103758*0 + 3*26*FLEN/8, x4, x1, x2)

inst_34587:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:103761*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103761*0 + 3*27*FLEN/8, x4, x1, x2)

inst_34588:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:103764*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103764*0 + 3*28*FLEN/8, x4, x1, x2)

inst_34589:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:103767*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103767*0 + 3*29*FLEN/8, x4, x1, x2)

inst_34590:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:103770*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103770*0 + 3*30*FLEN/8, x4, x1, x2)

inst_34591:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:103773*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103773*0 + 3*31*FLEN/8, x4, x1, x2)

inst_34592:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:103776*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103776*0 + 3*32*FLEN/8, x4, x1, x2)

inst_34593:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:103779*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103779*0 + 3*33*FLEN/8, x4, x1, x2)

inst_34594:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:103782*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103782*0 + 3*34*FLEN/8, x4, x1, x2)

inst_34595:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:103785*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103785*0 + 3*35*FLEN/8, x4, x1, x2)

inst_34596:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:103788*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103788*0 + 3*36*FLEN/8, x4, x1, x2)

inst_34597:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:103791*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103791*0 + 3*37*FLEN/8, x4, x1, x2)

inst_34598:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:103794*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103794*0 + 3*38*FLEN/8, x4, x1, x2)

inst_34599:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:103797*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103797*0 + 3*39*FLEN/8, x4, x1, x2)

inst_34600:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x81800000; valaddr_reg:x3; val_offset:103800*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103800*0 + 3*40*FLEN/8, x4, x1, x2)

inst_34601:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x81800001; valaddr_reg:x3; val_offset:103803*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103803*0 + 3*41*FLEN/8, x4, x1, x2)

inst_34602:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x81800003; valaddr_reg:x3; val_offset:103806*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103806*0 + 3*42*FLEN/8, x4, x1, x2)

inst_34603:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x81800007; valaddr_reg:x3; val_offset:103809*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103809*0 + 3*43*FLEN/8, x4, x1, x2)

inst_34604:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x8180000f; valaddr_reg:x3; val_offset:103812*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103812*0 + 3*44*FLEN/8, x4, x1, x2)

inst_34605:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x8180001f; valaddr_reg:x3; val_offset:103815*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103815*0 + 3*45*FLEN/8, x4, x1, x2)

inst_34606:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x8180003f; valaddr_reg:x3; val_offset:103818*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103818*0 + 3*46*FLEN/8, x4, x1, x2)

inst_34607:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x8180007f; valaddr_reg:x3; val_offset:103821*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103821*0 + 3*47*FLEN/8, x4, x1, x2)

inst_34608:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x818000ff; valaddr_reg:x3; val_offset:103824*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103824*0 + 3*48*FLEN/8, x4, x1, x2)

inst_34609:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x818001ff; valaddr_reg:x3; val_offset:103827*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103827*0 + 3*49*FLEN/8, x4, x1, x2)

inst_34610:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x818003ff; valaddr_reg:x3; val_offset:103830*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103830*0 + 3*50*FLEN/8, x4, x1, x2)

inst_34611:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x818007ff; valaddr_reg:x3; val_offset:103833*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103833*0 + 3*51*FLEN/8, x4, x1, x2)

inst_34612:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x81800fff; valaddr_reg:x3; val_offset:103836*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103836*0 + 3*52*FLEN/8, x4, x1, x2)

inst_34613:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x81801fff; valaddr_reg:x3; val_offset:103839*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103839*0 + 3*53*FLEN/8, x4, x1, x2)

inst_34614:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x81803fff; valaddr_reg:x3; val_offset:103842*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103842*0 + 3*54*FLEN/8, x4, x1, x2)

inst_34615:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x81807fff; valaddr_reg:x3; val_offset:103845*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103845*0 + 3*55*FLEN/8, x4, x1, x2)

inst_34616:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x8180ffff; valaddr_reg:x3; val_offset:103848*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103848*0 + 3*56*FLEN/8, x4, x1, x2)

inst_34617:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x8181ffff; valaddr_reg:x3; val_offset:103851*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103851*0 + 3*57*FLEN/8, x4, x1, x2)

inst_34618:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x8183ffff; valaddr_reg:x3; val_offset:103854*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103854*0 + 3*58*FLEN/8, x4, x1, x2)

inst_34619:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x8187ffff; valaddr_reg:x3; val_offset:103857*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103857*0 + 3*59*FLEN/8, x4, x1, x2)

inst_34620:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x818fffff; valaddr_reg:x3; val_offset:103860*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103860*0 + 3*60*FLEN/8, x4, x1, x2)

inst_34621:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x819fffff; valaddr_reg:x3; val_offset:103863*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103863*0 + 3*61*FLEN/8, x4, x1, x2)

inst_34622:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x81bfffff; valaddr_reg:x3; val_offset:103866*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103866*0 + 3*62*FLEN/8, x4, x1, x2)

inst_34623:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x81c00000; valaddr_reg:x3; val_offset:103869*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103869*0 + 3*63*FLEN/8, x4, x1, x2)

inst_34624:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x81e00000; valaddr_reg:x3; val_offset:103872*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103872*0 + 3*64*FLEN/8, x4, x1, x2)

inst_34625:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x81f00000; valaddr_reg:x3; val_offset:103875*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103875*0 + 3*65*FLEN/8, x4, x1, x2)

inst_34626:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x81f80000; valaddr_reg:x3; val_offset:103878*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103878*0 + 3*66*FLEN/8, x4, x1, x2)

inst_34627:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x81fc0000; valaddr_reg:x3; val_offset:103881*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103881*0 + 3*67*FLEN/8, x4, x1, x2)

inst_34628:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x81fe0000; valaddr_reg:x3; val_offset:103884*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103884*0 + 3*68*FLEN/8, x4, x1, x2)

inst_34629:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x81ff0000; valaddr_reg:x3; val_offset:103887*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103887*0 + 3*69*FLEN/8, x4, x1, x2)

inst_34630:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x81ff8000; valaddr_reg:x3; val_offset:103890*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103890*0 + 3*70*FLEN/8, x4, x1, x2)

inst_34631:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x81ffc000; valaddr_reg:x3; val_offset:103893*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103893*0 + 3*71*FLEN/8, x4, x1, x2)

inst_34632:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x81ffe000; valaddr_reg:x3; val_offset:103896*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103896*0 + 3*72*FLEN/8, x4, x1, x2)

inst_34633:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x81fff000; valaddr_reg:x3; val_offset:103899*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103899*0 + 3*73*FLEN/8, x4, x1, x2)

inst_34634:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x81fff800; valaddr_reg:x3; val_offset:103902*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103902*0 + 3*74*FLEN/8, x4, x1, x2)

inst_34635:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x81fffc00; valaddr_reg:x3; val_offset:103905*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103905*0 + 3*75*FLEN/8, x4, x1, x2)

inst_34636:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x81fffe00; valaddr_reg:x3; val_offset:103908*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103908*0 + 3*76*FLEN/8, x4, x1, x2)

inst_34637:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x81ffff00; valaddr_reg:x3; val_offset:103911*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103911*0 + 3*77*FLEN/8, x4, x1, x2)

inst_34638:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x81ffff80; valaddr_reg:x3; val_offset:103914*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103914*0 + 3*78*FLEN/8, x4, x1, x2)

inst_34639:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x81ffffc0; valaddr_reg:x3; val_offset:103917*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103917*0 + 3*79*FLEN/8, x4, x1, x2)

inst_34640:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x81ffffe0; valaddr_reg:x3; val_offset:103920*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103920*0 + 3*80*FLEN/8, x4, x1, x2)

inst_34641:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x81fffff0; valaddr_reg:x3; val_offset:103923*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103923*0 + 3*81*FLEN/8, x4, x1, x2)

inst_34642:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x81fffff8; valaddr_reg:x3; val_offset:103926*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103926*0 + 3*82*FLEN/8, x4, x1, x2)

inst_34643:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x81fffffc; valaddr_reg:x3; val_offset:103929*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103929*0 + 3*83*FLEN/8, x4, x1, x2)

inst_34644:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x81fffffe; valaddr_reg:x3; val_offset:103932*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103932*0 + 3*84*FLEN/8, x4, x1, x2)

inst_34645:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30e643 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30e643; op2val:0x80000000;
op3val:0x81ffffff; valaddr_reg:x3; val_offset:103935*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103935*0 + 3*85*FLEN/8, x4, x1, x2)

inst_34646:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:103938*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103938*0 + 3*86*FLEN/8, x4, x1, x2)

inst_34647:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:103941*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103941*0 + 3*87*FLEN/8, x4, x1, x2)

inst_34648:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:103944*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103944*0 + 3*88*FLEN/8, x4, x1, x2)

inst_34649:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:103947*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103947*0 + 3*89*FLEN/8, x4, x1, x2)

inst_34650:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:103950*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103950*0 + 3*90*FLEN/8, x4, x1, x2)

inst_34651:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:103953*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103953*0 + 3*91*FLEN/8, x4, x1, x2)

inst_34652:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:103956*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103956*0 + 3*92*FLEN/8, x4, x1, x2)

inst_34653:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:103959*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103959*0 + 3*93*FLEN/8, x4, x1, x2)

inst_34654:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:103962*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103962*0 + 3*94*FLEN/8, x4, x1, x2)

inst_34655:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:103965*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103965*0 + 3*95*FLEN/8, x4, x1, x2)

inst_34656:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:103968*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103968*0 + 3*96*FLEN/8, x4, x1, x2)

inst_34657:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:103971*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103971*0 + 3*97*FLEN/8, x4, x1, x2)

inst_34658:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:103974*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103974*0 + 3*98*FLEN/8, x4, x1, x2)

inst_34659:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:103977*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103977*0 + 3*99*FLEN/8, x4, x1, x2)

inst_34660:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:103980*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103980*0 + 3*100*FLEN/8, x4, x1, x2)

inst_34661:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:103983*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103983*0 + 3*101*FLEN/8, x4, x1, x2)

inst_34662:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b000000; valaddr_reg:x3; val_offset:103986*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103986*0 + 3*102*FLEN/8, x4, x1, x2)

inst_34663:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b000001; valaddr_reg:x3; val_offset:103989*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103989*0 + 3*103*FLEN/8, x4, x1, x2)

inst_34664:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b000003; valaddr_reg:x3; val_offset:103992*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103992*0 + 3*104*FLEN/8, x4, x1, x2)

inst_34665:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b000007; valaddr_reg:x3; val_offset:103995*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103995*0 + 3*105*FLEN/8, x4, x1, x2)

inst_34666:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b00000f; valaddr_reg:x3; val_offset:103998*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 103998*0 + 3*106*FLEN/8, x4, x1, x2)

inst_34667:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b00001f; valaddr_reg:x3; val_offset:104001*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104001*0 + 3*107*FLEN/8, x4, x1, x2)

inst_34668:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b00003f; valaddr_reg:x3; val_offset:104004*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104004*0 + 3*108*FLEN/8, x4, x1, x2)

inst_34669:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b00007f; valaddr_reg:x3; val_offset:104007*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104007*0 + 3*109*FLEN/8, x4, x1, x2)

inst_34670:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b0000ff; valaddr_reg:x3; val_offset:104010*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104010*0 + 3*110*FLEN/8, x4, x1, x2)

inst_34671:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b0001ff; valaddr_reg:x3; val_offset:104013*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104013*0 + 3*111*FLEN/8, x4, x1, x2)

inst_34672:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b0003ff; valaddr_reg:x3; val_offset:104016*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104016*0 + 3*112*FLEN/8, x4, x1, x2)

inst_34673:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b0007ff; valaddr_reg:x3; val_offset:104019*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104019*0 + 3*113*FLEN/8, x4, x1, x2)

inst_34674:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b000fff; valaddr_reg:x3; val_offset:104022*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104022*0 + 3*114*FLEN/8, x4, x1, x2)

inst_34675:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b001fff; valaddr_reg:x3; val_offset:104025*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104025*0 + 3*115*FLEN/8, x4, x1, x2)

inst_34676:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b003fff; valaddr_reg:x3; val_offset:104028*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104028*0 + 3*116*FLEN/8, x4, x1, x2)

inst_34677:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b007fff; valaddr_reg:x3; val_offset:104031*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104031*0 + 3*117*FLEN/8, x4, x1, x2)

inst_34678:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b00ffff; valaddr_reg:x3; val_offset:104034*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104034*0 + 3*118*FLEN/8, x4, x1, x2)

inst_34679:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b01ffff; valaddr_reg:x3; val_offset:104037*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104037*0 + 3*119*FLEN/8, x4, x1, x2)

inst_34680:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b03ffff; valaddr_reg:x3; val_offset:104040*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104040*0 + 3*120*FLEN/8, x4, x1, x2)

inst_34681:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b07ffff; valaddr_reg:x3; val_offset:104043*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104043*0 + 3*121*FLEN/8, x4, x1, x2)

inst_34682:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b0fffff; valaddr_reg:x3; val_offset:104046*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104046*0 + 3*122*FLEN/8, x4, x1, x2)

inst_34683:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b1fffff; valaddr_reg:x3; val_offset:104049*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104049*0 + 3*123*FLEN/8, x4, x1, x2)

inst_34684:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b3fffff; valaddr_reg:x3; val_offset:104052*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104052*0 + 3*124*FLEN/8, x4, x1, x2)

inst_34685:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b400000; valaddr_reg:x3; val_offset:104055*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104055*0 + 3*125*FLEN/8, x4, x1, x2)

inst_34686:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b600000; valaddr_reg:x3; val_offset:104058*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104058*0 + 3*126*FLEN/8, x4, x1, x2)

inst_34687:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b700000; valaddr_reg:x3; val_offset:104061*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104061*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_34688:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b780000; valaddr_reg:x3; val_offset:104064*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104064*0 + 3*128*FLEN/8, x4, x1, x2)

inst_34689:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b7c0000; valaddr_reg:x3; val_offset:104067*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104067*0 + 3*129*FLEN/8, x4, x1, x2)

inst_34690:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b7e0000; valaddr_reg:x3; val_offset:104070*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104070*0 + 3*130*FLEN/8, x4, x1, x2)

inst_34691:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b7f0000; valaddr_reg:x3; val_offset:104073*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104073*0 + 3*131*FLEN/8, x4, x1, x2)

inst_34692:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b7f8000; valaddr_reg:x3; val_offset:104076*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104076*0 + 3*132*FLEN/8, x4, x1, x2)

inst_34693:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b7fc000; valaddr_reg:x3; val_offset:104079*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104079*0 + 3*133*FLEN/8, x4, x1, x2)

inst_34694:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b7fe000; valaddr_reg:x3; val_offset:104082*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104082*0 + 3*134*FLEN/8, x4, x1, x2)

inst_34695:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b7ff000; valaddr_reg:x3; val_offset:104085*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104085*0 + 3*135*FLEN/8, x4, x1, x2)

inst_34696:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b7ff800; valaddr_reg:x3; val_offset:104088*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104088*0 + 3*136*FLEN/8, x4, x1, x2)

inst_34697:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b7ffc00; valaddr_reg:x3; val_offset:104091*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104091*0 + 3*137*FLEN/8, x4, x1, x2)

inst_34698:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b7ffe00; valaddr_reg:x3; val_offset:104094*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104094*0 + 3*138*FLEN/8, x4, x1, x2)

inst_34699:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b7fff00; valaddr_reg:x3; val_offset:104097*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104097*0 + 3*139*FLEN/8, x4, x1, x2)

inst_34700:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b7fff80; valaddr_reg:x3; val_offset:104100*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104100*0 + 3*140*FLEN/8, x4, x1, x2)

inst_34701:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b7fffc0; valaddr_reg:x3; val_offset:104103*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104103*0 + 3*141*FLEN/8, x4, x1, x2)

inst_34702:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b7fffe0; valaddr_reg:x3; val_offset:104106*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104106*0 + 3*142*FLEN/8, x4, x1, x2)

inst_34703:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b7ffff0; valaddr_reg:x3; val_offset:104109*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104109*0 + 3*143*FLEN/8, x4, x1, x2)

inst_34704:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b7ffff8; valaddr_reg:x3; val_offset:104112*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104112*0 + 3*144*FLEN/8, x4, x1, x2)

inst_34705:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b7ffffc; valaddr_reg:x3; val_offset:104115*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104115*0 + 3*145*FLEN/8, x4, x1, x2)

inst_34706:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b7ffffe; valaddr_reg:x3; val_offset:104118*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104118*0 + 3*146*FLEN/8, x4, x1, x2)

inst_34707:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x30f2a7 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x16 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f30f2a7; op2val:0x80000000;
op3val:0x8b7fffff; valaddr_reg:x3; val_offset:104121*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104121*0 + 3*147*FLEN/8, x4, x1, x2)

inst_34708:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:104124*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104124*0 + 3*148*FLEN/8, x4, x1, x2)

inst_34709:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:104127*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104127*0 + 3*149*FLEN/8, x4, x1, x2)

inst_34710:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:104130*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104130*0 + 3*150*FLEN/8, x4, x1, x2)

inst_34711:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:104133*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104133*0 + 3*151*FLEN/8, x4, x1, x2)

inst_34712:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:104136*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104136*0 + 3*152*FLEN/8, x4, x1, x2)

inst_34713:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:104139*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104139*0 + 3*153*FLEN/8, x4, x1, x2)

inst_34714:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:104142*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104142*0 + 3*154*FLEN/8, x4, x1, x2)

inst_34715:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:104145*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104145*0 + 3*155*FLEN/8, x4, x1, x2)

inst_34716:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:104148*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104148*0 + 3*156*FLEN/8, x4, x1, x2)

inst_34717:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:104151*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104151*0 + 3*157*FLEN/8, x4, x1, x2)

inst_34718:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:104154*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104154*0 + 3*158*FLEN/8, x4, x1, x2)

inst_34719:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:104157*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104157*0 + 3*159*FLEN/8, x4, x1, x2)

inst_34720:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:104160*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104160*0 + 3*160*FLEN/8, x4, x1, x2)

inst_34721:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:104163*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104163*0 + 3*161*FLEN/8, x4, x1, x2)

inst_34722:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:104166*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104166*0 + 3*162*FLEN/8, x4, x1, x2)

inst_34723:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:104169*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104169*0 + 3*163*FLEN/8, x4, x1, x2)

inst_34724:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd7800000; valaddr_reg:x3; val_offset:104172*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104172*0 + 3*164*FLEN/8, x4, x1, x2)

inst_34725:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd7800001; valaddr_reg:x3; val_offset:104175*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104175*0 + 3*165*FLEN/8, x4, x1, x2)

inst_34726:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd7800003; valaddr_reg:x3; val_offset:104178*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104178*0 + 3*166*FLEN/8, x4, x1, x2)

inst_34727:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd7800007; valaddr_reg:x3; val_offset:104181*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104181*0 + 3*167*FLEN/8, x4, x1, x2)

inst_34728:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd780000f; valaddr_reg:x3; val_offset:104184*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104184*0 + 3*168*FLEN/8, x4, x1, x2)

inst_34729:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd780001f; valaddr_reg:x3; val_offset:104187*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104187*0 + 3*169*FLEN/8, x4, x1, x2)

inst_34730:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd780003f; valaddr_reg:x3; val_offset:104190*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104190*0 + 3*170*FLEN/8, x4, x1, x2)

inst_34731:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd780007f; valaddr_reg:x3; val_offset:104193*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104193*0 + 3*171*FLEN/8, x4, x1, x2)

inst_34732:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd78000ff; valaddr_reg:x3; val_offset:104196*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104196*0 + 3*172*FLEN/8, x4, x1, x2)

inst_34733:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd78001ff; valaddr_reg:x3; val_offset:104199*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104199*0 + 3*173*FLEN/8, x4, x1, x2)

inst_34734:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd78003ff; valaddr_reg:x3; val_offset:104202*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104202*0 + 3*174*FLEN/8, x4, x1, x2)

inst_34735:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd78007ff; valaddr_reg:x3; val_offset:104205*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104205*0 + 3*175*FLEN/8, x4, x1, x2)

inst_34736:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd7800fff; valaddr_reg:x3; val_offset:104208*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104208*0 + 3*176*FLEN/8, x4, x1, x2)

inst_34737:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd7801fff; valaddr_reg:x3; val_offset:104211*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104211*0 + 3*177*FLEN/8, x4, x1, x2)

inst_34738:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd7803fff; valaddr_reg:x3; val_offset:104214*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104214*0 + 3*178*FLEN/8, x4, x1, x2)

inst_34739:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd7807fff; valaddr_reg:x3; val_offset:104217*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104217*0 + 3*179*FLEN/8, x4, x1, x2)

inst_34740:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd780ffff; valaddr_reg:x3; val_offset:104220*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104220*0 + 3*180*FLEN/8, x4, x1, x2)

inst_34741:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd781ffff; valaddr_reg:x3; val_offset:104223*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104223*0 + 3*181*FLEN/8, x4, x1, x2)

inst_34742:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd783ffff; valaddr_reg:x3; val_offset:104226*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104226*0 + 3*182*FLEN/8, x4, x1, x2)

inst_34743:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd787ffff; valaddr_reg:x3; val_offset:104229*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104229*0 + 3*183*FLEN/8, x4, x1, x2)

inst_34744:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd78fffff; valaddr_reg:x3; val_offset:104232*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104232*0 + 3*184*FLEN/8, x4, x1, x2)

inst_34745:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd79fffff; valaddr_reg:x3; val_offset:104235*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104235*0 + 3*185*FLEN/8, x4, x1, x2)

inst_34746:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd7bfffff; valaddr_reg:x3; val_offset:104238*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104238*0 + 3*186*FLEN/8, x4, x1, x2)

inst_34747:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd7c00000; valaddr_reg:x3; val_offset:104241*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104241*0 + 3*187*FLEN/8, x4, x1, x2)

inst_34748:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd7e00000; valaddr_reg:x3; val_offset:104244*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104244*0 + 3*188*FLEN/8, x4, x1, x2)

inst_34749:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd7f00000; valaddr_reg:x3; val_offset:104247*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104247*0 + 3*189*FLEN/8, x4, x1, x2)

inst_34750:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd7f80000; valaddr_reg:x3; val_offset:104250*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104250*0 + 3*190*FLEN/8, x4, x1, x2)

inst_34751:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd7fc0000; valaddr_reg:x3; val_offset:104253*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104253*0 + 3*191*FLEN/8, x4, x1, x2)

inst_34752:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd7fe0000; valaddr_reg:x3; val_offset:104256*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104256*0 + 3*192*FLEN/8, x4, x1, x2)

inst_34753:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd7ff0000; valaddr_reg:x3; val_offset:104259*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104259*0 + 3*193*FLEN/8, x4, x1, x2)

inst_34754:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd7ff8000; valaddr_reg:x3; val_offset:104262*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104262*0 + 3*194*FLEN/8, x4, x1, x2)

inst_34755:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd7ffc000; valaddr_reg:x3; val_offset:104265*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104265*0 + 3*195*FLEN/8, x4, x1, x2)

inst_34756:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd7ffe000; valaddr_reg:x3; val_offset:104268*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104268*0 + 3*196*FLEN/8, x4, x1, x2)

inst_34757:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd7fff000; valaddr_reg:x3; val_offset:104271*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104271*0 + 3*197*FLEN/8, x4, x1, x2)

inst_34758:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd7fff800; valaddr_reg:x3; val_offset:104274*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104274*0 + 3*198*FLEN/8, x4, x1, x2)

inst_34759:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd7fffc00; valaddr_reg:x3; val_offset:104277*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104277*0 + 3*199*FLEN/8, x4, x1, x2)

inst_34760:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd7fffe00; valaddr_reg:x3; val_offset:104280*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104280*0 + 3*200*FLEN/8, x4, x1, x2)

inst_34761:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd7ffff00; valaddr_reg:x3; val_offset:104283*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104283*0 + 3*201*FLEN/8, x4, x1, x2)

inst_34762:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd7ffff80; valaddr_reg:x3; val_offset:104286*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104286*0 + 3*202*FLEN/8, x4, x1, x2)

inst_34763:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd7ffffc0; valaddr_reg:x3; val_offset:104289*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104289*0 + 3*203*FLEN/8, x4, x1, x2)

inst_34764:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd7ffffe0; valaddr_reg:x3; val_offset:104292*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104292*0 + 3*204*FLEN/8, x4, x1, x2)

inst_34765:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd7fffff0; valaddr_reg:x3; val_offset:104295*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104295*0 + 3*205*FLEN/8, x4, x1, x2)

inst_34766:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd7fffff8; valaddr_reg:x3; val_offset:104298*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104298*0 + 3*206*FLEN/8, x4, x1, x2)

inst_34767:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd7fffffc; valaddr_reg:x3; val_offset:104301*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104301*0 + 3*207*FLEN/8, x4, x1, x2)

inst_34768:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd7fffffe; valaddr_reg:x3; val_offset:104304*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104304*0 + 3*208*FLEN/8, x4, x1, x2)

inst_34769:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x310f69 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0xaf and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f310f69; op2val:0x80000000;
op3val:0xd7ffffff; valaddr_reg:x3; val_offset:104307*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104307*0 + 3*209*FLEN/8, x4, x1, x2)

inst_34770:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:104310*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104310*0 + 3*210*FLEN/8, x4, x1, x2)

inst_34771:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:104313*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104313*0 + 3*211*FLEN/8, x4, x1, x2)

inst_34772:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:104316*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104316*0 + 3*212*FLEN/8, x4, x1, x2)

inst_34773:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:104319*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104319*0 + 3*213*FLEN/8, x4, x1, x2)

inst_34774:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:104322*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104322*0 + 3*214*FLEN/8, x4, x1, x2)

inst_34775:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:104325*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104325*0 + 3*215*FLEN/8, x4, x1, x2)

inst_34776:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:104328*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104328*0 + 3*216*FLEN/8, x4, x1, x2)

inst_34777:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:104331*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104331*0 + 3*217*FLEN/8, x4, x1, x2)

inst_34778:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:104334*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104334*0 + 3*218*FLEN/8, x4, x1, x2)

inst_34779:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:104337*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104337*0 + 3*219*FLEN/8, x4, x1, x2)

inst_34780:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:104340*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104340*0 + 3*220*FLEN/8, x4, x1, x2)

inst_34781:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:104343*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104343*0 + 3*221*FLEN/8, x4, x1, x2)

inst_34782:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:104346*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104346*0 + 3*222*FLEN/8, x4, x1, x2)

inst_34783:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:104349*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104349*0 + 3*223*FLEN/8, x4, x1, x2)

inst_34784:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:104352*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104352*0 + 3*224*FLEN/8, x4, x1, x2)

inst_34785:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:104355*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104355*0 + 3*225*FLEN/8, x4, x1, x2)

inst_34786:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xe800000; valaddr_reg:x3; val_offset:104358*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104358*0 + 3*226*FLEN/8, x4, x1, x2)

inst_34787:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xe800001; valaddr_reg:x3; val_offset:104361*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104361*0 + 3*227*FLEN/8, x4, x1, x2)

inst_34788:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xe800003; valaddr_reg:x3; val_offset:104364*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104364*0 + 3*228*FLEN/8, x4, x1, x2)

inst_34789:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xe800007; valaddr_reg:x3; val_offset:104367*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104367*0 + 3*229*FLEN/8, x4, x1, x2)

inst_34790:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xe80000f; valaddr_reg:x3; val_offset:104370*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104370*0 + 3*230*FLEN/8, x4, x1, x2)

inst_34791:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xe80001f; valaddr_reg:x3; val_offset:104373*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104373*0 + 3*231*FLEN/8, x4, x1, x2)

inst_34792:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xe80003f; valaddr_reg:x3; val_offset:104376*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104376*0 + 3*232*FLEN/8, x4, x1, x2)

inst_34793:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xe80007f; valaddr_reg:x3; val_offset:104379*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104379*0 + 3*233*FLEN/8, x4, x1, x2)

inst_34794:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xe8000ff; valaddr_reg:x3; val_offset:104382*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104382*0 + 3*234*FLEN/8, x4, x1, x2)

inst_34795:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xe8001ff; valaddr_reg:x3; val_offset:104385*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104385*0 + 3*235*FLEN/8, x4, x1, x2)

inst_34796:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xe8003ff; valaddr_reg:x3; val_offset:104388*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104388*0 + 3*236*FLEN/8, x4, x1, x2)

inst_34797:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xe8007ff; valaddr_reg:x3; val_offset:104391*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104391*0 + 3*237*FLEN/8, x4, x1, x2)

inst_34798:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xe800fff; valaddr_reg:x3; val_offset:104394*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104394*0 + 3*238*FLEN/8, x4, x1, x2)

inst_34799:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xe801fff; valaddr_reg:x3; val_offset:104397*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104397*0 + 3*239*FLEN/8, x4, x1, x2)

inst_34800:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xe803fff; valaddr_reg:x3; val_offset:104400*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104400*0 + 3*240*FLEN/8, x4, x1, x2)

inst_34801:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xe807fff; valaddr_reg:x3; val_offset:104403*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104403*0 + 3*241*FLEN/8, x4, x1, x2)

inst_34802:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xe80ffff; valaddr_reg:x3; val_offset:104406*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104406*0 + 3*242*FLEN/8, x4, x1, x2)

inst_34803:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xe81ffff; valaddr_reg:x3; val_offset:104409*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104409*0 + 3*243*FLEN/8, x4, x1, x2)

inst_34804:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xe83ffff; valaddr_reg:x3; val_offset:104412*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104412*0 + 3*244*FLEN/8, x4, x1, x2)

inst_34805:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xe87ffff; valaddr_reg:x3; val_offset:104415*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104415*0 + 3*245*FLEN/8, x4, x1, x2)

inst_34806:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xe8fffff; valaddr_reg:x3; val_offset:104418*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104418*0 + 3*246*FLEN/8, x4, x1, x2)

inst_34807:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xe9fffff; valaddr_reg:x3; val_offset:104421*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104421*0 + 3*247*FLEN/8, x4, x1, x2)

inst_34808:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xebfffff; valaddr_reg:x3; val_offset:104424*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104424*0 + 3*248*FLEN/8, x4, x1, x2)

inst_34809:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xec00000; valaddr_reg:x3; val_offset:104427*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104427*0 + 3*249*FLEN/8, x4, x1, x2)

inst_34810:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xee00000; valaddr_reg:x3; val_offset:104430*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104430*0 + 3*250*FLEN/8, x4, x1, x2)

inst_34811:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xef00000; valaddr_reg:x3; val_offset:104433*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104433*0 + 3*251*FLEN/8, x4, x1, x2)

inst_34812:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xef80000; valaddr_reg:x3; val_offset:104436*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104436*0 + 3*252*FLEN/8, x4, x1, x2)

inst_34813:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xefc0000; valaddr_reg:x3; val_offset:104439*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104439*0 + 3*253*FLEN/8, x4, x1, x2)

inst_34814:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xefe0000; valaddr_reg:x3; val_offset:104442*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104442*0 + 3*254*FLEN/8, x4, x1, x2)

inst_34815:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xeff0000; valaddr_reg:x3; val_offset:104445*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104445*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_34816:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xeff8000; valaddr_reg:x3; val_offset:104448*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104448*0 + 3*256*FLEN/8, x4, x1, x2)

inst_34817:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xeffc000; valaddr_reg:x3; val_offset:104451*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104451*0 + 3*257*FLEN/8, x4, x1, x2)

inst_34818:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xeffe000; valaddr_reg:x3; val_offset:104454*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104454*0 + 3*258*FLEN/8, x4, x1, x2)

inst_34819:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xefff000; valaddr_reg:x3; val_offset:104457*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104457*0 + 3*259*FLEN/8, x4, x1, x2)

inst_34820:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xefff800; valaddr_reg:x3; val_offset:104460*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104460*0 + 3*260*FLEN/8, x4, x1, x2)

inst_34821:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xefffc00; valaddr_reg:x3; val_offset:104463*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104463*0 + 3*261*FLEN/8, x4, x1, x2)

inst_34822:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xefffe00; valaddr_reg:x3; val_offset:104466*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104466*0 + 3*262*FLEN/8, x4, x1, x2)

inst_34823:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xeffff00; valaddr_reg:x3; val_offset:104469*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104469*0 + 3*263*FLEN/8, x4, x1, x2)

inst_34824:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xeffff80; valaddr_reg:x3; val_offset:104472*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104472*0 + 3*264*FLEN/8, x4, x1, x2)

inst_34825:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xeffffc0; valaddr_reg:x3; val_offset:104475*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104475*0 + 3*265*FLEN/8, x4, x1, x2)

inst_34826:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xeffffe0; valaddr_reg:x3; val_offset:104478*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104478*0 + 3*266*FLEN/8, x4, x1, x2)

inst_34827:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xefffff0; valaddr_reg:x3; val_offset:104481*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104481*0 + 3*267*FLEN/8, x4, x1, x2)

inst_34828:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xefffff8; valaddr_reg:x3; val_offset:104484*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104484*0 + 3*268*FLEN/8, x4, x1, x2)

inst_34829:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xefffffc; valaddr_reg:x3; val_offset:104487*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104487*0 + 3*269*FLEN/8, x4, x1, x2)

inst_34830:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xefffffe; valaddr_reg:x3; val_offset:104490*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104490*0 + 3*270*FLEN/8, x4, x1, x2)

inst_34831:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x317793 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f317793; op2val:0x0;
op3val:0xeffffff; valaddr_reg:x3; val_offset:104493*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104493*0 + 3*271*FLEN/8, x4, x1, x2)

inst_34832:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xbf800001; valaddr_reg:x3; val_offset:104496*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104496*0 + 3*272*FLEN/8, x4, x1, x2)

inst_34833:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xbf800003; valaddr_reg:x3; val_offset:104499*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104499*0 + 3*273*FLEN/8, x4, x1, x2)

inst_34834:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xbf800007; valaddr_reg:x3; val_offset:104502*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104502*0 + 3*274*FLEN/8, x4, x1, x2)

inst_34835:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xbf999999; valaddr_reg:x3; val_offset:104505*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104505*0 + 3*275*FLEN/8, x4, x1, x2)

inst_34836:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:104508*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104508*0 + 3*276*FLEN/8, x4, x1, x2)

inst_34837:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:104511*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104511*0 + 3*277*FLEN/8, x4, x1, x2)

inst_34838:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:104514*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104514*0 + 3*278*FLEN/8, x4, x1, x2)

inst_34839:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:104517*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104517*0 + 3*279*FLEN/8, x4, x1, x2)

inst_34840:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:104520*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104520*0 + 3*280*FLEN/8, x4, x1, x2)

inst_34841:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:104523*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104523*0 + 3*281*FLEN/8, x4, x1, x2)

inst_34842:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:104526*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104526*0 + 3*282*FLEN/8, x4, x1, x2)

inst_34843:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:104529*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104529*0 + 3*283*FLEN/8, x4, x1, x2)

inst_34844:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:104532*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104532*0 + 3*284*FLEN/8, x4, x1, x2)

inst_34845:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:104535*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104535*0 + 3*285*FLEN/8, x4, x1, x2)

inst_34846:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:104538*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104538*0 + 3*286*FLEN/8, x4, x1, x2)

inst_34847:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:104541*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104541*0 + 3*287*FLEN/8, x4, x1, x2)

inst_34848:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1800000; valaddr_reg:x3; val_offset:104544*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104544*0 + 3*288*FLEN/8, x4, x1, x2)

inst_34849:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1800001; valaddr_reg:x3; val_offset:104547*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104547*0 + 3*289*FLEN/8, x4, x1, x2)

inst_34850:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1800003; valaddr_reg:x3; val_offset:104550*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104550*0 + 3*290*FLEN/8, x4, x1, x2)

inst_34851:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1800007; valaddr_reg:x3; val_offset:104553*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104553*0 + 3*291*FLEN/8, x4, x1, x2)

inst_34852:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc180000f; valaddr_reg:x3; val_offset:104556*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104556*0 + 3*292*FLEN/8, x4, x1, x2)

inst_34853:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc180001f; valaddr_reg:x3; val_offset:104559*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104559*0 + 3*293*FLEN/8, x4, x1, x2)

inst_34854:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc180003f; valaddr_reg:x3; val_offset:104562*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104562*0 + 3*294*FLEN/8, x4, x1, x2)

inst_34855:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc180007f; valaddr_reg:x3; val_offset:104565*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104565*0 + 3*295*FLEN/8, x4, x1, x2)

inst_34856:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc18000ff; valaddr_reg:x3; val_offset:104568*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104568*0 + 3*296*FLEN/8, x4, x1, x2)

inst_34857:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc18001ff; valaddr_reg:x3; val_offset:104571*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104571*0 + 3*297*FLEN/8, x4, x1, x2)

inst_34858:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc18003ff; valaddr_reg:x3; val_offset:104574*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104574*0 + 3*298*FLEN/8, x4, x1, x2)

inst_34859:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc18007ff; valaddr_reg:x3; val_offset:104577*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104577*0 + 3*299*FLEN/8, x4, x1, x2)

inst_34860:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1800fff; valaddr_reg:x3; val_offset:104580*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104580*0 + 3*300*FLEN/8, x4, x1, x2)

inst_34861:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1801fff; valaddr_reg:x3; val_offset:104583*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104583*0 + 3*301*FLEN/8, x4, x1, x2)

inst_34862:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1803fff; valaddr_reg:x3; val_offset:104586*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104586*0 + 3*302*FLEN/8, x4, x1, x2)

inst_34863:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1807fff; valaddr_reg:x3; val_offset:104589*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104589*0 + 3*303*FLEN/8, x4, x1, x2)

inst_34864:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc180ffff; valaddr_reg:x3; val_offset:104592*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104592*0 + 3*304*FLEN/8, x4, x1, x2)

inst_34865:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc181ffff; valaddr_reg:x3; val_offset:104595*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104595*0 + 3*305*FLEN/8, x4, x1, x2)

inst_34866:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc183ffff; valaddr_reg:x3; val_offset:104598*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104598*0 + 3*306*FLEN/8, x4, x1, x2)

inst_34867:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc187ffff; valaddr_reg:x3; val_offset:104601*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104601*0 + 3*307*FLEN/8, x4, x1, x2)

inst_34868:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc18fffff; valaddr_reg:x3; val_offset:104604*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104604*0 + 3*308*FLEN/8, x4, x1, x2)

inst_34869:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc19fffff; valaddr_reg:x3; val_offset:104607*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104607*0 + 3*309*FLEN/8, x4, x1, x2)

inst_34870:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1bfffff; valaddr_reg:x3; val_offset:104610*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104610*0 + 3*310*FLEN/8, x4, x1, x2)

inst_34871:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1c00000; valaddr_reg:x3; val_offset:104613*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104613*0 + 3*311*FLEN/8, x4, x1, x2)

inst_34872:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1e00000; valaddr_reg:x3; val_offset:104616*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104616*0 + 3*312*FLEN/8, x4, x1, x2)

inst_34873:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1f00000; valaddr_reg:x3; val_offset:104619*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104619*0 + 3*313*FLEN/8, x4, x1, x2)

inst_34874:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1f80000; valaddr_reg:x3; val_offset:104622*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104622*0 + 3*314*FLEN/8, x4, x1, x2)

inst_34875:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1fc0000; valaddr_reg:x3; val_offset:104625*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104625*0 + 3*315*FLEN/8, x4, x1, x2)

inst_34876:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1fe0000; valaddr_reg:x3; val_offset:104628*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104628*0 + 3*316*FLEN/8, x4, x1, x2)

inst_34877:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1ff0000; valaddr_reg:x3; val_offset:104631*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104631*0 + 3*317*FLEN/8, x4, x1, x2)

inst_34878:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1ff8000; valaddr_reg:x3; val_offset:104634*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104634*0 + 3*318*FLEN/8, x4, x1, x2)

inst_34879:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1ffc000; valaddr_reg:x3; val_offset:104637*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104637*0 + 3*319*FLEN/8, x4, x1, x2)

inst_34880:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1ffe000; valaddr_reg:x3; val_offset:104640*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104640*0 + 3*320*FLEN/8, x4, x1, x2)

inst_34881:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1fff000; valaddr_reg:x3; val_offset:104643*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104643*0 + 3*321*FLEN/8, x4, x1, x2)

inst_34882:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1fff800; valaddr_reg:x3; val_offset:104646*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104646*0 + 3*322*FLEN/8, x4, x1, x2)

inst_34883:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1fffc00; valaddr_reg:x3; val_offset:104649*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104649*0 + 3*323*FLEN/8, x4, x1, x2)

inst_34884:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1fffe00; valaddr_reg:x3; val_offset:104652*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104652*0 + 3*324*FLEN/8, x4, x1, x2)

inst_34885:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1ffff00; valaddr_reg:x3; val_offset:104655*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104655*0 + 3*325*FLEN/8, x4, x1, x2)

inst_34886:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1ffff80; valaddr_reg:x3; val_offset:104658*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104658*0 + 3*326*FLEN/8, x4, x1, x2)

inst_34887:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1ffffc0; valaddr_reg:x3; val_offset:104661*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104661*0 + 3*327*FLEN/8, x4, x1, x2)

inst_34888:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1ffffe0; valaddr_reg:x3; val_offset:104664*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104664*0 + 3*328*FLEN/8, x4, x1, x2)

inst_34889:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1fffff0; valaddr_reg:x3; val_offset:104667*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104667*0 + 3*329*FLEN/8, x4, x1, x2)

inst_34890:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1fffff8; valaddr_reg:x3; val_offset:104670*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104670*0 + 3*330*FLEN/8, x4, x1, x2)

inst_34891:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1fffffc; valaddr_reg:x3; val_offset:104673*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104673*0 + 3*331*FLEN/8, x4, x1, x2)

inst_34892:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1fffffe; valaddr_reg:x3; val_offset:104676*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104676*0 + 3*332*FLEN/8, x4, x1, x2)

inst_34893:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31d2e1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x2e116e and fs3 == 1 and fe3 == 0x83 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31d2e1; op2val:0x802e116e;
op3val:0xc1ffffff; valaddr_reg:x3; val_offset:104679*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104679*0 + 3*333*FLEN/8, x4, x1, x2)

inst_34894:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:104682*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104682*0 + 3*334*FLEN/8, x4, x1, x2)

inst_34895:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:104685*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104685*0 + 3*335*FLEN/8, x4, x1, x2)

inst_34896:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:104688*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104688*0 + 3*336*FLEN/8, x4, x1, x2)

inst_34897:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:104691*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104691*0 + 3*337*FLEN/8, x4, x1, x2)

inst_34898:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:104694*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104694*0 + 3*338*FLEN/8, x4, x1, x2)

inst_34899:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:104697*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104697*0 + 3*339*FLEN/8, x4, x1, x2)

inst_34900:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:104700*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104700*0 + 3*340*FLEN/8, x4, x1, x2)

inst_34901:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:104703*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104703*0 + 3*341*FLEN/8, x4, x1, x2)

inst_34902:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:104706*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104706*0 + 3*342*FLEN/8, x4, x1, x2)

inst_34903:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:104709*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104709*0 + 3*343*FLEN/8, x4, x1, x2)

inst_34904:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:104712*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104712*0 + 3*344*FLEN/8, x4, x1, x2)

inst_34905:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:104715*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104715*0 + 3*345*FLEN/8, x4, x1, x2)

inst_34906:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:104718*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104718*0 + 3*346*FLEN/8, x4, x1, x2)

inst_34907:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:104721*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104721*0 + 3*347*FLEN/8, x4, x1, x2)

inst_34908:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:104724*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104724*0 + 3*348*FLEN/8, x4, x1, x2)

inst_34909:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:104727*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104727*0 + 3*349*FLEN/8, x4, x1, x2)

inst_34910:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x10000000; valaddr_reg:x3; val_offset:104730*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104730*0 + 3*350*FLEN/8, x4, x1, x2)

inst_34911:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x10000001; valaddr_reg:x3; val_offset:104733*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104733*0 + 3*351*FLEN/8, x4, x1, x2)

inst_34912:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x10000003; valaddr_reg:x3; val_offset:104736*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104736*0 + 3*352*FLEN/8, x4, x1, x2)

inst_34913:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x10000007; valaddr_reg:x3; val_offset:104739*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104739*0 + 3*353*FLEN/8, x4, x1, x2)

inst_34914:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x1000000f; valaddr_reg:x3; val_offset:104742*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104742*0 + 3*354*FLEN/8, x4, x1, x2)

inst_34915:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x1000001f; valaddr_reg:x3; val_offset:104745*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104745*0 + 3*355*FLEN/8, x4, x1, x2)

inst_34916:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x1000003f; valaddr_reg:x3; val_offset:104748*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104748*0 + 3*356*FLEN/8, x4, x1, x2)

inst_34917:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x1000007f; valaddr_reg:x3; val_offset:104751*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104751*0 + 3*357*FLEN/8, x4, x1, x2)

inst_34918:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x100000ff; valaddr_reg:x3; val_offset:104754*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104754*0 + 3*358*FLEN/8, x4, x1, x2)

inst_34919:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x100001ff; valaddr_reg:x3; val_offset:104757*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104757*0 + 3*359*FLEN/8, x4, x1, x2)

inst_34920:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x100003ff; valaddr_reg:x3; val_offset:104760*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104760*0 + 3*360*FLEN/8, x4, x1, x2)

inst_34921:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x100007ff; valaddr_reg:x3; val_offset:104763*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104763*0 + 3*361*FLEN/8, x4, x1, x2)

inst_34922:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x10000fff; valaddr_reg:x3; val_offset:104766*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104766*0 + 3*362*FLEN/8, x4, x1, x2)

inst_34923:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x10001fff; valaddr_reg:x3; val_offset:104769*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104769*0 + 3*363*FLEN/8, x4, x1, x2)

inst_34924:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x10003fff; valaddr_reg:x3; val_offset:104772*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104772*0 + 3*364*FLEN/8, x4, x1, x2)

inst_34925:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x10007fff; valaddr_reg:x3; val_offset:104775*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104775*0 + 3*365*FLEN/8, x4, x1, x2)

inst_34926:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x1000ffff; valaddr_reg:x3; val_offset:104778*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104778*0 + 3*366*FLEN/8, x4, x1, x2)

inst_34927:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x1001ffff; valaddr_reg:x3; val_offset:104781*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104781*0 + 3*367*FLEN/8, x4, x1, x2)

inst_34928:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x1003ffff; valaddr_reg:x3; val_offset:104784*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104784*0 + 3*368*FLEN/8, x4, x1, x2)

inst_34929:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x1007ffff; valaddr_reg:x3; val_offset:104787*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104787*0 + 3*369*FLEN/8, x4, x1, x2)

inst_34930:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x100fffff; valaddr_reg:x3; val_offset:104790*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104790*0 + 3*370*FLEN/8, x4, x1, x2)

inst_34931:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x101fffff; valaddr_reg:x3; val_offset:104793*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104793*0 + 3*371*FLEN/8, x4, x1, x2)

inst_34932:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x103fffff; valaddr_reg:x3; val_offset:104796*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104796*0 + 3*372*FLEN/8, x4, x1, x2)

inst_34933:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x10400000; valaddr_reg:x3; val_offset:104799*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104799*0 + 3*373*FLEN/8, x4, x1, x2)

inst_34934:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x10600000; valaddr_reg:x3; val_offset:104802*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104802*0 + 3*374*FLEN/8, x4, x1, x2)

inst_34935:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x10700000; valaddr_reg:x3; val_offset:104805*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104805*0 + 3*375*FLEN/8, x4, x1, x2)

inst_34936:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x10780000; valaddr_reg:x3; val_offset:104808*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104808*0 + 3*376*FLEN/8, x4, x1, x2)

inst_34937:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x107c0000; valaddr_reg:x3; val_offset:104811*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104811*0 + 3*377*FLEN/8, x4, x1, x2)

inst_34938:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x107e0000; valaddr_reg:x3; val_offset:104814*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104814*0 + 3*378*FLEN/8, x4, x1, x2)

inst_34939:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x107f0000; valaddr_reg:x3; val_offset:104817*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104817*0 + 3*379*FLEN/8, x4, x1, x2)

inst_34940:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x107f8000; valaddr_reg:x3; val_offset:104820*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104820*0 + 3*380*FLEN/8, x4, x1, x2)

inst_34941:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x107fc000; valaddr_reg:x3; val_offset:104823*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104823*0 + 3*381*FLEN/8, x4, x1, x2)

inst_34942:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x107fe000; valaddr_reg:x3; val_offset:104826*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104826*0 + 3*382*FLEN/8, x4, x1, x2)

inst_34943:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x107ff000; valaddr_reg:x3; val_offset:104829*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104829*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_34944:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x107ff800; valaddr_reg:x3; val_offset:104832*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104832*0 + 3*384*FLEN/8, x4, x1, x2)

inst_34945:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x107ffc00; valaddr_reg:x3; val_offset:104835*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104835*0 + 3*385*FLEN/8, x4, x1, x2)

inst_34946:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x107ffe00; valaddr_reg:x3; val_offset:104838*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104838*0 + 3*386*FLEN/8, x4, x1, x2)

inst_34947:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x107fff00; valaddr_reg:x3; val_offset:104841*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104841*0 + 3*387*FLEN/8, x4, x1, x2)

inst_34948:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x107fff80; valaddr_reg:x3; val_offset:104844*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104844*0 + 3*388*FLEN/8, x4, x1, x2)

inst_34949:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x107fffc0; valaddr_reg:x3; val_offset:104847*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104847*0 + 3*389*FLEN/8, x4, x1, x2)

inst_34950:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x107fffe0; valaddr_reg:x3; val_offset:104850*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104850*0 + 3*390*FLEN/8, x4, x1, x2)

inst_34951:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x107ffff0; valaddr_reg:x3; val_offset:104853*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104853*0 + 3*391*FLEN/8, x4, x1, x2)

inst_34952:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x107ffff8; valaddr_reg:x3; val_offset:104856*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104856*0 + 3*392*FLEN/8, x4, x1, x2)

inst_34953:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x107ffffc; valaddr_reg:x3; val_offset:104859*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104859*0 + 3*393*FLEN/8, x4, x1, x2)

inst_34954:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x107ffffe; valaddr_reg:x3; val_offset:104862*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104862*0 + 3*394*FLEN/8, x4, x1, x2)

inst_34955:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x31e3a6 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x20 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f31e3a6; op2val:0x0;
op3val:0x107fffff; valaddr_reg:x3; val_offset:104865*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104865*0 + 3*395*FLEN/8, x4, x1, x2)

inst_34956:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf5000000; valaddr_reg:x3; val_offset:104868*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104868*0 + 3*396*FLEN/8, x4, x1, x2)

inst_34957:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf5000001; valaddr_reg:x3; val_offset:104871*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104871*0 + 3*397*FLEN/8, x4, x1, x2)

inst_34958:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf5000003; valaddr_reg:x3; val_offset:104874*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104874*0 + 3*398*FLEN/8, x4, x1, x2)

inst_34959:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf5000007; valaddr_reg:x3; val_offset:104877*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104877*0 + 3*399*FLEN/8, x4, x1, x2)

inst_34960:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf500000f; valaddr_reg:x3; val_offset:104880*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104880*0 + 3*400*FLEN/8, x4, x1, x2)

inst_34961:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf500001f; valaddr_reg:x3; val_offset:104883*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104883*0 + 3*401*FLEN/8, x4, x1, x2)

inst_34962:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf500003f; valaddr_reg:x3; val_offset:104886*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104886*0 + 3*402*FLEN/8, x4, x1, x2)

inst_34963:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf500007f; valaddr_reg:x3; val_offset:104889*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104889*0 + 3*403*FLEN/8, x4, x1, x2)

inst_34964:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf50000ff; valaddr_reg:x3; val_offset:104892*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104892*0 + 3*404*FLEN/8, x4, x1, x2)

inst_34965:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf50001ff; valaddr_reg:x3; val_offset:104895*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104895*0 + 3*405*FLEN/8, x4, x1, x2)

inst_34966:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf50003ff; valaddr_reg:x3; val_offset:104898*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104898*0 + 3*406*FLEN/8, x4, x1, x2)

inst_34967:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf50007ff; valaddr_reg:x3; val_offset:104901*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104901*0 + 3*407*FLEN/8, x4, x1, x2)

inst_34968:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf5000fff; valaddr_reg:x3; val_offset:104904*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104904*0 + 3*408*FLEN/8, x4, x1, x2)

inst_34969:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf5001fff; valaddr_reg:x3; val_offset:104907*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104907*0 + 3*409*FLEN/8, x4, x1, x2)

inst_34970:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf5003fff; valaddr_reg:x3; val_offset:104910*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104910*0 + 3*410*FLEN/8, x4, x1, x2)

inst_34971:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf5007fff; valaddr_reg:x3; val_offset:104913*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104913*0 + 3*411*FLEN/8, x4, x1, x2)

inst_34972:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf500ffff; valaddr_reg:x3; val_offset:104916*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104916*0 + 3*412*FLEN/8, x4, x1, x2)

inst_34973:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf501ffff; valaddr_reg:x3; val_offset:104919*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104919*0 + 3*413*FLEN/8, x4, x1, x2)

inst_34974:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf503ffff; valaddr_reg:x3; val_offset:104922*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104922*0 + 3*414*FLEN/8, x4, x1, x2)

inst_34975:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf507ffff; valaddr_reg:x3; val_offset:104925*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104925*0 + 3*415*FLEN/8, x4, x1, x2)

inst_34976:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf50fffff; valaddr_reg:x3; val_offset:104928*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104928*0 + 3*416*FLEN/8, x4, x1, x2)

inst_34977:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf51fffff; valaddr_reg:x3; val_offset:104931*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104931*0 + 3*417*FLEN/8, x4, x1, x2)

inst_34978:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf53fffff; valaddr_reg:x3; val_offset:104934*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104934*0 + 3*418*FLEN/8, x4, x1, x2)

inst_34979:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf5400000; valaddr_reg:x3; val_offset:104937*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104937*0 + 3*419*FLEN/8, x4, x1, x2)

inst_34980:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf5600000; valaddr_reg:x3; val_offset:104940*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104940*0 + 3*420*FLEN/8, x4, x1, x2)

inst_34981:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf5700000; valaddr_reg:x3; val_offset:104943*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104943*0 + 3*421*FLEN/8, x4, x1, x2)

inst_34982:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf5780000; valaddr_reg:x3; val_offset:104946*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104946*0 + 3*422*FLEN/8, x4, x1, x2)

inst_34983:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf57c0000; valaddr_reg:x3; val_offset:104949*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104949*0 + 3*423*FLEN/8, x4, x1, x2)

inst_34984:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf57e0000; valaddr_reg:x3; val_offset:104952*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104952*0 + 3*424*FLEN/8, x4, x1, x2)

inst_34985:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf57f0000; valaddr_reg:x3; val_offset:104955*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104955*0 + 3*425*FLEN/8, x4, x1, x2)

inst_34986:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf57f8000; valaddr_reg:x3; val_offset:104958*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104958*0 + 3*426*FLEN/8, x4, x1, x2)

inst_34987:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf57fc000; valaddr_reg:x3; val_offset:104961*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104961*0 + 3*427*FLEN/8, x4, x1, x2)

inst_34988:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf57fe000; valaddr_reg:x3; val_offset:104964*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104964*0 + 3*428*FLEN/8, x4, x1, x2)

inst_34989:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf57ff000; valaddr_reg:x3; val_offset:104967*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104967*0 + 3*429*FLEN/8, x4, x1, x2)

inst_34990:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf57ff800; valaddr_reg:x3; val_offset:104970*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104970*0 + 3*430*FLEN/8, x4, x1, x2)

inst_34991:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf57ffc00; valaddr_reg:x3; val_offset:104973*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104973*0 + 3*431*FLEN/8, x4, x1, x2)

inst_34992:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf57ffe00; valaddr_reg:x3; val_offset:104976*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104976*0 + 3*432*FLEN/8, x4, x1, x2)

inst_34993:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf57fff00; valaddr_reg:x3; val_offset:104979*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104979*0 + 3*433*FLEN/8, x4, x1, x2)

inst_34994:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf57fff80; valaddr_reg:x3; val_offset:104982*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104982*0 + 3*434*FLEN/8, x4, x1, x2)

inst_34995:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf57fffc0; valaddr_reg:x3; val_offset:104985*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104985*0 + 3*435*FLEN/8, x4, x1, x2)

inst_34996:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf57fffe0; valaddr_reg:x3; val_offset:104988*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104988*0 + 3*436*FLEN/8, x4, x1, x2)

inst_34997:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf57ffff0; valaddr_reg:x3; val_offset:104991*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104991*0 + 3*437*FLEN/8, x4, x1, x2)

inst_34998:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf57ffff8; valaddr_reg:x3; val_offset:104994*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104994*0 + 3*438*FLEN/8, x4, x1, x2)

inst_34999:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf57ffffc; valaddr_reg:x3; val_offset:104997*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 104997*0 + 3*439*FLEN/8, x4, x1, x2)

inst_35000:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf57ffffe; valaddr_reg:x3; val_offset:105000*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105000*0 + 3*440*FLEN/8, x4, x1, x2)

inst_35001:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xea and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xf57fffff; valaddr_reg:x3; val_offset:105003*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105003*0 + 3*441*FLEN/8, x4, x1, x2)

inst_35002:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xff000001; valaddr_reg:x3; val_offset:105006*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105006*0 + 3*442*FLEN/8, x4, x1, x2)

inst_35003:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xff000003; valaddr_reg:x3; val_offset:105009*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105009*0 + 3*443*FLEN/8, x4, x1, x2)

inst_35004:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xff000007; valaddr_reg:x3; val_offset:105012*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105012*0 + 3*444*FLEN/8, x4, x1, x2)

inst_35005:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xff199999; valaddr_reg:x3; val_offset:105015*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105015*0 + 3*445*FLEN/8, x4, x1, x2)

inst_35006:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xff249249; valaddr_reg:x3; val_offset:105018*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105018*0 + 3*446*FLEN/8, x4, x1, x2)

inst_35007:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xff333333; valaddr_reg:x3; val_offset:105021*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105021*0 + 3*447*FLEN/8, x4, x1, x2)

inst_35008:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:105024*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105024*0 + 3*448*FLEN/8, x4, x1, x2)

inst_35009:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:105027*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105027*0 + 3*449*FLEN/8, x4, x1, x2)

inst_35010:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xff444444; valaddr_reg:x3; val_offset:105030*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105030*0 + 3*450*FLEN/8, x4, x1, x2)

inst_35011:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:105033*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105033*0 + 3*451*FLEN/8, x4, x1, x2)

inst_35012:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:105036*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105036*0 + 3*452*FLEN/8, x4, x1, x2)

inst_35013:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xff666666; valaddr_reg:x3; val_offset:105039*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105039*0 + 3*453*FLEN/8, x4, x1, x2)

inst_35014:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:105042*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105042*0 + 3*454*FLEN/8, x4, x1, x2)

inst_35015:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:105045*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105045*0 + 3*455*FLEN/8, x4, x1, x2)

inst_35016:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:105048*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105048*0 + 3*456*FLEN/8, x4, x1, x2)

inst_35017:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x322cf0 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x37e894 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f322cf0; op2val:0xbfb7e894;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:105051*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105051*0 + 3*457*FLEN/8, x4, x1, x2)

inst_35018:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:105054*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105054*0 + 3*458*FLEN/8, x4, x1, x2)

inst_35019:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:105057*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105057*0 + 3*459*FLEN/8, x4, x1, x2)

inst_35020:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:105060*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105060*0 + 3*460*FLEN/8, x4, x1, x2)

inst_35021:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:105063*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105063*0 + 3*461*FLEN/8, x4, x1, x2)

inst_35022:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:105066*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105066*0 + 3*462*FLEN/8, x4, x1, x2)

inst_35023:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:105069*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105069*0 + 3*463*FLEN/8, x4, x1, x2)

inst_35024:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:105072*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105072*0 + 3*464*FLEN/8, x4, x1, x2)

inst_35025:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:105075*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105075*0 + 3*465*FLEN/8, x4, x1, x2)

inst_35026:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:105078*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105078*0 + 3*466*FLEN/8, x4, x1, x2)

inst_35027:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:105081*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105081*0 + 3*467*FLEN/8, x4, x1, x2)

inst_35028:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:105084*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105084*0 + 3*468*FLEN/8, x4, x1, x2)

inst_35029:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:105087*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105087*0 + 3*469*FLEN/8, x4, x1, x2)

inst_35030:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:105090*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105090*0 + 3*470*FLEN/8, x4, x1, x2)

inst_35031:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:105093*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105093*0 + 3*471*FLEN/8, x4, x1, x2)

inst_35032:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:105096*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105096*0 + 3*472*FLEN/8, x4, x1, x2)

inst_35033:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:105099*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105099*0 + 3*473*FLEN/8, x4, x1, x2)

inst_35034:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84800000; valaddr_reg:x3; val_offset:105102*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105102*0 + 3*474*FLEN/8, x4, x1, x2)

inst_35035:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84800001; valaddr_reg:x3; val_offset:105105*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105105*0 + 3*475*FLEN/8, x4, x1, x2)

inst_35036:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84800003; valaddr_reg:x3; val_offset:105108*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105108*0 + 3*476*FLEN/8, x4, x1, x2)

inst_35037:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84800007; valaddr_reg:x3; val_offset:105111*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105111*0 + 3*477*FLEN/8, x4, x1, x2)

inst_35038:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x8480000f; valaddr_reg:x3; val_offset:105114*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105114*0 + 3*478*FLEN/8, x4, x1, x2)

inst_35039:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x8480001f; valaddr_reg:x3; val_offset:105117*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105117*0 + 3*479*FLEN/8, x4, x1, x2)

inst_35040:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x8480003f; valaddr_reg:x3; val_offset:105120*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105120*0 + 3*480*FLEN/8, x4, x1, x2)

inst_35041:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x8480007f; valaddr_reg:x3; val_offset:105123*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105123*0 + 3*481*FLEN/8, x4, x1, x2)

inst_35042:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x848000ff; valaddr_reg:x3; val_offset:105126*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105126*0 + 3*482*FLEN/8, x4, x1, x2)

inst_35043:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x848001ff; valaddr_reg:x3; val_offset:105129*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105129*0 + 3*483*FLEN/8, x4, x1, x2)

inst_35044:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x848003ff; valaddr_reg:x3; val_offset:105132*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105132*0 + 3*484*FLEN/8, x4, x1, x2)

inst_35045:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x848007ff; valaddr_reg:x3; val_offset:105135*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105135*0 + 3*485*FLEN/8, x4, x1, x2)

inst_35046:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84800fff; valaddr_reg:x3; val_offset:105138*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105138*0 + 3*486*FLEN/8, x4, x1, x2)

inst_35047:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84801fff; valaddr_reg:x3; val_offset:105141*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105141*0 + 3*487*FLEN/8, x4, x1, x2)

inst_35048:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84803fff; valaddr_reg:x3; val_offset:105144*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105144*0 + 3*488*FLEN/8, x4, x1, x2)

inst_35049:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84807fff; valaddr_reg:x3; val_offset:105147*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105147*0 + 3*489*FLEN/8, x4, x1, x2)

inst_35050:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x8480ffff; valaddr_reg:x3; val_offset:105150*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105150*0 + 3*490*FLEN/8, x4, x1, x2)

inst_35051:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x8481ffff; valaddr_reg:x3; val_offset:105153*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105153*0 + 3*491*FLEN/8, x4, x1, x2)

inst_35052:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x8483ffff; valaddr_reg:x3; val_offset:105156*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105156*0 + 3*492*FLEN/8, x4, x1, x2)

inst_35053:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x8487ffff; valaddr_reg:x3; val_offset:105159*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105159*0 + 3*493*FLEN/8, x4, x1, x2)

inst_35054:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x848fffff; valaddr_reg:x3; val_offset:105162*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105162*0 + 3*494*FLEN/8, x4, x1, x2)

inst_35055:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x849fffff; valaddr_reg:x3; val_offset:105165*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105165*0 + 3*495*FLEN/8, x4, x1, x2)

inst_35056:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84bfffff; valaddr_reg:x3; val_offset:105168*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105168*0 + 3*496*FLEN/8, x4, x1, x2)

inst_35057:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84c00000; valaddr_reg:x3; val_offset:105171*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105171*0 + 3*497*FLEN/8, x4, x1, x2)

inst_35058:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84e00000; valaddr_reg:x3; val_offset:105174*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105174*0 + 3*498*FLEN/8, x4, x1, x2)

inst_35059:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84f00000; valaddr_reg:x3; val_offset:105177*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105177*0 + 3*499*FLEN/8, x4, x1, x2)

inst_35060:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84f80000; valaddr_reg:x3; val_offset:105180*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105180*0 + 3*500*FLEN/8, x4, x1, x2)

inst_35061:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84fc0000; valaddr_reg:x3; val_offset:105183*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105183*0 + 3*501*FLEN/8, x4, x1, x2)

inst_35062:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84fe0000; valaddr_reg:x3; val_offset:105186*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105186*0 + 3*502*FLEN/8, x4, x1, x2)

inst_35063:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84ff0000; valaddr_reg:x3; val_offset:105189*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105189*0 + 3*503*FLEN/8, x4, x1, x2)

inst_35064:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84ff8000; valaddr_reg:x3; val_offset:105192*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105192*0 + 3*504*FLEN/8, x4, x1, x2)

inst_35065:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84ffc000; valaddr_reg:x3; val_offset:105195*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105195*0 + 3*505*FLEN/8, x4, x1, x2)

inst_35066:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84ffe000; valaddr_reg:x3; val_offset:105198*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105198*0 + 3*506*FLEN/8, x4, x1, x2)

inst_35067:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84fff000; valaddr_reg:x3; val_offset:105201*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105201*0 + 3*507*FLEN/8, x4, x1, x2)

inst_35068:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84fff800; valaddr_reg:x3; val_offset:105204*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105204*0 + 3*508*FLEN/8, x4, x1, x2)

inst_35069:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84fffc00; valaddr_reg:x3; val_offset:105207*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105207*0 + 3*509*FLEN/8, x4, x1, x2)

inst_35070:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84fffe00; valaddr_reg:x3; val_offset:105210*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105210*0 + 3*510*FLEN/8, x4, x1, x2)

inst_35071:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84ffff00; valaddr_reg:x3; val_offset:105213*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105213*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_35072:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84ffff80; valaddr_reg:x3; val_offset:105216*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105216*0 + 3*512*FLEN/8, x4, x1, x2)

inst_35073:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84ffffc0; valaddr_reg:x3; val_offset:105219*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105219*0 + 3*513*FLEN/8, x4, x1, x2)

inst_35074:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84ffffe0; valaddr_reg:x3; val_offset:105222*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105222*0 + 3*514*FLEN/8, x4, x1, x2)

inst_35075:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84fffff0; valaddr_reg:x3; val_offset:105225*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105225*0 + 3*515*FLEN/8, x4, x1, x2)

inst_35076:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84fffff8; valaddr_reg:x3; val_offset:105228*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105228*0 + 3*516*FLEN/8, x4, x1, x2)

inst_35077:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84fffffc; valaddr_reg:x3; val_offset:105231*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105231*0 + 3*517*FLEN/8, x4, x1, x2)

inst_35078:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84fffffe; valaddr_reg:x3; val_offset:105234*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105234*0 + 3*518*FLEN/8, x4, x1, x2)

inst_35079:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3294a9 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x09 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3294a9; op2val:0x80000000;
op3val:0x84ffffff; valaddr_reg:x3; val_offset:105237*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105237*0 + 3*519*FLEN/8, x4, x1, x2)

inst_35080:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35800000; valaddr_reg:x3; val_offset:105240*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105240*0 + 3*520*FLEN/8, x4, x1, x2)

inst_35081:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35800001; valaddr_reg:x3; val_offset:105243*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105243*0 + 3*521*FLEN/8, x4, x1, x2)

inst_35082:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35800003; valaddr_reg:x3; val_offset:105246*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105246*0 + 3*522*FLEN/8, x4, x1, x2)

inst_35083:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35800007; valaddr_reg:x3; val_offset:105249*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105249*0 + 3*523*FLEN/8, x4, x1, x2)

inst_35084:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3580000f; valaddr_reg:x3; val_offset:105252*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105252*0 + 3*524*FLEN/8, x4, x1, x2)

inst_35085:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3580001f; valaddr_reg:x3; val_offset:105255*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105255*0 + 3*525*FLEN/8, x4, x1, x2)

inst_35086:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3580003f; valaddr_reg:x3; val_offset:105258*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105258*0 + 3*526*FLEN/8, x4, x1, x2)

inst_35087:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3580007f; valaddr_reg:x3; val_offset:105261*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105261*0 + 3*527*FLEN/8, x4, x1, x2)

inst_35088:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x358000ff; valaddr_reg:x3; val_offset:105264*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105264*0 + 3*528*FLEN/8, x4, x1, x2)

inst_35089:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x358001ff; valaddr_reg:x3; val_offset:105267*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105267*0 + 3*529*FLEN/8, x4, x1, x2)

inst_35090:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x358003ff; valaddr_reg:x3; val_offset:105270*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105270*0 + 3*530*FLEN/8, x4, x1, x2)

inst_35091:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x358007ff; valaddr_reg:x3; val_offset:105273*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105273*0 + 3*531*FLEN/8, x4, x1, x2)

inst_35092:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35800fff; valaddr_reg:x3; val_offset:105276*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105276*0 + 3*532*FLEN/8, x4, x1, x2)

inst_35093:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35801fff; valaddr_reg:x3; val_offset:105279*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105279*0 + 3*533*FLEN/8, x4, x1, x2)

inst_35094:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35803fff; valaddr_reg:x3; val_offset:105282*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105282*0 + 3*534*FLEN/8, x4, x1, x2)

inst_35095:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35807fff; valaddr_reg:x3; val_offset:105285*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105285*0 + 3*535*FLEN/8, x4, x1, x2)

inst_35096:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3580ffff; valaddr_reg:x3; val_offset:105288*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105288*0 + 3*536*FLEN/8, x4, x1, x2)

inst_35097:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3581ffff; valaddr_reg:x3; val_offset:105291*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105291*0 + 3*537*FLEN/8, x4, x1, x2)

inst_35098:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3583ffff; valaddr_reg:x3; val_offset:105294*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105294*0 + 3*538*FLEN/8, x4, x1, x2)

inst_35099:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3587ffff; valaddr_reg:x3; val_offset:105297*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105297*0 + 3*539*FLEN/8, x4, x1, x2)

inst_35100:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x358fffff; valaddr_reg:x3; val_offset:105300*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105300*0 + 3*540*FLEN/8, x4, x1, x2)

inst_35101:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x359fffff; valaddr_reg:x3; val_offset:105303*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105303*0 + 3*541*FLEN/8, x4, x1, x2)

inst_35102:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35bfffff; valaddr_reg:x3; val_offset:105306*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105306*0 + 3*542*FLEN/8, x4, x1, x2)

inst_35103:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35c00000; valaddr_reg:x3; val_offset:105309*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105309*0 + 3*543*FLEN/8, x4, x1, x2)

inst_35104:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35e00000; valaddr_reg:x3; val_offset:105312*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105312*0 + 3*544*FLEN/8, x4, x1, x2)

inst_35105:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35f00000; valaddr_reg:x3; val_offset:105315*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105315*0 + 3*545*FLEN/8, x4, x1, x2)

inst_35106:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35f80000; valaddr_reg:x3; val_offset:105318*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105318*0 + 3*546*FLEN/8, x4, x1, x2)

inst_35107:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35fc0000; valaddr_reg:x3; val_offset:105321*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105321*0 + 3*547*FLEN/8, x4, x1, x2)

inst_35108:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35fe0000; valaddr_reg:x3; val_offset:105324*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105324*0 + 3*548*FLEN/8, x4, x1, x2)

inst_35109:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35ff0000; valaddr_reg:x3; val_offset:105327*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105327*0 + 3*549*FLEN/8, x4, x1, x2)

inst_35110:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35ff8000; valaddr_reg:x3; val_offset:105330*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105330*0 + 3*550*FLEN/8, x4, x1, x2)

inst_35111:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35ffc000; valaddr_reg:x3; val_offset:105333*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105333*0 + 3*551*FLEN/8, x4, x1, x2)

inst_35112:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35ffe000; valaddr_reg:x3; val_offset:105336*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105336*0 + 3*552*FLEN/8, x4, x1, x2)

inst_35113:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35fff000; valaddr_reg:x3; val_offset:105339*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105339*0 + 3*553*FLEN/8, x4, x1, x2)

inst_35114:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35fff800; valaddr_reg:x3; val_offset:105342*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105342*0 + 3*554*FLEN/8, x4, x1, x2)

inst_35115:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35fffc00; valaddr_reg:x3; val_offset:105345*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105345*0 + 3*555*FLEN/8, x4, x1, x2)

inst_35116:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35fffe00; valaddr_reg:x3; val_offset:105348*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105348*0 + 3*556*FLEN/8, x4, x1, x2)

inst_35117:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35ffff00; valaddr_reg:x3; val_offset:105351*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105351*0 + 3*557*FLEN/8, x4, x1, x2)

inst_35118:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35ffff80; valaddr_reg:x3; val_offset:105354*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105354*0 + 3*558*FLEN/8, x4, x1, x2)

inst_35119:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35ffffc0; valaddr_reg:x3; val_offset:105357*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105357*0 + 3*559*FLEN/8, x4, x1, x2)

inst_35120:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35ffffe0; valaddr_reg:x3; val_offset:105360*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105360*0 + 3*560*FLEN/8, x4, x1, x2)

inst_35121:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35fffff0; valaddr_reg:x3; val_offset:105363*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105363*0 + 3*561*FLEN/8, x4, x1, x2)

inst_35122:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35fffff8; valaddr_reg:x3; val_offset:105366*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105366*0 + 3*562*FLEN/8, x4, x1, x2)

inst_35123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35fffffc; valaddr_reg:x3; val_offset:105369*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105369*0 + 3*563*FLEN/8, x4, x1, x2)

inst_35124:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35fffffe; valaddr_reg:x3; val_offset:105372*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105372*0 + 3*564*FLEN/8, x4, x1, x2)

inst_35125:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x6b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x35ffffff; valaddr_reg:x3; val_offset:105375*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105375*0 + 3*565*FLEN/8, x4, x1, x2)

inst_35126:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3f800001; valaddr_reg:x3; val_offset:105378*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105378*0 + 3*566*FLEN/8, x4, x1, x2)

inst_35127:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3f800003; valaddr_reg:x3; val_offset:105381*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105381*0 + 3*567*FLEN/8, x4, x1, x2)

inst_35128:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3f800007; valaddr_reg:x3; val_offset:105384*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105384*0 + 3*568*FLEN/8, x4, x1, x2)

inst_35129:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3f999999; valaddr_reg:x3; val_offset:105387*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105387*0 + 3*569*FLEN/8, x4, x1, x2)

inst_35130:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:105390*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105390*0 + 3*570*FLEN/8, x4, x1, x2)

inst_35131:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:105393*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105393*0 + 3*571*FLEN/8, x4, x1, x2)

inst_35132:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:105396*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105396*0 + 3*572*FLEN/8, x4, x1, x2)

inst_35133:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:105399*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105399*0 + 3*573*FLEN/8, x4, x1, x2)

inst_35134:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:105402*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105402*0 + 3*574*FLEN/8, x4, x1, x2)

inst_35135:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:105405*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105405*0 + 3*575*FLEN/8, x4, x1, x2)

inst_35136:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:105408*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105408*0 + 3*576*FLEN/8, x4, x1, x2)

inst_35137:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:105411*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105411*0 + 3*577*FLEN/8, x4, x1, x2)

inst_35138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:105414*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105414*0 + 3*578*FLEN/8, x4, x1, x2)

inst_35139:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:105417*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105417*0 + 3*579*FLEN/8, x4, x1, x2)

inst_35140:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:105420*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105420*0 + 3*580*FLEN/8, x4, x1, x2)

inst_35141:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x32be0d and fs2 == 0 and fe2 == 0x00 and fm2 == 0x2dd4d1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f32be0d; op2val:0x2dd4d1;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:105423*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105423*0 + 3*581*FLEN/8, x4, x1, x2)

inst_35142:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9800000; valaddr_reg:x3; val_offset:105426*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105426*0 + 3*582*FLEN/8, x4, x1, x2)

inst_35143:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9800001; valaddr_reg:x3; val_offset:105429*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105429*0 + 3*583*FLEN/8, x4, x1, x2)

inst_35144:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9800003; valaddr_reg:x3; val_offset:105432*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105432*0 + 3*584*FLEN/8, x4, x1, x2)

inst_35145:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9800007; valaddr_reg:x3; val_offset:105435*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105435*0 + 3*585*FLEN/8, x4, x1, x2)

inst_35146:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf980000f; valaddr_reg:x3; val_offset:105438*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105438*0 + 3*586*FLEN/8, x4, x1, x2)

inst_35147:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf980001f; valaddr_reg:x3; val_offset:105441*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105441*0 + 3*587*FLEN/8, x4, x1, x2)

inst_35148:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf980003f; valaddr_reg:x3; val_offset:105444*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105444*0 + 3*588*FLEN/8, x4, x1, x2)

inst_35149:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf980007f; valaddr_reg:x3; val_offset:105447*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105447*0 + 3*589*FLEN/8, x4, x1, x2)

inst_35150:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf98000ff; valaddr_reg:x3; val_offset:105450*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105450*0 + 3*590*FLEN/8, x4, x1, x2)

inst_35151:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf98001ff; valaddr_reg:x3; val_offset:105453*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105453*0 + 3*591*FLEN/8, x4, x1, x2)

inst_35152:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf98003ff; valaddr_reg:x3; val_offset:105456*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105456*0 + 3*592*FLEN/8, x4, x1, x2)

inst_35153:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf98007ff; valaddr_reg:x3; val_offset:105459*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105459*0 + 3*593*FLEN/8, x4, x1, x2)

inst_35154:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9800fff; valaddr_reg:x3; val_offset:105462*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105462*0 + 3*594*FLEN/8, x4, x1, x2)

inst_35155:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9801fff; valaddr_reg:x3; val_offset:105465*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105465*0 + 3*595*FLEN/8, x4, x1, x2)

inst_35156:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9803fff; valaddr_reg:x3; val_offset:105468*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105468*0 + 3*596*FLEN/8, x4, x1, x2)

inst_35157:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9807fff; valaddr_reg:x3; val_offset:105471*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105471*0 + 3*597*FLEN/8, x4, x1, x2)

inst_35158:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf980ffff; valaddr_reg:x3; val_offset:105474*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105474*0 + 3*598*FLEN/8, x4, x1, x2)

inst_35159:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf981ffff; valaddr_reg:x3; val_offset:105477*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105477*0 + 3*599*FLEN/8, x4, x1, x2)

inst_35160:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf983ffff; valaddr_reg:x3; val_offset:105480*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105480*0 + 3*600*FLEN/8, x4, x1, x2)

inst_35161:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf987ffff; valaddr_reg:x3; val_offset:105483*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105483*0 + 3*601*FLEN/8, x4, x1, x2)

inst_35162:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf98fffff; valaddr_reg:x3; val_offset:105486*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105486*0 + 3*602*FLEN/8, x4, x1, x2)

inst_35163:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf99fffff; valaddr_reg:x3; val_offset:105489*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105489*0 + 3*603*FLEN/8, x4, x1, x2)

inst_35164:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9bfffff; valaddr_reg:x3; val_offset:105492*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105492*0 + 3*604*FLEN/8, x4, x1, x2)

inst_35165:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9c00000; valaddr_reg:x3; val_offset:105495*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105495*0 + 3*605*FLEN/8, x4, x1, x2)

inst_35166:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9e00000; valaddr_reg:x3; val_offset:105498*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105498*0 + 3*606*FLEN/8, x4, x1, x2)

inst_35167:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9f00000; valaddr_reg:x3; val_offset:105501*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105501*0 + 3*607*FLEN/8, x4, x1, x2)

inst_35168:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9f80000; valaddr_reg:x3; val_offset:105504*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105504*0 + 3*608*FLEN/8, x4, x1, x2)

inst_35169:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9fc0000; valaddr_reg:x3; val_offset:105507*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105507*0 + 3*609*FLEN/8, x4, x1, x2)

inst_35170:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9fe0000; valaddr_reg:x3; val_offset:105510*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105510*0 + 3*610*FLEN/8, x4, x1, x2)

inst_35171:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9ff0000; valaddr_reg:x3; val_offset:105513*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105513*0 + 3*611*FLEN/8, x4, x1, x2)

inst_35172:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9ff8000; valaddr_reg:x3; val_offset:105516*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105516*0 + 3*612*FLEN/8, x4, x1, x2)

inst_35173:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9ffc000; valaddr_reg:x3; val_offset:105519*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105519*0 + 3*613*FLEN/8, x4, x1, x2)

inst_35174:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9ffe000; valaddr_reg:x3; val_offset:105522*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105522*0 + 3*614*FLEN/8, x4, x1, x2)

inst_35175:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9fff000; valaddr_reg:x3; val_offset:105525*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105525*0 + 3*615*FLEN/8, x4, x1, x2)

inst_35176:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9fff800; valaddr_reg:x3; val_offset:105528*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105528*0 + 3*616*FLEN/8, x4, x1, x2)

inst_35177:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9fffc00; valaddr_reg:x3; val_offset:105531*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105531*0 + 3*617*FLEN/8, x4, x1, x2)

inst_35178:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9fffe00; valaddr_reg:x3; val_offset:105534*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105534*0 + 3*618*FLEN/8, x4, x1, x2)

inst_35179:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9ffff00; valaddr_reg:x3; val_offset:105537*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105537*0 + 3*619*FLEN/8, x4, x1, x2)

inst_35180:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9ffff80; valaddr_reg:x3; val_offset:105540*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105540*0 + 3*620*FLEN/8, x4, x1, x2)

inst_35181:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9ffffc0; valaddr_reg:x3; val_offset:105543*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105543*0 + 3*621*FLEN/8, x4, x1, x2)

inst_35182:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9ffffe0; valaddr_reg:x3; val_offset:105546*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105546*0 + 3*622*FLEN/8, x4, x1, x2)

inst_35183:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9fffff0; valaddr_reg:x3; val_offset:105549*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105549*0 + 3*623*FLEN/8, x4, x1, x2)

inst_35184:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9fffff8; valaddr_reg:x3; val_offset:105552*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105552*0 + 3*624*FLEN/8, x4, x1, x2)

inst_35185:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9fffffc; valaddr_reg:x3; val_offset:105555*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105555*0 + 3*625*FLEN/8, x4, x1, x2)

inst_35186:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9fffffe; valaddr_reg:x3; val_offset:105558*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105558*0 + 3*626*FLEN/8, x4, x1, x2)

inst_35187:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xf3 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xf9ffffff; valaddr_reg:x3; val_offset:105561*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105561*0 + 3*627*FLEN/8, x4, x1, x2)

inst_35188:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xff000001; valaddr_reg:x3; val_offset:105564*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105564*0 + 3*628*FLEN/8, x4, x1, x2)

inst_35189:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xff000003; valaddr_reg:x3; val_offset:105567*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105567*0 + 3*629*FLEN/8, x4, x1, x2)

inst_35190:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xff000007; valaddr_reg:x3; val_offset:105570*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105570*0 + 3*630*FLEN/8, x4, x1, x2)

inst_35191:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xff199999; valaddr_reg:x3; val_offset:105573*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105573*0 + 3*631*FLEN/8, x4, x1, x2)

inst_35192:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xff249249; valaddr_reg:x3; val_offset:105576*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105576*0 + 3*632*FLEN/8, x4, x1, x2)

inst_35193:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xff333333; valaddr_reg:x3; val_offset:105579*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105579*0 + 3*633*FLEN/8, x4, x1, x2)

inst_35194:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:105582*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105582*0 + 3*634*FLEN/8, x4, x1, x2)

inst_35195:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:105585*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105585*0 + 3*635*FLEN/8, x4, x1, x2)

inst_35196:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xff444444; valaddr_reg:x3; val_offset:105588*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105588*0 + 3*636*FLEN/8, x4, x1, x2)

inst_35197:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:105591*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105591*0 + 3*637*FLEN/8, x4, x1, x2)

inst_35198:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:105594*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105594*0 + 3*638*FLEN/8, x4, x1, x2)

inst_35199:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xff666666; valaddr_reg:x3; val_offset:105597*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105597*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_35200:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:105600*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105600*0 + 3*640*FLEN/8, x4, x1, x2)

inst_35201:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:105603*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105603*0 + 3*641*FLEN/8, x4, x1, x2)

inst_35202:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:105606*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105606*0 + 3*642*FLEN/8, x4, x1, x2)

inst_35203:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x331f85 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36ef84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f331f85; op2val:0xbfb6ef84;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:105609*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105609*0 + 3*643*FLEN/8, x4, x1, x2)

inst_35204:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf5800000; valaddr_reg:x3; val_offset:105612*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105612*0 + 3*644*FLEN/8, x4, x1, x2)

inst_35205:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf5800001; valaddr_reg:x3; val_offset:105615*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105615*0 + 3*645*FLEN/8, x4, x1, x2)

inst_35206:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf5800003; valaddr_reg:x3; val_offset:105618*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105618*0 + 3*646*FLEN/8, x4, x1, x2)

inst_35207:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf5800007; valaddr_reg:x3; val_offset:105621*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105621*0 + 3*647*FLEN/8, x4, x1, x2)

inst_35208:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf580000f; valaddr_reg:x3; val_offset:105624*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105624*0 + 3*648*FLEN/8, x4, x1, x2)

inst_35209:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf580001f; valaddr_reg:x3; val_offset:105627*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105627*0 + 3*649*FLEN/8, x4, x1, x2)

inst_35210:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf580003f; valaddr_reg:x3; val_offset:105630*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105630*0 + 3*650*FLEN/8, x4, x1, x2)

inst_35211:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf580007f; valaddr_reg:x3; val_offset:105633*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105633*0 + 3*651*FLEN/8, x4, x1, x2)

inst_35212:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf58000ff; valaddr_reg:x3; val_offset:105636*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105636*0 + 3*652*FLEN/8, x4, x1, x2)

inst_35213:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf58001ff; valaddr_reg:x3; val_offset:105639*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105639*0 + 3*653*FLEN/8, x4, x1, x2)

inst_35214:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf58003ff; valaddr_reg:x3; val_offset:105642*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105642*0 + 3*654*FLEN/8, x4, x1, x2)

inst_35215:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf58007ff; valaddr_reg:x3; val_offset:105645*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105645*0 + 3*655*FLEN/8, x4, x1, x2)

inst_35216:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf5800fff; valaddr_reg:x3; val_offset:105648*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105648*0 + 3*656*FLEN/8, x4, x1, x2)

inst_35217:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf5801fff; valaddr_reg:x3; val_offset:105651*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105651*0 + 3*657*FLEN/8, x4, x1, x2)

inst_35218:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf5803fff; valaddr_reg:x3; val_offset:105654*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105654*0 + 3*658*FLEN/8, x4, x1, x2)

inst_35219:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf5807fff; valaddr_reg:x3; val_offset:105657*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105657*0 + 3*659*FLEN/8, x4, x1, x2)

inst_35220:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf580ffff; valaddr_reg:x3; val_offset:105660*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105660*0 + 3*660*FLEN/8, x4, x1, x2)

inst_35221:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf581ffff; valaddr_reg:x3; val_offset:105663*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105663*0 + 3*661*FLEN/8, x4, x1, x2)

inst_35222:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf583ffff; valaddr_reg:x3; val_offset:105666*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105666*0 + 3*662*FLEN/8, x4, x1, x2)

inst_35223:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf587ffff; valaddr_reg:x3; val_offset:105669*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105669*0 + 3*663*FLEN/8, x4, x1, x2)

inst_35224:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf58fffff; valaddr_reg:x3; val_offset:105672*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105672*0 + 3*664*FLEN/8, x4, x1, x2)

inst_35225:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf59fffff; valaddr_reg:x3; val_offset:105675*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105675*0 + 3*665*FLEN/8, x4, x1, x2)

inst_35226:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf5bfffff; valaddr_reg:x3; val_offset:105678*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105678*0 + 3*666*FLEN/8, x4, x1, x2)

inst_35227:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf5c00000; valaddr_reg:x3; val_offset:105681*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105681*0 + 3*667*FLEN/8, x4, x1, x2)

inst_35228:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf5e00000; valaddr_reg:x3; val_offset:105684*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105684*0 + 3*668*FLEN/8, x4, x1, x2)

inst_35229:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf5f00000; valaddr_reg:x3; val_offset:105687*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105687*0 + 3*669*FLEN/8, x4, x1, x2)

inst_35230:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf5f80000; valaddr_reg:x3; val_offset:105690*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105690*0 + 3*670*FLEN/8, x4, x1, x2)

inst_35231:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf5fc0000; valaddr_reg:x3; val_offset:105693*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105693*0 + 3*671*FLEN/8, x4, x1, x2)

inst_35232:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf5fe0000; valaddr_reg:x3; val_offset:105696*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105696*0 + 3*672*FLEN/8, x4, x1, x2)

inst_35233:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf5ff0000; valaddr_reg:x3; val_offset:105699*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105699*0 + 3*673*FLEN/8, x4, x1, x2)

inst_35234:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf5ff8000; valaddr_reg:x3; val_offset:105702*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105702*0 + 3*674*FLEN/8, x4, x1, x2)

inst_35235:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf5ffc000; valaddr_reg:x3; val_offset:105705*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105705*0 + 3*675*FLEN/8, x4, x1, x2)

inst_35236:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf5ffe000; valaddr_reg:x3; val_offset:105708*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105708*0 + 3*676*FLEN/8, x4, x1, x2)

inst_35237:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf5fff000; valaddr_reg:x3; val_offset:105711*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105711*0 + 3*677*FLEN/8, x4, x1, x2)

inst_35238:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf5fff800; valaddr_reg:x3; val_offset:105714*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105714*0 + 3*678*FLEN/8, x4, x1, x2)

inst_35239:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf5fffc00; valaddr_reg:x3; val_offset:105717*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105717*0 + 3*679*FLEN/8, x4, x1, x2)

inst_35240:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf5fffe00; valaddr_reg:x3; val_offset:105720*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105720*0 + 3*680*FLEN/8, x4, x1, x2)

inst_35241:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf5ffff00; valaddr_reg:x3; val_offset:105723*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105723*0 + 3*681*FLEN/8, x4, x1, x2)

inst_35242:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf5ffff80; valaddr_reg:x3; val_offset:105726*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105726*0 + 3*682*FLEN/8, x4, x1, x2)

inst_35243:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf5ffffc0; valaddr_reg:x3; val_offset:105729*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105729*0 + 3*683*FLEN/8, x4, x1, x2)

inst_35244:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf5ffffe0; valaddr_reg:x3; val_offset:105732*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105732*0 + 3*684*FLEN/8, x4, x1, x2)

inst_35245:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf5fffff0; valaddr_reg:x3; val_offset:105735*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105735*0 + 3*685*FLEN/8, x4, x1, x2)

inst_35246:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf5fffff8; valaddr_reg:x3; val_offset:105738*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105738*0 + 3*686*FLEN/8, x4, x1, x2)

inst_35247:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf5fffffc; valaddr_reg:x3; val_offset:105741*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105741*0 + 3*687*FLEN/8, x4, x1, x2)

inst_35248:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf5fffffe; valaddr_reg:x3; val_offset:105744*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105744*0 + 3*688*FLEN/8, x4, x1, x2)

inst_35249:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xeb and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xf5ffffff; valaddr_reg:x3; val_offset:105747*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105747*0 + 3*689*FLEN/8, x4, x1, x2)

inst_35250:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xff000001; valaddr_reg:x3; val_offset:105750*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105750*0 + 3*690*FLEN/8, x4, x1, x2)

inst_35251:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xff000003; valaddr_reg:x3; val_offset:105753*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105753*0 + 3*691*FLEN/8, x4, x1, x2)

inst_35252:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xff000007; valaddr_reg:x3; val_offset:105756*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105756*0 + 3*692*FLEN/8, x4, x1, x2)

inst_35253:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xff199999; valaddr_reg:x3; val_offset:105759*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105759*0 + 3*693*FLEN/8, x4, x1, x2)

inst_35254:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xff249249; valaddr_reg:x3; val_offset:105762*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105762*0 + 3*694*FLEN/8, x4, x1, x2)

inst_35255:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xff333333; valaddr_reg:x3; val_offset:105765*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105765*0 + 3*695*FLEN/8, x4, x1, x2)

inst_35256:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:105768*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105768*0 + 3*696*FLEN/8, x4, x1, x2)

inst_35257:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:105771*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105771*0 + 3*697*FLEN/8, x4, x1, x2)

inst_35258:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xff444444; valaddr_reg:x3; val_offset:105774*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105774*0 + 3*698*FLEN/8, x4, x1, x2)

inst_35259:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:105777*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105777*0 + 3*699*FLEN/8, x4, x1, x2)

inst_35260:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:105780*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105780*0 + 3*700*FLEN/8, x4, x1, x2)

inst_35261:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xff666666; valaddr_reg:x3; val_offset:105783*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105783*0 + 3*701*FLEN/8, x4, x1, x2)

inst_35262:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:105786*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105786*0 + 3*702*FLEN/8, x4, x1, x2)

inst_35263:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:105789*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105789*0 + 3*703*FLEN/8, x4, x1, x2)

inst_35264:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:105792*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105792*0 + 3*704*FLEN/8, x4, x1, x2)

inst_35265:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3328e6 and fs2 == 1 and fe2 == 0x7f and fm2 == 0x36e5f0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3328e6; op2val:0xbfb6e5f0;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:105795*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105795*0 + 3*705*FLEN/8, x4, x1, x2)

inst_35266:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7a800000; valaddr_reg:x3; val_offset:105798*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105798*0 + 3*706*FLEN/8, x4, x1, x2)

inst_35267:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7a800001; valaddr_reg:x3; val_offset:105801*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105801*0 + 3*707*FLEN/8, x4, x1, x2)

inst_35268:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7a800003; valaddr_reg:x3; val_offset:105804*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105804*0 + 3*708*FLEN/8, x4, x1, x2)

inst_35269:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7a800007; valaddr_reg:x3; val_offset:105807*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105807*0 + 3*709*FLEN/8, x4, x1, x2)

inst_35270:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7a80000f; valaddr_reg:x3; val_offset:105810*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105810*0 + 3*710*FLEN/8, x4, x1, x2)

inst_35271:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7a80001f; valaddr_reg:x3; val_offset:105813*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105813*0 + 3*711*FLEN/8, x4, x1, x2)

inst_35272:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7a80003f; valaddr_reg:x3; val_offset:105816*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105816*0 + 3*712*FLEN/8, x4, x1, x2)

inst_35273:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7a80007f; valaddr_reg:x3; val_offset:105819*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105819*0 + 3*713*FLEN/8, x4, x1, x2)

inst_35274:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7a8000ff; valaddr_reg:x3; val_offset:105822*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105822*0 + 3*714*FLEN/8, x4, x1, x2)

inst_35275:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7a8001ff; valaddr_reg:x3; val_offset:105825*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105825*0 + 3*715*FLEN/8, x4, x1, x2)

inst_35276:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7a8003ff; valaddr_reg:x3; val_offset:105828*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105828*0 + 3*716*FLEN/8, x4, x1, x2)

inst_35277:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7a8007ff; valaddr_reg:x3; val_offset:105831*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105831*0 + 3*717*FLEN/8, x4, x1, x2)

inst_35278:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7a800fff; valaddr_reg:x3; val_offset:105834*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105834*0 + 3*718*FLEN/8, x4, x1, x2)

inst_35279:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7a801fff; valaddr_reg:x3; val_offset:105837*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105837*0 + 3*719*FLEN/8, x4, x1, x2)

inst_35280:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7a803fff; valaddr_reg:x3; val_offset:105840*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105840*0 + 3*720*FLEN/8, x4, x1, x2)

inst_35281:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7a807fff; valaddr_reg:x3; val_offset:105843*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105843*0 + 3*721*FLEN/8, x4, x1, x2)

inst_35282:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7a80ffff; valaddr_reg:x3; val_offset:105846*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105846*0 + 3*722*FLEN/8, x4, x1, x2)

inst_35283:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7a81ffff; valaddr_reg:x3; val_offset:105849*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105849*0 + 3*723*FLEN/8, x4, x1, x2)

inst_35284:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7a83ffff; valaddr_reg:x3; val_offset:105852*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105852*0 + 3*724*FLEN/8, x4, x1, x2)

inst_35285:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7a87ffff; valaddr_reg:x3; val_offset:105855*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105855*0 + 3*725*FLEN/8, x4, x1, x2)

inst_35286:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7a8fffff; valaddr_reg:x3; val_offset:105858*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105858*0 + 3*726*FLEN/8, x4, x1, x2)

inst_35287:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7a9fffff; valaddr_reg:x3; val_offset:105861*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105861*0 + 3*727*FLEN/8, x4, x1, x2)

inst_35288:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7abfffff; valaddr_reg:x3; val_offset:105864*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105864*0 + 3*728*FLEN/8, x4, x1, x2)

inst_35289:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7ac00000; valaddr_reg:x3; val_offset:105867*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105867*0 + 3*729*FLEN/8, x4, x1, x2)

inst_35290:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7ae00000; valaddr_reg:x3; val_offset:105870*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105870*0 + 3*730*FLEN/8, x4, x1, x2)

inst_35291:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7af00000; valaddr_reg:x3; val_offset:105873*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105873*0 + 3*731*FLEN/8, x4, x1, x2)

inst_35292:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7af80000; valaddr_reg:x3; val_offset:105876*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105876*0 + 3*732*FLEN/8, x4, x1, x2)

inst_35293:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7afc0000; valaddr_reg:x3; val_offset:105879*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105879*0 + 3*733*FLEN/8, x4, x1, x2)

inst_35294:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7afe0000; valaddr_reg:x3; val_offset:105882*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105882*0 + 3*734*FLEN/8, x4, x1, x2)

inst_35295:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7aff0000; valaddr_reg:x3; val_offset:105885*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105885*0 + 3*735*FLEN/8, x4, x1, x2)

inst_35296:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7aff8000; valaddr_reg:x3; val_offset:105888*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105888*0 + 3*736*FLEN/8, x4, x1, x2)

inst_35297:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7affc000; valaddr_reg:x3; val_offset:105891*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105891*0 + 3*737*FLEN/8, x4, x1, x2)

inst_35298:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7affe000; valaddr_reg:x3; val_offset:105894*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105894*0 + 3*738*FLEN/8, x4, x1, x2)

inst_35299:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7afff000; valaddr_reg:x3; val_offset:105897*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105897*0 + 3*739*FLEN/8, x4, x1, x2)

inst_35300:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7afff800; valaddr_reg:x3; val_offset:105900*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105900*0 + 3*740*FLEN/8, x4, x1, x2)

inst_35301:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7afffc00; valaddr_reg:x3; val_offset:105903*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105903*0 + 3*741*FLEN/8, x4, x1, x2)

inst_35302:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7afffe00; valaddr_reg:x3; val_offset:105906*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105906*0 + 3*742*FLEN/8, x4, x1, x2)

inst_35303:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7affff00; valaddr_reg:x3; val_offset:105909*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105909*0 + 3*743*FLEN/8, x4, x1, x2)

inst_35304:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7affff80; valaddr_reg:x3; val_offset:105912*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105912*0 + 3*744*FLEN/8, x4, x1, x2)

inst_35305:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7affffc0; valaddr_reg:x3; val_offset:105915*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105915*0 + 3*745*FLEN/8, x4, x1, x2)

inst_35306:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7affffe0; valaddr_reg:x3; val_offset:105918*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105918*0 + 3*746*FLEN/8, x4, x1, x2)

inst_35307:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7afffff0; valaddr_reg:x3; val_offset:105921*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105921*0 + 3*747*FLEN/8, x4, x1, x2)

inst_35308:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7afffff8; valaddr_reg:x3; val_offset:105924*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105924*0 + 3*748*FLEN/8, x4, x1, x2)

inst_35309:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7afffffc; valaddr_reg:x3; val_offset:105927*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105927*0 + 3*749*FLEN/8, x4, x1, x2)

inst_35310:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7afffffe; valaddr_reg:x3; val_offset:105930*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105930*0 + 3*750*FLEN/8, x4, x1, x2)

inst_35311:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xf5 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7affffff; valaddr_reg:x3; val_offset:105933*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105933*0 + 3*751*FLEN/8, x4, x1, x2)

inst_35312:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7f000001; valaddr_reg:x3; val_offset:105936*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105936*0 + 3*752*FLEN/8, x4, x1, x2)

inst_35313:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7f000003; valaddr_reg:x3; val_offset:105939*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105939*0 + 3*753*FLEN/8, x4, x1, x2)

inst_35314:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7f000007; valaddr_reg:x3; val_offset:105942*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105942*0 + 3*754*FLEN/8, x4, x1, x2)

inst_35315:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7f199999; valaddr_reg:x3; val_offset:105945*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105945*0 + 3*755*FLEN/8, x4, x1, x2)

inst_35316:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7f249249; valaddr_reg:x3; val_offset:105948*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105948*0 + 3*756*FLEN/8, x4, x1, x2)

inst_35317:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7f333333; valaddr_reg:x3; val_offset:105951*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105951*0 + 3*757*FLEN/8, x4, x1, x2)

inst_35318:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:105954*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105954*0 + 3*758*FLEN/8, x4, x1, x2)

inst_35319:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:105957*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105957*0 + 3*759*FLEN/8, x4, x1, x2)

inst_35320:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7f444444; valaddr_reg:x3; val_offset:105960*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105960*0 + 3*760*FLEN/8, x4, x1, x2)

inst_35321:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:105963*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105963*0 + 3*761*FLEN/8, x4, x1, x2)

inst_35322:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:105966*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105966*0 + 3*762*FLEN/8, x4, x1, x2)

inst_35323:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7f666666; valaddr_reg:x3; val_offset:105969*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105969*0 + 3*763*FLEN/8, x4, x1, x2)

inst_35324:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:105972*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105972*0 + 3*764*FLEN/8, x4, x1, x2)

inst_35325:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:105975*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105975*0 + 3*765*FLEN/8, x4, x1, x2)

inst_35326:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:105978*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105978*0 + 3*766*FLEN/8, x4, x1, x2)

inst_35327:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x33ed38 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x361e60 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f33ed38; op2val:0x3fb61e60;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:105981*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105981*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(0x7f30b93e133899582,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x843fffff218786815,32,FLEN)
NAN_BOXED(0x7f30b93e133899582,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x84400000218786816,32,FLEN)
NAN_BOXED(0x7f30b93e133899582,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x84600000220883968,32,FLEN)
NAN_BOXED(0x7f30b93e133899582,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x84700000221932544,32,FLEN)
NAN_BOXED(0x7f30b93e133899582,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x84780000222456832,32,FLEN)
NAN_BOXED(0x7f30b93e133899582,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x847c0000222718976,32,FLEN)
NAN_BOXED(0x7f30b93e133899582,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x847e0000222850048,32,FLEN)
NAN_BOXED(0x7f30b93e133899582,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x847f0000222915584,32,FLEN)
NAN_BOXED(0x7f30b93e133899582,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x847f8000222948352,32,FLEN)
NAN_BOXED(0x7f30b93e133899582,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x847fc000222964736,32,FLEN)
NAN_BOXED(0x7f30b93e133899582,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x847fe000222972928,32,FLEN)
NAN_BOXED(0x7f30b93e133899582,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x847ff000222977024,32,FLEN)
NAN_BOXED(0x7f30b93e133899582,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x847ff800222979072,32,FLEN)
NAN_BOXED(0x7f30b93e133899582,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x847ffc00222980096,32,FLEN)
NAN_BOXED(0x7f30b93e133899582,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x847ffe00222980608,32,FLEN)
NAN_BOXED(0x7f30b93e133899582,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x847fff00222980864,32,FLEN)
NAN_BOXED(0x7f30b93e133899582,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x847fff80222980992,32,FLEN)
NAN_BOXED(0x7f30b93e133899582,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x847fffc0222981056,32,FLEN)
NAN_BOXED(0x7f30b93e133899582,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x847fffe0222981088,32,FLEN)
NAN_BOXED(0x7f30b93e133899582,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x847ffff0222981104,32,FLEN)
NAN_BOXED(0x7f30b93e133899582,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x847ffff8222981112,32,FLEN)
NAN_BOXED(0x7f30b93e133899582,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x847ffffc222981116,32,FLEN)
NAN_BOXED(0x7f30b93e133899582,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x847ffffe222981118,32,FLEN)
NAN_BOXED(0x7f30b93e133899582,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x847fffff222981119,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000001147483649,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000003147483651,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000007147483655,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80199999149161369,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80249249149880393,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80333333150839091,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8036db6d151078765,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x803bbbbb151398331,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80444444151957572,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x804ccccc152516812,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x805b6db6153475510,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80666666154194534,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x806db6db154673883,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffff8155872248,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffc155872252,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffe155872254,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81800000172649472,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81800001172649473,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81800003172649475,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81800007172649479,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8180000f172649487,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8180001f172649503,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8180003f172649535,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8180007f172649599,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x818000ff172649727,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x818001ff172649983,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x818003ff172650495,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x818007ff172651519,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81800fff172653567,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81801fff172657663,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81803fff172665855,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81807fff172682239,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8180ffff172715007,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8181ffff172780543,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8183ffff172911615,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8187ffff173173759,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x818fffff173698047,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x819fffff174746623,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81bfffff176843775,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81c00000176843776,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81e00000178940928,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81f00000179989504,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81f80000180513792,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81fc0000180775936,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81fe0000180907008,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81ff0000180972544,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81ff8000181005312,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81ffc000181021696,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81ffe000181029888,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81fff000181033984,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81fff800181036032,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81fffc00181037056,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81fffe00181037568,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81ffff00181037824,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81ffff80181037952,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81ffffc0181038016,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81ffffe0181038048,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81fffff0181038064,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81fffff8181038072,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81fffffc181038076,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81fffffe181038078,32,FLEN)
NAN_BOXED(0x7f30e643133911107,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81ffffff181038079,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000001147483649,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000003147483651,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000007147483655,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80199999149161369,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80249249149880393,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80333333150839091,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8036db6d151078765,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x803bbbbb151398331,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80444444151957572,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x804ccccc152516812,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x805b6db6153475510,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80666666154194534,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x806db6db154673883,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffff8155872248,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffc155872252,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffe155872254,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b000000332033024,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b000001332033025,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b000003332033027,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b000007332033031,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b00000f332033039,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b00001f332033055,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b00003f332033087,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b00007f332033151,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b0000ff332033279,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b0001ff332033535,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b0003ff332034047,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b0007ff332035071,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b000fff332037119,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b001fff332041215,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b003fff332049407,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b007fff332065791,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b00ffff332098559,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b01ffff332164095,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b03ffff332295167,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b07ffff332557311,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b0fffff333081599,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b1fffff334130175,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b3fffff336227327,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b400000336227328,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b600000338324480,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b700000339373056,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b780000339897344,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b7c0000340159488,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b7e0000340290560,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b7f0000340356096,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b7f8000340388864,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b7fc000340405248,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b7fe000340413440,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b7ff000340417536,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b7ff800340419584,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b7ffc00340420608,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b7ffe00340421120,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b7fff00340421376,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b7fff80340421504,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b7fffc0340421568,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b7fffe0340421600,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b7ffff0340421616,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b7ffff8340421624,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b7ffffc340421628,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b7ffffe340421630,32,FLEN)
NAN_BOXED(0x7f30f2a7133914279,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b7fffff340421631,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000001147483649,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000003147483651,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000007147483655,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80199999149161369,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80249249149880393,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80333333150839091,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8036db6d151078765,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x803bbbbb151398331,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80444444151957572,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x804ccccc152516812,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x805b6db6153475510,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80666666154194534,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x806db6db154673883,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffff8155872248,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffc155872252,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffe155872254,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd7800000615490048,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd7800001615490049,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd7800003615490051,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd7800007615490055,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd780000f615490063,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd780001f615490079,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd780003f615490111,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd780007f615490175,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd78000ff615490303,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd78001ff615490559,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd78003ff615491071,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd78007ff615492095,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd7800fff615494143,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd7801fff615498239,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd7803fff615506431,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd7807fff615522815,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd780ffff615555583,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd781ffff615621119,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd783ffff615752191,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd787ffff616014335,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd78fffff616538623,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd79fffff617587199,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd7bfffff619684351,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd7c00000619684352,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd7e00000621781504,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd7f00000622830080,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd7f80000623354368,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd7fc0000623616512,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd7fe0000623747584,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd7ff0000623813120,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd7ff8000623845888,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd7ffc000623862272,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd7ffe000623870464,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd7fff000623874560,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd7fff800623876608,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd7fffc00623877632,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd7fffe00623878144,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd7ffff00623878400,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd7ffff80623878528,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd7ffffc0623878592,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd7ffffe0623878624,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd7fffff0623878640,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd7fffff8623878648,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd7fffffc623878652,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd7fffffe623878654,32,FLEN)
NAN_BOXED(0x7f310f69133921641,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xd7ffffff623878655,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x800001388609,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x800003388611,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x800007388615,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x9999990066329,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xa492490785353,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb333331744051,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb6db6d1983725,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xbbbbbb2303291,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc444442862532,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xcccccc3421772,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xdb6db64380470,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe666665099494,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xedb6db5578843,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xfffff86777208,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xfffffc6777212,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xfffffe6777214,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe80000043269632,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe80000143269633,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe80000343269635,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe80000743269639,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe80000f43269647,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe80001f43269663,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe80003f43269695,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe80007f43269759,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe8000ff43269887,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe8001ff43270143,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe8003ff43270655,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe8007ff43271679,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe800fff43273727,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe801fff43277823,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe803fff43286015,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe807fff43302399,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe80ffff43335167,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe81ffff43400703,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe83ffff43531775,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe87ffff43793919,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe8fffff44318207,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe9fffff45366783,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xebfffff47463935,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xec0000047463936,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xee0000049561088,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xef0000050609664,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xef8000051133952,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xefc000051396096,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xefe000051527168,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xeff000051592704,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xeff800051625472,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xeffc00051641856,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xeffe00051650048,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xefff00051654144,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xefff80051656192,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xefffc0051657216,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xefffe0051657728,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xeffff0051657984,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xeffff8051658112,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xeffffc051658176,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xeffffe051658208,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xefffff051658224,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xefffff851658232,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xefffffc51658236,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xefffffe51658238,32,FLEN)
NAN_BOXED(0x7f317793133948307,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xeffffff51658239,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xbf800001212836865,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xbf800003212836867,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xbf800007212836871,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xbf999999214514585,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xbfa49249215233609,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xbfb33333216192307,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xbfb6db6d216431981,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xbfbbbbbb216751547,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xbfc44444217310788,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xbfcccccc217870028,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xbfdb6db6218828726,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xbfe66666219547750,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xbfedb6db220027099,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xbffffff8221225464,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xbffffffc221225468,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xbffffffe221225470,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc1800000246391296,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc1800001246391297,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc1800003246391299,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc1800007246391303,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc180000f246391311,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc180001f246391327,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc180003f246391359,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc180007f246391423,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc18000ff246391551,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc18001ff246391807,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc18003ff246392319,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc18007ff246393343,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc1800fff246395391,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc1801fff246399487,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc1803fff246407679,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc1807fff246424063,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc180ffff246456831,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc181ffff246522367,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc183ffff246653439,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc187ffff246915583,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc18fffff247439871,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc19fffff248488447,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc1bfffff250585599,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc1c00000250585600,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc1e00000252682752,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc1f00000253731328,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc1f80000254255616,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc1fc0000254517760,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc1fe0000254648832,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc1ff0000254714368,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc1ff8000254747136,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc1ffc000254763520,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc1ffe000254771712,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc1fff000254775808,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc1fff800254777856,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc1fffc00254778880,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc1fffe00254779392,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc1ffff00254779648,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc1ffff80254779776,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc1ffffc0254779840,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc1ffffe0254779872,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc1fffff0254779888,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc1fffff8254779896,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc1fffffc254779900,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc1fffffe254779902,32,FLEN)
NAN_BOXED(0x7f31d2e1133971681,32,FLEN)
NAN_BOXED(0x802e116e150502766,32,FLEN)
NAN_BOXED(0xc1ffffff254779903,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x3,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x199999677721,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x249249396745,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x333333355443,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x36db6d595117,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x3bbbbb914683,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x444444473924,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x4ccccc033164,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5b6db6991862,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x666666710886,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x6db6db190235,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffff8388600,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffffc388604,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffffe388606,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1000000068435456,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1000000168435457,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1000000368435459,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1000000768435463,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1000000f68435471,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1000001f68435487,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1000003f68435519,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1000007f68435583,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x100000ff68435711,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x100001ff68435967,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x100003ff68436479,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x100007ff68437503,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10000fff68439551,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10001fff68443647,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10003fff68451839,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10007fff68468223,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1000ffff68500991,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1001ffff68566527,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1003ffff68697599,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1007ffff68959743,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x100fffff69484031,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x101fffff70532607,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x103fffff72629759,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1040000072629760,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1060000074726912,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1070000075775488,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1078000076299776,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x107c000076561920,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x107e000076692992,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x107f000076758528,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x107f800076791296,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x107fc00076807680,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x107fe00076815872,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x107ff00076819968,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x107ff80076822016,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x107ffc0076823040,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x107ffe0076823552,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x107fff0076823808,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x107fff8076823936,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x107fffc076824000,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x107fffe076824032,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x107ffff076824048,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x107ffff876824056,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x107ffffc76824060,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x107ffffe76824062,32,FLEN)
NAN_BOXED(0x7f31e3a6133975974,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x107fffff76824063,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf5000000110417920,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf5000001110417921,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf5000003110417923,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf5000007110417927,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf500000f110417935,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf500001f110417951,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf500003f110417983,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf500007f110418047,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf50000ff110418175,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf50001ff110418431,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf50003ff110418943,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf50007ff110419967,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf5000fff110422015,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf5001fff110426111,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf5003fff110434303,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf5007fff110450687,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf500ffff110483455,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf501ffff110548991,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf503ffff110680063,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf507ffff110942207,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf50fffff111466495,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf51fffff112515071,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf53fffff114612223,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf5400000114612224,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf5600000116709376,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf5700000117757952,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf5780000118282240,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf57c0000118544384,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf57e0000118675456,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf57f0000118740992,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf57f8000118773760,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf57fc000118790144,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf57fe000118798336,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf57ff000118802432,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf57ff800118804480,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf57ffc00118805504,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf57ffe00118806016,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf57fff00118806272,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf57fff80118806400,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf57fffc0118806464,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf57fffe0118806496,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf57ffff0118806512,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf57ffff8118806520,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf57ffffc118806524,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf57ffffe118806526,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xf57fffff118806527,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xff000001278190081,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xff000003278190083,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xff000007278190087,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xff199999279867801,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xff249249280586825,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xff333333281545523,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xff36db6d281785197,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xff3bbbbb282104763,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xff444444282664004,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xff4ccccc283223244,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xff5b6db6284181942,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xff666666284900966,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xff6db6db285380315,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xff7ffff8286578680,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xff7ffffc286578684,32,FLEN)
NAN_BOXED(0x7f322cf0133994736,32,FLEN)
NAN_BOXED(0xbfb7e894216500884,32,FLEN)
NAN_BOXED(0xff7ffffe286578686,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000001147483649,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000003147483651,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000007147483655,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80199999149161369,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80249249149880393,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80333333150839091,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8036db6d151078765,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x803bbbbb151398331,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80444444151957572,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x804ccccc152516812,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x805b6db6153475510,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80666666154194534,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x806db6db154673883,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffff8155872248,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffc155872252,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffe155872254,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x84800000222981120,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x84800001222981121,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x84800003222981123,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x84800007222981127,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8480000f222981135,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8480001f222981151,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8480003f222981183,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8480007f222981247,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x848000ff222981375,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x848001ff222981631,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x848003ff222982143,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x848007ff222983167,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x84800fff222985215,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x84801fff222989311,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x84803fff222997503,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x84807fff223013887,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8480ffff223046655,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8481ffff223112191,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8483ffff223243263,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8487ffff223505407,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x848fffff224029695,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x849fffff225078271,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x84bfffff227175423,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x84c00000227175424,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x84e00000229272576,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x84f00000230321152,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x84f80000230845440,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x84fc0000231107584,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x84fe0000231238656,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x84ff0000231304192,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x84ff8000231336960,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x84ffc000231353344,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x84ffe000231361536,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x84fff000231365632,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x84fff800231367680,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x84fffc00231368704,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x84fffe00231369216,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x84ffff00231369472,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x84ffff80231369600,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x84ffffc0231369664,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x84ffffe0231369696,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x84fffff0231369712,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x84fffff8231369720,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x84fffffc231369724,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x84fffffe231369726,32,FLEN)
NAN_BOXED(0x7f3294a9134021289,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x84ffffff231369727,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x3580000097581056,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x3580000197581057,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x3580000397581059,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x3580000797581063,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x3580000f97581071,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x3580001f97581087,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x3580003f97581119,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x3580007f97581183,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x358000ff97581311,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x358001ff97581567,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x358003ff97582079,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x358007ff97583103,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x35800fff97585151,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x35801fff97589247,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x35803fff97597439,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x35807fff97613823,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x3580ffff97646591,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x3581ffff97712127,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x3583ffff97843199,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x3587ffff98105343,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x358fffff98629631,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x359fffff99678207,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x35bfffff01775359,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x35c0000001775360,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x35e0000003872512,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x35f0000004921088,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x35f8000005445376,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x35fc000005707520,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x35fe000005838592,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x35ff000005904128,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x35ff800005936896,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x35ffc00005953280,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x35ffe00005961472,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x35fff00005965568,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x35fff80005967616,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x35fffc0005968640,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x35fffe0005969152,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x35ffff0005969408,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x35ffff8005969536,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x35ffffc005969600,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x35ffffe005969632,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x35fffff005969648,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x35fffff805969656,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x35fffffc05969660,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x35fffffe05969662,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x35ffffff05969663,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x3f800001065353217,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x3f800003065353219,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x3f800007065353223,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x3f999999067030937,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x3fa49249067749961,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x3fb33333068708659,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x3fb6db6d068948333,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x3fbbbbbb069267899,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x3fc44444069827140,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x3fcccccc070386380,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x3fdb6db6071345078,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x3fe66666072064102,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x3fedb6db072543451,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x3ffffff8073741816,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x3ffffffc073741820,32,FLEN)
NAN_BOXED(0x7f32be0d134031885,32,FLEN)
NAN_BOXED(0x2dd4d1003601,32,FLEN)
NAN_BOXED(0x3ffffffe073741822,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf9800000185915392,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf9800001185915393,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf9800003185915395,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf9800007185915399,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf980000f185915407,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf980001f185915423,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf980003f185915455,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf980007f185915519,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf98000ff185915647,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf98001ff185915903,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf98003ff185916415,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf98007ff185917439,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf9800fff185919487,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf9801fff185923583,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf9803fff185931775,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf9807fff185948159,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf980ffff185980927,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf981ffff186046463,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf983ffff186177535,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf987ffff186439679,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf98fffff186963967,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf99fffff188012543,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf9bfffff190109695,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf9c00000190109696,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf9e00000192206848,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf9f00000193255424,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf9f80000193779712,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf9fc0000194041856,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf9fe0000194172928,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf9ff0000194238464,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf9ff8000194271232,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf9ffc000194287616,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf9ffe000194295808,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf9fff000194299904,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf9fff800194301952,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf9fffc00194302976,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf9fffe00194303488,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf9ffff00194303744,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf9ffff80194303872,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf9ffffc0194303936,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf9ffffe0194303968,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf9fffff0194303984,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf9fffff8194303992,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf9fffffc194303996,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf9fffffe194303998,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xf9ffffff194303999,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xff000001278190081,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xff000003278190083,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xff000007278190087,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xff199999279867801,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xff249249280586825,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xff333333281545523,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xff36db6d281785197,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xff3bbbbb282104763,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xff444444282664004,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xff4ccccc283223244,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xff5b6db6284181942,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xff666666284900966,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xff6db6db285380315,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xff7ffff8286578680,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xff7ffffc286578684,32,FLEN)
NAN_BOXED(0x7f331f85134056837,32,FLEN)
NAN_BOXED(0xbfb6ef84216437124,32,FLEN)
NAN_BOXED(0xff7ffffe286578686,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf5800000118806528,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf5800001118806529,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf5800003118806531,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf5800007118806535,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf580000f118806543,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf580001f118806559,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf580003f118806591,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf580007f118806655,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf58000ff118806783,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf58001ff118807039,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf58003ff118807551,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf58007ff118808575,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf5800fff118810623,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf5801fff118814719,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf5803fff118822911,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf5807fff118839295,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf580ffff118872063,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf581ffff118937599,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf583ffff119068671,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf587ffff119330815,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf58fffff119855103,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf59fffff120903679,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf5bfffff123000831,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf5c00000123000832,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf5e00000125097984,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf5f00000126146560,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf5f80000126670848,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf5fc0000126932992,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf5fe0000127064064,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf5ff0000127129600,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf5ff8000127162368,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf5ffc000127178752,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf5ffe000127186944,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf5fff000127191040,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf5fff800127193088,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf5fffc00127194112,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf5fffe00127194624,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf5ffff00127194880,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf5ffff80127195008,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf5ffffc0127195072,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf5ffffe0127195104,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf5fffff0127195120,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf5fffff8127195128,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf5fffffc127195132,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf5fffffe127195134,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xf5ffffff127195135,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xff000001278190081,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xff000003278190083,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xff000007278190087,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xff199999279867801,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xff249249280586825,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xff333333281545523,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xff36db6d281785197,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xff3bbbbb282104763,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xff444444282664004,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xff4ccccc283223244,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xff5b6db6284181942,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xff666666284900966,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xff6db6db285380315,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xff7ffff8286578680,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xff7ffffc286578684,32,FLEN)
NAN_BOXED(0x7f3328e6134059238,32,FLEN)
NAN_BOXED(0xbfb6e5f0216434672,32,FLEN)
NAN_BOXED(0xff7ffffe286578686,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7a800000055208960,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7a800001055208961,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7a800003055208963,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7a800007055208967,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7a80000f055208975,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7a80001f055208991,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7a80003f055209023,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7a80007f055209087,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7a8000ff055209215,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7a8001ff055209471,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7a8003ff055209983,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7a8007ff055211007,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7a800fff055213055,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7a801fff055217151,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7a803fff055225343,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7a807fff055241727,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7a80ffff055274495,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7a81ffff055340031,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7a83ffff055471103,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7a87ffff055733247,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7a8fffff056257535,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7a9fffff057306111,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7abfffff059403263,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7ac00000059403264,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7ae00000061500416,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7af00000062548992,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7af80000063073280,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7afc0000063335424,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7afe0000063466496,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7aff0000063532032,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7aff8000063564800,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7affc000063581184,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7affe000063589376,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7afff000063593472,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7afff800063595520,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7afffc00063596544,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7afffe00063597056,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7affff00063597312,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7affff80063597440,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7affffc0063597504,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7affffe0063597536,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7afffff0063597552,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7afffff8063597560,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7afffffc063597564,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7afffffe063597566,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7affffff063597567,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7f000001130706433,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7f000003130706435,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7f000007130706439,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7f199999132384153,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7f249249133103177,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7f333333134061875,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7f36db6d134301549,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7f3bbbbb134621115,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7f444444135180356,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7f4ccccc135739596,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7f5b6db6136698294,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7f666666137417318,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7f6db6db137896667,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7f7ffff8139095032,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7f7ffffc139095036,32,FLEN)
NAN_BOXED(0x7f33ed38134109496,32,FLEN)
NAN_BOXED(0x3fb61e60068899936,32,FLEN)
NAN_BOXED(0x7f7ffffe139095038,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
