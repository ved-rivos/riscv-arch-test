
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_15360:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:46080*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46080*0 + 3*0*FLEN/8, x4, x1, x2)

inst_15361:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:46083*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46083*0 + 3*1*FLEN/8, x4, x1, x2)

inst_15362:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:46086*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46086*0 + 3*2*FLEN/8, x4, x1, x2)

inst_15363:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:46089*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46089*0 + 3*3*FLEN/8, x4, x1, x2)

inst_15364:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:46092*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46092*0 + 3*4*FLEN/8, x4, x1, x2)

inst_15365:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:46095*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46095*0 + 3*5*FLEN/8, x4, x1, x2)

inst_15366:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:46098*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46098*0 + 3*6*FLEN/8, x4, x1, x2)

inst_15367:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:46101*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46101*0 + 3*7*FLEN/8, x4, x1, x2)

inst_15368:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:46104*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46104*0 + 3*8*FLEN/8, x4, x1, x2)

inst_15369:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:46107*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46107*0 + 3*9*FLEN/8, x4, x1, x2)

inst_15370:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:46110*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46110*0 + 3*10*FLEN/8, x4, x1, x2)

inst_15371:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:46113*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46113*0 + 3*11*FLEN/8, x4, x1, x2)

inst_15372:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:46116*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46116*0 + 3*12*FLEN/8, x4, x1, x2)

inst_15373:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:46119*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46119*0 + 3*13*FLEN/8, x4, x1, x2)

inst_15374:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:46122*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46122*0 + 3*14*FLEN/8, x4, x1, x2)

inst_15375:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:46125*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46125*0 + 3*15*FLEN/8, x4, x1, x2)

inst_15376:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe000000; valaddr_reg:x3; val_offset:46128*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46128*0 + 3*16*FLEN/8, x4, x1, x2)

inst_15377:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe000001; valaddr_reg:x3; val_offset:46131*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46131*0 + 3*17*FLEN/8, x4, x1, x2)

inst_15378:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe000003; valaddr_reg:x3; val_offset:46134*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46134*0 + 3*18*FLEN/8, x4, x1, x2)

inst_15379:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe000007; valaddr_reg:x3; val_offset:46137*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46137*0 + 3*19*FLEN/8, x4, x1, x2)

inst_15380:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe00000f; valaddr_reg:x3; val_offset:46140*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46140*0 + 3*20*FLEN/8, x4, x1, x2)

inst_15381:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe00001f; valaddr_reg:x3; val_offset:46143*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46143*0 + 3*21*FLEN/8, x4, x1, x2)

inst_15382:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe00003f; valaddr_reg:x3; val_offset:46146*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46146*0 + 3*22*FLEN/8, x4, x1, x2)

inst_15383:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe00007f; valaddr_reg:x3; val_offset:46149*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46149*0 + 3*23*FLEN/8, x4, x1, x2)

inst_15384:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe0000ff; valaddr_reg:x3; val_offset:46152*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46152*0 + 3*24*FLEN/8, x4, x1, x2)

inst_15385:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe0001ff; valaddr_reg:x3; val_offset:46155*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46155*0 + 3*25*FLEN/8, x4, x1, x2)

inst_15386:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe0003ff; valaddr_reg:x3; val_offset:46158*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46158*0 + 3*26*FLEN/8, x4, x1, x2)

inst_15387:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe0007ff; valaddr_reg:x3; val_offset:46161*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46161*0 + 3*27*FLEN/8, x4, x1, x2)

inst_15388:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe000fff; valaddr_reg:x3; val_offset:46164*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46164*0 + 3*28*FLEN/8, x4, x1, x2)

inst_15389:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe001fff; valaddr_reg:x3; val_offset:46167*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46167*0 + 3*29*FLEN/8, x4, x1, x2)

inst_15390:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe003fff; valaddr_reg:x3; val_offset:46170*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46170*0 + 3*30*FLEN/8, x4, x1, x2)

inst_15391:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe007fff; valaddr_reg:x3; val_offset:46173*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46173*0 + 3*31*FLEN/8, x4, x1, x2)

inst_15392:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe00ffff; valaddr_reg:x3; val_offset:46176*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46176*0 + 3*32*FLEN/8, x4, x1, x2)

inst_15393:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe01ffff; valaddr_reg:x3; val_offset:46179*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46179*0 + 3*33*FLEN/8, x4, x1, x2)

inst_15394:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe03ffff; valaddr_reg:x3; val_offset:46182*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46182*0 + 3*34*FLEN/8, x4, x1, x2)

inst_15395:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe07ffff; valaddr_reg:x3; val_offset:46185*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46185*0 + 3*35*FLEN/8, x4, x1, x2)

inst_15396:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe0fffff; valaddr_reg:x3; val_offset:46188*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46188*0 + 3*36*FLEN/8, x4, x1, x2)

inst_15397:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe1fffff; valaddr_reg:x3; val_offset:46191*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46191*0 + 3*37*FLEN/8, x4, x1, x2)

inst_15398:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe3fffff; valaddr_reg:x3; val_offset:46194*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46194*0 + 3*38*FLEN/8, x4, x1, x2)

inst_15399:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe400000; valaddr_reg:x3; val_offset:46197*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46197*0 + 3*39*FLEN/8, x4, x1, x2)

inst_15400:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe600000; valaddr_reg:x3; val_offset:46200*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46200*0 + 3*40*FLEN/8, x4, x1, x2)

inst_15401:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe700000; valaddr_reg:x3; val_offset:46203*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46203*0 + 3*41*FLEN/8, x4, x1, x2)

inst_15402:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe780000; valaddr_reg:x3; val_offset:46206*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46206*0 + 3*42*FLEN/8, x4, x1, x2)

inst_15403:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe7c0000; valaddr_reg:x3; val_offset:46209*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46209*0 + 3*43*FLEN/8, x4, x1, x2)

inst_15404:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe7e0000; valaddr_reg:x3; val_offset:46212*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46212*0 + 3*44*FLEN/8, x4, x1, x2)

inst_15405:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe7f0000; valaddr_reg:x3; val_offset:46215*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46215*0 + 3*45*FLEN/8, x4, x1, x2)

inst_15406:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe7f8000; valaddr_reg:x3; val_offset:46218*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46218*0 + 3*46*FLEN/8, x4, x1, x2)

inst_15407:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe7fc000; valaddr_reg:x3; val_offset:46221*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46221*0 + 3*47*FLEN/8, x4, x1, x2)

inst_15408:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe7fe000; valaddr_reg:x3; val_offset:46224*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46224*0 + 3*48*FLEN/8, x4, x1, x2)

inst_15409:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe7ff000; valaddr_reg:x3; val_offset:46227*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46227*0 + 3*49*FLEN/8, x4, x1, x2)

inst_15410:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe7ff800; valaddr_reg:x3; val_offset:46230*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46230*0 + 3*50*FLEN/8, x4, x1, x2)

inst_15411:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe7ffc00; valaddr_reg:x3; val_offset:46233*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46233*0 + 3*51*FLEN/8, x4, x1, x2)

inst_15412:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe7ffe00; valaddr_reg:x3; val_offset:46236*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46236*0 + 3*52*FLEN/8, x4, x1, x2)

inst_15413:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe7fff00; valaddr_reg:x3; val_offset:46239*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46239*0 + 3*53*FLEN/8, x4, x1, x2)

inst_15414:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe7fff80; valaddr_reg:x3; val_offset:46242*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46242*0 + 3*54*FLEN/8, x4, x1, x2)

inst_15415:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe7fffc0; valaddr_reg:x3; val_offset:46245*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46245*0 + 3*55*FLEN/8, x4, x1, x2)

inst_15416:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe7fffe0; valaddr_reg:x3; val_offset:46248*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46248*0 + 3*56*FLEN/8, x4, x1, x2)

inst_15417:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe7ffff0; valaddr_reg:x3; val_offset:46251*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46251*0 + 3*57*FLEN/8, x4, x1, x2)

inst_15418:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe7ffff8; valaddr_reg:x3; val_offset:46254*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46254*0 + 3*58*FLEN/8, x4, x1, x2)

inst_15419:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe7ffffc; valaddr_reg:x3; val_offset:46257*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46257*0 + 3*59*FLEN/8, x4, x1, x2)

inst_15420:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe7ffffe; valaddr_reg:x3; val_offset:46260*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46260*0 + 3*60*FLEN/8, x4, x1, x2)

inst_15421:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2001b0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea001b0; op2val:0x0;
op3val:0xe7fffff; valaddr_reg:x3; val_offset:46263*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46263*0 + 3*61*FLEN/8, x4, x1, x2)

inst_15422:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:46266*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46266*0 + 3*62*FLEN/8, x4, x1, x2)

inst_15423:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:46269*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46269*0 + 3*63*FLEN/8, x4, x1, x2)

inst_15424:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:46272*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46272*0 + 3*64*FLEN/8, x4, x1, x2)

inst_15425:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:46275*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46275*0 + 3*65*FLEN/8, x4, x1, x2)

inst_15426:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:46278*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46278*0 + 3*66*FLEN/8, x4, x1, x2)

inst_15427:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:46281*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46281*0 + 3*67*FLEN/8, x4, x1, x2)

inst_15428:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:46284*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46284*0 + 3*68*FLEN/8, x4, x1, x2)

inst_15429:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:46287*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46287*0 + 3*69*FLEN/8, x4, x1, x2)

inst_15430:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:46290*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46290*0 + 3*70*FLEN/8, x4, x1, x2)

inst_15431:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:46293*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46293*0 + 3*71*FLEN/8, x4, x1, x2)

inst_15432:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:46296*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46296*0 + 3*72*FLEN/8, x4, x1, x2)

inst_15433:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:46299*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46299*0 + 3*73*FLEN/8, x4, x1, x2)

inst_15434:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:46302*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46302*0 + 3*74*FLEN/8, x4, x1, x2)

inst_15435:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:46305*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46305*0 + 3*75*FLEN/8, x4, x1, x2)

inst_15436:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:46308*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46308*0 + 3*76*FLEN/8, x4, x1, x2)

inst_15437:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:46311*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46311*0 + 3*77*FLEN/8, x4, x1, x2)

inst_15438:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e000000; valaddr_reg:x3; val_offset:46314*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46314*0 + 3*78*FLEN/8, x4, x1, x2)

inst_15439:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e000001; valaddr_reg:x3; val_offset:46317*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46317*0 + 3*79*FLEN/8, x4, x1, x2)

inst_15440:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e000003; valaddr_reg:x3; val_offset:46320*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46320*0 + 3*80*FLEN/8, x4, x1, x2)

inst_15441:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e000007; valaddr_reg:x3; val_offset:46323*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46323*0 + 3*81*FLEN/8, x4, x1, x2)

inst_15442:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e00000f; valaddr_reg:x3; val_offset:46326*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46326*0 + 3*82*FLEN/8, x4, x1, x2)

inst_15443:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e00001f; valaddr_reg:x3; val_offset:46329*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46329*0 + 3*83*FLEN/8, x4, x1, x2)

inst_15444:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e00003f; valaddr_reg:x3; val_offset:46332*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46332*0 + 3*84*FLEN/8, x4, x1, x2)

inst_15445:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e00007f; valaddr_reg:x3; val_offset:46335*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46335*0 + 3*85*FLEN/8, x4, x1, x2)

inst_15446:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e0000ff; valaddr_reg:x3; val_offset:46338*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46338*0 + 3*86*FLEN/8, x4, x1, x2)

inst_15447:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e0001ff; valaddr_reg:x3; val_offset:46341*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46341*0 + 3*87*FLEN/8, x4, x1, x2)

inst_15448:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e0003ff; valaddr_reg:x3; val_offset:46344*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46344*0 + 3*88*FLEN/8, x4, x1, x2)

inst_15449:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e0007ff; valaddr_reg:x3; val_offset:46347*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46347*0 + 3*89*FLEN/8, x4, x1, x2)

inst_15450:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e000fff; valaddr_reg:x3; val_offset:46350*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46350*0 + 3*90*FLEN/8, x4, x1, x2)

inst_15451:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e001fff; valaddr_reg:x3; val_offset:46353*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46353*0 + 3*91*FLEN/8, x4, x1, x2)

inst_15452:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e003fff; valaddr_reg:x3; val_offset:46356*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46356*0 + 3*92*FLEN/8, x4, x1, x2)

inst_15453:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e007fff; valaddr_reg:x3; val_offset:46359*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46359*0 + 3*93*FLEN/8, x4, x1, x2)

inst_15454:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e00ffff; valaddr_reg:x3; val_offset:46362*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46362*0 + 3*94*FLEN/8, x4, x1, x2)

inst_15455:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e01ffff; valaddr_reg:x3; val_offset:46365*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46365*0 + 3*95*FLEN/8, x4, x1, x2)

inst_15456:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e03ffff; valaddr_reg:x3; val_offset:46368*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46368*0 + 3*96*FLEN/8, x4, x1, x2)

inst_15457:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e07ffff; valaddr_reg:x3; val_offset:46371*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46371*0 + 3*97*FLEN/8, x4, x1, x2)

inst_15458:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e0fffff; valaddr_reg:x3; val_offset:46374*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46374*0 + 3*98*FLEN/8, x4, x1, x2)

inst_15459:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e1fffff; valaddr_reg:x3; val_offset:46377*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46377*0 + 3*99*FLEN/8, x4, x1, x2)

inst_15460:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e3fffff; valaddr_reg:x3; val_offset:46380*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46380*0 + 3*100*FLEN/8, x4, x1, x2)

inst_15461:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e400000; valaddr_reg:x3; val_offset:46383*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46383*0 + 3*101*FLEN/8, x4, x1, x2)

inst_15462:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e600000; valaddr_reg:x3; val_offset:46386*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46386*0 + 3*102*FLEN/8, x4, x1, x2)

inst_15463:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e700000; valaddr_reg:x3; val_offset:46389*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46389*0 + 3*103*FLEN/8, x4, x1, x2)

inst_15464:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e780000; valaddr_reg:x3; val_offset:46392*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46392*0 + 3*104*FLEN/8, x4, x1, x2)

inst_15465:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e7c0000; valaddr_reg:x3; val_offset:46395*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46395*0 + 3*105*FLEN/8, x4, x1, x2)

inst_15466:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e7e0000; valaddr_reg:x3; val_offset:46398*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46398*0 + 3*106*FLEN/8, x4, x1, x2)

inst_15467:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e7f0000; valaddr_reg:x3; val_offset:46401*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46401*0 + 3*107*FLEN/8, x4, x1, x2)

inst_15468:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e7f8000; valaddr_reg:x3; val_offset:46404*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46404*0 + 3*108*FLEN/8, x4, x1, x2)

inst_15469:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e7fc000; valaddr_reg:x3; val_offset:46407*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46407*0 + 3*109*FLEN/8, x4, x1, x2)

inst_15470:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e7fe000; valaddr_reg:x3; val_offset:46410*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46410*0 + 3*110*FLEN/8, x4, x1, x2)

inst_15471:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e7ff000; valaddr_reg:x3; val_offset:46413*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46413*0 + 3*111*FLEN/8, x4, x1, x2)

inst_15472:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e7ff800; valaddr_reg:x3; val_offset:46416*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46416*0 + 3*112*FLEN/8, x4, x1, x2)

inst_15473:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e7ffc00; valaddr_reg:x3; val_offset:46419*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46419*0 + 3*113*FLEN/8, x4, x1, x2)

inst_15474:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e7ffe00; valaddr_reg:x3; val_offset:46422*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46422*0 + 3*114*FLEN/8, x4, x1, x2)

inst_15475:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e7fff00; valaddr_reg:x3; val_offset:46425*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46425*0 + 3*115*FLEN/8, x4, x1, x2)

inst_15476:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e7fff80; valaddr_reg:x3; val_offset:46428*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46428*0 + 3*116*FLEN/8, x4, x1, x2)

inst_15477:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e7fffc0; valaddr_reg:x3; val_offset:46431*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46431*0 + 3*117*FLEN/8, x4, x1, x2)

inst_15478:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e7fffe0; valaddr_reg:x3; val_offset:46434*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46434*0 + 3*118*FLEN/8, x4, x1, x2)

inst_15479:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e7ffff0; valaddr_reg:x3; val_offset:46437*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46437*0 + 3*119*FLEN/8, x4, x1, x2)

inst_15480:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e7ffff8; valaddr_reg:x3; val_offset:46440*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46440*0 + 3*120*FLEN/8, x4, x1, x2)

inst_15481:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e7ffffc; valaddr_reg:x3; val_offset:46443*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46443*0 + 3*121*FLEN/8, x4, x1, x2)

inst_15482:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e7ffffe; valaddr_reg:x3; val_offset:46446*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46446*0 + 3*122*FLEN/8, x4, x1, x2)

inst_15483:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x214463 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea14463; op2val:0x80000000;
op3val:0x8e7fffff; valaddr_reg:x3; val_offset:46449*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46449*0 + 3*123*FLEN/8, x4, x1, x2)

inst_15484:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x73000000; valaddr_reg:x3; val_offset:46452*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46452*0 + 3*124*FLEN/8, x4, x1, x2)

inst_15485:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x73000001; valaddr_reg:x3; val_offset:46455*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46455*0 + 3*125*FLEN/8, x4, x1, x2)

inst_15486:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x73000003; valaddr_reg:x3; val_offset:46458*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46458*0 + 3*126*FLEN/8, x4, x1, x2)

inst_15487:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x73000007; valaddr_reg:x3; val_offset:46461*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46461*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_15488:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x7300000f; valaddr_reg:x3; val_offset:46464*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46464*0 + 3*128*FLEN/8, x4, x1, x2)

inst_15489:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x7300001f; valaddr_reg:x3; val_offset:46467*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46467*0 + 3*129*FLEN/8, x4, x1, x2)

inst_15490:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x7300003f; valaddr_reg:x3; val_offset:46470*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46470*0 + 3*130*FLEN/8, x4, x1, x2)

inst_15491:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x7300007f; valaddr_reg:x3; val_offset:46473*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46473*0 + 3*131*FLEN/8, x4, x1, x2)

inst_15492:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x730000ff; valaddr_reg:x3; val_offset:46476*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46476*0 + 3*132*FLEN/8, x4, x1, x2)

inst_15493:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x730001ff; valaddr_reg:x3; val_offset:46479*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46479*0 + 3*133*FLEN/8, x4, x1, x2)

inst_15494:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x730003ff; valaddr_reg:x3; val_offset:46482*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46482*0 + 3*134*FLEN/8, x4, x1, x2)

inst_15495:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x730007ff; valaddr_reg:x3; val_offset:46485*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46485*0 + 3*135*FLEN/8, x4, x1, x2)

inst_15496:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x73000fff; valaddr_reg:x3; val_offset:46488*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46488*0 + 3*136*FLEN/8, x4, x1, x2)

inst_15497:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x73001fff; valaddr_reg:x3; val_offset:46491*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46491*0 + 3*137*FLEN/8, x4, x1, x2)

inst_15498:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x73003fff; valaddr_reg:x3; val_offset:46494*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46494*0 + 3*138*FLEN/8, x4, x1, x2)

inst_15499:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x73007fff; valaddr_reg:x3; val_offset:46497*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46497*0 + 3*139*FLEN/8, x4, x1, x2)

inst_15500:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x7300ffff; valaddr_reg:x3; val_offset:46500*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46500*0 + 3*140*FLEN/8, x4, x1, x2)

inst_15501:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x7301ffff; valaddr_reg:x3; val_offset:46503*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46503*0 + 3*141*FLEN/8, x4, x1, x2)

inst_15502:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x7303ffff; valaddr_reg:x3; val_offset:46506*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46506*0 + 3*142*FLEN/8, x4, x1, x2)

inst_15503:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x7307ffff; valaddr_reg:x3; val_offset:46509*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46509*0 + 3*143*FLEN/8, x4, x1, x2)

inst_15504:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x730fffff; valaddr_reg:x3; val_offset:46512*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46512*0 + 3*144*FLEN/8, x4, x1, x2)

inst_15505:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x731fffff; valaddr_reg:x3; val_offset:46515*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46515*0 + 3*145*FLEN/8, x4, x1, x2)

inst_15506:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x733fffff; valaddr_reg:x3; val_offset:46518*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46518*0 + 3*146*FLEN/8, x4, x1, x2)

inst_15507:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x73400000; valaddr_reg:x3; val_offset:46521*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46521*0 + 3*147*FLEN/8, x4, x1, x2)

inst_15508:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x73600000; valaddr_reg:x3; val_offset:46524*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46524*0 + 3*148*FLEN/8, x4, x1, x2)

inst_15509:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x73700000; valaddr_reg:x3; val_offset:46527*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46527*0 + 3*149*FLEN/8, x4, x1, x2)

inst_15510:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x73780000; valaddr_reg:x3; val_offset:46530*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46530*0 + 3*150*FLEN/8, x4, x1, x2)

inst_15511:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x737c0000; valaddr_reg:x3; val_offset:46533*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46533*0 + 3*151*FLEN/8, x4, x1, x2)

inst_15512:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x737e0000; valaddr_reg:x3; val_offset:46536*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46536*0 + 3*152*FLEN/8, x4, x1, x2)

inst_15513:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x737f0000; valaddr_reg:x3; val_offset:46539*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46539*0 + 3*153*FLEN/8, x4, x1, x2)

inst_15514:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x737f8000; valaddr_reg:x3; val_offset:46542*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46542*0 + 3*154*FLEN/8, x4, x1, x2)

inst_15515:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x737fc000; valaddr_reg:x3; val_offset:46545*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46545*0 + 3*155*FLEN/8, x4, x1, x2)

inst_15516:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x737fe000; valaddr_reg:x3; val_offset:46548*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46548*0 + 3*156*FLEN/8, x4, x1, x2)

inst_15517:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x737ff000; valaddr_reg:x3; val_offset:46551*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46551*0 + 3*157*FLEN/8, x4, x1, x2)

inst_15518:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x737ff800; valaddr_reg:x3; val_offset:46554*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46554*0 + 3*158*FLEN/8, x4, x1, x2)

inst_15519:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x737ffc00; valaddr_reg:x3; val_offset:46557*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46557*0 + 3*159*FLEN/8, x4, x1, x2)

inst_15520:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x737ffe00; valaddr_reg:x3; val_offset:46560*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46560*0 + 3*160*FLEN/8, x4, x1, x2)

inst_15521:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x737fff00; valaddr_reg:x3; val_offset:46563*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46563*0 + 3*161*FLEN/8, x4, x1, x2)

inst_15522:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x737fff80; valaddr_reg:x3; val_offset:46566*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46566*0 + 3*162*FLEN/8, x4, x1, x2)

inst_15523:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x737fffc0; valaddr_reg:x3; val_offset:46569*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46569*0 + 3*163*FLEN/8, x4, x1, x2)

inst_15524:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x737fffe0; valaddr_reg:x3; val_offset:46572*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46572*0 + 3*164*FLEN/8, x4, x1, x2)

inst_15525:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x737ffff0; valaddr_reg:x3; val_offset:46575*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46575*0 + 3*165*FLEN/8, x4, x1, x2)

inst_15526:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x737ffff8; valaddr_reg:x3; val_offset:46578*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46578*0 + 3*166*FLEN/8, x4, x1, x2)

inst_15527:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x737ffffc; valaddr_reg:x3; val_offset:46581*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46581*0 + 3*167*FLEN/8, x4, x1, x2)

inst_15528:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x737ffffe; valaddr_reg:x3; val_offset:46584*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46584*0 + 3*168*FLEN/8, x4, x1, x2)

inst_15529:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xe6 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x737fffff; valaddr_reg:x3; val_offset:46587*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46587*0 + 3*169*FLEN/8, x4, x1, x2)

inst_15530:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x7f000001; valaddr_reg:x3; val_offset:46590*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46590*0 + 3*170*FLEN/8, x4, x1, x2)

inst_15531:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x7f000003; valaddr_reg:x3; val_offset:46593*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46593*0 + 3*171*FLEN/8, x4, x1, x2)

inst_15532:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x7f000007; valaddr_reg:x3; val_offset:46596*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46596*0 + 3*172*FLEN/8, x4, x1, x2)

inst_15533:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x7f199999; valaddr_reg:x3; val_offset:46599*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46599*0 + 3*173*FLEN/8, x4, x1, x2)

inst_15534:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x7f249249; valaddr_reg:x3; val_offset:46602*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46602*0 + 3*174*FLEN/8, x4, x1, x2)

inst_15535:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x7f333333; valaddr_reg:x3; val_offset:46605*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46605*0 + 3*175*FLEN/8, x4, x1, x2)

inst_15536:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:46608*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46608*0 + 3*176*FLEN/8, x4, x1, x2)

inst_15537:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:46611*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46611*0 + 3*177*FLEN/8, x4, x1, x2)

inst_15538:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x7f444444; valaddr_reg:x3; val_offset:46614*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46614*0 + 3*178*FLEN/8, x4, x1, x2)

inst_15539:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:46617*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46617*0 + 3*179*FLEN/8, x4, x1, x2)

inst_15540:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:46620*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46620*0 + 3*180*FLEN/8, x4, x1, x2)

inst_15541:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x7f666666; valaddr_reg:x3; val_offset:46623*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46623*0 + 3*181*FLEN/8, x4, x1, x2)

inst_15542:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:46626*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46626*0 + 3*182*FLEN/8, x4, x1, x2)

inst_15543:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:46629*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46629*0 + 3*183*FLEN/8, x4, x1, x2)

inst_15544:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:46632*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46632*0 + 3*184*FLEN/8, x4, x1, x2)

inst_15545:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2388ab and fs2 == 0 and fe2 == 0x80 and fm2 == 0x485fd7 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea388ab; op2val:0x40485fd7;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:46635*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46635*0 + 3*185*FLEN/8, x4, x1, x2)

inst_15546:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x3f800001; valaddr_reg:x3; val_offset:46638*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46638*0 + 3*186*FLEN/8, x4, x1, x2)

inst_15547:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x3f800003; valaddr_reg:x3; val_offset:46641*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46641*0 + 3*187*FLEN/8, x4, x1, x2)

inst_15548:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x3f800007; valaddr_reg:x3; val_offset:46644*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46644*0 + 3*188*FLEN/8, x4, x1, x2)

inst_15549:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x3f999999; valaddr_reg:x3; val_offset:46647*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46647*0 + 3*189*FLEN/8, x4, x1, x2)

inst_15550:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:46650*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46650*0 + 3*190*FLEN/8, x4, x1, x2)

inst_15551:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:46653*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46653*0 + 3*191*FLEN/8, x4, x1, x2)

inst_15552:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:46656*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46656*0 + 3*192*FLEN/8, x4, x1, x2)

inst_15553:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:46659*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46659*0 + 3*193*FLEN/8, x4, x1, x2)

inst_15554:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:46662*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46662*0 + 3*194*FLEN/8, x4, x1, x2)

inst_15555:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:46665*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46665*0 + 3*195*FLEN/8, x4, x1, x2)

inst_15556:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:46668*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46668*0 + 3*196*FLEN/8, x4, x1, x2)

inst_15557:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:46671*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46671*0 + 3*197*FLEN/8, x4, x1, x2)

inst_15558:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:46674*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46674*0 + 3*198*FLEN/8, x4, x1, x2)

inst_15559:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:46677*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46677*0 + 3*199*FLEN/8, x4, x1, x2)

inst_15560:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:46680*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46680*0 + 3*200*FLEN/8, x4, x1, x2)

inst_15561:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:46683*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46683*0 + 3*201*FLEN/8, x4, x1, x2)

inst_15562:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4d800000; valaddr_reg:x3; val_offset:46686*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46686*0 + 3*202*FLEN/8, x4, x1, x2)

inst_15563:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4d800001; valaddr_reg:x3; val_offset:46689*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46689*0 + 3*203*FLEN/8, x4, x1, x2)

inst_15564:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4d800003; valaddr_reg:x3; val_offset:46692*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46692*0 + 3*204*FLEN/8, x4, x1, x2)

inst_15565:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4d800007; valaddr_reg:x3; val_offset:46695*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46695*0 + 3*205*FLEN/8, x4, x1, x2)

inst_15566:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4d80000f; valaddr_reg:x3; val_offset:46698*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46698*0 + 3*206*FLEN/8, x4, x1, x2)

inst_15567:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4d80001f; valaddr_reg:x3; val_offset:46701*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46701*0 + 3*207*FLEN/8, x4, x1, x2)

inst_15568:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4d80003f; valaddr_reg:x3; val_offset:46704*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46704*0 + 3*208*FLEN/8, x4, x1, x2)

inst_15569:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4d80007f; valaddr_reg:x3; val_offset:46707*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46707*0 + 3*209*FLEN/8, x4, x1, x2)

inst_15570:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4d8000ff; valaddr_reg:x3; val_offset:46710*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46710*0 + 3*210*FLEN/8, x4, x1, x2)

inst_15571:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4d8001ff; valaddr_reg:x3; val_offset:46713*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46713*0 + 3*211*FLEN/8, x4, x1, x2)

inst_15572:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4d8003ff; valaddr_reg:x3; val_offset:46716*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46716*0 + 3*212*FLEN/8, x4, x1, x2)

inst_15573:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4d8007ff; valaddr_reg:x3; val_offset:46719*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46719*0 + 3*213*FLEN/8, x4, x1, x2)

inst_15574:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4d800fff; valaddr_reg:x3; val_offset:46722*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46722*0 + 3*214*FLEN/8, x4, x1, x2)

inst_15575:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4d801fff; valaddr_reg:x3; val_offset:46725*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46725*0 + 3*215*FLEN/8, x4, x1, x2)

inst_15576:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4d803fff; valaddr_reg:x3; val_offset:46728*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46728*0 + 3*216*FLEN/8, x4, x1, x2)

inst_15577:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4d807fff; valaddr_reg:x3; val_offset:46731*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46731*0 + 3*217*FLEN/8, x4, x1, x2)

inst_15578:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4d80ffff; valaddr_reg:x3; val_offset:46734*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46734*0 + 3*218*FLEN/8, x4, x1, x2)

inst_15579:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4d81ffff; valaddr_reg:x3; val_offset:46737*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46737*0 + 3*219*FLEN/8, x4, x1, x2)

inst_15580:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4d83ffff; valaddr_reg:x3; val_offset:46740*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46740*0 + 3*220*FLEN/8, x4, x1, x2)

inst_15581:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4d87ffff; valaddr_reg:x3; val_offset:46743*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46743*0 + 3*221*FLEN/8, x4, x1, x2)

inst_15582:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4d8fffff; valaddr_reg:x3; val_offset:46746*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46746*0 + 3*222*FLEN/8, x4, x1, x2)

inst_15583:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4d9fffff; valaddr_reg:x3; val_offset:46749*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46749*0 + 3*223*FLEN/8, x4, x1, x2)

inst_15584:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4dbfffff; valaddr_reg:x3; val_offset:46752*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46752*0 + 3*224*FLEN/8, x4, x1, x2)

inst_15585:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4dc00000; valaddr_reg:x3; val_offset:46755*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46755*0 + 3*225*FLEN/8, x4, x1, x2)

inst_15586:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4de00000; valaddr_reg:x3; val_offset:46758*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46758*0 + 3*226*FLEN/8, x4, x1, x2)

inst_15587:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4df00000; valaddr_reg:x3; val_offset:46761*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46761*0 + 3*227*FLEN/8, x4, x1, x2)

inst_15588:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4df80000; valaddr_reg:x3; val_offset:46764*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46764*0 + 3*228*FLEN/8, x4, x1, x2)

inst_15589:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4dfc0000; valaddr_reg:x3; val_offset:46767*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46767*0 + 3*229*FLEN/8, x4, x1, x2)

inst_15590:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4dfe0000; valaddr_reg:x3; val_offset:46770*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46770*0 + 3*230*FLEN/8, x4, x1, x2)

inst_15591:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4dff0000; valaddr_reg:x3; val_offset:46773*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46773*0 + 3*231*FLEN/8, x4, x1, x2)

inst_15592:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4dff8000; valaddr_reg:x3; val_offset:46776*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46776*0 + 3*232*FLEN/8, x4, x1, x2)

inst_15593:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4dffc000; valaddr_reg:x3; val_offset:46779*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46779*0 + 3*233*FLEN/8, x4, x1, x2)

inst_15594:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4dffe000; valaddr_reg:x3; val_offset:46782*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46782*0 + 3*234*FLEN/8, x4, x1, x2)

inst_15595:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4dfff000; valaddr_reg:x3; val_offset:46785*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46785*0 + 3*235*FLEN/8, x4, x1, x2)

inst_15596:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4dfff800; valaddr_reg:x3; val_offset:46788*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46788*0 + 3*236*FLEN/8, x4, x1, x2)

inst_15597:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4dfffc00; valaddr_reg:x3; val_offset:46791*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46791*0 + 3*237*FLEN/8, x4, x1, x2)

inst_15598:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4dfffe00; valaddr_reg:x3; val_offset:46794*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46794*0 + 3*238*FLEN/8, x4, x1, x2)

inst_15599:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4dffff00; valaddr_reg:x3; val_offset:46797*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46797*0 + 3*239*FLEN/8, x4, x1, x2)

inst_15600:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4dffff80; valaddr_reg:x3; val_offset:46800*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46800*0 + 3*240*FLEN/8, x4, x1, x2)

inst_15601:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4dffffc0; valaddr_reg:x3; val_offset:46803*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46803*0 + 3*241*FLEN/8, x4, x1, x2)

inst_15602:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4dffffe0; valaddr_reg:x3; val_offset:46806*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46806*0 + 3*242*FLEN/8, x4, x1, x2)

inst_15603:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4dfffff0; valaddr_reg:x3; val_offset:46809*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46809*0 + 3*243*FLEN/8, x4, x1, x2)

inst_15604:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4dfffff8; valaddr_reg:x3; val_offset:46812*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46812*0 + 3*244*FLEN/8, x4, x1, x2)

inst_15605:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4dfffffc; valaddr_reg:x3; val_offset:46815*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46815*0 + 3*245*FLEN/8, x4, x1, x2)

inst_15606:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4dfffffe; valaddr_reg:x3; val_offset:46818*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46818*0 + 3*246*FLEN/8, x4, x1, x2)

inst_15607:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23b2ee and fs2 == 0 and fe2 == 0x00 and fm2 == 0x64160e and fs3 == 0 and fe3 == 0x9b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3b2ee; op2val:0x64160e;
op3val:0x4dffffff; valaddr_reg:x3; val_offset:46821*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46821*0 + 3*247*FLEN/8, x4, x1, x2)

inst_15608:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x3f800001; valaddr_reg:x3; val_offset:46824*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46824*0 + 3*248*FLEN/8, x4, x1, x2)

inst_15609:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x3f800003; valaddr_reg:x3; val_offset:46827*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46827*0 + 3*249*FLEN/8, x4, x1, x2)

inst_15610:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x3f800007; valaddr_reg:x3; val_offset:46830*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46830*0 + 3*250*FLEN/8, x4, x1, x2)

inst_15611:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x3f999999; valaddr_reg:x3; val_offset:46833*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46833*0 + 3*251*FLEN/8, x4, x1, x2)

inst_15612:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:46836*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46836*0 + 3*252*FLEN/8, x4, x1, x2)

inst_15613:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:46839*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46839*0 + 3*253*FLEN/8, x4, x1, x2)

inst_15614:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:46842*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46842*0 + 3*254*FLEN/8, x4, x1, x2)

inst_15615:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:46845*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46845*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_15616:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:46848*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46848*0 + 3*256*FLEN/8, x4, x1, x2)

inst_15617:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:46851*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46851*0 + 3*257*FLEN/8, x4, x1, x2)

inst_15618:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:46854*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46854*0 + 3*258*FLEN/8, x4, x1, x2)

inst_15619:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:46857*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46857*0 + 3*259*FLEN/8, x4, x1, x2)

inst_15620:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:46860*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46860*0 + 3*260*FLEN/8, x4, x1, x2)

inst_15621:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:46863*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46863*0 + 3*261*FLEN/8, x4, x1, x2)

inst_15622:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:46866*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46866*0 + 3*262*FLEN/8, x4, x1, x2)

inst_15623:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:46869*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46869*0 + 3*263*FLEN/8, x4, x1, x2)

inst_15624:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x48000000; valaddr_reg:x3; val_offset:46872*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46872*0 + 3*264*FLEN/8, x4, x1, x2)

inst_15625:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x48000001; valaddr_reg:x3; val_offset:46875*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46875*0 + 3*265*FLEN/8, x4, x1, x2)

inst_15626:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x48000003; valaddr_reg:x3; val_offset:46878*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46878*0 + 3*266*FLEN/8, x4, x1, x2)

inst_15627:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x48000007; valaddr_reg:x3; val_offset:46881*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46881*0 + 3*267*FLEN/8, x4, x1, x2)

inst_15628:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x4800000f; valaddr_reg:x3; val_offset:46884*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46884*0 + 3*268*FLEN/8, x4, x1, x2)

inst_15629:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x4800001f; valaddr_reg:x3; val_offset:46887*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46887*0 + 3*269*FLEN/8, x4, x1, x2)

inst_15630:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x4800003f; valaddr_reg:x3; val_offset:46890*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46890*0 + 3*270*FLEN/8, x4, x1, x2)

inst_15631:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x4800007f; valaddr_reg:x3; val_offset:46893*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46893*0 + 3*271*FLEN/8, x4, x1, x2)

inst_15632:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x480000ff; valaddr_reg:x3; val_offset:46896*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46896*0 + 3*272*FLEN/8, x4, x1, x2)

inst_15633:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x480001ff; valaddr_reg:x3; val_offset:46899*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46899*0 + 3*273*FLEN/8, x4, x1, x2)

inst_15634:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x480003ff; valaddr_reg:x3; val_offset:46902*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46902*0 + 3*274*FLEN/8, x4, x1, x2)

inst_15635:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x480007ff; valaddr_reg:x3; val_offset:46905*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46905*0 + 3*275*FLEN/8, x4, x1, x2)

inst_15636:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x48000fff; valaddr_reg:x3; val_offset:46908*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46908*0 + 3*276*FLEN/8, x4, x1, x2)

inst_15637:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x48001fff; valaddr_reg:x3; val_offset:46911*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46911*0 + 3*277*FLEN/8, x4, x1, x2)

inst_15638:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x48003fff; valaddr_reg:x3; val_offset:46914*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46914*0 + 3*278*FLEN/8, x4, x1, x2)

inst_15639:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x48007fff; valaddr_reg:x3; val_offset:46917*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46917*0 + 3*279*FLEN/8, x4, x1, x2)

inst_15640:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x4800ffff; valaddr_reg:x3; val_offset:46920*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46920*0 + 3*280*FLEN/8, x4, x1, x2)

inst_15641:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x4801ffff; valaddr_reg:x3; val_offset:46923*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46923*0 + 3*281*FLEN/8, x4, x1, x2)

inst_15642:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x4803ffff; valaddr_reg:x3; val_offset:46926*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46926*0 + 3*282*FLEN/8, x4, x1, x2)

inst_15643:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x4807ffff; valaddr_reg:x3; val_offset:46929*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46929*0 + 3*283*FLEN/8, x4, x1, x2)

inst_15644:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x480fffff; valaddr_reg:x3; val_offset:46932*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46932*0 + 3*284*FLEN/8, x4, x1, x2)

inst_15645:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x481fffff; valaddr_reg:x3; val_offset:46935*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46935*0 + 3*285*FLEN/8, x4, x1, x2)

inst_15646:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x483fffff; valaddr_reg:x3; val_offset:46938*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46938*0 + 3*286*FLEN/8, x4, x1, x2)

inst_15647:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x48400000; valaddr_reg:x3; val_offset:46941*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46941*0 + 3*287*FLEN/8, x4, x1, x2)

inst_15648:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x48600000; valaddr_reg:x3; val_offset:46944*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46944*0 + 3*288*FLEN/8, x4, x1, x2)

inst_15649:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x48700000; valaddr_reg:x3; val_offset:46947*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46947*0 + 3*289*FLEN/8, x4, x1, x2)

inst_15650:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x48780000; valaddr_reg:x3; val_offset:46950*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46950*0 + 3*290*FLEN/8, x4, x1, x2)

inst_15651:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487c0000; valaddr_reg:x3; val_offset:46953*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46953*0 + 3*291*FLEN/8, x4, x1, x2)

inst_15652:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487e0000; valaddr_reg:x3; val_offset:46956*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46956*0 + 3*292*FLEN/8, x4, x1, x2)

inst_15653:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487f0000; valaddr_reg:x3; val_offset:46959*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46959*0 + 3*293*FLEN/8, x4, x1, x2)

inst_15654:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487f8000; valaddr_reg:x3; val_offset:46962*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46962*0 + 3*294*FLEN/8, x4, x1, x2)

inst_15655:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487fc000; valaddr_reg:x3; val_offset:46965*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46965*0 + 3*295*FLEN/8, x4, x1, x2)

inst_15656:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487fe000; valaddr_reg:x3; val_offset:46968*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46968*0 + 3*296*FLEN/8, x4, x1, x2)

inst_15657:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487ff000; valaddr_reg:x3; val_offset:46971*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46971*0 + 3*297*FLEN/8, x4, x1, x2)

inst_15658:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487ff800; valaddr_reg:x3; val_offset:46974*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46974*0 + 3*298*FLEN/8, x4, x1, x2)

inst_15659:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487ffc00; valaddr_reg:x3; val_offset:46977*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46977*0 + 3*299*FLEN/8, x4, x1, x2)

inst_15660:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487ffe00; valaddr_reg:x3; val_offset:46980*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46980*0 + 3*300*FLEN/8, x4, x1, x2)

inst_15661:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487fff00; valaddr_reg:x3; val_offset:46983*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46983*0 + 3*301*FLEN/8, x4, x1, x2)

inst_15662:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487fff80; valaddr_reg:x3; val_offset:46986*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46986*0 + 3*302*FLEN/8, x4, x1, x2)

inst_15663:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487fffc0; valaddr_reg:x3; val_offset:46989*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46989*0 + 3*303*FLEN/8, x4, x1, x2)

inst_15664:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487fffe0; valaddr_reg:x3; val_offset:46992*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46992*0 + 3*304*FLEN/8, x4, x1, x2)

inst_15665:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487ffff0; valaddr_reg:x3; val_offset:46995*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46995*0 + 3*305*FLEN/8, x4, x1, x2)

inst_15666:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487ffff8; valaddr_reg:x3; val_offset:46998*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 46998*0 + 3*306*FLEN/8, x4, x1, x2)

inst_15667:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487ffffc; valaddr_reg:x3; val_offset:47001*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47001*0 + 3*307*FLEN/8, x4, x1, x2)

inst_15668:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487ffffe; valaddr_reg:x3; val_offset:47004*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47004*0 + 3*308*FLEN/8, x4, x1, x2)

inst_15669:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23d6e0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x640019 and fs3 == 0 and fe3 == 0x90 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3d6e0; op2val:0x640019;
op3val:0x487fffff; valaddr_reg:x3; val_offset:47007*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47007*0 + 3*309*FLEN/8, x4, x1, x2)

inst_15670:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf800000; valaddr_reg:x3; val_offset:47010*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47010*0 + 3*310*FLEN/8, x4, x1, x2)

inst_15671:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf800001; valaddr_reg:x3; val_offset:47013*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47013*0 + 3*311*FLEN/8, x4, x1, x2)

inst_15672:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf800003; valaddr_reg:x3; val_offset:47016*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47016*0 + 3*312*FLEN/8, x4, x1, x2)

inst_15673:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf800007; valaddr_reg:x3; val_offset:47019*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47019*0 + 3*313*FLEN/8, x4, x1, x2)

inst_15674:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf80000f; valaddr_reg:x3; val_offset:47022*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47022*0 + 3*314*FLEN/8, x4, x1, x2)

inst_15675:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf80001f; valaddr_reg:x3; val_offset:47025*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47025*0 + 3*315*FLEN/8, x4, x1, x2)

inst_15676:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf80003f; valaddr_reg:x3; val_offset:47028*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47028*0 + 3*316*FLEN/8, x4, x1, x2)

inst_15677:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf80007f; valaddr_reg:x3; val_offset:47031*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47031*0 + 3*317*FLEN/8, x4, x1, x2)

inst_15678:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf8000ff; valaddr_reg:x3; val_offset:47034*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47034*0 + 3*318*FLEN/8, x4, x1, x2)

inst_15679:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf8001ff; valaddr_reg:x3; val_offset:47037*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47037*0 + 3*319*FLEN/8, x4, x1, x2)

inst_15680:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf8003ff; valaddr_reg:x3; val_offset:47040*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47040*0 + 3*320*FLEN/8, x4, x1, x2)

inst_15681:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf8007ff; valaddr_reg:x3; val_offset:47043*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47043*0 + 3*321*FLEN/8, x4, x1, x2)

inst_15682:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf800fff; valaddr_reg:x3; val_offset:47046*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47046*0 + 3*322*FLEN/8, x4, x1, x2)

inst_15683:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf801fff; valaddr_reg:x3; val_offset:47049*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47049*0 + 3*323*FLEN/8, x4, x1, x2)

inst_15684:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf803fff; valaddr_reg:x3; val_offset:47052*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47052*0 + 3*324*FLEN/8, x4, x1, x2)

inst_15685:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf807fff; valaddr_reg:x3; val_offset:47055*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47055*0 + 3*325*FLEN/8, x4, x1, x2)

inst_15686:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf80ffff; valaddr_reg:x3; val_offset:47058*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47058*0 + 3*326*FLEN/8, x4, x1, x2)

inst_15687:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf81ffff; valaddr_reg:x3; val_offset:47061*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47061*0 + 3*327*FLEN/8, x4, x1, x2)

inst_15688:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf83ffff; valaddr_reg:x3; val_offset:47064*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47064*0 + 3*328*FLEN/8, x4, x1, x2)

inst_15689:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf87ffff; valaddr_reg:x3; val_offset:47067*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47067*0 + 3*329*FLEN/8, x4, x1, x2)

inst_15690:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf8fffff; valaddr_reg:x3; val_offset:47070*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47070*0 + 3*330*FLEN/8, x4, x1, x2)

inst_15691:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaf9fffff; valaddr_reg:x3; val_offset:47073*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47073*0 + 3*331*FLEN/8, x4, x1, x2)

inst_15692:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xafbfffff; valaddr_reg:x3; val_offset:47076*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47076*0 + 3*332*FLEN/8, x4, x1, x2)

inst_15693:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xafc00000; valaddr_reg:x3; val_offset:47079*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47079*0 + 3*333*FLEN/8, x4, x1, x2)

inst_15694:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xafe00000; valaddr_reg:x3; val_offset:47082*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47082*0 + 3*334*FLEN/8, x4, x1, x2)

inst_15695:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaff00000; valaddr_reg:x3; val_offset:47085*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47085*0 + 3*335*FLEN/8, x4, x1, x2)

inst_15696:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaff80000; valaddr_reg:x3; val_offset:47088*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47088*0 + 3*336*FLEN/8, x4, x1, x2)

inst_15697:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaffc0000; valaddr_reg:x3; val_offset:47091*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47091*0 + 3*337*FLEN/8, x4, x1, x2)

inst_15698:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaffe0000; valaddr_reg:x3; val_offset:47094*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47094*0 + 3*338*FLEN/8, x4, x1, x2)

inst_15699:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xafff0000; valaddr_reg:x3; val_offset:47097*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47097*0 + 3*339*FLEN/8, x4, x1, x2)

inst_15700:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xafff8000; valaddr_reg:x3; val_offset:47100*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47100*0 + 3*340*FLEN/8, x4, x1, x2)

inst_15701:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xafffc000; valaddr_reg:x3; val_offset:47103*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47103*0 + 3*341*FLEN/8, x4, x1, x2)

inst_15702:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xafffe000; valaddr_reg:x3; val_offset:47106*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47106*0 + 3*342*FLEN/8, x4, x1, x2)

inst_15703:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaffff000; valaddr_reg:x3; val_offset:47109*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47109*0 + 3*343*FLEN/8, x4, x1, x2)

inst_15704:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaffff800; valaddr_reg:x3; val_offset:47112*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47112*0 + 3*344*FLEN/8, x4, x1, x2)

inst_15705:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaffffc00; valaddr_reg:x3; val_offset:47115*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47115*0 + 3*345*FLEN/8, x4, x1, x2)

inst_15706:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaffffe00; valaddr_reg:x3; val_offset:47118*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47118*0 + 3*346*FLEN/8, x4, x1, x2)

inst_15707:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xafffff00; valaddr_reg:x3; val_offset:47121*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47121*0 + 3*347*FLEN/8, x4, x1, x2)

inst_15708:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xafffff80; valaddr_reg:x3; val_offset:47124*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47124*0 + 3*348*FLEN/8, x4, x1, x2)

inst_15709:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xafffffc0; valaddr_reg:x3; val_offset:47127*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47127*0 + 3*349*FLEN/8, x4, x1, x2)

inst_15710:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xafffffe0; valaddr_reg:x3; val_offset:47130*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47130*0 + 3*350*FLEN/8, x4, x1, x2)

inst_15711:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaffffff0; valaddr_reg:x3; val_offset:47133*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47133*0 + 3*351*FLEN/8, x4, x1, x2)

inst_15712:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaffffff8; valaddr_reg:x3; val_offset:47136*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47136*0 + 3*352*FLEN/8, x4, x1, x2)

inst_15713:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaffffffc; valaddr_reg:x3; val_offset:47139*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47139*0 + 3*353*FLEN/8, x4, x1, x2)

inst_15714:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xaffffffe; valaddr_reg:x3; val_offset:47142*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47142*0 + 3*354*FLEN/8, x4, x1, x2)

inst_15715:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x5f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xafffffff; valaddr_reg:x3; val_offset:47145*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47145*0 + 3*355*FLEN/8, x4, x1, x2)

inst_15716:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xbf800001; valaddr_reg:x3; val_offset:47148*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47148*0 + 3*356*FLEN/8, x4, x1, x2)

inst_15717:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xbf800003; valaddr_reg:x3; val_offset:47151*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47151*0 + 3*357*FLEN/8, x4, x1, x2)

inst_15718:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xbf800007; valaddr_reg:x3; val_offset:47154*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47154*0 + 3*358*FLEN/8, x4, x1, x2)

inst_15719:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xbf999999; valaddr_reg:x3; val_offset:47157*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47157*0 + 3*359*FLEN/8, x4, x1, x2)

inst_15720:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:47160*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47160*0 + 3*360*FLEN/8, x4, x1, x2)

inst_15721:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:47163*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47163*0 + 3*361*FLEN/8, x4, x1, x2)

inst_15722:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:47166*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47166*0 + 3*362*FLEN/8, x4, x1, x2)

inst_15723:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:47169*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47169*0 + 3*363*FLEN/8, x4, x1, x2)

inst_15724:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:47172*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47172*0 + 3*364*FLEN/8, x4, x1, x2)

inst_15725:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:47175*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47175*0 + 3*365*FLEN/8, x4, x1, x2)

inst_15726:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:47178*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47178*0 + 3*366*FLEN/8, x4, x1, x2)

inst_15727:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:47181*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47181*0 + 3*367*FLEN/8, x4, x1, x2)

inst_15728:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:47184*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47184*0 + 3*368*FLEN/8, x4, x1, x2)

inst_15729:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:47187*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47187*0 + 3*369*FLEN/8, x4, x1, x2)

inst_15730:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:47190*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47190*0 + 3*370*FLEN/8, x4, x1, x2)

inst_15731:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x24d40c and fs2 == 1 and fe2 == 0x00 and fm2 == 0x636680 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea4d40c; op2val:0x80636680;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:47193*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47193*0 + 3*371*FLEN/8, x4, x1, x2)

inst_15732:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:47196*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47196*0 + 3*372*FLEN/8, x4, x1, x2)

inst_15733:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:47199*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47199*0 + 3*373*FLEN/8, x4, x1, x2)

inst_15734:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:47202*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47202*0 + 3*374*FLEN/8, x4, x1, x2)

inst_15735:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:47205*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47205*0 + 3*375*FLEN/8, x4, x1, x2)

inst_15736:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:47208*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47208*0 + 3*376*FLEN/8, x4, x1, x2)

inst_15737:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:47211*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47211*0 + 3*377*FLEN/8, x4, x1, x2)

inst_15738:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:47214*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47214*0 + 3*378*FLEN/8, x4, x1, x2)

inst_15739:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:47217*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47217*0 + 3*379*FLEN/8, x4, x1, x2)

inst_15740:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:47220*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47220*0 + 3*380*FLEN/8, x4, x1, x2)

inst_15741:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:47223*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47223*0 + 3*381*FLEN/8, x4, x1, x2)

inst_15742:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:47226*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47226*0 + 3*382*FLEN/8, x4, x1, x2)

inst_15743:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:47229*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47229*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_15744:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:47232*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47232*0 + 3*384*FLEN/8, x4, x1, x2)

inst_15745:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:47235*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47235*0 + 3*385*FLEN/8, x4, x1, x2)

inst_15746:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:47238*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47238*0 + 3*386*FLEN/8, x4, x1, x2)

inst_15747:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:47241*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47241*0 + 3*387*FLEN/8, x4, x1, x2)

inst_15748:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81800000; valaddr_reg:x3; val_offset:47244*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47244*0 + 3*388*FLEN/8, x4, x1, x2)

inst_15749:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81800001; valaddr_reg:x3; val_offset:47247*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47247*0 + 3*389*FLEN/8, x4, x1, x2)

inst_15750:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81800003; valaddr_reg:x3; val_offset:47250*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47250*0 + 3*390*FLEN/8, x4, x1, x2)

inst_15751:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81800007; valaddr_reg:x3; val_offset:47253*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47253*0 + 3*391*FLEN/8, x4, x1, x2)

inst_15752:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x8180000f; valaddr_reg:x3; val_offset:47256*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47256*0 + 3*392*FLEN/8, x4, x1, x2)

inst_15753:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x8180001f; valaddr_reg:x3; val_offset:47259*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47259*0 + 3*393*FLEN/8, x4, x1, x2)

inst_15754:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x8180003f; valaddr_reg:x3; val_offset:47262*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47262*0 + 3*394*FLEN/8, x4, x1, x2)

inst_15755:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x8180007f; valaddr_reg:x3; val_offset:47265*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47265*0 + 3*395*FLEN/8, x4, x1, x2)

inst_15756:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x818000ff; valaddr_reg:x3; val_offset:47268*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47268*0 + 3*396*FLEN/8, x4, x1, x2)

inst_15757:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x818001ff; valaddr_reg:x3; val_offset:47271*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47271*0 + 3*397*FLEN/8, x4, x1, x2)

inst_15758:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x818003ff; valaddr_reg:x3; val_offset:47274*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47274*0 + 3*398*FLEN/8, x4, x1, x2)

inst_15759:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x818007ff; valaddr_reg:x3; val_offset:47277*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47277*0 + 3*399*FLEN/8, x4, x1, x2)

inst_15760:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81800fff; valaddr_reg:x3; val_offset:47280*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47280*0 + 3*400*FLEN/8, x4, x1, x2)

inst_15761:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81801fff; valaddr_reg:x3; val_offset:47283*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47283*0 + 3*401*FLEN/8, x4, x1, x2)

inst_15762:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81803fff; valaddr_reg:x3; val_offset:47286*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47286*0 + 3*402*FLEN/8, x4, x1, x2)

inst_15763:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81807fff; valaddr_reg:x3; val_offset:47289*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47289*0 + 3*403*FLEN/8, x4, x1, x2)

inst_15764:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x8180ffff; valaddr_reg:x3; val_offset:47292*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47292*0 + 3*404*FLEN/8, x4, x1, x2)

inst_15765:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x8181ffff; valaddr_reg:x3; val_offset:47295*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47295*0 + 3*405*FLEN/8, x4, x1, x2)

inst_15766:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x8183ffff; valaddr_reg:x3; val_offset:47298*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47298*0 + 3*406*FLEN/8, x4, x1, x2)

inst_15767:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x8187ffff; valaddr_reg:x3; val_offset:47301*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47301*0 + 3*407*FLEN/8, x4, x1, x2)

inst_15768:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x818fffff; valaddr_reg:x3; val_offset:47304*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47304*0 + 3*408*FLEN/8, x4, x1, x2)

inst_15769:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x819fffff; valaddr_reg:x3; val_offset:47307*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47307*0 + 3*409*FLEN/8, x4, x1, x2)

inst_15770:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81bfffff; valaddr_reg:x3; val_offset:47310*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47310*0 + 3*410*FLEN/8, x4, x1, x2)

inst_15771:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81c00000; valaddr_reg:x3; val_offset:47313*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47313*0 + 3*411*FLEN/8, x4, x1, x2)

inst_15772:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81e00000; valaddr_reg:x3; val_offset:47316*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47316*0 + 3*412*FLEN/8, x4, x1, x2)

inst_15773:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81f00000; valaddr_reg:x3; val_offset:47319*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47319*0 + 3*413*FLEN/8, x4, x1, x2)

inst_15774:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81f80000; valaddr_reg:x3; val_offset:47322*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47322*0 + 3*414*FLEN/8, x4, x1, x2)

inst_15775:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81fc0000; valaddr_reg:x3; val_offset:47325*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47325*0 + 3*415*FLEN/8, x4, x1, x2)

inst_15776:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81fe0000; valaddr_reg:x3; val_offset:47328*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47328*0 + 3*416*FLEN/8, x4, x1, x2)

inst_15777:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81ff0000; valaddr_reg:x3; val_offset:47331*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47331*0 + 3*417*FLEN/8, x4, x1, x2)

inst_15778:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81ff8000; valaddr_reg:x3; val_offset:47334*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47334*0 + 3*418*FLEN/8, x4, x1, x2)

inst_15779:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81ffc000; valaddr_reg:x3; val_offset:47337*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47337*0 + 3*419*FLEN/8, x4, x1, x2)

inst_15780:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81ffe000; valaddr_reg:x3; val_offset:47340*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47340*0 + 3*420*FLEN/8, x4, x1, x2)

inst_15781:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81fff000; valaddr_reg:x3; val_offset:47343*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47343*0 + 3*421*FLEN/8, x4, x1, x2)

inst_15782:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81fff800; valaddr_reg:x3; val_offset:47346*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47346*0 + 3*422*FLEN/8, x4, x1, x2)

inst_15783:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81fffc00; valaddr_reg:x3; val_offset:47349*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47349*0 + 3*423*FLEN/8, x4, x1, x2)

inst_15784:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81fffe00; valaddr_reg:x3; val_offset:47352*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47352*0 + 3*424*FLEN/8, x4, x1, x2)

inst_15785:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81ffff00; valaddr_reg:x3; val_offset:47355*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47355*0 + 3*425*FLEN/8, x4, x1, x2)

inst_15786:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81ffff80; valaddr_reg:x3; val_offset:47358*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47358*0 + 3*426*FLEN/8, x4, x1, x2)

inst_15787:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81ffffc0; valaddr_reg:x3; val_offset:47361*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47361*0 + 3*427*FLEN/8, x4, x1, x2)

inst_15788:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81ffffe0; valaddr_reg:x3; val_offset:47364*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47364*0 + 3*428*FLEN/8, x4, x1, x2)

inst_15789:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81fffff0; valaddr_reg:x3; val_offset:47367*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47367*0 + 3*429*FLEN/8, x4, x1, x2)

inst_15790:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81fffff8; valaddr_reg:x3; val_offset:47370*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47370*0 + 3*430*FLEN/8, x4, x1, x2)

inst_15791:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81fffffc; valaddr_reg:x3; val_offset:47373*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47373*0 + 3*431*FLEN/8, x4, x1, x2)

inst_15792:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81fffffe; valaddr_reg:x3; val_offset:47376*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47376*0 + 3*432*FLEN/8, x4, x1, x2)

inst_15793:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x259aa1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea59aa1; op2val:0x80000000;
op3val:0x81ffffff; valaddr_reg:x3; val_offset:47379*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47379*0 + 3*433*FLEN/8, x4, x1, x2)

inst_15794:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x3f800001; valaddr_reg:x3; val_offset:47382*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47382*0 + 3*434*FLEN/8, x4, x1, x2)

inst_15795:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x3f800003; valaddr_reg:x3; val_offset:47385*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47385*0 + 3*435*FLEN/8, x4, x1, x2)

inst_15796:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x3f800007; valaddr_reg:x3; val_offset:47388*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47388*0 + 3*436*FLEN/8, x4, x1, x2)

inst_15797:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x3f999999; valaddr_reg:x3; val_offset:47391*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47391*0 + 3*437*FLEN/8, x4, x1, x2)

inst_15798:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:47394*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47394*0 + 3*438*FLEN/8, x4, x1, x2)

inst_15799:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:47397*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47397*0 + 3*439*FLEN/8, x4, x1, x2)

inst_15800:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:47400*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47400*0 + 3*440*FLEN/8, x4, x1, x2)

inst_15801:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:47403*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47403*0 + 3*441*FLEN/8, x4, x1, x2)

inst_15802:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:47406*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47406*0 + 3*442*FLEN/8, x4, x1, x2)

inst_15803:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:47409*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47409*0 + 3*443*FLEN/8, x4, x1, x2)

inst_15804:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:47412*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47412*0 + 3*444*FLEN/8, x4, x1, x2)

inst_15805:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:47415*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47415*0 + 3*445*FLEN/8, x4, x1, x2)

inst_15806:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:47418*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47418*0 + 3*446*FLEN/8, x4, x1, x2)

inst_15807:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:47421*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47421*0 + 3*447*FLEN/8, x4, x1, x2)

inst_15808:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:47424*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47424*0 + 3*448*FLEN/8, x4, x1, x2)

inst_15809:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:47427*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47427*0 + 3*449*FLEN/8, x4, x1, x2)

inst_15810:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x44000000; valaddr_reg:x3; val_offset:47430*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47430*0 + 3*450*FLEN/8, x4, x1, x2)

inst_15811:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x44000001; valaddr_reg:x3; val_offset:47433*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47433*0 + 3*451*FLEN/8, x4, x1, x2)

inst_15812:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x44000003; valaddr_reg:x3; val_offset:47436*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47436*0 + 3*452*FLEN/8, x4, x1, x2)

inst_15813:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x44000007; valaddr_reg:x3; val_offset:47439*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47439*0 + 3*453*FLEN/8, x4, x1, x2)

inst_15814:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x4400000f; valaddr_reg:x3; val_offset:47442*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47442*0 + 3*454*FLEN/8, x4, x1, x2)

inst_15815:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x4400001f; valaddr_reg:x3; val_offset:47445*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47445*0 + 3*455*FLEN/8, x4, x1, x2)

inst_15816:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x4400003f; valaddr_reg:x3; val_offset:47448*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47448*0 + 3*456*FLEN/8, x4, x1, x2)

inst_15817:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x4400007f; valaddr_reg:x3; val_offset:47451*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47451*0 + 3*457*FLEN/8, x4, x1, x2)

inst_15818:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x440000ff; valaddr_reg:x3; val_offset:47454*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47454*0 + 3*458*FLEN/8, x4, x1, x2)

inst_15819:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x440001ff; valaddr_reg:x3; val_offset:47457*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47457*0 + 3*459*FLEN/8, x4, x1, x2)

inst_15820:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x440003ff; valaddr_reg:x3; val_offset:47460*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47460*0 + 3*460*FLEN/8, x4, x1, x2)

inst_15821:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x440007ff; valaddr_reg:x3; val_offset:47463*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47463*0 + 3*461*FLEN/8, x4, x1, x2)

inst_15822:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x44000fff; valaddr_reg:x3; val_offset:47466*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47466*0 + 3*462*FLEN/8, x4, x1, x2)

inst_15823:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x44001fff; valaddr_reg:x3; val_offset:47469*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47469*0 + 3*463*FLEN/8, x4, x1, x2)

inst_15824:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x44003fff; valaddr_reg:x3; val_offset:47472*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47472*0 + 3*464*FLEN/8, x4, x1, x2)

inst_15825:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x44007fff; valaddr_reg:x3; val_offset:47475*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47475*0 + 3*465*FLEN/8, x4, x1, x2)

inst_15826:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x4400ffff; valaddr_reg:x3; val_offset:47478*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47478*0 + 3*466*FLEN/8, x4, x1, x2)

inst_15827:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x4401ffff; valaddr_reg:x3; val_offset:47481*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47481*0 + 3*467*FLEN/8, x4, x1, x2)

inst_15828:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x4403ffff; valaddr_reg:x3; val_offset:47484*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47484*0 + 3*468*FLEN/8, x4, x1, x2)

inst_15829:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x4407ffff; valaddr_reg:x3; val_offset:47487*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47487*0 + 3*469*FLEN/8, x4, x1, x2)

inst_15830:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x440fffff; valaddr_reg:x3; val_offset:47490*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47490*0 + 3*470*FLEN/8, x4, x1, x2)

inst_15831:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x441fffff; valaddr_reg:x3; val_offset:47493*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47493*0 + 3*471*FLEN/8, x4, x1, x2)

inst_15832:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x443fffff; valaddr_reg:x3; val_offset:47496*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47496*0 + 3*472*FLEN/8, x4, x1, x2)

inst_15833:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x44400000; valaddr_reg:x3; val_offset:47499*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47499*0 + 3*473*FLEN/8, x4, x1, x2)

inst_15834:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x44600000; valaddr_reg:x3; val_offset:47502*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47502*0 + 3*474*FLEN/8, x4, x1, x2)

inst_15835:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x44700000; valaddr_reg:x3; val_offset:47505*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47505*0 + 3*475*FLEN/8, x4, x1, x2)

inst_15836:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x44780000; valaddr_reg:x3; val_offset:47508*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47508*0 + 3*476*FLEN/8, x4, x1, x2)

inst_15837:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447c0000; valaddr_reg:x3; val_offset:47511*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47511*0 + 3*477*FLEN/8, x4, x1, x2)

inst_15838:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447e0000; valaddr_reg:x3; val_offset:47514*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47514*0 + 3*478*FLEN/8, x4, x1, x2)

inst_15839:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447f0000; valaddr_reg:x3; val_offset:47517*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47517*0 + 3*479*FLEN/8, x4, x1, x2)

inst_15840:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447f8000; valaddr_reg:x3; val_offset:47520*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47520*0 + 3*480*FLEN/8, x4, x1, x2)

inst_15841:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447fc000; valaddr_reg:x3; val_offset:47523*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47523*0 + 3*481*FLEN/8, x4, x1, x2)

inst_15842:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447fe000; valaddr_reg:x3; val_offset:47526*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47526*0 + 3*482*FLEN/8, x4, x1, x2)

inst_15843:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447ff000; valaddr_reg:x3; val_offset:47529*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47529*0 + 3*483*FLEN/8, x4, x1, x2)

inst_15844:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447ff800; valaddr_reg:x3; val_offset:47532*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47532*0 + 3*484*FLEN/8, x4, x1, x2)

inst_15845:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447ffc00; valaddr_reg:x3; val_offset:47535*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47535*0 + 3*485*FLEN/8, x4, x1, x2)

inst_15846:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447ffe00; valaddr_reg:x3; val_offset:47538*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47538*0 + 3*486*FLEN/8, x4, x1, x2)

inst_15847:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447fff00; valaddr_reg:x3; val_offset:47541*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47541*0 + 3*487*FLEN/8, x4, x1, x2)

inst_15848:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447fff80; valaddr_reg:x3; val_offset:47544*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47544*0 + 3*488*FLEN/8, x4, x1, x2)

inst_15849:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447fffc0; valaddr_reg:x3; val_offset:47547*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47547*0 + 3*489*FLEN/8, x4, x1, x2)

inst_15850:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447fffe0; valaddr_reg:x3; val_offset:47550*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47550*0 + 3*490*FLEN/8, x4, x1, x2)

inst_15851:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447ffff0; valaddr_reg:x3; val_offset:47553*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47553*0 + 3*491*FLEN/8, x4, x1, x2)

inst_15852:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447ffff8; valaddr_reg:x3; val_offset:47556*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47556*0 + 3*492*FLEN/8, x4, x1, x2)

inst_15853:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447ffffc; valaddr_reg:x3; val_offset:47559*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47559*0 + 3*493*FLEN/8, x4, x1, x2)

inst_15854:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447ffffe; valaddr_reg:x3; val_offset:47562*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47562*0 + 3*494*FLEN/8, x4, x1, x2)

inst_15855:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x25c177 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x62d820 and fs3 == 0 and fe3 == 0x88 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea5c177; op2val:0x62d820;
op3val:0x447fffff; valaddr_reg:x3; val_offset:47565*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47565*0 + 3*495*FLEN/8, x4, x1, x2)

inst_15856:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:47568*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47568*0 + 3*496*FLEN/8, x4, x1, x2)

inst_15857:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:47571*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47571*0 + 3*497*FLEN/8, x4, x1, x2)

inst_15858:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:47574*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47574*0 + 3*498*FLEN/8, x4, x1, x2)

inst_15859:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:47577*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47577*0 + 3*499*FLEN/8, x4, x1, x2)

inst_15860:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:47580*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47580*0 + 3*500*FLEN/8, x4, x1, x2)

inst_15861:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:47583*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47583*0 + 3*501*FLEN/8, x4, x1, x2)

inst_15862:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:47586*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47586*0 + 3*502*FLEN/8, x4, x1, x2)

inst_15863:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:47589*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47589*0 + 3*503*FLEN/8, x4, x1, x2)

inst_15864:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:47592*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47592*0 + 3*504*FLEN/8, x4, x1, x2)

inst_15865:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:47595*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47595*0 + 3*505*FLEN/8, x4, x1, x2)

inst_15866:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:47598*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47598*0 + 3*506*FLEN/8, x4, x1, x2)

inst_15867:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:47601*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47601*0 + 3*507*FLEN/8, x4, x1, x2)

inst_15868:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:47604*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47604*0 + 3*508*FLEN/8, x4, x1, x2)

inst_15869:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:47607*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47607*0 + 3*509*FLEN/8, x4, x1, x2)

inst_15870:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:47610*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47610*0 + 3*510*FLEN/8, x4, x1, x2)

inst_15871:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:47613*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47613*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_15872:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5800000; valaddr_reg:x3; val_offset:47616*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47616*0 + 3*512*FLEN/8, x4, x1, x2)

inst_15873:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5800001; valaddr_reg:x3; val_offset:47619*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47619*0 + 3*513*FLEN/8, x4, x1, x2)

inst_15874:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5800003; valaddr_reg:x3; val_offset:47622*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47622*0 + 3*514*FLEN/8, x4, x1, x2)

inst_15875:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5800007; valaddr_reg:x3; val_offset:47625*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47625*0 + 3*515*FLEN/8, x4, x1, x2)

inst_15876:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x580000f; valaddr_reg:x3; val_offset:47628*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47628*0 + 3*516*FLEN/8, x4, x1, x2)

inst_15877:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x580001f; valaddr_reg:x3; val_offset:47631*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47631*0 + 3*517*FLEN/8, x4, x1, x2)

inst_15878:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x580003f; valaddr_reg:x3; val_offset:47634*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47634*0 + 3*518*FLEN/8, x4, x1, x2)

inst_15879:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x580007f; valaddr_reg:x3; val_offset:47637*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47637*0 + 3*519*FLEN/8, x4, x1, x2)

inst_15880:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x58000ff; valaddr_reg:x3; val_offset:47640*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47640*0 + 3*520*FLEN/8, x4, x1, x2)

inst_15881:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x58001ff; valaddr_reg:x3; val_offset:47643*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47643*0 + 3*521*FLEN/8, x4, x1, x2)

inst_15882:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x58003ff; valaddr_reg:x3; val_offset:47646*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47646*0 + 3*522*FLEN/8, x4, x1, x2)

inst_15883:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x58007ff; valaddr_reg:x3; val_offset:47649*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47649*0 + 3*523*FLEN/8, x4, x1, x2)

inst_15884:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5800fff; valaddr_reg:x3; val_offset:47652*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47652*0 + 3*524*FLEN/8, x4, x1, x2)

inst_15885:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5801fff; valaddr_reg:x3; val_offset:47655*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47655*0 + 3*525*FLEN/8, x4, x1, x2)

inst_15886:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5803fff; valaddr_reg:x3; val_offset:47658*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47658*0 + 3*526*FLEN/8, x4, x1, x2)

inst_15887:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5807fff; valaddr_reg:x3; val_offset:47661*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47661*0 + 3*527*FLEN/8, x4, x1, x2)

inst_15888:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x580ffff; valaddr_reg:x3; val_offset:47664*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47664*0 + 3*528*FLEN/8, x4, x1, x2)

inst_15889:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x581ffff; valaddr_reg:x3; val_offset:47667*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47667*0 + 3*529*FLEN/8, x4, x1, x2)

inst_15890:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x583ffff; valaddr_reg:x3; val_offset:47670*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47670*0 + 3*530*FLEN/8, x4, x1, x2)

inst_15891:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x587ffff; valaddr_reg:x3; val_offset:47673*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47673*0 + 3*531*FLEN/8, x4, x1, x2)

inst_15892:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x58fffff; valaddr_reg:x3; val_offset:47676*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47676*0 + 3*532*FLEN/8, x4, x1, x2)

inst_15893:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x59fffff; valaddr_reg:x3; val_offset:47679*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47679*0 + 3*533*FLEN/8, x4, x1, x2)

inst_15894:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5bfffff; valaddr_reg:x3; val_offset:47682*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47682*0 + 3*534*FLEN/8, x4, x1, x2)

inst_15895:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5c00000; valaddr_reg:x3; val_offset:47685*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47685*0 + 3*535*FLEN/8, x4, x1, x2)

inst_15896:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5e00000; valaddr_reg:x3; val_offset:47688*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47688*0 + 3*536*FLEN/8, x4, x1, x2)

inst_15897:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5f00000; valaddr_reg:x3; val_offset:47691*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47691*0 + 3*537*FLEN/8, x4, x1, x2)

inst_15898:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5f80000; valaddr_reg:x3; val_offset:47694*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47694*0 + 3*538*FLEN/8, x4, x1, x2)

inst_15899:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5fc0000; valaddr_reg:x3; val_offset:47697*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47697*0 + 3*539*FLEN/8, x4, x1, x2)

inst_15900:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5fe0000; valaddr_reg:x3; val_offset:47700*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47700*0 + 3*540*FLEN/8, x4, x1, x2)

inst_15901:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5ff0000; valaddr_reg:x3; val_offset:47703*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47703*0 + 3*541*FLEN/8, x4, x1, x2)

inst_15902:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5ff8000; valaddr_reg:x3; val_offset:47706*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47706*0 + 3*542*FLEN/8, x4, x1, x2)

inst_15903:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5ffc000; valaddr_reg:x3; val_offset:47709*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47709*0 + 3*543*FLEN/8, x4, x1, x2)

inst_15904:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5ffe000; valaddr_reg:x3; val_offset:47712*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47712*0 + 3*544*FLEN/8, x4, x1, x2)

inst_15905:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5fff000; valaddr_reg:x3; val_offset:47715*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47715*0 + 3*545*FLEN/8, x4, x1, x2)

inst_15906:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5fff800; valaddr_reg:x3; val_offset:47718*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47718*0 + 3*546*FLEN/8, x4, x1, x2)

inst_15907:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5fffc00; valaddr_reg:x3; val_offset:47721*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47721*0 + 3*547*FLEN/8, x4, x1, x2)

inst_15908:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5fffe00; valaddr_reg:x3; val_offset:47724*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47724*0 + 3*548*FLEN/8, x4, x1, x2)

inst_15909:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5ffff00; valaddr_reg:x3; val_offset:47727*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47727*0 + 3*549*FLEN/8, x4, x1, x2)

inst_15910:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5ffff80; valaddr_reg:x3; val_offset:47730*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47730*0 + 3*550*FLEN/8, x4, x1, x2)

inst_15911:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5ffffc0; valaddr_reg:x3; val_offset:47733*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47733*0 + 3*551*FLEN/8, x4, x1, x2)

inst_15912:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5ffffe0; valaddr_reg:x3; val_offset:47736*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47736*0 + 3*552*FLEN/8, x4, x1, x2)

inst_15913:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5fffff0; valaddr_reg:x3; val_offset:47739*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47739*0 + 3*553*FLEN/8, x4, x1, x2)

inst_15914:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5fffff8; valaddr_reg:x3; val_offset:47742*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47742*0 + 3*554*FLEN/8, x4, x1, x2)

inst_15915:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5fffffc; valaddr_reg:x3; val_offset:47745*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47745*0 + 3*555*FLEN/8, x4, x1, x2)

inst_15916:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5fffffe; valaddr_reg:x3; val_offset:47748*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47748*0 + 3*556*FLEN/8, x4, x1, x2)

inst_15917:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x26220b and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea6220b; op2val:0x0;
op3val:0x5ffffff; valaddr_reg:x3; val_offset:47751*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47751*0 + 3*557*FLEN/8, x4, x1, x2)

inst_15918:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:47754*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47754*0 + 3*558*FLEN/8, x4, x1, x2)

inst_15919:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:47757*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47757*0 + 3*559*FLEN/8, x4, x1, x2)

inst_15920:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:47760*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47760*0 + 3*560*FLEN/8, x4, x1, x2)

inst_15921:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:47763*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47763*0 + 3*561*FLEN/8, x4, x1, x2)

inst_15922:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:47766*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47766*0 + 3*562*FLEN/8, x4, x1, x2)

inst_15923:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:47769*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47769*0 + 3*563*FLEN/8, x4, x1, x2)

inst_15924:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:47772*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47772*0 + 3*564*FLEN/8, x4, x1, x2)

inst_15925:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:47775*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47775*0 + 3*565*FLEN/8, x4, x1, x2)

inst_15926:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:47778*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47778*0 + 3*566*FLEN/8, x4, x1, x2)

inst_15927:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:47781*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47781*0 + 3*567*FLEN/8, x4, x1, x2)

inst_15928:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:47784*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47784*0 + 3*568*FLEN/8, x4, x1, x2)

inst_15929:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:47787*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47787*0 + 3*569*FLEN/8, x4, x1, x2)

inst_15930:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:47790*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47790*0 + 3*570*FLEN/8, x4, x1, x2)

inst_15931:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:47793*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47793*0 + 3*571*FLEN/8, x4, x1, x2)

inst_15932:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:47796*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47796*0 + 3*572*FLEN/8, x4, x1, x2)

inst_15933:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:47799*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47799*0 + 3*573*FLEN/8, x4, x1, x2)

inst_15934:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x10800000; valaddr_reg:x3; val_offset:47802*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47802*0 + 3*574*FLEN/8, x4, x1, x2)

inst_15935:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x10800001; valaddr_reg:x3; val_offset:47805*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47805*0 + 3*575*FLEN/8, x4, x1, x2)

inst_15936:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x10800003; valaddr_reg:x3; val_offset:47808*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47808*0 + 3*576*FLEN/8, x4, x1, x2)

inst_15937:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x10800007; valaddr_reg:x3; val_offset:47811*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47811*0 + 3*577*FLEN/8, x4, x1, x2)

inst_15938:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x1080000f; valaddr_reg:x3; val_offset:47814*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47814*0 + 3*578*FLEN/8, x4, x1, x2)

inst_15939:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x1080001f; valaddr_reg:x3; val_offset:47817*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47817*0 + 3*579*FLEN/8, x4, x1, x2)

inst_15940:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x1080003f; valaddr_reg:x3; val_offset:47820*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47820*0 + 3*580*FLEN/8, x4, x1, x2)

inst_15941:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x1080007f; valaddr_reg:x3; val_offset:47823*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47823*0 + 3*581*FLEN/8, x4, x1, x2)

inst_15942:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x108000ff; valaddr_reg:x3; val_offset:47826*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47826*0 + 3*582*FLEN/8, x4, x1, x2)

inst_15943:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x108001ff; valaddr_reg:x3; val_offset:47829*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47829*0 + 3*583*FLEN/8, x4, x1, x2)

inst_15944:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x108003ff; valaddr_reg:x3; val_offset:47832*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47832*0 + 3*584*FLEN/8, x4, x1, x2)

inst_15945:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x108007ff; valaddr_reg:x3; val_offset:47835*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47835*0 + 3*585*FLEN/8, x4, x1, x2)

inst_15946:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x10800fff; valaddr_reg:x3; val_offset:47838*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47838*0 + 3*586*FLEN/8, x4, x1, x2)

inst_15947:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x10801fff; valaddr_reg:x3; val_offset:47841*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47841*0 + 3*587*FLEN/8, x4, x1, x2)

inst_15948:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x10803fff; valaddr_reg:x3; val_offset:47844*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47844*0 + 3*588*FLEN/8, x4, x1, x2)

inst_15949:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x10807fff; valaddr_reg:x3; val_offset:47847*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47847*0 + 3*589*FLEN/8, x4, x1, x2)

inst_15950:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x1080ffff; valaddr_reg:x3; val_offset:47850*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47850*0 + 3*590*FLEN/8, x4, x1, x2)

inst_15951:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x1081ffff; valaddr_reg:x3; val_offset:47853*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47853*0 + 3*591*FLEN/8, x4, x1, x2)

inst_15952:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x1083ffff; valaddr_reg:x3; val_offset:47856*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47856*0 + 3*592*FLEN/8, x4, x1, x2)

inst_15953:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x1087ffff; valaddr_reg:x3; val_offset:47859*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47859*0 + 3*593*FLEN/8, x4, x1, x2)

inst_15954:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x108fffff; valaddr_reg:x3; val_offset:47862*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47862*0 + 3*594*FLEN/8, x4, x1, x2)

inst_15955:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x109fffff; valaddr_reg:x3; val_offset:47865*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47865*0 + 3*595*FLEN/8, x4, x1, x2)

inst_15956:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x10bfffff; valaddr_reg:x3; val_offset:47868*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47868*0 + 3*596*FLEN/8, x4, x1, x2)

inst_15957:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x10c00000; valaddr_reg:x3; val_offset:47871*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47871*0 + 3*597*FLEN/8, x4, x1, x2)

inst_15958:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x10e00000; valaddr_reg:x3; val_offset:47874*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47874*0 + 3*598*FLEN/8, x4, x1, x2)

inst_15959:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x10f00000; valaddr_reg:x3; val_offset:47877*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47877*0 + 3*599*FLEN/8, x4, x1, x2)

inst_15960:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x10f80000; valaddr_reg:x3; val_offset:47880*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47880*0 + 3*600*FLEN/8, x4, x1, x2)

inst_15961:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x10fc0000; valaddr_reg:x3; val_offset:47883*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47883*0 + 3*601*FLEN/8, x4, x1, x2)

inst_15962:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x10fe0000; valaddr_reg:x3; val_offset:47886*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47886*0 + 3*602*FLEN/8, x4, x1, x2)

inst_15963:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x10ff0000; valaddr_reg:x3; val_offset:47889*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47889*0 + 3*603*FLEN/8, x4, x1, x2)

inst_15964:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x10ff8000; valaddr_reg:x3; val_offset:47892*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47892*0 + 3*604*FLEN/8, x4, x1, x2)

inst_15965:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x10ffc000; valaddr_reg:x3; val_offset:47895*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47895*0 + 3*605*FLEN/8, x4, x1, x2)

inst_15966:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x10ffe000; valaddr_reg:x3; val_offset:47898*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47898*0 + 3*606*FLEN/8, x4, x1, x2)

inst_15967:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x10fff000; valaddr_reg:x3; val_offset:47901*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47901*0 + 3*607*FLEN/8, x4, x1, x2)

inst_15968:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x10fff800; valaddr_reg:x3; val_offset:47904*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47904*0 + 3*608*FLEN/8, x4, x1, x2)

inst_15969:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x10fffc00; valaddr_reg:x3; val_offset:47907*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47907*0 + 3*609*FLEN/8, x4, x1, x2)

inst_15970:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x10fffe00; valaddr_reg:x3; val_offset:47910*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47910*0 + 3*610*FLEN/8, x4, x1, x2)

inst_15971:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x10ffff00; valaddr_reg:x3; val_offset:47913*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47913*0 + 3*611*FLEN/8, x4, x1, x2)

inst_15972:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x10ffff80; valaddr_reg:x3; val_offset:47916*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47916*0 + 3*612*FLEN/8, x4, x1, x2)

inst_15973:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x10ffffc0; valaddr_reg:x3; val_offset:47919*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47919*0 + 3*613*FLEN/8, x4, x1, x2)

inst_15974:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x10ffffe0; valaddr_reg:x3; val_offset:47922*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47922*0 + 3*614*FLEN/8, x4, x1, x2)

inst_15975:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x10fffff0; valaddr_reg:x3; val_offset:47925*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47925*0 + 3*615*FLEN/8, x4, x1, x2)

inst_15976:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x10fffff8; valaddr_reg:x3; val_offset:47928*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47928*0 + 3*616*FLEN/8, x4, x1, x2)

inst_15977:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x10fffffc; valaddr_reg:x3; val_offset:47931*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47931*0 + 3*617*FLEN/8, x4, x1, x2)

inst_15978:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x10fffffe; valaddr_reg:x3; val_offset:47934*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47934*0 + 3*618*FLEN/8, x4, x1, x2)

inst_15979:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x263dec and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x21 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea63dec; op2val:0x0;
op3val:0x10ffffff; valaddr_reg:x3; val_offset:47937*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47937*0 + 3*619*FLEN/8, x4, x1, x2)

inst_15980:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xbf800001; valaddr_reg:x3; val_offset:47940*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47940*0 + 3*620*FLEN/8, x4, x1, x2)

inst_15981:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xbf800003; valaddr_reg:x3; val_offset:47943*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47943*0 + 3*621*FLEN/8, x4, x1, x2)

inst_15982:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xbf800007; valaddr_reg:x3; val_offset:47946*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47946*0 + 3*622*FLEN/8, x4, x1, x2)

inst_15983:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xbf999999; valaddr_reg:x3; val_offset:47949*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47949*0 + 3*623*FLEN/8, x4, x1, x2)

inst_15984:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:47952*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47952*0 + 3*624*FLEN/8, x4, x1, x2)

inst_15985:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:47955*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47955*0 + 3*625*FLEN/8, x4, x1, x2)

inst_15986:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:47958*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47958*0 + 3*626*FLEN/8, x4, x1, x2)

inst_15987:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:47961*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47961*0 + 3*627*FLEN/8, x4, x1, x2)

inst_15988:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:47964*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47964*0 + 3*628*FLEN/8, x4, x1, x2)

inst_15989:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:47967*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47967*0 + 3*629*FLEN/8, x4, x1, x2)

inst_15990:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:47970*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47970*0 + 3*630*FLEN/8, x4, x1, x2)

inst_15991:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:47973*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47973*0 + 3*631*FLEN/8, x4, x1, x2)

inst_15992:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:47976*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47976*0 + 3*632*FLEN/8, x4, x1, x2)

inst_15993:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:47979*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47979*0 + 3*633*FLEN/8, x4, x1, x2)

inst_15994:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:47982*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47982*0 + 3*634*FLEN/8, x4, x1, x2)

inst_15995:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:47985*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47985*0 + 3*635*FLEN/8, x4, x1, x2)

inst_15996:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce800000; valaddr_reg:x3; val_offset:47988*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47988*0 + 3*636*FLEN/8, x4, x1, x2)

inst_15997:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce800001; valaddr_reg:x3; val_offset:47991*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47991*0 + 3*637*FLEN/8, x4, x1, x2)

inst_15998:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce800003; valaddr_reg:x3; val_offset:47994*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47994*0 + 3*638*FLEN/8, x4, x1, x2)

inst_15999:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce800007; valaddr_reg:x3; val_offset:47997*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 47997*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_16000:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce80000f; valaddr_reg:x3; val_offset:48000*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48000*0 + 3*640*FLEN/8, x4, x1, x2)

inst_16001:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce80001f; valaddr_reg:x3; val_offset:48003*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48003*0 + 3*641*FLEN/8, x4, x1, x2)

inst_16002:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce80003f; valaddr_reg:x3; val_offset:48006*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48006*0 + 3*642*FLEN/8, x4, x1, x2)

inst_16003:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce80007f; valaddr_reg:x3; val_offset:48009*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48009*0 + 3*643*FLEN/8, x4, x1, x2)

inst_16004:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce8000ff; valaddr_reg:x3; val_offset:48012*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48012*0 + 3*644*FLEN/8, x4, x1, x2)

inst_16005:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce8001ff; valaddr_reg:x3; val_offset:48015*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48015*0 + 3*645*FLEN/8, x4, x1, x2)

inst_16006:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce8003ff; valaddr_reg:x3; val_offset:48018*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48018*0 + 3*646*FLEN/8, x4, x1, x2)

inst_16007:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce8007ff; valaddr_reg:x3; val_offset:48021*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48021*0 + 3*647*FLEN/8, x4, x1, x2)

inst_16008:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce800fff; valaddr_reg:x3; val_offset:48024*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48024*0 + 3*648*FLEN/8, x4, x1, x2)

inst_16009:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce801fff; valaddr_reg:x3; val_offset:48027*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48027*0 + 3*649*FLEN/8, x4, x1, x2)

inst_16010:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce803fff; valaddr_reg:x3; val_offset:48030*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48030*0 + 3*650*FLEN/8, x4, x1, x2)

inst_16011:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce807fff; valaddr_reg:x3; val_offset:48033*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48033*0 + 3*651*FLEN/8, x4, x1, x2)

inst_16012:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce80ffff; valaddr_reg:x3; val_offset:48036*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48036*0 + 3*652*FLEN/8, x4, x1, x2)

inst_16013:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce81ffff; valaddr_reg:x3; val_offset:48039*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48039*0 + 3*653*FLEN/8, x4, x1, x2)

inst_16014:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce83ffff; valaddr_reg:x3; val_offset:48042*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48042*0 + 3*654*FLEN/8, x4, x1, x2)

inst_16015:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce87ffff; valaddr_reg:x3; val_offset:48045*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48045*0 + 3*655*FLEN/8, x4, x1, x2)

inst_16016:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce8fffff; valaddr_reg:x3; val_offset:48048*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48048*0 + 3*656*FLEN/8, x4, x1, x2)

inst_16017:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xce9fffff; valaddr_reg:x3; val_offset:48051*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48051*0 + 3*657*FLEN/8, x4, x1, x2)

inst_16018:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xcebfffff; valaddr_reg:x3; val_offset:48054*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48054*0 + 3*658*FLEN/8, x4, x1, x2)

inst_16019:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xcec00000; valaddr_reg:x3; val_offset:48057*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48057*0 + 3*659*FLEN/8, x4, x1, x2)

inst_16020:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xcee00000; valaddr_reg:x3; val_offset:48060*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48060*0 + 3*660*FLEN/8, x4, x1, x2)

inst_16021:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xcef00000; valaddr_reg:x3; val_offset:48063*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48063*0 + 3*661*FLEN/8, x4, x1, x2)

inst_16022:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xcef80000; valaddr_reg:x3; val_offset:48066*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48066*0 + 3*662*FLEN/8, x4, x1, x2)

inst_16023:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xcefc0000; valaddr_reg:x3; val_offset:48069*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48069*0 + 3*663*FLEN/8, x4, x1, x2)

inst_16024:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xcefe0000; valaddr_reg:x3; val_offset:48072*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48072*0 + 3*664*FLEN/8, x4, x1, x2)

inst_16025:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xceff0000; valaddr_reg:x3; val_offset:48075*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48075*0 + 3*665*FLEN/8, x4, x1, x2)

inst_16026:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xceff8000; valaddr_reg:x3; val_offset:48078*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48078*0 + 3*666*FLEN/8, x4, x1, x2)

inst_16027:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xceffc000; valaddr_reg:x3; val_offset:48081*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48081*0 + 3*667*FLEN/8, x4, x1, x2)

inst_16028:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xceffe000; valaddr_reg:x3; val_offset:48084*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48084*0 + 3*668*FLEN/8, x4, x1, x2)

inst_16029:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xcefff000; valaddr_reg:x3; val_offset:48087*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48087*0 + 3*669*FLEN/8, x4, x1, x2)

inst_16030:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xcefff800; valaddr_reg:x3; val_offset:48090*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48090*0 + 3*670*FLEN/8, x4, x1, x2)

inst_16031:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xcefffc00; valaddr_reg:x3; val_offset:48093*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48093*0 + 3*671*FLEN/8, x4, x1, x2)

inst_16032:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xcefffe00; valaddr_reg:x3; val_offset:48096*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48096*0 + 3*672*FLEN/8, x4, x1, x2)

inst_16033:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xceffff00; valaddr_reg:x3; val_offset:48099*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48099*0 + 3*673*FLEN/8, x4, x1, x2)

inst_16034:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xceffff80; valaddr_reg:x3; val_offset:48102*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48102*0 + 3*674*FLEN/8, x4, x1, x2)

inst_16035:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xceffffc0; valaddr_reg:x3; val_offset:48105*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48105*0 + 3*675*FLEN/8, x4, x1, x2)

inst_16036:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xceffffe0; valaddr_reg:x3; val_offset:48108*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48108*0 + 3*676*FLEN/8, x4, x1, x2)

inst_16037:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xcefffff0; valaddr_reg:x3; val_offset:48111*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48111*0 + 3*677*FLEN/8, x4, x1, x2)

inst_16038:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xcefffff8; valaddr_reg:x3; val_offset:48114*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48114*0 + 3*678*FLEN/8, x4, x1, x2)

inst_16039:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xcefffffc; valaddr_reg:x3; val_offset:48117*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48117*0 + 3*679*FLEN/8, x4, x1, x2)

inst_16040:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xcefffffe; valaddr_reg:x3; val_offset:48120*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48120*0 + 3*680*FLEN/8, x4, x1, x2)

inst_16041:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x271458 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x620fa5 and fs3 == 1 and fe3 == 0x9d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea71458; op2val:0x80620fa5;
op3val:0xceffffff; valaddr_reg:x3; val_offset:48123*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48123*0 + 3*681*FLEN/8, x4, x1, x2)

inst_16042:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:48126*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48126*0 + 3*682*FLEN/8, x4, x1, x2)

inst_16043:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:48129*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48129*0 + 3*683*FLEN/8, x4, x1, x2)

inst_16044:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:48132*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48132*0 + 3*684*FLEN/8, x4, x1, x2)

inst_16045:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:48135*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48135*0 + 3*685*FLEN/8, x4, x1, x2)

inst_16046:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:48138*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48138*0 + 3*686*FLEN/8, x4, x1, x2)

inst_16047:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:48141*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48141*0 + 3*687*FLEN/8, x4, x1, x2)

inst_16048:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:48144*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48144*0 + 3*688*FLEN/8, x4, x1, x2)

inst_16049:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:48147*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48147*0 + 3*689*FLEN/8, x4, x1, x2)

inst_16050:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:48150*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48150*0 + 3*690*FLEN/8, x4, x1, x2)

inst_16051:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:48153*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48153*0 + 3*691*FLEN/8, x4, x1, x2)

inst_16052:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:48156*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48156*0 + 3*692*FLEN/8, x4, x1, x2)

inst_16053:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:48159*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48159*0 + 3*693*FLEN/8, x4, x1, x2)

inst_16054:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:48162*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48162*0 + 3*694*FLEN/8, x4, x1, x2)

inst_16055:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:48165*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48165*0 + 3*695*FLEN/8, x4, x1, x2)

inst_16056:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:48168*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48168*0 + 3*696*FLEN/8, x4, x1, x2)

inst_16057:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:48171*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48171*0 + 3*697*FLEN/8, x4, x1, x2)

inst_16058:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba800000; valaddr_reg:x3; val_offset:48174*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48174*0 + 3*698*FLEN/8, x4, x1, x2)

inst_16059:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba800001; valaddr_reg:x3; val_offset:48177*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48177*0 + 3*699*FLEN/8, x4, x1, x2)

inst_16060:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba800003; valaddr_reg:x3; val_offset:48180*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48180*0 + 3*700*FLEN/8, x4, x1, x2)

inst_16061:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba800007; valaddr_reg:x3; val_offset:48183*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48183*0 + 3*701*FLEN/8, x4, x1, x2)

inst_16062:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba80000f; valaddr_reg:x3; val_offset:48186*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48186*0 + 3*702*FLEN/8, x4, x1, x2)

inst_16063:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba80001f; valaddr_reg:x3; val_offset:48189*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48189*0 + 3*703*FLEN/8, x4, x1, x2)

inst_16064:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba80003f; valaddr_reg:x3; val_offset:48192*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48192*0 + 3*704*FLEN/8, x4, x1, x2)

inst_16065:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba80007f; valaddr_reg:x3; val_offset:48195*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48195*0 + 3*705*FLEN/8, x4, x1, x2)

inst_16066:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba8000ff; valaddr_reg:x3; val_offset:48198*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48198*0 + 3*706*FLEN/8, x4, x1, x2)

inst_16067:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba8001ff; valaddr_reg:x3; val_offset:48201*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48201*0 + 3*707*FLEN/8, x4, x1, x2)

inst_16068:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba8003ff; valaddr_reg:x3; val_offset:48204*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48204*0 + 3*708*FLEN/8, x4, x1, x2)

inst_16069:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba8007ff; valaddr_reg:x3; val_offset:48207*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48207*0 + 3*709*FLEN/8, x4, x1, x2)

inst_16070:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba800fff; valaddr_reg:x3; val_offset:48210*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48210*0 + 3*710*FLEN/8, x4, x1, x2)

inst_16071:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba801fff; valaddr_reg:x3; val_offset:48213*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48213*0 + 3*711*FLEN/8, x4, x1, x2)

inst_16072:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba803fff; valaddr_reg:x3; val_offset:48216*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48216*0 + 3*712*FLEN/8, x4, x1, x2)

inst_16073:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba807fff; valaddr_reg:x3; val_offset:48219*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48219*0 + 3*713*FLEN/8, x4, x1, x2)

inst_16074:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba80ffff; valaddr_reg:x3; val_offset:48222*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48222*0 + 3*714*FLEN/8, x4, x1, x2)

inst_16075:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba81ffff; valaddr_reg:x3; val_offset:48225*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48225*0 + 3*715*FLEN/8, x4, x1, x2)

inst_16076:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba83ffff; valaddr_reg:x3; val_offset:48228*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48228*0 + 3*716*FLEN/8, x4, x1, x2)

inst_16077:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba87ffff; valaddr_reg:x3; val_offset:48231*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48231*0 + 3*717*FLEN/8, x4, x1, x2)

inst_16078:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba8fffff; valaddr_reg:x3; val_offset:48234*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48234*0 + 3*718*FLEN/8, x4, x1, x2)

inst_16079:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xba9fffff; valaddr_reg:x3; val_offset:48237*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48237*0 + 3*719*FLEN/8, x4, x1, x2)

inst_16080:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbabfffff; valaddr_reg:x3; val_offset:48240*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48240*0 + 3*720*FLEN/8, x4, x1, x2)

inst_16081:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbac00000; valaddr_reg:x3; val_offset:48243*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48243*0 + 3*721*FLEN/8, x4, x1, x2)

inst_16082:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbae00000; valaddr_reg:x3; val_offset:48246*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48246*0 + 3*722*FLEN/8, x4, x1, x2)

inst_16083:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbaf00000; valaddr_reg:x3; val_offset:48249*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48249*0 + 3*723*FLEN/8, x4, x1, x2)

inst_16084:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbaf80000; valaddr_reg:x3; val_offset:48252*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48252*0 + 3*724*FLEN/8, x4, x1, x2)

inst_16085:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbafc0000; valaddr_reg:x3; val_offset:48255*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48255*0 + 3*725*FLEN/8, x4, x1, x2)

inst_16086:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbafe0000; valaddr_reg:x3; val_offset:48258*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48258*0 + 3*726*FLEN/8, x4, x1, x2)

inst_16087:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbaff0000; valaddr_reg:x3; val_offset:48261*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48261*0 + 3*727*FLEN/8, x4, x1, x2)

inst_16088:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbaff8000; valaddr_reg:x3; val_offset:48264*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48264*0 + 3*728*FLEN/8, x4, x1, x2)

inst_16089:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbaffc000; valaddr_reg:x3; val_offset:48267*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48267*0 + 3*729*FLEN/8, x4, x1, x2)

inst_16090:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbaffe000; valaddr_reg:x3; val_offset:48270*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48270*0 + 3*730*FLEN/8, x4, x1, x2)

inst_16091:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbafff000; valaddr_reg:x3; val_offset:48273*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48273*0 + 3*731*FLEN/8, x4, x1, x2)

inst_16092:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbafff800; valaddr_reg:x3; val_offset:48276*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48276*0 + 3*732*FLEN/8, x4, x1, x2)

inst_16093:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbafffc00; valaddr_reg:x3; val_offset:48279*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48279*0 + 3*733*FLEN/8, x4, x1, x2)

inst_16094:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbafffe00; valaddr_reg:x3; val_offset:48282*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48282*0 + 3*734*FLEN/8, x4, x1, x2)

inst_16095:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbaffff00; valaddr_reg:x3; val_offset:48285*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48285*0 + 3*735*FLEN/8, x4, x1, x2)

inst_16096:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbaffff80; valaddr_reg:x3; val_offset:48288*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48288*0 + 3*736*FLEN/8, x4, x1, x2)

inst_16097:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbaffffc0; valaddr_reg:x3; val_offset:48291*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48291*0 + 3*737*FLEN/8, x4, x1, x2)

inst_16098:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbaffffe0; valaddr_reg:x3; val_offset:48294*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48294*0 + 3*738*FLEN/8, x4, x1, x2)

inst_16099:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbafffff0; valaddr_reg:x3; val_offset:48297*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48297*0 + 3*739*FLEN/8, x4, x1, x2)

inst_16100:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbafffff8; valaddr_reg:x3; val_offset:48300*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48300*0 + 3*740*FLEN/8, x4, x1, x2)

inst_16101:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbafffffc; valaddr_reg:x3; val_offset:48303*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48303*0 + 3*741*FLEN/8, x4, x1, x2)

inst_16102:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbafffffe; valaddr_reg:x3; val_offset:48306*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48306*0 + 3*742*FLEN/8, x4, x1, x2)

inst_16103:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x283dd3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x75 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea83dd3; op2val:0x80000000;
op3val:0xbaffffff; valaddr_reg:x3; val_offset:48309*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48309*0 + 3*743*FLEN/8, x4, x1, x2)

inst_16104:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd000000; valaddr_reg:x3; val_offset:48312*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48312*0 + 3*744*FLEN/8, x4, x1, x2)

inst_16105:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd000001; valaddr_reg:x3; val_offset:48315*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48315*0 + 3*745*FLEN/8, x4, x1, x2)

inst_16106:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd000003; valaddr_reg:x3; val_offset:48318*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48318*0 + 3*746*FLEN/8, x4, x1, x2)

inst_16107:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd000007; valaddr_reg:x3; val_offset:48321*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48321*0 + 3*747*FLEN/8, x4, x1, x2)

inst_16108:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd00000f; valaddr_reg:x3; val_offset:48324*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48324*0 + 3*748*FLEN/8, x4, x1, x2)

inst_16109:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd00001f; valaddr_reg:x3; val_offset:48327*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48327*0 + 3*749*FLEN/8, x4, x1, x2)

inst_16110:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd00003f; valaddr_reg:x3; val_offset:48330*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48330*0 + 3*750*FLEN/8, x4, x1, x2)

inst_16111:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd00007f; valaddr_reg:x3; val_offset:48333*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48333*0 + 3*751*FLEN/8, x4, x1, x2)

inst_16112:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd0000ff; valaddr_reg:x3; val_offset:48336*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48336*0 + 3*752*FLEN/8, x4, x1, x2)

inst_16113:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd0001ff; valaddr_reg:x3; val_offset:48339*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48339*0 + 3*753*FLEN/8, x4, x1, x2)

inst_16114:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd0003ff; valaddr_reg:x3; val_offset:48342*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48342*0 + 3*754*FLEN/8, x4, x1, x2)

inst_16115:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd0007ff; valaddr_reg:x3; val_offset:48345*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48345*0 + 3*755*FLEN/8, x4, x1, x2)

inst_16116:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd000fff; valaddr_reg:x3; val_offset:48348*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48348*0 + 3*756*FLEN/8, x4, x1, x2)

inst_16117:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd001fff; valaddr_reg:x3; val_offset:48351*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48351*0 + 3*757*FLEN/8, x4, x1, x2)

inst_16118:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd003fff; valaddr_reg:x3; val_offset:48354*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48354*0 + 3*758*FLEN/8, x4, x1, x2)

inst_16119:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd007fff; valaddr_reg:x3; val_offset:48357*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48357*0 + 3*759*FLEN/8, x4, x1, x2)

inst_16120:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd00ffff; valaddr_reg:x3; val_offset:48360*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48360*0 + 3*760*FLEN/8, x4, x1, x2)

inst_16121:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd01ffff; valaddr_reg:x3; val_offset:48363*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48363*0 + 3*761*FLEN/8, x4, x1, x2)

inst_16122:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd03ffff; valaddr_reg:x3; val_offset:48366*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48366*0 + 3*762*FLEN/8, x4, x1, x2)

inst_16123:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd07ffff; valaddr_reg:x3; val_offset:48369*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48369*0 + 3*763*FLEN/8, x4, x1, x2)

inst_16124:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd0fffff; valaddr_reg:x3; val_offset:48372*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48372*0 + 3*764*FLEN/8, x4, x1, x2)

inst_16125:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd1fffff; valaddr_reg:x3; val_offset:48375*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48375*0 + 3*765*FLEN/8, x4, x1, x2)

inst_16126:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd3fffff; valaddr_reg:x3; val_offset:48378*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48378*0 + 3*766*FLEN/8, x4, x1, x2)

inst_16127:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2938bd and fs2 == 1 and fe2 == 0x80 and fm2 == 0x41a3b7 and fs3 == 1 and fe3 == 0xfa and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea938bd; op2val:0xc041a3b7;
op3val:0xfd400000; valaddr_reg:x3; val_offset:48381*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 48381*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x3,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x199999677721,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x249249396745,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x333333355443,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x36db6d595117,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x3bbbbb914683,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x444444473924,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x4ccccc033164,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5b6db6991862,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x666666710886,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x6db6db190235,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffff8388600,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffffc388604,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffffe388606,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe00000034881024,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe00000134881025,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe00000334881027,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe00000734881031,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe00000f34881039,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe00001f34881055,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe00003f34881087,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe00007f34881151,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe0000ff34881279,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe0001ff34881535,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe0003ff34882047,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe0007ff34883071,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe000fff34885119,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe001fff34889215,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe003fff34897407,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe007fff34913791,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe00ffff34946559,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe01ffff35012095,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe03ffff35143167,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe07ffff35405311,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe0fffff35929599,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe1fffff36978175,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe3fffff39075327,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe40000039075328,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe60000041172480,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe70000042221056,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe78000042745344,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe7c000043007488,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe7e000043138560,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe7f000043204096,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe7f800043236864,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe7fc00043253248,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe7fe00043261440,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe7ff00043265536,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe7ff80043267584,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe7ffc0043268608,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe7ffe0043269120,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe7fff0043269376,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe7fff8043269504,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe7fffc043269568,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe7fffe043269600,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe7ffff043269616,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe7ffff843269624,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe7ffffc43269628,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe7ffffe43269630,32,FLEN)
NAN_BOXED(0x7ea001b0124415408,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe7fffff43269631,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80800001155872257,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80800003155872259,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80800007155872263,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80999999157549977,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80a49249158269001,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80b33333159227699,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80b6db6d159467373,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80bbbbbb159786939,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80c44444160346180,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80cccccc160905420,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80db6db6161864118,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80e66666162583142,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80edb6db163062491,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80fffff8164260856,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80fffffc164260860,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80fffffe164260862,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e000000382364672,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e000001382364673,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e000003382364675,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e000007382364679,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e00000f382364687,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e00001f382364703,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e00003f382364735,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e00007f382364799,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e0000ff382364927,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e0001ff382365183,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e0003ff382365695,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e0007ff382366719,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e000fff382368767,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e001fff382372863,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e003fff382381055,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e007fff382397439,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e00ffff382430207,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e01ffff382495743,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e03ffff382626815,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e07ffff382888959,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e0fffff383413247,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e1fffff384461823,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e3fffff386558975,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e400000386558976,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e600000388656128,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e700000389704704,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e780000390228992,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7c0000390491136,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7e0000390622208,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7f0000390687744,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7f8000390720512,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7fc000390736896,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7fe000390745088,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7ff000390749184,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7ff800390751232,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7ffc00390752256,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7ffe00390752768,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7fff00390753024,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7fff80390753152,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7fffc0390753216,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7fffe0390753248,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7ffff0390753264,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7ffff8390753272,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7ffffc390753276,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7ffffe390753278,32,FLEN)
NAN_BOXED(0x7ea14463124498019,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e7fffff390753279,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x73000000929379840,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x73000001929379841,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x73000003929379843,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x73000007929379847,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x7300000f929379855,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x7300001f929379871,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x7300003f929379903,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x7300007f929379967,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x730000ff929380095,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x730001ff929380351,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x730003ff929380863,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x730007ff929381887,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x73000fff929383935,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x73001fff929388031,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x73003fff929396223,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x73007fff929412607,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x7300ffff929445375,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x7301ffff929510911,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x7303ffff929641983,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x7307ffff929904127,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x730fffff930428415,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x731fffff931476991,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x733fffff933574143,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x73400000933574144,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x73600000935671296,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x73700000936719872,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x73780000937244160,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x737c0000937506304,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x737e0000937637376,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x737f0000937702912,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x737f8000937735680,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x737fc000937752064,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x737fe000937760256,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x737ff000937764352,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x737ff800937766400,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x737ffc00937767424,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x737ffe00937767936,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x737fff00937768192,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x737fff80937768320,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x737fffc0937768384,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x737fffe0937768416,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x737ffff0937768432,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x737ffff8937768440,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x737ffffc937768444,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x737ffffe937768446,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x737fffff937768447,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x7f000001130706433,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x7f000003130706435,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x7f000007130706439,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x7f199999132384153,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x7f249249133103177,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x7f333333134061875,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x7f36db6d134301549,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x7f3bbbbb134621115,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x7f444444135180356,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x7f4ccccc135739596,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x7f5b6db6136698294,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x7f666666137417318,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x7f6db6db137896667,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x7f7ffff8139095032,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x7f7ffffc139095036,32,FLEN)
NAN_BOXED(0x7ea388ab124646571,32,FLEN)
NAN_BOXED(0x40485fd7078484951,32,FLEN)
NAN_BOXED(0x7f7ffffe139095038,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x3f800001065353217,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x3f800003065353219,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x3f800007065353223,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x3f999999067030937,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x3fa49249067749961,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x3fb33333068708659,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x3fb6db6d068948333,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x3fbbbbbb069267899,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x3fc44444069827140,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x3fcccccc070386380,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x3fdb6db6071345078,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x3fe66666072064102,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x3fedb6db072543451,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x3ffffff8073741816,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x3ffffffc073741820,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x3ffffffe073741822,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4d800000300234240,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4d800001300234241,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4d800003300234243,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4d800007300234247,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4d80000f300234255,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4d80001f300234271,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4d80003f300234303,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4d80007f300234367,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4d8000ff300234495,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4d8001ff300234751,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4d8003ff300235263,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4d8007ff300236287,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4d800fff300238335,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4d801fff300242431,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4d803fff300250623,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4d807fff300267007,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4d80ffff300299775,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4d81ffff300365311,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4d83ffff300496383,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4d87ffff300758527,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4d8fffff301282815,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4d9fffff302331391,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4dbfffff304428543,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4dc00000304428544,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4de00000306525696,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4df00000307574272,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4df80000308098560,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4dfc0000308360704,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4dfe0000308491776,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4dff0000308557312,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4dff8000308590080,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4dffc000308606464,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4dffe000308614656,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4dfff000308618752,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4dfff800308620800,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4dfffc00308621824,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4dfffe00308622336,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4dffff00308622592,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4dffff80308622720,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4dffffc0308622784,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4dffffe0308622816,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4dfffff0308622832,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4dfffff8308622840,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4dfffffc308622844,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4dfffffe308622846,32,FLEN)
NAN_BOXED(0x7ea3b2ee124657390,32,FLEN)
NAN_BOXED(0x64160e559246,32,FLEN)
NAN_BOXED(0x4dffffff308622847,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x3f800001065353217,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x3f800003065353219,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x3f800007065353223,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x3f999999067030937,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x3fa49249067749961,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x3fb33333068708659,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x3fb6db6d068948333,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x3fbbbbbb069267899,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x3fc44444069827140,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x3fcccccc070386380,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x3fdb6db6071345078,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x3fe66666072064102,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x3fedb6db072543451,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x3ffffff8073741816,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x3ffffffc073741820,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x3ffffffe073741822,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x48000000207959552,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x48000001207959553,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x48000003207959555,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x48000007207959559,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x4800000f207959567,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x4800001f207959583,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x4800003f207959615,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x4800007f207959679,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x480000ff207959807,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x480001ff207960063,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x480003ff207960575,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x480007ff207961599,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x48000fff207963647,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x48001fff207967743,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x48003fff207975935,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x48007fff207992319,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x4800ffff208025087,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x4801ffff208090623,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x4803ffff208221695,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x4807ffff208483839,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x480fffff209008127,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x481fffff210056703,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x483fffff212153855,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x48400000212153856,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x48600000214251008,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x48700000215299584,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x48780000215823872,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x487c0000216086016,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x487e0000216217088,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x487f0000216282624,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x487f8000216315392,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x487fc000216331776,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x487fe000216339968,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x487ff000216344064,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x487ff800216346112,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x487ffc00216347136,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x487ffe00216347648,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x487fff00216347904,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x487fff80216348032,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x487fffc0216348096,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x487fffe0216348128,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x487ffff0216348144,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x487ffff8216348152,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x487ffffc216348156,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x487ffffe216348158,32,FLEN)
NAN_BOXED(0x7ea3d6e0124666592,32,FLEN)
NAN_BOXED(0x640019553625,32,FLEN)
NAN_BOXED(0x487fffff216348159,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xaf800000944401408,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xaf800001944401409,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xaf800003944401411,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xaf800007944401415,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xaf80000f944401423,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xaf80001f944401439,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xaf80003f944401471,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xaf80007f944401535,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xaf8000ff944401663,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xaf8001ff944401919,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xaf8003ff944402431,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xaf8007ff944403455,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xaf800fff944405503,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xaf801fff944409599,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xaf803fff944417791,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xaf807fff944434175,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xaf80ffff944466943,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xaf81ffff944532479,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xaf83ffff944663551,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xaf87ffff944925695,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xaf8fffff945449983,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xaf9fffff946498559,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xafbfffff948595711,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xafc00000948595712,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xafe00000950692864,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xaff00000951741440,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xaff80000952265728,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xaffc0000952527872,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xaffe0000952658944,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xafff0000952724480,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xafff8000952757248,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xafffc000952773632,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xafffe000952781824,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xaffff000952785920,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xaffff800952787968,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xaffffc00952788992,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xaffffe00952789504,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xafffff00952789760,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xafffff80952789888,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xafffffc0952789952,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xafffffe0952789984,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xaffffff0952790000,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xaffffff8952790008,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xaffffffc952790012,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xaffffffe952790014,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xafffffff952790015,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xbf800001212836865,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xbf800003212836867,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xbf800007212836871,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xbf999999214514585,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xbfa49249215233609,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xbfb33333216192307,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xbfb6db6d216431981,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xbfbbbbbb216751547,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xbfc44444217310788,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xbfcccccc217870028,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xbfdb6db6218828726,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xbfe66666219547750,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xbfedb6db220027099,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xbffffff8221225464,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xbffffffc221225468,32,FLEN)
NAN_BOXED(0x7ea4d40c124731404,32,FLEN)
NAN_BOXED(0x80636680153997952,32,FLEN)
NAN_BOXED(0xbffffffe221225470,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80800001155872257,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80800003155872259,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80800007155872263,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80999999157549977,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80a49249158269001,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80b33333159227699,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80b6db6d159467373,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80bbbbbb159786939,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80c44444160346180,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80cccccc160905420,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80db6db6161864118,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80e66666162583142,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80edb6db163062491,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80fffff8164260856,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80fffffc164260860,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80fffffe164260862,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81800000172649472,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81800001172649473,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81800003172649475,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81800007172649479,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8180000f172649487,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8180001f172649503,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8180003f172649535,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8180007f172649599,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x818000ff172649727,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x818001ff172649983,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x818003ff172650495,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x818007ff172651519,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81800fff172653567,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81801fff172657663,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81803fff172665855,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81807fff172682239,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8180ffff172715007,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8181ffff172780543,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8183ffff172911615,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8187ffff173173759,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x818fffff173698047,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x819fffff174746623,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81bfffff176843775,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81c00000176843776,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81e00000178940928,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81f00000179989504,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81f80000180513792,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81fc0000180775936,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81fe0000180907008,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81ff0000180972544,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81ff8000181005312,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81ffc000181021696,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81ffe000181029888,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81fff000181033984,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81fff800181036032,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81fffc00181037056,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81fffe00181037568,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81ffff00181037824,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81ffff80181037952,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81ffffc0181038016,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81ffffe0181038048,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81fffff0181038064,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81fffff8181038072,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81fffffc181038076,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81fffffe181038078,32,FLEN)
NAN_BOXED(0x7ea59aa1124782241,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81ffffff181038079,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x3f800001065353217,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x3f800003065353219,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x3f800007065353223,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x3f999999067030937,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x3fa49249067749961,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x3fb33333068708659,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x3fb6db6d068948333,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x3fbbbbbb069267899,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x3fc44444069827140,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x3fcccccc070386380,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x3fdb6db6071345078,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x3fe66666072064102,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x3fedb6db072543451,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x3ffffff8073741816,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x3ffffffc073741820,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x3ffffffe073741822,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x44000000140850688,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x44000001140850689,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x44000003140850691,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x44000007140850695,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x4400000f140850703,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x4400001f140850719,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x4400003f140850751,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x4400007f140850815,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x440000ff140850943,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x440001ff140851199,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x440003ff140851711,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x440007ff140852735,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x44000fff140854783,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x44001fff140858879,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x44003fff140867071,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x44007fff140883455,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x4400ffff140916223,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x4401ffff140981759,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x4403ffff141112831,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x4407ffff141374975,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x440fffff141899263,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x441fffff142947839,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x443fffff145044991,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x44400000145044992,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x44600000147142144,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x44700000148190720,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x44780000148715008,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x447c0000148977152,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x447e0000149108224,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x447f0000149173760,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x447f8000149206528,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x447fc000149222912,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x447fe000149231104,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x447ff000149235200,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x447ff800149237248,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x447ffc00149238272,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x447ffe00149238784,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x447fff00149239040,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x447fff80149239168,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x447fffc0149239232,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x447fffe0149239264,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x447ffff0149239280,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x447ffff8149239288,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x447ffffc149239292,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x447ffffe149239294,32,FLEN)
NAN_BOXED(0x7ea5c177124792183,32,FLEN)
NAN_BOXED(0x62d820477856,32,FLEN)
NAN_BOXED(0x447fffff149239295,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x3,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x199999677721,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x249249396745,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x333333355443,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x36db6d595117,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x3bbbbb914683,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x444444473924,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x4ccccc033164,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5b6db6991862,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x666666710886,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x6db6db190235,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffff8388600,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffffc388604,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffffe388606,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x58000002274688,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x58000012274689,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x58000032274691,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x58000072274695,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x580000f2274703,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x580001f2274719,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x580003f2274751,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x580007f2274815,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x58000ff2274943,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x58001ff2275199,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x58003ff2275711,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x58007ff2276735,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5800fff2278783,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5801fff2282879,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5803fff2291071,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5807fff2307455,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x580ffff2340223,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x581ffff2405759,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x583ffff2536831,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x587ffff2798975,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x58fffff3323263,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x59fffff4371839,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5bfffff6468991,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5c000006468992,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5e000008566144,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5f000009614720,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5f8000000139008,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5fc000000401152,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5fe000000532224,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5ff000000597760,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5ff800000630528,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5ffc00000646912,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5ffe00000655104,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5fff00000659200,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5fff80000661248,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5fffc0000662272,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5fffe0000662784,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5ffff0000663040,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5ffff8000663168,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5ffffc000663232,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5ffffe000663264,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5fffff000663280,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5fffff800663288,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5fffffc00663292,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5fffffe00663294,32,FLEN)
NAN_BOXED(0x7ea6220b124816907,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5ffffff00663295,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x800001388609,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x800003388611,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x800007388615,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x9999990066329,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xa492490785353,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb333331744051,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb6db6d1983725,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xbbbbbb2303291,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc444442862532,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xcccccc3421772,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xdb6db64380470,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe666665099494,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xedb6db5578843,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xfffff86777208,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xfffffc6777212,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xfffffe6777214,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1080000076824064,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1080000176824065,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1080000376824067,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1080000776824071,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1080000f76824079,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1080001f76824095,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1080003f76824127,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1080007f76824191,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x108000ff76824319,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x108001ff76824575,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x108003ff76825087,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x108007ff76826111,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10800fff76828159,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10801fff76832255,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10803fff76840447,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10807fff76856831,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1080ffff76889599,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1081ffff76955135,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1083ffff77086207,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1087ffff77348351,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x108fffff77872639,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x109fffff78921215,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10bfffff81018367,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10c0000081018368,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10e0000083115520,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10f0000084164096,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10f8000084688384,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10fc000084950528,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10fe000085081600,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10ff000085147136,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10ff800085179904,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10ffc00085196288,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10ffe00085204480,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10fff00085208576,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10fff80085210624,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10fffc0085211648,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10fffe0085212160,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10ffff0085212416,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10ffff8085212544,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10ffffc085212608,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10ffffe085212640,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10fffff085212656,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10fffff885212664,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10fffffc85212668,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10fffffe85212670,32,FLEN)
NAN_BOXED(0x7ea63dec124824044,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10ffffff85212671,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xbf800001212836865,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xbf800003212836867,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xbf800007212836871,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xbf999999214514585,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xbfa49249215233609,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xbfb33333216192307,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xbfb6db6d216431981,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xbfbbbbbb216751547,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xbfc44444217310788,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xbfcccccc217870028,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xbfdb6db6218828726,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xbfe66666219547750,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xbfedb6db220027099,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xbffffff8221225464,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xbffffffc221225468,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xbffffffe221225470,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xce800000464495104,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xce800001464495105,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xce800003464495107,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xce800007464495111,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xce80000f464495119,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xce80001f464495135,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xce80003f464495167,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xce80007f464495231,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xce8000ff464495359,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xce8001ff464495615,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xce8003ff464496127,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xce8007ff464497151,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xce800fff464499199,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xce801fff464503295,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xce803fff464511487,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xce807fff464527871,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xce80ffff464560639,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xce81ffff464626175,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xce83ffff464757247,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xce87ffff465019391,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xce8fffff465543679,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xce9fffff466592255,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xcebfffff468689407,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xcec00000468689408,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xcee00000470786560,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xcef00000471835136,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xcef80000472359424,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xcefc0000472621568,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xcefe0000472752640,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xceff0000472818176,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xceff8000472850944,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xceffc000472867328,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xceffe000472875520,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xcefff000472879616,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xcefff800472881664,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xcefffc00472882688,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xcefffe00472883200,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xceffff00472883456,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xceffff80472883584,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xceffffc0472883648,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xceffffe0472883680,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xcefffff0472883696,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xcefffff8472883704,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xcefffffc472883708,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xcefffffe472883710,32,FLEN)
NAN_BOXED(0x7ea71458124878936,32,FLEN)
NAN_BOXED(0x80620fa5153910181,32,FLEN)
NAN_BOXED(0xceffffff472883711,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80800001155872257,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80800003155872259,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80800007155872263,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80999999157549977,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80a49249158269001,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80b33333159227699,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80b6db6d159467373,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80bbbbbb159786939,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80c44444160346180,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80cccccc160905420,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80db6db6161864118,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80e66666162583142,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80edb6db163062491,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80fffff8164260856,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80fffffc164260860,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80fffffe164260862,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xba800000128950784,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xba800001128950785,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xba800003128950787,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xba800007128950791,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xba80000f128950799,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xba80001f128950815,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xba80003f128950847,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xba80007f128950911,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xba8000ff128951039,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xba8001ff128951295,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xba8003ff128951807,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xba8007ff128952831,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xba800fff128954879,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xba801fff128958975,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xba803fff128967167,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xba807fff128983551,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xba80ffff129016319,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xba81ffff129081855,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xba83ffff129212927,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xba87ffff129475071,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xba8fffff129999359,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xba9fffff131047935,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xbabfffff133145087,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xbac00000133145088,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xbae00000135242240,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xbaf00000136290816,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xbaf80000136815104,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xbafc0000137077248,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xbafe0000137208320,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xbaff0000137273856,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xbaff8000137306624,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xbaffc000137323008,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xbaffe000137331200,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xbafff000137335296,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xbafff800137337344,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xbafffc00137338368,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xbafffe00137338880,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xbaffff00137339136,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xbaffff80137339264,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xbaffffc0137339328,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xbaffffe0137339360,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xbafffff0137339376,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xbafffff8137339384,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xbafffffc137339388,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xbafffffe137339390,32,FLEN)
NAN_BOXED(0x7ea83dd3124955091,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0xbaffffff137339391,32,FLEN)
NAN_BOXED(0x7ea938bd125019325,32,FLEN)
NAN_BOXED(0xc041a3b7225527223,32,FLEN)
NAN_BOXED(0xfd000000244635648,32,FLEN)
NAN_BOXED(0x7ea938bd125019325,32,FLEN)
NAN_BOXED(0xc041a3b7225527223,32,FLEN)
NAN_BOXED(0xfd000001244635649,32,FLEN)
NAN_BOXED(0x7ea938bd125019325,32,FLEN)
NAN_BOXED(0xc041a3b7225527223,32,FLEN)
NAN_BOXED(0xfd000003244635651,32,FLEN)
NAN_BOXED(0x7ea938bd125019325,32,FLEN)
NAN_BOXED(0xc041a3b7225527223,32,FLEN)
NAN_BOXED(0xfd000007244635655,32,FLEN)
NAN_BOXED(0x7ea938bd125019325,32,FLEN)
NAN_BOXED(0xc041a3b7225527223,32,FLEN)
NAN_BOXED(0xfd00000f244635663,32,FLEN)
NAN_BOXED(0x7ea938bd125019325,32,FLEN)
NAN_BOXED(0xc041a3b7225527223,32,FLEN)
NAN_BOXED(0xfd00001f244635679,32,FLEN)
NAN_BOXED(0x7ea938bd125019325,32,FLEN)
NAN_BOXED(0xc041a3b7225527223,32,FLEN)
NAN_BOXED(0xfd00003f244635711,32,FLEN)
NAN_BOXED(0x7ea938bd125019325,32,FLEN)
NAN_BOXED(0xc041a3b7225527223,32,FLEN)
NAN_BOXED(0xfd00007f244635775,32,FLEN)
NAN_BOXED(0x7ea938bd125019325,32,FLEN)
NAN_BOXED(0xc041a3b7225527223,32,FLEN)
NAN_BOXED(0xfd0000ff244635903,32,FLEN)
NAN_BOXED(0x7ea938bd125019325,32,FLEN)
NAN_BOXED(0xc041a3b7225527223,32,FLEN)
NAN_BOXED(0xfd0001ff244636159,32,FLEN)
NAN_BOXED(0x7ea938bd125019325,32,FLEN)
NAN_BOXED(0xc041a3b7225527223,32,FLEN)
NAN_BOXED(0xfd0003ff244636671,32,FLEN)
NAN_BOXED(0x7ea938bd125019325,32,FLEN)
NAN_BOXED(0xc041a3b7225527223,32,FLEN)
NAN_BOXED(0xfd0007ff244637695,32,FLEN)
NAN_BOXED(0x7ea938bd125019325,32,FLEN)
NAN_BOXED(0xc041a3b7225527223,32,FLEN)
NAN_BOXED(0xfd000fff244639743,32,FLEN)
NAN_BOXED(0x7ea938bd125019325,32,FLEN)
NAN_BOXED(0xc041a3b7225527223,32,FLEN)
NAN_BOXED(0xfd001fff244643839,32,FLEN)
NAN_BOXED(0x7ea938bd125019325,32,FLEN)
NAN_BOXED(0xc041a3b7225527223,32,FLEN)
NAN_BOXED(0xfd003fff244652031,32,FLEN)
NAN_BOXED(0x7ea938bd125019325,32,FLEN)
NAN_BOXED(0xc041a3b7225527223,32,FLEN)
NAN_BOXED(0xfd007fff244668415,32,FLEN)
NAN_BOXED(0x7ea938bd125019325,32,FLEN)
NAN_BOXED(0xc041a3b7225527223,32,FLEN)
NAN_BOXED(0xfd00ffff244701183,32,FLEN)
NAN_BOXED(0x7ea938bd125019325,32,FLEN)
NAN_BOXED(0xc041a3b7225527223,32,FLEN)
NAN_BOXED(0xfd01ffff244766719,32,FLEN)
NAN_BOXED(0x7ea938bd125019325,32,FLEN)
NAN_BOXED(0xc041a3b7225527223,32,FLEN)
NAN_BOXED(0xfd03ffff244897791,32,FLEN)
NAN_BOXED(0x7ea938bd125019325,32,FLEN)
NAN_BOXED(0xc041a3b7225527223,32,FLEN)
NAN_BOXED(0xfd07ffff245159935,32,FLEN)
NAN_BOXED(0x7ea938bd125019325,32,FLEN)
NAN_BOXED(0xc041a3b7225527223,32,FLEN)
NAN_BOXED(0xfd0fffff245684223,32,FLEN)
NAN_BOXED(0x7ea938bd125019325,32,FLEN)
NAN_BOXED(0xc041a3b7225527223,32,FLEN)
NAN_BOXED(0xfd1fffff246732799,32,FLEN)
NAN_BOXED(0x7ea938bd125019325,32,FLEN)
NAN_BOXED(0xc041a3b7225527223,32,FLEN)
NAN_BOXED(0xfd3fffff248829951,32,FLEN)
NAN_BOXED(0x7ea938bd125019325,32,FLEN)
NAN_BOXED(0xc041a3b7225527223,32,FLEN)
NAN_BOXED(0xfd400000248829952,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
