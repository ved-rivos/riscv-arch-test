
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_11520:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x7f444444; valaddr_reg:x3; val_offset:34560*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34560*0 + 3*0*FLEN/8, x4, x1, x2)

inst_11521:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:34563*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34563*0 + 3*1*FLEN/8, x4, x1, x2)

inst_11522:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:34566*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34566*0 + 3*2*FLEN/8, x4, x1, x2)

inst_11523:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x7f666666; valaddr_reg:x3; val_offset:34569*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34569*0 + 3*3*FLEN/8, x4, x1, x2)

inst_11524:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:34572*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34572*0 + 3*4*FLEN/8, x4, x1, x2)

inst_11525:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:34575*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34575*0 + 3*5*FLEN/8, x4, x1, x2)

inst_11526:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:34578*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34578*0 + 3*6*FLEN/8, x4, x1, x2)

inst_11527:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:34581*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34581*0 + 3*7*FLEN/8, x4, x1, x2)

inst_11528:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x3f800001; valaddr_reg:x3; val_offset:34584*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34584*0 + 3*8*FLEN/8, x4, x1, x2)

inst_11529:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x3f800003; valaddr_reg:x3; val_offset:34587*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34587*0 + 3*9*FLEN/8, x4, x1, x2)

inst_11530:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x3f800007; valaddr_reg:x3; val_offset:34590*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34590*0 + 3*10*FLEN/8, x4, x1, x2)

inst_11531:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x3f999999; valaddr_reg:x3; val_offset:34593*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34593*0 + 3*11*FLEN/8, x4, x1, x2)

inst_11532:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:34596*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34596*0 + 3*12*FLEN/8, x4, x1, x2)

inst_11533:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:34599*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34599*0 + 3*13*FLEN/8, x4, x1, x2)

inst_11534:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:34602*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34602*0 + 3*14*FLEN/8, x4, x1, x2)

inst_11535:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:34605*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34605*0 + 3*15*FLEN/8, x4, x1, x2)

inst_11536:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:34608*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34608*0 + 3*16*FLEN/8, x4, x1, x2)

inst_11537:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:34611*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34611*0 + 3*17*FLEN/8, x4, x1, x2)

inst_11538:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:34614*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34614*0 + 3*18*FLEN/8, x4, x1, x2)

inst_11539:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:34617*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34617*0 + 3*19*FLEN/8, x4, x1, x2)

inst_11540:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:34620*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34620*0 + 3*20*FLEN/8, x4, x1, x2)

inst_11541:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:34623*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34623*0 + 3*21*FLEN/8, x4, x1, x2)

inst_11542:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:34626*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34626*0 + 3*22*FLEN/8, x4, x1, x2)

inst_11543:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:34629*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34629*0 + 3*23*FLEN/8, x4, x1, x2)

inst_11544:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x40000000; valaddr_reg:x3; val_offset:34632*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34632*0 + 3*24*FLEN/8, x4, x1, x2)

inst_11545:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x40000001; valaddr_reg:x3; val_offset:34635*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34635*0 + 3*25*FLEN/8, x4, x1, x2)

inst_11546:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x40000003; valaddr_reg:x3; val_offset:34638*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34638*0 + 3*26*FLEN/8, x4, x1, x2)

inst_11547:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x40000007; valaddr_reg:x3; val_offset:34641*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34641*0 + 3*27*FLEN/8, x4, x1, x2)

inst_11548:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x4000000f; valaddr_reg:x3; val_offset:34644*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34644*0 + 3*28*FLEN/8, x4, x1, x2)

inst_11549:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x4000001f; valaddr_reg:x3; val_offset:34647*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34647*0 + 3*29*FLEN/8, x4, x1, x2)

inst_11550:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x4000003f; valaddr_reg:x3; val_offset:34650*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34650*0 + 3*30*FLEN/8, x4, x1, x2)

inst_11551:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x4000007f; valaddr_reg:x3; val_offset:34653*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34653*0 + 3*31*FLEN/8, x4, x1, x2)

inst_11552:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x400000ff; valaddr_reg:x3; val_offset:34656*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34656*0 + 3*32*FLEN/8, x4, x1, x2)

inst_11553:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x400001ff; valaddr_reg:x3; val_offset:34659*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34659*0 + 3*33*FLEN/8, x4, x1, x2)

inst_11554:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x400003ff; valaddr_reg:x3; val_offset:34662*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34662*0 + 3*34*FLEN/8, x4, x1, x2)

inst_11555:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x400007ff; valaddr_reg:x3; val_offset:34665*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34665*0 + 3*35*FLEN/8, x4, x1, x2)

inst_11556:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x40000fff; valaddr_reg:x3; val_offset:34668*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34668*0 + 3*36*FLEN/8, x4, x1, x2)

inst_11557:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x40001fff; valaddr_reg:x3; val_offset:34671*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34671*0 + 3*37*FLEN/8, x4, x1, x2)

inst_11558:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x40003fff; valaddr_reg:x3; val_offset:34674*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34674*0 + 3*38*FLEN/8, x4, x1, x2)

inst_11559:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x40007fff; valaddr_reg:x3; val_offset:34677*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34677*0 + 3*39*FLEN/8, x4, x1, x2)

inst_11560:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x4000ffff; valaddr_reg:x3; val_offset:34680*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34680*0 + 3*40*FLEN/8, x4, x1, x2)

inst_11561:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x4001ffff; valaddr_reg:x3; val_offset:34683*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34683*0 + 3*41*FLEN/8, x4, x1, x2)

inst_11562:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x4003ffff; valaddr_reg:x3; val_offset:34686*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34686*0 + 3*42*FLEN/8, x4, x1, x2)

inst_11563:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x4007ffff; valaddr_reg:x3; val_offset:34689*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34689*0 + 3*43*FLEN/8, x4, x1, x2)

inst_11564:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x400fffff; valaddr_reg:x3; val_offset:34692*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34692*0 + 3*44*FLEN/8, x4, x1, x2)

inst_11565:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x401fffff; valaddr_reg:x3; val_offset:34695*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34695*0 + 3*45*FLEN/8, x4, x1, x2)

inst_11566:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x403fffff; valaddr_reg:x3; val_offset:34698*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34698*0 + 3*46*FLEN/8, x4, x1, x2)

inst_11567:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x40400000; valaddr_reg:x3; val_offset:34701*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34701*0 + 3*47*FLEN/8, x4, x1, x2)

inst_11568:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x40600000; valaddr_reg:x3; val_offset:34704*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34704*0 + 3*48*FLEN/8, x4, x1, x2)

inst_11569:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x40700000; valaddr_reg:x3; val_offset:34707*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34707*0 + 3*49*FLEN/8, x4, x1, x2)

inst_11570:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x40780000; valaddr_reg:x3; val_offset:34710*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34710*0 + 3*50*FLEN/8, x4, x1, x2)

inst_11571:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x407c0000; valaddr_reg:x3; val_offset:34713*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34713*0 + 3*51*FLEN/8, x4, x1, x2)

inst_11572:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x407e0000; valaddr_reg:x3; val_offset:34716*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34716*0 + 3*52*FLEN/8, x4, x1, x2)

inst_11573:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x407f0000; valaddr_reg:x3; val_offset:34719*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34719*0 + 3*53*FLEN/8, x4, x1, x2)

inst_11574:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x407f8000; valaddr_reg:x3; val_offset:34722*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34722*0 + 3*54*FLEN/8, x4, x1, x2)

inst_11575:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x407fc000; valaddr_reg:x3; val_offset:34725*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34725*0 + 3*55*FLEN/8, x4, x1, x2)

inst_11576:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x407fe000; valaddr_reg:x3; val_offset:34728*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34728*0 + 3*56*FLEN/8, x4, x1, x2)

inst_11577:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x407ff000; valaddr_reg:x3; val_offset:34731*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34731*0 + 3*57*FLEN/8, x4, x1, x2)

inst_11578:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x407ff800; valaddr_reg:x3; val_offset:34734*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34734*0 + 3*58*FLEN/8, x4, x1, x2)

inst_11579:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x407ffc00; valaddr_reg:x3; val_offset:34737*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34737*0 + 3*59*FLEN/8, x4, x1, x2)

inst_11580:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x407ffe00; valaddr_reg:x3; val_offset:34740*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34740*0 + 3*60*FLEN/8, x4, x1, x2)

inst_11581:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x407fff00; valaddr_reg:x3; val_offset:34743*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34743*0 + 3*61*FLEN/8, x4, x1, x2)

inst_11582:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x407fff80; valaddr_reg:x3; val_offset:34746*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34746*0 + 3*62*FLEN/8, x4, x1, x2)

inst_11583:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x407fffc0; valaddr_reg:x3; val_offset:34749*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34749*0 + 3*63*FLEN/8, x4, x1, x2)

inst_11584:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x407fffe0; valaddr_reg:x3; val_offset:34752*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34752*0 + 3*64*FLEN/8, x4, x1, x2)

inst_11585:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x407ffff0; valaddr_reg:x3; val_offset:34755*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34755*0 + 3*65*FLEN/8, x4, x1, x2)

inst_11586:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x407ffff8; valaddr_reg:x3; val_offset:34758*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34758*0 + 3*66*FLEN/8, x4, x1, x2)

inst_11587:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x407ffffc; valaddr_reg:x3; val_offset:34761*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34761*0 + 3*67*FLEN/8, x4, x1, x2)

inst_11588:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x407ffffe; valaddr_reg:x3; val_offset:34764*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34764*0 + 3*68*FLEN/8, x4, x1, x2)

inst_11589:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f9ea9 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x08bffe and fs3 == 0 and fe3 == 0x80 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f9ea9; op2val:0x88bffe;
op3val:0x407fffff; valaddr_reg:x3; val_offset:34767*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34767*0 + 3*69*FLEN/8, x4, x1, x2)

inst_11590:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:34770*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34770*0 + 3*70*FLEN/8, x4, x1, x2)

inst_11591:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:34773*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34773*0 + 3*71*FLEN/8, x4, x1, x2)

inst_11592:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:34776*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34776*0 + 3*72*FLEN/8, x4, x1, x2)

inst_11593:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:34779*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34779*0 + 3*73*FLEN/8, x4, x1, x2)

inst_11594:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:34782*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34782*0 + 3*74*FLEN/8, x4, x1, x2)

inst_11595:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:34785*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34785*0 + 3*75*FLEN/8, x4, x1, x2)

inst_11596:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:34788*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34788*0 + 3*76*FLEN/8, x4, x1, x2)

inst_11597:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:34791*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34791*0 + 3*77*FLEN/8, x4, x1, x2)

inst_11598:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:34794*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34794*0 + 3*78*FLEN/8, x4, x1, x2)

inst_11599:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:34797*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34797*0 + 3*79*FLEN/8, x4, x1, x2)

inst_11600:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:34800*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34800*0 + 3*80*FLEN/8, x4, x1, x2)

inst_11601:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:34803*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34803*0 + 3*81*FLEN/8, x4, x1, x2)

inst_11602:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:34806*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34806*0 + 3*82*FLEN/8, x4, x1, x2)

inst_11603:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:34809*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34809*0 + 3*83*FLEN/8, x4, x1, x2)

inst_11604:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:34812*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34812*0 + 3*84*FLEN/8, x4, x1, x2)

inst_11605:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:34815*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34815*0 + 3*85*FLEN/8, x4, x1, x2)

inst_11606:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x86000000; valaddr_reg:x3; val_offset:34818*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34818*0 + 3*86*FLEN/8, x4, x1, x2)

inst_11607:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x86000001; valaddr_reg:x3; val_offset:34821*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34821*0 + 3*87*FLEN/8, x4, x1, x2)

inst_11608:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x86000003; valaddr_reg:x3; val_offset:34824*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34824*0 + 3*88*FLEN/8, x4, x1, x2)

inst_11609:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x86000007; valaddr_reg:x3; val_offset:34827*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34827*0 + 3*89*FLEN/8, x4, x1, x2)

inst_11610:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x8600000f; valaddr_reg:x3; val_offset:34830*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34830*0 + 3*90*FLEN/8, x4, x1, x2)

inst_11611:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x8600001f; valaddr_reg:x3; val_offset:34833*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34833*0 + 3*91*FLEN/8, x4, x1, x2)

inst_11612:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x8600003f; valaddr_reg:x3; val_offset:34836*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34836*0 + 3*92*FLEN/8, x4, x1, x2)

inst_11613:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x8600007f; valaddr_reg:x3; val_offset:34839*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34839*0 + 3*93*FLEN/8, x4, x1, x2)

inst_11614:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x860000ff; valaddr_reg:x3; val_offset:34842*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34842*0 + 3*94*FLEN/8, x4, x1, x2)

inst_11615:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x860001ff; valaddr_reg:x3; val_offset:34845*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34845*0 + 3*95*FLEN/8, x4, x1, x2)

inst_11616:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x860003ff; valaddr_reg:x3; val_offset:34848*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34848*0 + 3*96*FLEN/8, x4, x1, x2)

inst_11617:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x860007ff; valaddr_reg:x3; val_offset:34851*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34851*0 + 3*97*FLEN/8, x4, x1, x2)

inst_11618:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x86000fff; valaddr_reg:x3; val_offset:34854*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34854*0 + 3*98*FLEN/8, x4, x1, x2)

inst_11619:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x86001fff; valaddr_reg:x3; val_offset:34857*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34857*0 + 3*99*FLEN/8, x4, x1, x2)

inst_11620:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x86003fff; valaddr_reg:x3; val_offset:34860*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34860*0 + 3*100*FLEN/8, x4, x1, x2)

inst_11621:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x86007fff; valaddr_reg:x3; val_offset:34863*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34863*0 + 3*101*FLEN/8, x4, x1, x2)

inst_11622:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x8600ffff; valaddr_reg:x3; val_offset:34866*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34866*0 + 3*102*FLEN/8, x4, x1, x2)

inst_11623:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x8601ffff; valaddr_reg:x3; val_offset:34869*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34869*0 + 3*103*FLEN/8, x4, x1, x2)

inst_11624:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x8603ffff; valaddr_reg:x3; val_offset:34872*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34872*0 + 3*104*FLEN/8, x4, x1, x2)

inst_11625:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x8607ffff; valaddr_reg:x3; val_offset:34875*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34875*0 + 3*105*FLEN/8, x4, x1, x2)

inst_11626:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x860fffff; valaddr_reg:x3; val_offset:34878*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34878*0 + 3*106*FLEN/8, x4, x1, x2)

inst_11627:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x861fffff; valaddr_reg:x3; val_offset:34881*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34881*0 + 3*107*FLEN/8, x4, x1, x2)

inst_11628:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x863fffff; valaddr_reg:x3; val_offset:34884*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34884*0 + 3*108*FLEN/8, x4, x1, x2)

inst_11629:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x86400000; valaddr_reg:x3; val_offset:34887*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34887*0 + 3*109*FLEN/8, x4, x1, x2)

inst_11630:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x86600000; valaddr_reg:x3; val_offset:34890*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34890*0 + 3*110*FLEN/8, x4, x1, x2)

inst_11631:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x86700000; valaddr_reg:x3; val_offset:34893*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34893*0 + 3*111*FLEN/8, x4, x1, x2)

inst_11632:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x86780000; valaddr_reg:x3; val_offset:34896*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34896*0 + 3*112*FLEN/8, x4, x1, x2)

inst_11633:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x867c0000; valaddr_reg:x3; val_offset:34899*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34899*0 + 3*113*FLEN/8, x4, x1, x2)

inst_11634:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x867e0000; valaddr_reg:x3; val_offset:34902*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34902*0 + 3*114*FLEN/8, x4, x1, x2)

inst_11635:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x867f0000; valaddr_reg:x3; val_offset:34905*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34905*0 + 3*115*FLEN/8, x4, x1, x2)

inst_11636:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x867f8000; valaddr_reg:x3; val_offset:34908*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34908*0 + 3*116*FLEN/8, x4, x1, x2)

inst_11637:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x867fc000; valaddr_reg:x3; val_offset:34911*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34911*0 + 3*117*FLEN/8, x4, x1, x2)

inst_11638:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x867fe000; valaddr_reg:x3; val_offset:34914*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34914*0 + 3*118*FLEN/8, x4, x1, x2)

inst_11639:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x867ff000; valaddr_reg:x3; val_offset:34917*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34917*0 + 3*119*FLEN/8, x4, x1, x2)

inst_11640:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x867ff800; valaddr_reg:x3; val_offset:34920*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34920*0 + 3*120*FLEN/8, x4, x1, x2)

inst_11641:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x867ffc00; valaddr_reg:x3; val_offset:34923*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34923*0 + 3*121*FLEN/8, x4, x1, x2)

inst_11642:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x867ffe00; valaddr_reg:x3; val_offset:34926*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34926*0 + 3*122*FLEN/8, x4, x1, x2)

inst_11643:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x867fff00; valaddr_reg:x3; val_offset:34929*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34929*0 + 3*123*FLEN/8, x4, x1, x2)

inst_11644:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x867fff80; valaddr_reg:x3; val_offset:34932*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34932*0 + 3*124*FLEN/8, x4, x1, x2)

inst_11645:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x867fffc0; valaddr_reg:x3; val_offset:34935*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34935*0 + 3*125*FLEN/8, x4, x1, x2)

inst_11646:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x867fffe0; valaddr_reg:x3; val_offset:34938*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34938*0 + 3*126*FLEN/8, x4, x1, x2)

inst_11647:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x867ffff0; valaddr_reg:x3; val_offset:34941*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34941*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_11648:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x867ffff8; valaddr_reg:x3; val_offset:34944*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34944*0 + 3*128*FLEN/8, x4, x1, x2)

inst_11649:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x867ffffc; valaddr_reg:x3; val_offset:34947*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34947*0 + 3*129*FLEN/8, x4, x1, x2)

inst_11650:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x867ffffe; valaddr_reg:x3; val_offset:34950*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34950*0 + 3*130*FLEN/8, x4, x1, x2)

inst_11651:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x705f54 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e705f54; op2val:0x80000000;
op3val:0x867fffff; valaddr_reg:x3; val_offset:34953*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34953*0 + 3*131*FLEN/8, x4, x1, x2)

inst_11652:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:34956*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34956*0 + 3*132*FLEN/8, x4, x1, x2)

inst_11653:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:34959*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34959*0 + 3*133*FLEN/8, x4, x1, x2)

inst_11654:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:34962*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34962*0 + 3*134*FLEN/8, x4, x1, x2)

inst_11655:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:34965*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34965*0 + 3*135*FLEN/8, x4, x1, x2)

inst_11656:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:34968*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34968*0 + 3*136*FLEN/8, x4, x1, x2)

inst_11657:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:34971*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34971*0 + 3*137*FLEN/8, x4, x1, x2)

inst_11658:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:34974*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34974*0 + 3*138*FLEN/8, x4, x1, x2)

inst_11659:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:34977*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34977*0 + 3*139*FLEN/8, x4, x1, x2)

inst_11660:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:34980*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34980*0 + 3*140*FLEN/8, x4, x1, x2)

inst_11661:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:34983*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34983*0 + 3*141*FLEN/8, x4, x1, x2)

inst_11662:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:34986*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34986*0 + 3*142*FLEN/8, x4, x1, x2)

inst_11663:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:34989*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34989*0 + 3*143*FLEN/8, x4, x1, x2)

inst_11664:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:34992*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34992*0 + 3*144*FLEN/8, x4, x1, x2)

inst_11665:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:34995*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34995*0 + 3*145*FLEN/8, x4, x1, x2)

inst_11666:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:34998*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34998*0 + 3*146*FLEN/8, x4, x1, x2)

inst_11667:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:35001*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35001*0 + 3*147*FLEN/8, x4, x1, x2)

inst_11668:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x5000000; valaddr_reg:x3; val_offset:35004*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35004*0 + 3*148*FLEN/8, x4, x1, x2)

inst_11669:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x5000001; valaddr_reg:x3; val_offset:35007*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35007*0 + 3*149*FLEN/8, x4, x1, x2)

inst_11670:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x5000003; valaddr_reg:x3; val_offset:35010*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35010*0 + 3*150*FLEN/8, x4, x1, x2)

inst_11671:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x5000007; valaddr_reg:x3; val_offset:35013*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35013*0 + 3*151*FLEN/8, x4, x1, x2)

inst_11672:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x500000f; valaddr_reg:x3; val_offset:35016*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35016*0 + 3*152*FLEN/8, x4, x1, x2)

inst_11673:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x500001f; valaddr_reg:x3; val_offset:35019*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35019*0 + 3*153*FLEN/8, x4, x1, x2)

inst_11674:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x500003f; valaddr_reg:x3; val_offset:35022*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35022*0 + 3*154*FLEN/8, x4, x1, x2)

inst_11675:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x500007f; valaddr_reg:x3; val_offset:35025*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35025*0 + 3*155*FLEN/8, x4, x1, x2)

inst_11676:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x50000ff; valaddr_reg:x3; val_offset:35028*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35028*0 + 3*156*FLEN/8, x4, x1, x2)

inst_11677:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x50001ff; valaddr_reg:x3; val_offset:35031*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35031*0 + 3*157*FLEN/8, x4, x1, x2)

inst_11678:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x50003ff; valaddr_reg:x3; val_offset:35034*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35034*0 + 3*158*FLEN/8, x4, x1, x2)

inst_11679:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x50007ff; valaddr_reg:x3; val_offset:35037*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35037*0 + 3*159*FLEN/8, x4, x1, x2)

inst_11680:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x5000fff; valaddr_reg:x3; val_offset:35040*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35040*0 + 3*160*FLEN/8, x4, x1, x2)

inst_11681:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x5001fff; valaddr_reg:x3; val_offset:35043*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35043*0 + 3*161*FLEN/8, x4, x1, x2)

inst_11682:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x5003fff; valaddr_reg:x3; val_offset:35046*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35046*0 + 3*162*FLEN/8, x4, x1, x2)

inst_11683:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x5007fff; valaddr_reg:x3; val_offset:35049*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35049*0 + 3*163*FLEN/8, x4, x1, x2)

inst_11684:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x500ffff; valaddr_reg:x3; val_offset:35052*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35052*0 + 3*164*FLEN/8, x4, x1, x2)

inst_11685:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x501ffff; valaddr_reg:x3; val_offset:35055*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35055*0 + 3*165*FLEN/8, x4, x1, x2)

inst_11686:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x503ffff; valaddr_reg:x3; val_offset:35058*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35058*0 + 3*166*FLEN/8, x4, x1, x2)

inst_11687:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x507ffff; valaddr_reg:x3; val_offset:35061*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35061*0 + 3*167*FLEN/8, x4, x1, x2)

inst_11688:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x50fffff; valaddr_reg:x3; val_offset:35064*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35064*0 + 3*168*FLEN/8, x4, x1, x2)

inst_11689:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x51fffff; valaddr_reg:x3; val_offset:35067*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35067*0 + 3*169*FLEN/8, x4, x1, x2)

inst_11690:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x53fffff; valaddr_reg:x3; val_offset:35070*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35070*0 + 3*170*FLEN/8, x4, x1, x2)

inst_11691:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x5400000; valaddr_reg:x3; val_offset:35073*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35073*0 + 3*171*FLEN/8, x4, x1, x2)

inst_11692:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x5600000; valaddr_reg:x3; val_offset:35076*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35076*0 + 3*172*FLEN/8, x4, x1, x2)

inst_11693:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x5700000; valaddr_reg:x3; val_offset:35079*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35079*0 + 3*173*FLEN/8, x4, x1, x2)

inst_11694:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x5780000; valaddr_reg:x3; val_offset:35082*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35082*0 + 3*174*FLEN/8, x4, x1, x2)

inst_11695:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x57c0000; valaddr_reg:x3; val_offset:35085*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35085*0 + 3*175*FLEN/8, x4, x1, x2)

inst_11696:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x57e0000; valaddr_reg:x3; val_offset:35088*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35088*0 + 3*176*FLEN/8, x4, x1, x2)

inst_11697:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x57f0000; valaddr_reg:x3; val_offset:35091*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35091*0 + 3*177*FLEN/8, x4, x1, x2)

inst_11698:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x57f8000; valaddr_reg:x3; val_offset:35094*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35094*0 + 3*178*FLEN/8, x4, x1, x2)

inst_11699:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x57fc000; valaddr_reg:x3; val_offset:35097*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35097*0 + 3*179*FLEN/8, x4, x1, x2)

inst_11700:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x57fe000; valaddr_reg:x3; val_offset:35100*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35100*0 + 3*180*FLEN/8, x4, x1, x2)

inst_11701:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x57ff000; valaddr_reg:x3; val_offset:35103*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35103*0 + 3*181*FLEN/8, x4, x1, x2)

inst_11702:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x57ff800; valaddr_reg:x3; val_offset:35106*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35106*0 + 3*182*FLEN/8, x4, x1, x2)

inst_11703:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x57ffc00; valaddr_reg:x3; val_offset:35109*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35109*0 + 3*183*FLEN/8, x4, x1, x2)

inst_11704:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x57ffe00; valaddr_reg:x3; val_offset:35112*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35112*0 + 3*184*FLEN/8, x4, x1, x2)

inst_11705:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x57fff00; valaddr_reg:x3; val_offset:35115*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35115*0 + 3*185*FLEN/8, x4, x1, x2)

inst_11706:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x57fff80; valaddr_reg:x3; val_offset:35118*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35118*0 + 3*186*FLEN/8, x4, x1, x2)

inst_11707:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x57fffc0; valaddr_reg:x3; val_offset:35121*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35121*0 + 3*187*FLEN/8, x4, x1, x2)

inst_11708:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x57fffe0; valaddr_reg:x3; val_offset:35124*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35124*0 + 3*188*FLEN/8, x4, x1, x2)

inst_11709:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x57ffff0; valaddr_reg:x3; val_offset:35127*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35127*0 + 3*189*FLEN/8, x4, x1, x2)

inst_11710:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x57ffff8; valaddr_reg:x3; val_offset:35130*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35130*0 + 3*190*FLEN/8, x4, x1, x2)

inst_11711:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x57ffffc; valaddr_reg:x3; val_offset:35133*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35133*0 + 3*191*FLEN/8, x4, x1, x2)

inst_11712:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x57ffffe; valaddr_reg:x3; val_offset:35136*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35136*0 + 3*192*FLEN/8, x4, x1, x2)

inst_11713:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x709985 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x0a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e709985; op2val:0x0;
op3val:0x57fffff; valaddr_reg:x3; val_offset:35139*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35139*0 + 3*193*FLEN/8, x4, x1, x2)

inst_11714:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:35142*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35142*0 + 3*194*FLEN/8, x4, x1, x2)

inst_11715:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:35145*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35145*0 + 3*195*FLEN/8, x4, x1, x2)

inst_11716:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:35148*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35148*0 + 3*196*FLEN/8, x4, x1, x2)

inst_11717:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:35151*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35151*0 + 3*197*FLEN/8, x4, x1, x2)

inst_11718:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:35154*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35154*0 + 3*198*FLEN/8, x4, x1, x2)

inst_11719:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:35157*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35157*0 + 3*199*FLEN/8, x4, x1, x2)

inst_11720:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:35160*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35160*0 + 3*200*FLEN/8, x4, x1, x2)

inst_11721:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:35163*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35163*0 + 3*201*FLEN/8, x4, x1, x2)

inst_11722:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:35166*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35166*0 + 3*202*FLEN/8, x4, x1, x2)

inst_11723:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:35169*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35169*0 + 3*203*FLEN/8, x4, x1, x2)

inst_11724:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:35172*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35172*0 + 3*204*FLEN/8, x4, x1, x2)

inst_11725:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:35175*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35175*0 + 3*205*FLEN/8, x4, x1, x2)

inst_11726:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:35178*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35178*0 + 3*206*FLEN/8, x4, x1, x2)

inst_11727:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:35181*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35181*0 + 3*207*FLEN/8, x4, x1, x2)

inst_11728:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:35184*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35184*0 + 3*208*FLEN/8, x4, x1, x2)

inst_11729:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:35187*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35187*0 + 3*209*FLEN/8, x4, x1, x2)

inst_11730:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x1800000; valaddr_reg:x3; val_offset:35190*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35190*0 + 3*210*FLEN/8, x4, x1, x2)

inst_11731:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x1800001; valaddr_reg:x3; val_offset:35193*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35193*0 + 3*211*FLEN/8, x4, x1, x2)

inst_11732:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x1800003; valaddr_reg:x3; val_offset:35196*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35196*0 + 3*212*FLEN/8, x4, x1, x2)

inst_11733:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x1800007; valaddr_reg:x3; val_offset:35199*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35199*0 + 3*213*FLEN/8, x4, x1, x2)

inst_11734:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x180000f; valaddr_reg:x3; val_offset:35202*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35202*0 + 3*214*FLEN/8, x4, x1, x2)

inst_11735:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x180001f; valaddr_reg:x3; val_offset:35205*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35205*0 + 3*215*FLEN/8, x4, x1, x2)

inst_11736:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x180003f; valaddr_reg:x3; val_offset:35208*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35208*0 + 3*216*FLEN/8, x4, x1, x2)

inst_11737:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x180007f; valaddr_reg:x3; val_offset:35211*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35211*0 + 3*217*FLEN/8, x4, x1, x2)

inst_11738:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x18000ff; valaddr_reg:x3; val_offset:35214*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35214*0 + 3*218*FLEN/8, x4, x1, x2)

inst_11739:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x18001ff; valaddr_reg:x3; val_offset:35217*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35217*0 + 3*219*FLEN/8, x4, x1, x2)

inst_11740:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x18003ff; valaddr_reg:x3; val_offset:35220*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35220*0 + 3*220*FLEN/8, x4, x1, x2)

inst_11741:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x18007ff; valaddr_reg:x3; val_offset:35223*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35223*0 + 3*221*FLEN/8, x4, x1, x2)

inst_11742:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x1800fff; valaddr_reg:x3; val_offset:35226*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35226*0 + 3*222*FLEN/8, x4, x1, x2)

inst_11743:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x1801fff; valaddr_reg:x3; val_offset:35229*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35229*0 + 3*223*FLEN/8, x4, x1, x2)

inst_11744:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x1803fff; valaddr_reg:x3; val_offset:35232*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35232*0 + 3*224*FLEN/8, x4, x1, x2)

inst_11745:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x1807fff; valaddr_reg:x3; val_offset:35235*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35235*0 + 3*225*FLEN/8, x4, x1, x2)

inst_11746:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x180ffff; valaddr_reg:x3; val_offset:35238*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35238*0 + 3*226*FLEN/8, x4, x1, x2)

inst_11747:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x181ffff; valaddr_reg:x3; val_offset:35241*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35241*0 + 3*227*FLEN/8, x4, x1, x2)

inst_11748:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x183ffff; valaddr_reg:x3; val_offset:35244*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35244*0 + 3*228*FLEN/8, x4, x1, x2)

inst_11749:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x187ffff; valaddr_reg:x3; val_offset:35247*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35247*0 + 3*229*FLEN/8, x4, x1, x2)

inst_11750:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x18fffff; valaddr_reg:x3; val_offset:35250*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35250*0 + 3*230*FLEN/8, x4, x1, x2)

inst_11751:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x19fffff; valaddr_reg:x3; val_offset:35253*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35253*0 + 3*231*FLEN/8, x4, x1, x2)

inst_11752:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x1bfffff; valaddr_reg:x3; val_offset:35256*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35256*0 + 3*232*FLEN/8, x4, x1, x2)

inst_11753:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x1c00000; valaddr_reg:x3; val_offset:35259*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35259*0 + 3*233*FLEN/8, x4, x1, x2)

inst_11754:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x1e00000; valaddr_reg:x3; val_offset:35262*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35262*0 + 3*234*FLEN/8, x4, x1, x2)

inst_11755:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x1f00000; valaddr_reg:x3; val_offset:35265*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35265*0 + 3*235*FLEN/8, x4, x1, x2)

inst_11756:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x1f80000; valaddr_reg:x3; val_offset:35268*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35268*0 + 3*236*FLEN/8, x4, x1, x2)

inst_11757:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x1fc0000; valaddr_reg:x3; val_offset:35271*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35271*0 + 3*237*FLEN/8, x4, x1, x2)

inst_11758:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x1fe0000; valaddr_reg:x3; val_offset:35274*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35274*0 + 3*238*FLEN/8, x4, x1, x2)

inst_11759:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x1ff0000; valaddr_reg:x3; val_offset:35277*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35277*0 + 3*239*FLEN/8, x4, x1, x2)

inst_11760:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x1ff8000; valaddr_reg:x3; val_offset:35280*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35280*0 + 3*240*FLEN/8, x4, x1, x2)

inst_11761:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x1ffc000; valaddr_reg:x3; val_offset:35283*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35283*0 + 3*241*FLEN/8, x4, x1, x2)

inst_11762:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x1ffe000; valaddr_reg:x3; val_offset:35286*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35286*0 + 3*242*FLEN/8, x4, x1, x2)

inst_11763:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x1fff000; valaddr_reg:x3; val_offset:35289*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35289*0 + 3*243*FLEN/8, x4, x1, x2)

inst_11764:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x1fff800; valaddr_reg:x3; val_offset:35292*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35292*0 + 3*244*FLEN/8, x4, x1, x2)

inst_11765:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x1fffc00; valaddr_reg:x3; val_offset:35295*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35295*0 + 3*245*FLEN/8, x4, x1, x2)

inst_11766:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x1fffe00; valaddr_reg:x3; val_offset:35298*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35298*0 + 3*246*FLEN/8, x4, x1, x2)

inst_11767:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x1ffff00; valaddr_reg:x3; val_offset:35301*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35301*0 + 3*247*FLEN/8, x4, x1, x2)

inst_11768:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x1ffff80; valaddr_reg:x3; val_offset:35304*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35304*0 + 3*248*FLEN/8, x4, x1, x2)

inst_11769:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x1ffffc0; valaddr_reg:x3; val_offset:35307*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35307*0 + 3*249*FLEN/8, x4, x1, x2)

inst_11770:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x1ffffe0; valaddr_reg:x3; val_offset:35310*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35310*0 + 3*250*FLEN/8, x4, x1, x2)

inst_11771:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x1fffff0; valaddr_reg:x3; val_offset:35313*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35313*0 + 3*251*FLEN/8, x4, x1, x2)

inst_11772:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x1fffff8; valaddr_reg:x3; val_offset:35316*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35316*0 + 3*252*FLEN/8, x4, x1, x2)

inst_11773:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x1fffffc; valaddr_reg:x3; val_offset:35319*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35319*0 + 3*253*FLEN/8, x4, x1, x2)

inst_11774:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x1fffffe; valaddr_reg:x3; val_offset:35322*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35322*0 + 3*254*FLEN/8, x4, x1, x2)

inst_11775:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72bda0 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x03 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72bda0; op2val:0x0;
op3val:0x1ffffff; valaddr_reg:x3; val_offset:35325*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35325*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_11776:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:35328*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35328*0 + 3*256*FLEN/8, x4, x1, x2)

inst_11777:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:35331*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35331*0 + 3*257*FLEN/8, x4, x1, x2)

inst_11778:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:35334*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35334*0 + 3*258*FLEN/8, x4, x1, x2)

inst_11779:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:35337*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35337*0 + 3*259*FLEN/8, x4, x1, x2)

inst_11780:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:35340*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35340*0 + 3*260*FLEN/8, x4, x1, x2)

inst_11781:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:35343*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35343*0 + 3*261*FLEN/8, x4, x1, x2)

inst_11782:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:35346*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35346*0 + 3*262*FLEN/8, x4, x1, x2)

inst_11783:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:35349*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35349*0 + 3*263*FLEN/8, x4, x1, x2)

inst_11784:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:35352*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35352*0 + 3*264*FLEN/8, x4, x1, x2)

inst_11785:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:35355*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35355*0 + 3*265*FLEN/8, x4, x1, x2)

inst_11786:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:35358*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35358*0 + 3*266*FLEN/8, x4, x1, x2)

inst_11787:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:35361*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35361*0 + 3*267*FLEN/8, x4, x1, x2)

inst_11788:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:35364*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35364*0 + 3*268*FLEN/8, x4, x1, x2)

inst_11789:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:35367*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35367*0 + 3*269*FLEN/8, x4, x1, x2)

inst_11790:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:35370*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35370*0 + 3*270*FLEN/8, x4, x1, x2)

inst_11791:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:35373*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35373*0 + 3*271*FLEN/8, x4, x1, x2)

inst_11792:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x83000000; valaddr_reg:x3; val_offset:35376*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35376*0 + 3*272*FLEN/8, x4, x1, x2)

inst_11793:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x83000001; valaddr_reg:x3; val_offset:35379*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35379*0 + 3*273*FLEN/8, x4, x1, x2)

inst_11794:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x83000003; valaddr_reg:x3; val_offset:35382*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35382*0 + 3*274*FLEN/8, x4, x1, x2)

inst_11795:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x83000007; valaddr_reg:x3; val_offset:35385*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35385*0 + 3*275*FLEN/8, x4, x1, x2)

inst_11796:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x8300000f; valaddr_reg:x3; val_offset:35388*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35388*0 + 3*276*FLEN/8, x4, x1, x2)

inst_11797:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x8300001f; valaddr_reg:x3; val_offset:35391*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35391*0 + 3*277*FLEN/8, x4, x1, x2)

inst_11798:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x8300003f; valaddr_reg:x3; val_offset:35394*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35394*0 + 3*278*FLEN/8, x4, x1, x2)

inst_11799:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x8300007f; valaddr_reg:x3; val_offset:35397*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35397*0 + 3*279*FLEN/8, x4, x1, x2)

inst_11800:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x830000ff; valaddr_reg:x3; val_offset:35400*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35400*0 + 3*280*FLEN/8, x4, x1, x2)

inst_11801:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x830001ff; valaddr_reg:x3; val_offset:35403*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35403*0 + 3*281*FLEN/8, x4, x1, x2)

inst_11802:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x830003ff; valaddr_reg:x3; val_offset:35406*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35406*0 + 3*282*FLEN/8, x4, x1, x2)

inst_11803:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x830007ff; valaddr_reg:x3; val_offset:35409*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35409*0 + 3*283*FLEN/8, x4, x1, x2)

inst_11804:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x83000fff; valaddr_reg:x3; val_offset:35412*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35412*0 + 3*284*FLEN/8, x4, x1, x2)

inst_11805:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x83001fff; valaddr_reg:x3; val_offset:35415*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35415*0 + 3*285*FLEN/8, x4, x1, x2)

inst_11806:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x83003fff; valaddr_reg:x3; val_offset:35418*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35418*0 + 3*286*FLEN/8, x4, x1, x2)

inst_11807:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x83007fff; valaddr_reg:x3; val_offset:35421*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35421*0 + 3*287*FLEN/8, x4, x1, x2)

inst_11808:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x8300ffff; valaddr_reg:x3; val_offset:35424*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35424*0 + 3*288*FLEN/8, x4, x1, x2)

inst_11809:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x8301ffff; valaddr_reg:x3; val_offset:35427*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35427*0 + 3*289*FLEN/8, x4, x1, x2)

inst_11810:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x8303ffff; valaddr_reg:x3; val_offset:35430*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35430*0 + 3*290*FLEN/8, x4, x1, x2)

inst_11811:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x8307ffff; valaddr_reg:x3; val_offset:35433*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35433*0 + 3*291*FLEN/8, x4, x1, x2)

inst_11812:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x830fffff; valaddr_reg:x3; val_offset:35436*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35436*0 + 3*292*FLEN/8, x4, x1, x2)

inst_11813:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x831fffff; valaddr_reg:x3; val_offset:35439*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35439*0 + 3*293*FLEN/8, x4, x1, x2)

inst_11814:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x833fffff; valaddr_reg:x3; val_offset:35442*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35442*0 + 3*294*FLEN/8, x4, x1, x2)

inst_11815:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x83400000; valaddr_reg:x3; val_offset:35445*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35445*0 + 3*295*FLEN/8, x4, x1, x2)

inst_11816:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x83600000; valaddr_reg:x3; val_offset:35448*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35448*0 + 3*296*FLEN/8, x4, x1, x2)

inst_11817:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x83700000; valaddr_reg:x3; val_offset:35451*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35451*0 + 3*297*FLEN/8, x4, x1, x2)

inst_11818:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x83780000; valaddr_reg:x3; val_offset:35454*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35454*0 + 3*298*FLEN/8, x4, x1, x2)

inst_11819:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x837c0000; valaddr_reg:x3; val_offset:35457*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35457*0 + 3*299*FLEN/8, x4, x1, x2)

inst_11820:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x837e0000; valaddr_reg:x3; val_offset:35460*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35460*0 + 3*300*FLEN/8, x4, x1, x2)

inst_11821:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x837f0000; valaddr_reg:x3; val_offset:35463*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35463*0 + 3*301*FLEN/8, x4, x1, x2)

inst_11822:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x837f8000; valaddr_reg:x3; val_offset:35466*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35466*0 + 3*302*FLEN/8, x4, x1, x2)

inst_11823:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x837fc000; valaddr_reg:x3; val_offset:35469*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35469*0 + 3*303*FLEN/8, x4, x1, x2)

inst_11824:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x837fe000; valaddr_reg:x3; val_offset:35472*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35472*0 + 3*304*FLEN/8, x4, x1, x2)

inst_11825:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x837ff000; valaddr_reg:x3; val_offset:35475*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35475*0 + 3*305*FLEN/8, x4, x1, x2)

inst_11826:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x837ff800; valaddr_reg:x3; val_offset:35478*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35478*0 + 3*306*FLEN/8, x4, x1, x2)

inst_11827:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x837ffc00; valaddr_reg:x3; val_offset:35481*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35481*0 + 3*307*FLEN/8, x4, x1, x2)

inst_11828:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x837ffe00; valaddr_reg:x3; val_offset:35484*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35484*0 + 3*308*FLEN/8, x4, x1, x2)

inst_11829:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x837fff00; valaddr_reg:x3; val_offset:35487*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35487*0 + 3*309*FLEN/8, x4, x1, x2)

inst_11830:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x837fff80; valaddr_reg:x3; val_offset:35490*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35490*0 + 3*310*FLEN/8, x4, x1, x2)

inst_11831:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x837fffc0; valaddr_reg:x3; val_offset:35493*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35493*0 + 3*311*FLEN/8, x4, x1, x2)

inst_11832:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x837fffe0; valaddr_reg:x3; val_offset:35496*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35496*0 + 3*312*FLEN/8, x4, x1, x2)

inst_11833:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x837ffff0; valaddr_reg:x3; val_offset:35499*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35499*0 + 3*313*FLEN/8, x4, x1, x2)

inst_11834:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x837ffff8; valaddr_reg:x3; val_offset:35502*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35502*0 + 3*314*FLEN/8, x4, x1, x2)

inst_11835:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x837ffffc; valaddr_reg:x3; val_offset:35505*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35505*0 + 3*315*FLEN/8, x4, x1, x2)

inst_11836:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x837ffffe; valaddr_reg:x3; val_offset:35508*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35508*0 + 3*316*FLEN/8, x4, x1, x2)

inst_11837:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73a43d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x06 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73a43d; op2val:0x80000000;
op3val:0x837fffff; valaddr_reg:x3; val_offset:35511*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35511*0 + 3*317*FLEN/8, x4, x1, x2)

inst_11838:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:35514*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35514*0 + 3*318*FLEN/8, x4, x1, x2)

inst_11839:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:35517*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35517*0 + 3*319*FLEN/8, x4, x1, x2)

inst_11840:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:35520*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35520*0 + 3*320*FLEN/8, x4, x1, x2)

inst_11841:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:35523*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35523*0 + 3*321*FLEN/8, x4, x1, x2)

inst_11842:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:35526*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35526*0 + 3*322*FLEN/8, x4, x1, x2)

inst_11843:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:35529*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35529*0 + 3*323*FLEN/8, x4, x1, x2)

inst_11844:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:35532*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35532*0 + 3*324*FLEN/8, x4, x1, x2)

inst_11845:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:35535*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35535*0 + 3*325*FLEN/8, x4, x1, x2)

inst_11846:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:35538*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35538*0 + 3*326*FLEN/8, x4, x1, x2)

inst_11847:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:35541*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35541*0 + 3*327*FLEN/8, x4, x1, x2)

inst_11848:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:35544*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35544*0 + 3*328*FLEN/8, x4, x1, x2)

inst_11849:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:35547*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35547*0 + 3*329*FLEN/8, x4, x1, x2)

inst_11850:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:35550*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35550*0 + 3*330*FLEN/8, x4, x1, x2)

inst_11851:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:35553*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35553*0 + 3*331*FLEN/8, x4, x1, x2)

inst_11852:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:35556*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35556*0 + 3*332*FLEN/8, x4, x1, x2)

inst_11853:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:35559*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35559*0 + 3*333*FLEN/8, x4, x1, x2)

inst_11854:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x8000000; valaddr_reg:x3; val_offset:35562*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35562*0 + 3*334*FLEN/8, x4, x1, x2)

inst_11855:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x8000001; valaddr_reg:x3; val_offset:35565*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35565*0 + 3*335*FLEN/8, x4, x1, x2)

inst_11856:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x8000003; valaddr_reg:x3; val_offset:35568*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35568*0 + 3*336*FLEN/8, x4, x1, x2)

inst_11857:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x8000007; valaddr_reg:x3; val_offset:35571*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35571*0 + 3*337*FLEN/8, x4, x1, x2)

inst_11858:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x800000f; valaddr_reg:x3; val_offset:35574*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35574*0 + 3*338*FLEN/8, x4, x1, x2)

inst_11859:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x800001f; valaddr_reg:x3; val_offset:35577*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35577*0 + 3*339*FLEN/8, x4, x1, x2)

inst_11860:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x800003f; valaddr_reg:x3; val_offset:35580*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35580*0 + 3*340*FLEN/8, x4, x1, x2)

inst_11861:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x800007f; valaddr_reg:x3; val_offset:35583*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35583*0 + 3*341*FLEN/8, x4, x1, x2)

inst_11862:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x80000ff; valaddr_reg:x3; val_offset:35586*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35586*0 + 3*342*FLEN/8, x4, x1, x2)

inst_11863:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x80001ff; valaddr_reg:x3; val_offset:35589*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35589*0 + 3*343*FLEN/8, x4, x1, x2)

inst_11864:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x80003ff; valaddr_reg:x3; val_offset:35592*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35592*0 + 3*344*FLEN/8, x4, x1, x2)

inst_11865:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x80007ff; valaddr_reg:x3; val_offset:35595*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35595*0 + 3*345*FLEN/8, x4, x1, x2)

inst_11866:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x8000fff; valaddr_reg:x3; val_offset:35598*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35598*0 + 3*346*FLEN/8, x4, x1, x2)

inst_11867:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x8001fff; valaddr_reg:x3; val_offset:35601*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35601*0 + 3*347*FLEN/8, x4, x1, x2)

inst_11868:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x8003fff; valaddr_reg:x3; val_offset:35604*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35604*0 + 3*348*FLEN/8, x4, x1, x2)

inst_11869:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x8007fff; valaddr_reg:x3; val_offset:35607*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35607*0 + 3*349*FLEN/8, x4, x1, x2)

inst_11870:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x800ffff; valaddr_reg:x3; val_offset:35610*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35610*0 + 3*350*FLEN/8, x4, x1, x2)

inst_11871:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x801ffff; valaddr_reg:x3; val_offset:35613*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35613*0 + 3*351*FLEN/8, x4, x1, x2)

inst_11872:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x803ffff; valaddr_reg:x3; val_offset:35616*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35616*0 + 3*352*FLEN/8, x4, x1, x2)

inst_11873:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x807ffff; valaddr_reg:x3; val_offset:35619*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35619*0 + 3*353*FLEN/8, x4, x1, x2)

inst_11874:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x80fffff; valaddr_reg:x3; val_offset:35622*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35622*0 + 3*354*FLEN/8, x4, x1, x2)

inst_11875:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x81fffff; valaddr_reg:x3; val_offset:35625*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35625*0 + 3*355*FLEN/8, x4, x1, x2)

inst_11876:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x83fffff; valaddr_reg:x3; val_offset:35628*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35628*0 + 3*356*FLEN/8, x4, x1, x2)

inst_11877:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x8400000; valaddr_reg:x3; val_offset:35631*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35631*0 + 3*357*FLEN/8, x4, x1, x2)

inst_11878:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x8600000; valaddr_reg:x3; val_offset:35634*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35634*0 + 3*358*FLEN/8, x4, x1, x2)

inst_11879:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x8700000; valaddr_reg:x3; val_offset:35637*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35637*0 + 3*359*FLEN/8, x4, x1, x2)

inst_11880:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x8780000; valaddr_reg:x3; val_offset:35640*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35640*0 + 3*360*FLEN/8, x4, x1, x2)

inst_11881:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x87c0000; valaddr_reg:x3; val_offset:35643*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35643*0 + 3*361*FLEN/8, x4, x1, x2)

inst_11882:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x87e0000; valaddr_reg:x3; val_offset:35646*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35646*0 + 3*362*FLEN/8, x4, x1, x2)

inst_11883:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x87f0000; valaddr_reg:x3; val_offset:35649*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35649*0 + 3*363*FLEN/8, x4, x1, x2)

inst_11884:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x87f8000; valaddr_reg:x3; val_offset:35652*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35652*0 + 3*364*FLEN/8, x4, x1, x2)

inst_11885:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x87fc000; valaddr_reg:x3; val_offset:35655*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35655*0 + 3*365*FLEN/8, x4, x1, x2)

inst_11886:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x87fe000; valaddr_reg:x3; val_offset:35658*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35658*0 + 3*366*FLEN/8, x4, x1, x2)

inst_11887:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x87ff000; valaddr_reg:x3; val_offset:35661*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35661*0 + 3*367*FLEN/8, x4, x1, x2)

inst_11888:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x87ff800; valaddr_reg:x3; val_offset:35664*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35664*0 + 3*368*FLEN/8, x4, x1, x2)

inst_11889:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x87ffc00; valaddr_reg:x3; val_offset:35667*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35667*0 + 3*369*FLEN/8, x4, x1, x2)

inst_11890:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x87ffe00; valaddr_reg:x3; val_offset:35670*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35670*0 + 3*370*FLEN/8, x4, x1, x2)

inst_11891:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x87fff00; valaddr_reg:x3; val_offset:35673*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35673*0 + 3*371*FLEN/8, x4, x1, x2)

inst_11892:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x87fff80; valaddr_reg:x3; val_offset:35676*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35676*0 + 3*372*FLEN/8, x4, x1, x2)

inst_11893:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x87fffc0; valaddr_reg:x3; val_offset:35679*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35679*0 + 3*373*FLEN/8, x4, x1, x2)

inst_11894:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x87fffe0; valaddr_reg:x3; val_offset:35682*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35682*0 + 3*374*FLEN/8, x4, x1, x2)

inst_11895:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x87ffff0; valaddr_reg:x3; val_offset:35685*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35685*0 + 3*375*FLEN/8, x4, x1, x2)

inst_11896:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x87ffff8; valaddr_reg:x3; val_offset:35688*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35688*0 + 3*376*FLEN/8, x4, x1, x2)

inst_11897:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x87ffffc; valaddr_reg:x3; val_offset:35691*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35691*0 + 3*377*FLEN/8, x4, x1, x2)

inst_11898:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x87ffffe; valaddr_reg:x3; val_offset:35694*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35694*0 + 3*378*FLEN/8, x4, x1, x2)

inst_11899:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x73c933 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x10 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e73c933; op2val:0x0;
op3val:0x87fffff; valaddr_reg:x3; val_offset:35697*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35697*0 + 3*379*FLEN/8, x4, x1, x2)

inst_11900:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbd800000; valaddr_reg:x3; val_offset:35700*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35700*0 + 3*380*FLEN/8, x4, x1, x2)

inst_11901:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbd800001; valaddr_reg:x3; val_offset:35703*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35703*0 + 3*381*FLEN/8, x4, x1, x2)

inst_11902:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbd800003; valaddr_reg:x3; val_offset:35706*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35706*0 + 3*382*FLEN/8, x4, x1, x2)

inst_11903:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbd800007; valaddr_reg:x3; val_offset:35709*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35709*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_11904:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbd80000f; valaddr_reg:x3; val_offset:35712*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35712*0 + 3*384*FLEN/8, x4, x1, x2)

inst_11905:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbd80001f; valaddr_reg:x3; val_offset:35715*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35715*0 + 3*385*FLEN/8, x4, x1, x2)

inst_11906:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbd80003f; valaddr_reg:x3; val_offset:35718*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35718*0 + 3*386*FLEN/8, x4, x1, x2)

inst_11907:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbd80007f; valaddr_reg:x3; val_offset:35721*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35721*0 + 3*387*FLEN/8, x4, x1, x2)

inst_11908:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbd8000ff; valaddr_reg:x3; val_offset:35724*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35724*0 + 3*388*FLEN/8, x4, x1, x2)

inst_11909:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbd8001ff; valaddr_reg:x3; val_offset:35727*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35727*0 + 3*389*FLEN/8, x4, x1, x2)

inst_11910:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbd8003ff; valaddr_reg:x3; val_offset:35730*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35730*0 + 3*390*FLEN/8, x4, x1, x2)

inst_11911:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbd8007ff; valaddr_reg:x3; val_offset:35733*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35733*0 + 3*391*FLEN/8, x4, x1, x2)

inst_11912:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbd800fff; valaddr_reg:x3; val_offset:35736*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35736*0 + 3*392*FLEN/8, x4, x1, x2)

inst_11913:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbd801fff; valaddr_reg:x3; val_offset:35739*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35739*0 + 3*393*FLEN/8, x4, x1, x2)

inst_11914:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbd803fff; valaddr_reg:x3; val_offset:35742*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35742*0 + 3*394*FLEN/8, x4, x1, x2)

inst_11915:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbd807fff; valaddr_reg:x3; val_offset:35745*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35745*0 + 3*395*FLEN/8, x4, x1, x2)

inst_11916:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbd80ffff; valaddr_reg:x3; val_offset:35748*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35748*0 + 3*396*FLEN/8, x4, x1, x2)

inst_11917:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbd81ffff; valaddr_reg:x3; val_offset:35751*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35751*0 + 3*397*FLEN/8, x4, x1, x2)

inst_11918:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbd83ffff; valaddr_reg:x3; val_offset:35754*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35754*0 + 3*398*FLEN/8, x4, x1, x2)

inst_11919:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbd87ffff; valaddr_reg:x3; val_offset:35757*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35757*0 + 3*399*FLEN/8, x4, x1, x2)

inst_11920:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbd8fffff; valaddr_reg:x3; val_offset:35760*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35760*0 + 3*400*FLEN/8, x4, x1, x2)

inst_11921:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbd9fffff; valaddr_reg:x3; val_offset:35763*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35763*0 + 3*401*FLEN/8, x4, x1, x2)

inst_11922:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbdbfffff; valaddr_reg:x3; val_offset:35766*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35766*0 + 3*402*FLEN/8, x4, x1, x2)

inst_11923:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbdc00000; valaddr_reg:x3; val_offset:35769*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35769*0 + 3*403*FLEN/8, x4, x1, x2)

inst_11924:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbde00000; valaddr_reg:x3; val_offset:35772*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35772*0 + 3*404*FLEN/8, x4, x1, x2)

inst_11925:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbdf00000; valaddr_reg:x3; val_offset:35775*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35775*0 + 3*405*FLEN/8, x4, x1, x2)

inst_11926:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbdf80000; valaddr_reg:x3; val_offset:35778*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35778*0 + 3*406*FLEN/8, x4, x1, x2)

inst_11927:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbdfc0000; valaddr_reg:x3; val_offset:35781*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35781*0 + 3*407*FLEN/8, x4, x1, x2)

inst_11928:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbdfe0000; valaddr_reg:x3; val_offset:35784*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35784*0 + 3*408*FLEN/8, x4, x1, x2)

inst_11929:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbdff0000; valaddr_reg:x3; val_offset:35787*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35787*0 + 3*409*FLEN/8, x4, x1, x2)

inst_11930:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbdff8000; valaddr_reg:x3; val_offset:35790*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35790*0 + 3*410*FLEN/8, x4, x1, x2)

inst_11931:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbdffc000; valaddr_reg:x3; val_offset:35793*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35793*0 + 3*411*FLEN/8, x4, x1, x2)

inst_11932:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbdffe000; valaddr_reg:x3; val_offset:35796*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35796*0 + 3*412*FLEN/8, x4, x1, x2)

inst_11933:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbdfff000; valaddr_reg:x3; val_offset:35799*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35799*0 + 3*413*FLEN/8, x4, x1, x2)

inst_11934:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbdfff800; valaddr_reg:x3; val_offset:35802*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35802*0 + 3*414*FLEN/8, x4, x1, x2)

inst_11935:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbdfffc00; valaddr_reg:x3; val_offset:35805*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35805*0 + 3*415*FLEN/8, x4, x1, x2)

inst_11936:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbdfffe00; valaddr_reg:x3; val_offset:35808*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35808*0 + 3*416*FLEN/8, x4, x1, x2)

inst_11937:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbdffff00; valaddr_reg:x3; val_offset:35811*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35811*0 + 3*417*FLEN/8, x4, x1, x2)

inst_11938:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbdffff80; valaddr_reg:x3; val_offset:35814*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35814*0 + 3*418*FLEN/8, x4, x1, x2)

inst_11939:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbdffffc0; valaddr_reg:x3; val_offset:35817*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35817*0 + 3*419*FLEN/8, x4, x1, x2)

inst_11940:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbdffffe0; valaddr_reg:x3; val_offset:35820*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35820*0 + 3*420*FLEN/8, x4, x1, x2)

inst_11941:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbdfffff0; valaddr_reg:x3; val_offset:35823*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35823*0 + 3*421*FLEN/8, x4, x1, x2)

inst_11942:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbdfffff8; valaddr_reg:x3; val_offset:35826*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35826*0 + 3*422*FLEN/8, x4, x1, x2)

inst_11943:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbdfffffc; valaddr_reg:x3; val_offset:35829*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35829*0 + 3*423*FLEN/8, x4, x1, x2)

inst_11944:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbdfffffe; valaddr_reg:x3; val_offset:35832*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35832*0 + 3*424*FLEN/8, x4, x1, x2)

inst_11945:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbdffffff; valaddr_reg:x3; val_offset:35835*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35835*0 + 3*425*FLEN/8, x4, x1, x2)

inst_11946:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbf800001; valaddr_reg:x3; val_offset:35838*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35838*0 + 3*426*FLEN/8, x4, x1, x2)

inst_11947:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbf800003; valaddr_reg:x3; val_offset:35841*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35841*0 + 3*427*FLEN/8, x4, x1, x2)

inst_11948:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbf800007; valaddr_reg:x3; val_offset:35844*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35844*0 + 3*428*FLEN/8, x4, x1, x2)

inst_11949:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbf999999; valaddr_reg:x3; val_offset:35847*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35847*0 + 3*429*FLEN/8, x4, x1, x2)

inst_11950:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:35850*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35850*0 + 3*430*FLEN/8, x4, x1, x2)

inst_11951:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:35853*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35853*0 + 3*431*FLEN/8, x4, x1, x2)

inst_11952:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:35856*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35856*0 + 3*432*FLEN/8, x4, x1, x2)

inst_11953:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:35859*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35859*0 + 3*433*FLEN/8, x4, x1, x2)

inst_11954:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:35862*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35862*0 + 3*434*FLEN/8, x4, x1, x2)

inst_11955:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:35865*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35865*0 + 3*435*FLEN/8, x4, x1, x2)

inst_11956:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:35868*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35868*0 + 3*436*FLEN/8, x4, x1, x2)

inst_11957:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:35871*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35871*0 + 3*437*FLEN/8, x4, x1, x2)

inst_11958:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:35874*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35874*0 + 3*438*FLEN/8, x4, x1, x2)

inst_11959:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:35877*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35877*0 + 3*439*FLEN/8, x4, x1, x2)

inst_11960:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:35880*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35880*0 + 3*440*FLEN/8, x4, x1, x2)

inst_11961:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x765149 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x050813 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e765149; op2val:0x80850813;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:35883*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35883*0 + 3*441*FLEN/8, x4, x1, x2)

inst_11962:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:35886*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35886*0 + 3*442*FLEN/8, x4, x1, x2)

inst_11963:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:35889*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35889*0 + 3*443*FLEN/8, x4, x1, x2)

inst_11964:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:35892*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35892*0 + 3*444*FLEN/8, x4, x1, x2)

inst_11965:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:35895*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35895*0 + 3*445*FLEN/8, x4, x1, x2)

inst_11966:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:35898*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35898*0 + 3*446*FLEN/8, x4, x1, x2)

inst_11967:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:35901*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35901*0 + 3*447*FLEN/8, x4, x1, x2)

inst_11968:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:35904*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35904*0 + 3*448*FLEN/8, x4, x1, x2)

inst_11969:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:35907*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35907*0 + 3*449*FLEN/8, x4, x1, x2)

inst_11970:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:35910*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35910*0 + 3*450*FLEN/8, x4, x1, x2)

inst_11971:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:35913*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35913*0 + 3*451*FLEN/8, x4, x1, x2)

inst_11972:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:35916*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35916*0 + 3*452*FLEN/8, x4, x1, x2)

inst_11973:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:35919*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35919*0 + 3*453*FLEN/8, x4, x1, x2)

inst_11974:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:35922*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35922*0 + 3*454*FLEN/8, x4, x1, x2)

inst_11975:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:35925*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35925*0 + 3*455*FLEN/8, x4, x1, x2)

inst_11976:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:35928*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35928*0 + 3*456*FLEN/8, x4, x1, x2)

inst_11977:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:35931*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35931*0 + 3*457*FLEN/8, x4, x1, x2)

inst_11978:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8b800000; valaddr_reg:x3; val_offset:35934*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35934*0 + 3*458*FLEN/8, x4, x1, x2)

inst_11979:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8b800001; valaddr_reg:x3; val_offset:35937*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35937*0 + 3*459*FLEN/8, x4, x1, x2)

inst_11980:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8b800003; valaddr_reg:x3; val_offset:35940*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35940*0 + 3*460*FLEN/8, x4, x1, x2)

inst_11981:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8b800007; valaddr_reg:x3; val_offset:35943*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35943*0 + 3*461*FLEN/8, x4, x1, x2)

inst_11982:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8b80000f; valaddr_reg:x3; val_offset:35946*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35946*0 + 3*462*FLEN/8, x4, x1, x2)

inst_11983:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8b80001f; valaddr_reg:x3; val_offset:35949*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35949*0 + 3*463*FLEN/8, x4, x1, x2)

inst_11984:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8b80003f; valaddr_reg:x3; val_offset:35952*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35952*0 + 3*464*FLEN/8, x4, x1, x2)

inst_11985:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8b80007f; valaddr_reg:x3; val_offset:35955*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35955*0 + 3*465*FLEN/8, x4, x1, x2)

inst_11986:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8b8000ff; valaddr_reg:x3; val_offset:35958*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35958*0 + 3*466*FLEN/8, x4, x1, x2)

inst_11987:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8b8001ff; valaddr_reg:x3; val_offset:35961*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35961*0 + 3*467*FLEN/8, x4, x1, x2)

inst_11988:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8b8003ff; valaddr_reg:x3; val_offset:35964*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35964*0 + 3*468*FLEN/8, x4, x1, x2)

inst_11989:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8b8007ff; valaddr_reg:x3; val_offset:35967*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35967*0 + 3*469*FLEN/8, x4, x1, x2)

inst_11990:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8b800fff; valaddr_reg:x3; val_offset:35970*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35970*0 + 3*470*FLEN/8, x4, x1, x2)

inst_11991:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8b801fff; valaddr_reg:x3; val_offset:35973*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35973*0 + 3*471*FLEN/8, x4, x1, x2)

inst_11992:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8b803fff; valaddr_reg:x3; val_offset:35976*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35976*0 + 3*472*FLEN/8, x4, x1, x2)

inst_11993:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8b807fff; valaddr_reg:x3; val_offset:35979*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35979*0 + 3*473*FLEN/8, x4, x1, x2)

inst_11994:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8b80ffff; valaddr_reg:x3; val_offset:35982*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35982*0 + 3*474*FLEN/8, x4, x1, x2)

inst_11995:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8b81ffff; valaddr_reg:x3; val_offset:35985*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35985*0 + 3*475*FLEN/8, x4, x1, x2)

inst_11996:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8b83ffff; valaddr_reg:x3; val_offset:35988*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35988*0 + 3*476*FLEN/8, x4, x1, x2)

inst_11997:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8b87ffff; valaddr_reg:x3; val_offset:35991*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35991*0 + 3*477*FLEN/8, x4, x1, x2)

inst_11998:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8b8fffff; valaddr_reg:x3; val_offset:35994*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35994*0 + 3*478*FLEN/8, x4, x1, x2)

inst_11999:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8b9fffff; valaddr_reg:x3; val_offset:35997*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 35997*0 + 3*479*FLEN/8, x4, x1, x2)

inst_12000:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8bbfffff; valaddr_reg:x3; val_offset:36000*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36000*0 + 3*480*FLEN/8, x4, x1, x2)

inst_12001:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8bc00000; valaddr_reg:x3; val_offset:36003*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36003*0 + 3*481*FLEN/8, x4, x1, x2)

inst_12002:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8be00000; valaddr_reg:x3; val_offset:36006*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36006*0 + 3*482*FLEN/8, x4, x1, x2)

inst_12003:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8bf00000; valaddr_reg:x3; val_offset:36009*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36009*0 + 3*483*FLEN/8, x4, x1, x2)

inst_12004:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8bf80000; valaddr_reg:x3; val_offset:36012*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36012*0 + 3*484*FLEN/8, x4, x1, x2)

inst_12005:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8bfc0000; valaddr_reg:x3; val_offset:36015*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36015*0 + 3*485*FLEN/8, x4, x1, x2)

inst_12006:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8bfe0000; valaddr_reg:x3; val_offset:36018*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36018*0 + 3*486*FLEN/8, x4, x1, x2)

inst_12007:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8bff0000; valaddr_reg:x3; val_offset:36021*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36021*0 + 3*487*FLEN/8, x4, x1, x2)

inst_12008:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8bff8000; valaddr_reg:x3; val_offset:36024*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36024*0 + 3*488*FLEN/8, x4, x1, x2)

inst_12009:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8bffc000; valaddr_reg:x3; val_offset:36027*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36027*0 + 3*489*FLEN/8, x4, x1, x2)

inst_12010:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8bffe000; valaddr_reg:x3; val_offset:36030*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36030*0 + 3*490*FLEN/8, x4, x1, x2)

inst_12011:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8bfff000; valaddr_reg:x3; val_offset:36033*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36033*0 + 3*491*FLEN/8, x4, x1, x2)

inst_12012:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8bfff800; valaddr_reg:x3; val_offset:36036*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36036*0 + 3*492*FLEN/8, x4, x1, x2)

inst_12013:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8bfffc00; valaddr_reg:x3; val_offset:36039*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36039*0 + 3*493*FLEN/8, x4, x1, x2)

inst_12014:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8bfffe00; valaddr_reg:x3; val_offset:36042*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36042*0 + 3*494*FLEN/8, x4, x1, x2)

inst_12015:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8bffff00; valaddr_reg:x3; val_offset:36045*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36045*0 + 3*495*FLEN/8, x4, x1, x2)

inst_12016:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8bffff80; valaddr_reg:x3; val_offset:36048*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36048*0 + 3*496*FLEN/8, x4, x1, x2)

inst_12017:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8bffffc0; valaddr_reg:x3; val_offset:36051*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36051*0 + 3*497*FLEN/8, x4, x1, x2)

inst_12018:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8bffffe0; valaddr_reg:x3; val_offset:36054*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36054*0 + 3*498*FLEN/8, x4, x1, x2)

inst_12019:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8bfffff0; valaddr_reg:x3; val_offset:36057*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36057*0 + 3*499*FLEN/8, x4, x1, x2)

inst_12020:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8bfffff8; valaddr_reg:x3; val_offset:36060*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36060*0 + 3*500*FLEN/8, x4, x1, x2)

inst_12021:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8bfffffc; valaddr_reg:x3; val_offset:36063*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36063*0 + 3*501*FLEN/8, x4, x1, x2)

inst_12022:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8bfffffe; valaddr_reg:x3; val_offset:36066*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36066*0 + 3*502*FLEN/8, x4, x1, x2)

inst_12023:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7bf9d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x17 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7bf9d0; op2val:0x80000000;
op3val:0x8bffffff; valaddr_reg:x3; val_offset:36069*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36069*0 + 3*503*FLEN/8, x4, x1, x2)

inst_12024:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x31000000; valaddr_reg:x3; val_offset:36072*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36072*0 + 3*504*FLEN/8, x4, x1, x2)

inst_12025:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x31000001; valaddr_reg:x3; val_offset:36075*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36075*0 + 3*505*FLEN/8, x4, x1, x2)

inst_12026:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x31000003; valaddr_reg:x3; val_offset:36078*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36078*0 + 3*506*FLEN/8, x4, x1, x2)

inst_12027:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x31000007; valaddr_reg:x3; val_offset:36081*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36081*0 + 3*507*FLEN/8, x4, x1, x2)

inst_12028:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x3100000f; valaddr_reg:x3; val_offset:36084*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36084*0 + 3*508*FLEN/8, x4, x1, x2)

inst_12029:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x3100001f; valaddr_reg:x3; val_offset:36087*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36087*0 + 3*509*FLEN/8, x4, x1, x2)

inst_12030:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x3100003f; valaddr_reg:x3; val_offset:36090*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36090*0 + 3*510*FLEN/8, x4, x1, x2)

inst_12031:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x3100007f; valaddr_reg:x3; val_offset:36093*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36093*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_12032:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x310000ff; valaddr_reg:x3; val_offset:36096*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36096*0 + 3*512*FLEN/8, x4, x1, x2)

inst_12033:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x310001ff; valaddr_reg:x3; val_offset:36099*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36099*0 + 3*513*FLEN/8, x4, x1, x2)

inst_12034:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x310003ff; valaddr_reg:x3; val_offset:36102*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36102*0 + 3*514*FLEN/8, x4, x1, x2)

inst_12035:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x310007ff; valaddr_reg:x3; val_offset:36105*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36105*0 + 3*515*FLEN/8, x4, x1, x2)

inst_12036:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x31000fff; valaddr_reg:x3; val_offset:36108*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36108*0 + 3*516*FLEN/8, x4, x1, x2)

inst_12037:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x31001fff; valaddr_reg:x3; val_offset:36111*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36111*0 + 3*517*FLEN/8, x4, x1, x2)

inst_12038:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x31003fff; valaddr_reg:x3; val_offset:36114*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36114*0 + 3*518*FLEN/8, x4, x1, x2)

inst_12039:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x31007fff; valaddr_reg:x3; val_offset:36117*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36117*0 + 3*519*FLEN/8, x4, x1, x2)

inst_12040:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x3100ffff; valaddr_reg:x3; val_offset:36120*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36120*0 + 3*520*FLEN/8, x4, x1, x2)

inst_12041:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x3101ffff; valaddr_reg:x3; val_offset:36123*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36123*0 + 3*521*FLEN/8, x4, x1, x2)

inst_12042:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x3103ffff; valaddr_reg:x3; val_offset:36126*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36126*0 + 3*522*FLEN/8, x4, x1, x2)

inst_12043:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x3107ffff; valaddr_reg:x3; val_offset:36129*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36129*0 + 3*523*FLEN/8, x4, x1, x2)

inst_12044:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x310fffff; valaddr_reg:x3; val_offset:36132*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36132*0 + 3*524*FLEN/8, x4, x1, x2)

inst_12045:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x311fffff; valaddr_reg:x3; val_offset:36135*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36135*0 + 3*525*FLEN/8, x4, x1, x2)

inst_12046:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x313fffff; valaddr_reg:x3; val_offset:36138*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36138*0 + 3*526*FLEN/8, x4, x1, x2)

inst_12047:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x31400000; valaddr_reg:x3; val_offset:36141*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36141*0 + 3*527*FLEN/8, x4, x1, x2)

inst_12048:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x31600000; valaddr_reg:x3; val_offset:36144*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36144*0 + 3*528*FLEN/8, x4, x1, x2)

inst_12049:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x31700000; valaddr_reg:x3; val_offset:36147*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36147*0 + 3*529*FLEN/8, x4, x1, x2)

inst_12050:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x31780000; valaddr_reg:x3; val_offset:36150*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36150*0 + 3*530*FLEN/8, x4, x1, x2)

inst_12051:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x317c0000; valaddr_reg:x3; val_offset:36153*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36153*0 + 3*531*FLEN/8, x4, x1, x2)

inst_12052:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x317e0000; valaddr_reg:x3; val_offset:36156*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36156*0 + 3*532*FLEN/8, x4, x1, x2)

inst_12053:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x317f0000; valaddr_reg:x3; val_offset:36159*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36159*0 + 3*533*FLEN/8, x4, x1, x2)

inst_12054:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x317f8000; valaddr_reg:x3; val_offset:36162*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36162*0 + 3*534*FLEN/8, x4, x1, x2)

inst_12055:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x317fc000; valaddr_reg:x3; val_offset:36165*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36165*0 + 3*535*FLEN/8, x4, x1, x2)

inst_12056:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x317fe000; valaddr_reg:x3; val_offset:36168*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36168*0 + 3*536*FLEN/8, x4, x1, x2)

inst_12057:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x317ff000; valaddr_reg:x3; val_offset:36171*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36171*0 + 3*537*FLEN/8, x4, x1, x2)

inst_12058:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x317ff800; valaddr_reg:x3; val_offset:36174*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36174*0 + 3*538*FLEN/8, x4, x1, x2)

inst_12059:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x317ffc00; valaddr_reg:x3; val_offset:36177*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36177*0 + 3*539*FLEN/8, x4, x1, x2)

inst_12060:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x317ffe00; valaddr_reg:x3; val_offset:36180*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36180*0 + 3*540*FLEN/8, x4, x1, x2)

inst_12061:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x317fff00; valaddr_reg:x3; val_offset:36183*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36183*0 + 3*541*FLEN/8, x4, x1, x2)

inst_12062:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x317fff80; valaddr_reg:x3; val_offset:36186*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36186*0 + 3*542*FLEN/8, x4, x1, x2)

inst_12063:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x317fffc0; valaddr_reg:x3; val_offset:36189*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36189*0 + 3*543*FLEN/8, x4, x1, x2)

inst_12064:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x317fffe0; valaddr_reg:x3; val_offset:36192*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36192*0 + 3*544*FLEN/8, x4, x1, x2)

inst_12065:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x317ffff0; valaddr_reg:x3; val_offset:36195*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36195*0 + 3*545*FLEN/8, x4, x1, x2)

inst_12066:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x317ffff8; valaddr_reg:x3; val_offset:36198*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36198*0 + 3*546*FLEN/8, x4, x1, x2)

inst_12067:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x317ffffc; valaddr_reg:x3; val_offset:36201*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36201*0 + 3*547*FLEN/8, x4, x1, x2)

inst_12068:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x317ffffe; valaddr_reg:x3; val_offset:36204*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36204*0 + 3*548*FLEN/8, x4, x1, x2)

inst_12069:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x62 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x317fffff; valaddr_reg:x3; val_offset:36207*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36207*0 + 3*549*FLEN/8, x4, x1, x2)

inst_12070:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x3f800001; valaddr_reg:x3; val_offset:36210*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36210*0 + 3*550*FLEN/8, x4, x1, x2)

inst_12071:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x3f800003; valaddr_reg:x3; val_offset:36213*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36213*0 + 3*551*FLEN/8, x4, x1, x2)

inst_12072:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x3f800007; valaddr_reg:x3; val_offset:36216*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36216*0 + 3*552*FLEN/8, x4, x1, x2)

inst_12073:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x3f999999; valaddr_reg:x3; val_offset:36219*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36219*0 + 3*553*FLEN/8, x4, x1, x2)

inst_12074:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:36222*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36222*0 + 3*554*FLEN/8, x4, x1, x2)

inst_12075:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:36225*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36225*0 + 3*555*FLEN/8, x4, x1, x2)

inst_12076:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:36228*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36228*0 + 3*556*FLEN/8, x4, x1, x2)

inst_12077:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:36231*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36231*0 + 3*557*FLEN/8, x4, x1, x2)

inst_12078:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:36234*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36234*0 + 3*558*FLEN/8, x4, x1, x2)

inst_12079:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:36237*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36237*0 + 3*559*FLEN/8, x4, x1, x2)

inst_12080:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:36240*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36240*0 + 3*560*FLEN/8, x4, x1, x2)

inst_12081:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:36243*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36243*0 + 3*561*FLEN/8, x4, x1, x2)

inst_12082:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:36246*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36246*0 + 3*562*FLEN/8, x4, x1, x2)

inst_12083:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:36249*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36249*0 + 3*563*FLEN/8, x4, x1, x2)

inst_12084:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:36252*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36252*0 + 3*564*FLEN/8, x4, x1, x2)

inst_12085:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7e5045 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x00d94b and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7e5045; op2val:0x80d94b;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:36255*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36255*0 + 3*565*FLEN/8, x4, x1, x2)

inst_12086:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb7800000; valaddr_reg:x3; val_offset:36258*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36258*0 + 3*566*FLEN/8, x4, x1, x2)

inst_12087:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb7800001; valaddr_reg:x3; val_offset:36261*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36261*0 + 3*567*FLEN/8, x4, x1, x2)

inst_12088:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb7800003; valaddr_reg:x3; val_offset:36264*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36264*0 + 3*568*FLEN/8, x4, x1, x2)

inst_12089:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb7800007; valaddr_reg:x3; val_offset:36267*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36267*0 + 3*569*FLEN/8, x4, x1, x2)

inst_12090:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb780000f; valaddr_reg:x3; val_offset:36270*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36270*0 + 3*570*FLEN/8, x4, x1, x2)

inst_12091:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb780001f; valaddr_reg:x3; val_offset:36273*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36273*0 + 3*571*FLEN/8, x4, x1, x2)

inst_12092:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb780003f; valaddr_reg:x3; val_offset:36276*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36276*0 + 3*572*FLEN/8, x4, x1, x2)

inst_12093:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb780007f; valaddr_reg:x3; val_offset:36279*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36279*0 + 3*573*FLEN/8, x4, x1, x2)

inst_12094:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb78000ff; valaddr_reg:x3; val_offset:36282*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36282*0 + 3*574*FLEN/8, x4, x1, x2)

inst_12095:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb78001ff; valaddr_reg:x3; val_offset:36285*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36285*0 + 3*575*FLEN/8, x4, x1, x2)

inst_12096:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb78003ff; valaddr_reg:x3; val_offset:36288*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36288*0 + 3*576*FLEN/8, x4, x1, x2)

inst_12097:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb78007ff; valaddr_reg:x3; val_offset:36291*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36291*0 + 3*577*FLEN/8, x4, x1, x2)

inst_12098:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb7800fff; valaddr_reg:x3; val_offset:36294*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36294*0 + 3*578*FLEN/8, x4, x1, x2)

inst_12099:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb7801fff; valaddr_reg:x3; val_offset:36297*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36297*0 + 3*579*FLEN/8, x4, x1, x2)

inst_12100:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb7803fff; valaddr_reg:x3; val_offset:36300*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36300*0 + 3*580*FLEN/8, x4, x1, x2)

inst_12101:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb7807fff; valaddr_reg:x3; val_offset:36303*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36303*0 + 3*581*FLEN/8, x4, x1, x2)

inst_12102:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb780ffff; valaddr_reg:x3; val_offset:36306*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36306*0 + 3*582*FLEN/8, x4, x1, x2)

inst_12103:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb781ffff; valaddr_reg:x3; val_offset:36309*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36309*0 + 3*583*FLEN/8, x4, x1, x2)

inst_12104:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb783ffff; valaddr_reg:x3; val_offset:36312*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36312*0 + 3*584*FLEN/8, x4, x1, x2)

inst_12105:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb787ffff; valaddr_reg:x3; val_offset:36315*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36315*0 + 3*585*FLEN/8, x4, x1, x2)

inst_12106:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb78fffff; valaddr_reg:x3; val_offset:36318*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36318*0 + 3*586*FLEN/8, x4, x1, x2)

inst_12107:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb79fffff; valaddr_reg:x3; val_offset:36321*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36321*0 + 3*587*FLEN/8, x4, x1, x2)

inst_12108:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb7bfffff; valaddr_reg:x3; val_offset:36324*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36324*0 + 3*588*FLEN/8, x4, x1, x2)

inst_12109:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb7c00000; valaddr_reg:x3; val_offset:36327*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36327*0 + 3*589*FLEN/8, x4, x1, x2)

inst_12110:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb7e00000; valaddr_reg:x3; val_offset:36330*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36330*0 + 3*590*FLEN/8, x4, x1, x2)

inst_12111:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb7f00000; valaddr_reg:x3; val_offset:36333*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36333*0 + 3*591*FLEN/8, x4, x1, x2)

inst_12112:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb7f80000; valaddr_reg:x3; val_offset:36336*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36336*0 + 3*592*FLEN/8, x4, x1, x2)

inst_12113:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb7fc0000; valaddr_reg:x3; val_offset:36339*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36339*0 + 3*593*FLEN/8, x4, x1, x2)

inst_12114:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb7fe0000; valaddr_reg:x3; val_offset:36342*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36342*0 + 3*594*FLEN/8, x4, x1, x2)

inst_12115:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb7ff0000; valaddr_reg:x3; val_offset:36345*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36345*0 + 3*595*FLEN/8, x4, x1, x2)

inst_12116:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb7ff8000; valaddr_reg:x3; val_offset:36348*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36348*0 + 3*596*FLEN/8, x4, x1, x2)

inst_12117:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb7ffc000; valaddr_reg:x3; val_offset:36351*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36351*0 + 3*597*FLEN/8, x4, x1, x2)

inst_12118:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb7ffe000; valaddr_reg:x3; val_offset:36354*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36354*0 + 3*598*FLEN/8, x4, x1, x2)

inst_12119:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb7fff000; valaddr_reg:x3; val_offset:36357*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36357*0 + 3*599*FLEN/8, x4, x1, x2)

inst_12120:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb7fff800; valaddr_reg:x3; val_offset:36360*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36360*0 + 3*600*FLEN/8, x4, x1, x2)

inst_12121:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb7fffc00; valaddr_reg:x3; val_offset:36363*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36363*0 + 3*601*FLEN/8, x4, x1, x2)

inst_12122:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb7fffe00; valaddr_reg:x3; val_offset:36366*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36366*0 + 3*602*FLEN/8, x4, x1, x2)

inst_12123:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb7ffff00; valaddr_reg:x3; val_offset:36369*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36369*0 + 3*603*FLEN/8, x4, x1, x2)

inst_12124:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb7ffff80; valaddr_reg:x3; val_offset:36372*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36372*0 + 3*604*FLEN/8, x4, x1, x2)

inst_12125:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb7ffffc0; valaddr_reg:x3; val_offset:36375*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36375*0 + 3*605*FLEN/8, x4, x1, x2)

inst_12126:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb7ffffe0; valaddr_reg:x3; val_offset:36378*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36378*0 + 3*606*FLEN/8, x4, x1, x2)

inst_12127:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb7fffff0; valaddr_reg:x3; val_offset:36381*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36381*0 + 3*607*FLEN/8, x4, x1, x2)

inst_12128:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb7fffff8; valaddr_reg:x3; val_offset:36384*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36384*0 + 3*608*FLEN/8, x4, x1, x2)

inst_12129:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb7fffffc; valaddr_reg:x3; val_offset:36387*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36387*0 + 3*609*FLEN/8, x4, x1, x2)

inst_12130:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb7fffffe; valaddr_reg:x3; val_offset:36390*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36390*0 + 3*610*FLEN/8, x4, x1, x2)

inst_12131:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x6f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xb7ffffff; valaddr_reg:x3; val_offset:36393*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36393*0 + 3*611*FLEN/8, x4, x1, x2)

inst_12132:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xbf800001; valaddr_reg:x3; val_offset:36396*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36396*0 + 3*612*FLEN/8, x4, x1, x2)

inst_12133:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xbf800003; valaddr_reg:x3; val_offset:36399*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36399*0 + 3*613*FLEN/8, x4, x1, x2)

inst_12134:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xbf800007; valaddr_reg:x3; val_offset:36402*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36402*0 + 3*614*FLEN/8, x4, x1, x2)

inst_12135:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xbf999999; valaddr_reg:x3; val_offset:36405*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36405*0 + 3*615*FLEN/8, x4, x1, x2)

inst_12136:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:36408*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36408*0 + 3*616*FLEN/8, x4, x1, x2)

inst_12137:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:36411*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36411*0 + 3*617*FLEN/8, x4, x1, x2)

inst_12138:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:36414*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36414*0 + 3*618*FLEN/8, x4, x1, x2)

inst_12139:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:36417*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36417*0 + 3*619*FLEN/8, x4, x1, x2)

inst_12140:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:36420*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36420*0 + 3*620*FLEN/8, x4, x1, x2)

inst_12141:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:36423*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36423*0 + 3*621*FLEN/8, x4, x1, x2)

inst_12142:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:36426*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36426*0 + 3*622*FLEN/8, x4, x1, x2)

inst_12143:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:36429*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36429*0 + 3*623*FLEN/8, x4, x1, x2)

inst_12144:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:36432*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36432*0 + 3*624*FLEN/8, x4, x1, x2)

inst_12145:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:36435*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36435*0 + 3*625*FLEN/8, x4, x1, x2)

inst_12146:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:36438*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36438*0 + 3*626*FLEN/8, x4, x1, x2)

inst_12147:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x7f27c1 and fs2 == 1 and fe2 == 0x01 and fm2 == 0x006c7a and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e7f27c1; op2val:0x80806c7a;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:36441*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36441*0 + 3*627*FLEN/8, x4, x1, x2)

inst_12148:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7800000; valaddr_reg:x3; val_offset:36444*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36444*0 + 3*628*FLEN/8, x4, x1, x2)

inst_12149:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7800001; valaddr_reg:x3; val_offset:36447*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36447*0 + 3*629*FLEN/8, x4, x1, x2)

inst_12150:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7800003; valaddr_reg:x3; val_offset:36450*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36450*0 + 3*630*FLEN/8, x4, x1, x2)

inst_12151:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7800007; valaddr_reg:x3; val_offset:36453*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36453*0 + 3*631*FLEN/8, x4, x1, x2)

inst_12152:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe780000f; valaddr_reg:x3; val_offset:36456*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36456*0 + 3*632*FLEN/8, x4, x1, x2)

inst_12153:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe780001f; valaddr_reg:x3; val_offset:36459*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36459*0 + 3*633*FLEN/8, x4, x1, x2)

inst_12154:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe780003f; valaddr_reg:x3; val_offset:36462*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36462*0 + 3*634*FLEN/8, x4, x1, x2)

inst_12155:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe780007f; valaddr_reg:x3; val_offset:36465*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36465*0 + 3*635*FLEN/8, x4, x1, x2)

inst_12156:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe78000ff; valaddr_reg:x3; val_offset:36468*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36468*0 + 3*636*FLEN/8, x4, x1, x2)

inst_12157:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe78001ff; valaddr_reg:x3; val_offset:36471*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36471*0 + 3*637*FLEN/8, x4, x1, x2)

inst_12158:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe78003ff; valaddr_reg:x3; val_offset:36474*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36474*0 + 3*638*FLEN/8, x4, x1, x2)

inst_12159:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe78007ff; valaddr_reg:x3; val_offset:36477*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36477*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_12160:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7800fff; valaddr_reg:x3; val_offset:36480*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36480*0 + 3*640*FLEN/8, x4, x1, x2)

inst_12161:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7801fff; valaddr_reg:x3; val_offset:36483*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36483*0 + 3*641*FLEN/8, x4, x1, x2)

inst_12162:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7803fff; valaddr_reg:x3; val_offset:36486*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36486*0 + 3*642*FLEN/8, x4, x1, x2)

inst_12163:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7807fff; valaddr_reg:x3; val_offset:36489*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36489*0 + 3*643*FLEN/8, x4, x1, x2)

inst_12164:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe780ffff; valaddr_reg:x3; val_offset:36492*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36492*0 + 3*644*FLEN/8, x4, x1, x2)

inst_12165:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe781ffff; valaddr_reg:x3; val_offset:36495*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36495*0 + 3*645*FLEN/8, x4, x1, x2)

inst_12166:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe783ffff; valaddr_reg:x3; val_offset:36498*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36498*0 + 3*646*FLEN/8, x4, x1, x2)

inst_12167:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe787ffff; valaddr_reg:x3; val_offset:36501*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36501*0 + 3*647*FLEN/8, x4, x1, x2)

inst_12168:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe78fffff; valaddr_reg:x3; val_offset:36504*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36504*0 + 3*648*FLEN/8, x4, x1, x2)

inst_12169:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe79fffff; valaddr_reg:x3; val_offset:36507*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36507*0 + 3*649*FLEN/8, x4, x1, x2)

inst_12170:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7bfffff; valaddr_reg:x3; val_offset:36510*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36510*0 + 3*650*FLEN/8, x4, x1, x2)

inst_12171:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7c00000; valaddr_reg:x3; val_offset:36513*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36513*0 + 3*651*FLEN/8, x4, x1, x2)

inst_12172:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7e00000; valaddr_reg:x3; val_offset:36516*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36516*0 + 3*652*FLEN/8, x4, x1, x2)

inst_12173:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7f00000; valaddr_reg:x3; val_offset:36519*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36519*0 + 3*653*FLEN/8, x4, x1, x2)

inst_12174:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7f80000; valaddr_reg:x3; val_offset:36522*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36522*0 + 3*654*FLEN/8, x4, x1, x2)

inst_12175:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7fc0000; valaddr_reg:x3; val_offset:36525*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36525*0 + 3*655*FLEN/8, x4, x1, x2)

inst_12176:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7fe0000; valaddr_reg:x3; val_offset:36528*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36528*0 + 3*656*FLEN/8, x4, x1, x2)

inst_12177:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7ff0000; valaddr_reg:x3; val_offset:36531*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36531*0 + 3*657*FLEN/8, x4, x1, x2)

inst_12178:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7ff8000; valaddr_reg:x3; val_offset:36534*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36534*0 + 3*658*FLEN/8, x4, x1, x2)

inst_12179:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7ffc000; valaddr_reg:x3; val_offset:36537*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36537*0 + 3*659*FLEN/8, x4, x1, x2)

inst_12180:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7ffe000; valaddr_reg:x3; val_offset:36540*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36540*0 + 3*660*FLEN/8, x4, x1, x2)

inst_12181:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7fff000; valaddr_reg:x3; val_offset:36543*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36543*0 + 3*661*FLEN/8, x4, x1, x2)

inst_12182:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7fff800; valaddr_reg:x3; val_offset:36546*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36546*0 + 3*662*FLEN/8, x4, x1, x2)

inst_12183:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7fffc00; valaddr_reg:x3; val_offset:36549*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36549*0 + 3*663*FLEN/8, x4, x1, x2)

inst_12184:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7fffe00; valaddr_reg:x3; val_offset:36552*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36552*0 + 3*664*FLEN/8, x4, x1, x2)

inst_12185:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7ffff00; valaddr_reg:x3; val_offset:36555*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36555*0 + 3*665*FLEN/8, x4, x1, x2)

inst_12186:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7ffff80; valaddr_reg:x3; val_offset:36558*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36558*0 + 3*666*FLEN/8, x4, x1, x2)

inst_12187:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7ffffc0; valaddr_reg:x3; val_offset:36561*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36561*0 + 3*667*FLEN/8, x4, x1, x2)

inst_12188:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7ffffe0; valaddr_reg:x3; val_offset:36564*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36564*0 + 3*668*FLEN/8, x4, x1, x2)

inst_12189:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7fffff0; valaddr_reg:x3; val_offset:36567*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36567*0 + 3*669*FLEN/8, x4, x1, x2)

inst_12190:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7fffff8; valaddr_reg:x3; val_offset:36570*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36570*0 + 3*670*FLEN/8, x4, x1, x2)

inst_12191:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7fffffc; valaddr_reg:x3; val_offset:36573*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36573*0 + 3*671*FLEN/8, x4, x1, x2)

inst_12192:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7fffffe; valaddr_reg:x3; val_offset:36576*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36576*0 + 3*672*FLEN/8, x4, x1, x2)

inst_12193:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xcf and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xe7ffffff; valaddr_reg:x3; val_offset:36579*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36579*0 + 3*673*FLEN/8, x4, x1, x2)

inst_12194:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xff000001; valaddr_reg:x3; val_offset:36582*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36582*0 + 3*674*FLEN/8, x4, x1, x2)

inst_12195:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xff000003; valaddr_reg:x3; val_offset:36585*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36585*0 + 3*675*FLEN/8, x4, x1, x2)

inst_12196:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xff000007; valaddr_reg:x3; val_offset:36588*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36588*0 + 3*676*FLEN/8, x4, x1, x2)

inst_12197:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xff199999; valaddr_reg:x3; val_offset:36591*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36591*0 + 3*677*FLEN/8, x4, x1, x2)

inst_12198:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xff249249; valaddr_reg:x3; val_offset:36594*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36594*0 + 3*678*FLEN/8, x4, x1, x2)

inst_12199:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xff333333; valaddr_reg:x3; val_offset:36597*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36597*0 + 3*679*FLEN/8, x4, x1, x2)

inst_12200:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:36600*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36600*0 + 3*680*FLEN/8, x4, x1, x2)

inst_12201:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:36603*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36603*0 + 3*681*FLEN/8, x4, x1, x2)

inst_12202:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xff444444; valaddr_reg:x3; val_offset:36606*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36606*0 + 3*682*FLEN/8, x4, x1, x2)

inst_12203:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:36609*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36609*0 + 3*683*FLEN/8, x4, x1, x2)

inst_12204:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:36612*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36612*0 + 3*684*FLEN/8, x4, x1, x2)

inst_12205:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xff666666; valaddr_reg:x3; val_offset:36615*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36615*0 + 3*685*FLEN/8, x4, x1, x2)

inst_12206:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:36618*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36618*0 + 3*686*FLEN/8, x4, x1, x2)

inst_12207:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:36621*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36621*0 + 3*687*FLEN/8, x4, x1, x2)

inst_12208:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:36624*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36624*0 + 3*688*FLEN/8, x4, x1, x2)

inst_12209:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x003c2b and fs2 == 1 and fe2 == 0x80 and fm2 == 0x7f87e0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e803c2b; op2val:0xc07f87e0;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:36627*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36627*0 + 3*689*FLEN/8, x4, x1, x2)

inst_12210:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:36630*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36630*0 + 3*690*FLEN/8, x4, x1, x2)

inst_12211:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:36633*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36633*0 + 3*691*FLEN/8, x4, x1, x2)

inst_12212:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:36636*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36636*0 + 3*692*FLEN/8, x4, x1, x2)

inst_12213:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:36639*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36639*0 + 3*693*FLEN/8, x4, x1, x2)

inst_12214:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:36642*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36642*0 + 3*694*FLEN/8, x4, x1, x2)

inst_12215:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:36645*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36645*0 + 3*695*FLEN/8, x4, x1, x2)

inst_12216:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:36648*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36648*0 + 3*696*FLEN/8, x4, x1, x2)

inst_12217:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:36651*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36651*0 + 3*697*FLEN/8, x4, x1, x2)

inst_12218:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:36654*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36654*0 + 3*698*FLEN/8, x4, x1, x2)

inst_12219:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:36657*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36657*0 + 3*699*FLEN/8, x4, x1, x2)

inst_12220:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:36660*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36660*0 + 3*700*FLEN/8, x4, x1, x2)

inst_12221:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:36663*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36663*0 + 3*701*FLEN/8, x4, x1, x2)

inst_12222:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:36666*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36666*0 + 3*702*FLEN/8, x4, x1, x2)

inst_12223:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:36669*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36669*0 + 3*703*FLEN/8, x4, x1, x2)

inst_12224:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:36672*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36672*0 + 3*704*FLEN/8, x4, x1, x2)

inst_12225:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:36675*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36675*0 + 3*705*FLEN/8, x4, x1, x2)

inst_12226:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x88000000; valaddr_reg:x3; val_offset:36678*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36678*0 + 3*706*FLEN/8, x4, x1, x2)

inst_12227:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x88000001; valaddr_reg:x3; val_offset:36681*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36681*0 + 3*707*FLEN/8, x4, x1, x2)

inst_12228:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x88000003; valaddr_reg:x3; val_offset:36684*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36684*0 + 3*708*FLEN/8, x4, x1, x2)

inst_12229:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x88000007; valaddr_reg:x3; val_offset:36687*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36687*0 + 3*709*FLEN/8, x4, x1, x2)

inst_12230:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x8800000f; valaddr_reg:x3; val_offset:36690*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36690*0 + 3*710*FLEN/8, x4, x1, x2)

inst_12231:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x8800001f; valaddr_reg:x3; val_offset:36693*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36693*0 + 3*711*FLEN/8, x4, x1, x2)

inst_12232:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x8800003f; valaddr_reg:x3; val_offset:36696*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36696*0 + 3*712*FLEN/8, x4, x1, x2)

inst_12233:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x8800007f; valaddr_reg:x3; val_offset:36699*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36699*0 + 3*713*FLEN/8, x4, x1, x2)

inst_12234:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x880000ff; valaddr_reg:x3; val_offset:36702*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36702*0 + 3*714*FLEN/8, x4, x1, x2)

inst_12235:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x880001ff; valaddr_reg:x3; val_offset:36705*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36705*0 + 3*715*FLEN/8, x4, x1, x2)

inst_12236:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x880003ff; valaddr_reg:x3; val_offset:36708*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36708*0 + 3*716*FLEN/8, x4, x1, x2)

inst_12237:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x880007ff; valaddr_reg:x3; val_offset:36711*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36711*0 + 3*717*FLEN/8, x4, x1, x2)

inst_12238:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x88000fff; valaddr_reg:x3; val_offset:36714*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36714*0 + 3*718*FLEN/8, x4, x1, x2)

inst_12239:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x88001fff; valaddr_reg:x3; val_offset:36717*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36717*0 + 3*719*FLEN/8, x4, x1, x2)

inst_12240:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x88003fff; valaddr_reg:x3; val_offset:36720*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36720*0 + 3*720*FLEN/8, x4, x1, x2)

inst_12241:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x88007fff; valaddr_reg:x3; val_offset:36723*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36723*0 + 3*721*FLEN/8, x4, x1, x2)

inst_12242:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x8800ffff; valaddr_reg:x3; val_offset:36726*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36726*0 + 3*722*FLEN/8, x4, x1, x2)

inst_12243:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x8801ffff; valaddr_reg:x3; val_offset:36729*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36729*0 + 3*723*FLEN/8, x4, x1, x2)

inst_12244:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x8803ffff; valaddr_reg:x3; val_offset:36732*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36732*0 + 3*724*FLEN/8, x4, x1, x2)

inst_12245:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x8807ffff; valaddr_reg:x3; val_offset:36735*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36735*0 + 3*725*FLEN/8, x4, x1, x2)

inst_12246:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x880fffff; valaddr_reg:x3; val_offset:36738*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36738*0 + 3*726*FLEN/8, x4, x1, x2)

inst_12247:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x881fffff; valaddr_reg:x3; val_offset:36741*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36741*0 + 3*727*FLEN/8, x4, x1, x2)

inst_12248:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x883fffff; valaddr_reg:x3; val_offset:36744*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36744*0 + 3*728*FLEN/8, x4, x1, x2)

inst_12249:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x88400000; valaddr_reg:x3; val_offset:36747*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36747*0 + 3*729*FLEN/8, x4, x1, x2)

inst_12250:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x88600000; valaddr_reg:x3; val_offset:36750*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36750*0 + 3*730*FLEN/8, x4, x1, x2)

inst_12251:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x88700000; valaddr_reg:x3; val_offset:36753*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36753*0 + 3*731*FLEN/8, x4, x1, x2)

inst_12252:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x88780000; valaddr_reg:x3; val_offset:36756*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36756*0 + 3*732*FLEN/8, x4, x1, x2)

inst_12253:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887c0000; valaddr_reg:x3; val_offset:36759*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36759*0 + 3*733*FLEN/8, x4, x1, x2)

inst_12254:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887e0000; valaddr_reg:x3; val_offset:36762*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36762*0 + 3*734*FLEN/8, x4, x1, x2)

inst_12255:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887f0000; valaddr_reg:x3; val_offset:36765*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36765*0 + 3*735*FLEN/8, x4, x1, x2)

inst_12256:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887f8000; valaddr_reg:x3; val_offset:36768*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36768*0 + 3*736*FLEN/8, x4, x1, x2)

inst_12257:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887fc000; valaddr_reg:x3; val_offset:36771*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36771*0 + 3*737*FLEN/8, x4, x1, x2)

inst_12258:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887fe000; valaddr_reg:x3; val_offset:36774*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36774*0 + 3*738*FLEN/8, x4, x1, x2)

inst_12259:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887ff000; valaddr_reg:x3; val_offset:36777*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36777*0 + 3*739*FLEN/8, x4, x1, x2)

inst_12260:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887ff800; valaddr_reg:x3; val_offset:36780*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36780*0 + 3*740*FLEN/8, x4, x1, x2)

inst_12261:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887ffc00; valaddr_reg:x3; val_offset:36783*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36783*0 + 3*741*FLEN/8, x4, x1, x2)

inst_12262:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887ffe00; valaddr_reg:x3; val_offset:36786*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36786*0 + 3*742*FLEN/8, x4, x1, x2)

inst_12263:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887fff00; valaddr_reg:x3; val_offset:36789*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36789*0 + 3*743*FLEN/8, x4, x1, x2)

inst_12264:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887fff80; valaddr_reg:x3; val_offset:36792*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36792*0 + 3*744*FLEN/8, x4, x1, x2)

inst_12265:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887fffc0; valaddr_reg:x3; val_offset:36795*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36795*0 + 3*745*FLEN/8, x4, x1, x2)

inst_12266:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887fffe0; valaddr_reg:x3; val_offset:36798*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36798*0 + 3*746*FLEN/8, x4, x1, x2)

inst_12267:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887ffff0; valaddr_reg:x3; val_offset:36801*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36801*0 + 3*747*FLEN/8, x4, x1, x2)

inst_12268:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887ffff8; valaddr_reg:x3; val_offset:36804*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36804*0 + 3*748*FLEN/8, x4, x1, x2)

inst_12269:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887ffffc; valaddr_reg:x3; val_offset:36807*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36807*0 + 3*749*FLEN/8, x4, x1, x2)

inst_12270:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887ffffe; valaddr_reg:x3; val_offset:36810*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36810*0 + 3*750*FLEN/8, x4, x1, x2)

inst_12271:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0163ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8163ad; op2val:0x80000000;
op3val:0x887fffff; valaddr_reg:x3; val_offset:36813*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36813*0 + 3*751*FLEN/8, x4, x1, x2)

inst_12272:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x020c87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e820c87; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:36816*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36816*0 + 3*752*FLEN/8, x4, x1, x2)

inst_12273:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x020c87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e820c87; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:36819*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36819*0 + 3*753*FLEN/8, x4, x1, x2)

inst_12274:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x020c87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e820c87; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:36822*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36822*0 + 3*754*FLEN/8, x4, x1, x2)

inst_12275:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x020c87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e820c87; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:36825*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36825*0 + 3*755*FLEN/8, x4, x1, x2)

inst_12276:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x020c87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e820c87; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:36828*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36828*0 + 3*756*FLEN/8, x4, x1, x2)

inst_12277:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x020c87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e820c87; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:36831*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36831*0 + 3*757*FLEN/8, x4, x1, x2)

inst_12278:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x020c87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e820c87; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:36834*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36834*0 + 3*758*FLEN/8, x4, x1, x2)

inst_12279:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x020c87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e820c87; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:36837*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36837*0 + 3*759*FLEN/8, x4, x1, x2)

inst_12280:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x020c87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e820c87; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:36840*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36840*0 + 3*760*FLEN/8, x4, x1, x2)

inst_12281:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x020c87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e820c87; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:36843*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36843*0 + 3*761*FLEN/8, x4, x1, x2)

inst_12282:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x020c87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e820c87; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:36846*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36846*0 + 3*762*FLEN/8, x4, x1, x2)

inst_12283:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x020c87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e820c87; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:36849*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36849*0 + 3*763*FLEN/8, x4, x1, x2)

inst_12284:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x020c87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e820c87; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:36852*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36852*0 + 3*764*FLEN/8, x4, x1, x2)

inst_12285:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x020c87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e820c87; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:36855*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36855*0 + 3*765*FLEN/8, x4, x1, x2)

inst_12286:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x020c87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e820c87; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:36858*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36858*0 + 3*766*FLEN/8, x4, x1, x2)

inst_12287:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x020c87 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e820c87; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:36861*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 36861*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x7f444444135180356,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x7f4ccccc135739596,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x7f5b6db6136698294,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x7f666666137417318,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x7f6db6db137896667,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x7f7ffff8139095032,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x7f7ffffc139095036,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x7f7ffffe139095038,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x3f800001065353217,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x3f800003065353219,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x3f800007065353223,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x3f999999067030937,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x3fa49249067749961,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x3fb33333068708659,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x3fb6db6d068948333,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x3fbbbbbb069267899,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x3fc44444069827140,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x3fcccccc070386380,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x3fdb6db6071345078,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x3fe66666072064102,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x3fedb6db072543451,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x3ffffff8073741816,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x3ffffffc073741820,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x3ffffffe073741822,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x40000000073741824,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x40000001073741825,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x40000003073741827,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x40000007073741831,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x4000000f073741839,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x4000001f073741855,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x4000003f073741887,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x4000007f073741951,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x400000ff073742079,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x400001ff073742335,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x400003ff073742847,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x400007ff073743871,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x40000fff073745919,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x40001fff073750015,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x40003fff073758207,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x40007fff073774591,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x4000ffff073807359,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x4001ffff073872895,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x4003ffff074003967,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x4007ffff074266111,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x400fffff074790399,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x401fffff075838975,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x403fffff077936127,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x40400000077936128,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x40600000080033280,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x40700000081081856,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x40780000081606144,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x407c0000081868288,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x407e0000081999360,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x407f0000082064896,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x407f8000082097664,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x407fc000082114048,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x407fe000082122240,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x407ff000082126336,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x407ff800082128384,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x407ffc00082129408,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x407ffe00082129920,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x407fff00082130176,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x407fff80082130304,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x407fffc0082130368,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x407fffe0082130400,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x407ffff0082130416,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x407ffff8082130424,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x407ffffc082130428,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x407ffffe082130430,32,FLEN)
NAN_BOXED(0x7e6f9ea9121244329,32,FLEN)
NAN_BOXED(0x88bffe962046,32,FLEN)
NAN_BOXED(0x407fffff082130431,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000001147483649,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000003147483651,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000007147483655,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80199999149161369,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80249249149880393,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80333333150839091,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8036db6d151078765,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x803bbbbb151398331,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80444444151957572,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x804ccccc152516812,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x805b6db6153475510,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80666666154194534,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x806db6db154673883,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffff8155872248,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffc155872252,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffe155872254,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86000000248146944,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86000001248146945,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86000003248146947,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86000007248146951,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8600000f248146959,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8600001f248146975,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8600003f248147007,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8600007f248147071,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x860000ff248147199,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x860001ff248147455,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x860003ff248147967,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x860007ff248148991,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86000fff248151039,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86001fff248155135,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86003fff248163327,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86007fff248179711,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8600ffff248212479,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8601ffff248278015,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8603ffff248409087,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8607ffff248671231,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x860fffff249195519,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x861fffff250244095,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x863fffff252341247,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86400000252341248,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86600000254438400,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86700000255486976,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86780000256011264,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x867c0000256273408,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x867e0000256404480,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x867f0000256470016,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x867f8000256502784,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x867fc000256519168,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x867fe000256527360,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x867ff000256531456,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x867ff800256533504,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x867ffc00256534528,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x867ffe00256535040,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x867fff00256535296,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x867fff80256535424,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x867fffc0256535488,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x867fffe0256535520,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x867ffff0256535536,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x867ffff8256535544,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x867ffffc256535548,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x867ffffe256535550,32,FLEN)
NAN_BOXED(0x7e705f54121293652,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x867fffff256535551,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x3,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x199999677721,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x249249396745,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x333333355443,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x36db6d595117,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x3bbbbb914683,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x444444473924,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x4ccccc033164,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5b6db6991862,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x666666710886,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x6db6db190235,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffff8388600,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffffc388604,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffffe388606,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x50000003886080,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x50000013886081,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x50000033886083,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x50000073886087,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x500000f3886095,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x500001f3886111,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x500003f3886143,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x500007f3886207,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x50000ff3886335,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x50001ff3886591,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x50003ff3887103,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x50007ff3888127,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5000fff3890175,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5001fff3894271,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5003fff3902463,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5007fff3918847,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x500ffff3951615,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x501ffff4017151,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x503ffff4148223,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x507ffff4410367,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x50fffff4934655,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x51fffff5983231,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x53fffff8080383,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x54000008080384,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x56000000177536,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x57000001226112,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x57800001750400,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x57c00002012544,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x57e00002143616,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x57f00002209152,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x57f80002241920,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x57fc0002258304,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x57fe0002266496,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x57ff0002270592,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x57ff8002272640,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x57ffc002273664,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x57ffe002274176,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x57fff002274432,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x57fff802274560,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x57fffc02274624,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x57fffe02274656,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x57ffff02274672,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x57ffff82274680,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x57ffffc2274684,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x57ffffe2274686,32,FLEN)
NAN_BOXED(0x7e709985121308549,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x57fffff2274687,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x3,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x199999677721,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x249249396745,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x333333355443,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x36db6d595117,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x3bbbbb914683,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x444444473924,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x4ccccc033164,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5b6db6991862,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x666666710886,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x6db6db190235,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffff8388600,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffffc388604,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffffe388606,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x18000005165824,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x18000015165825,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x18000035165827,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x18000075165831,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x180000f5165839,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x180001f5165855,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x180003f5165887,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x180007f5165951,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x18000ff5166079,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x18001ff5166335,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x18003ff5166847,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x18007ff5167871,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1800fff5169919,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1801fff5174015,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1803fff5182207,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1807fff5198591,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x180ffff5231359,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x181ffff5296895,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x183ffff5427967,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x187ffff5690111,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x18fffff6214399,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x19fffff7262975,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1bfffff9360127,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1c000009360128,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1e000001457280,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1f000002505856,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1f800003030144,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1fc00003292288,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1fe00003423360,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1ff00003488896,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1ff80003521664,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1ffc0003538048,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1ffe0003546240,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1fff0003550336,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1fff8003552384,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1fffc003553408,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1fffe003553920,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1ffff003554176,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1ffff803554304,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1ffffc03554368,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1ffffe03554400,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1fffff03554416,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1fffff83554424,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1fffffc3554428,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1fffffe3554430,32,FLEN)
NAN_BOXED(0x7e72bda0121448864,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1ffffff3554431,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000001147483649,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000003147483651,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000007147483655,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80199999149161369,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80249249149880393,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80333333150839091,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8036db6d151078765,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x803bbbbb151398331,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80444444151957572,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x804ccccc152516812,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x805b6db6153475510,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80666666154194534,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x806db6db154673883,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffff8155872248,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffc155872252,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffe155872254,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x83000000197815296,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x83000001197815297,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x83000003197815299,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x83000007197815303,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8300000f197815311,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8300001f197815327,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8300003f197815359,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8300007f197815423,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x830000ff197815551,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x830001ff197815807,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x830003ff197816319,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x830007ff197817343,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x83000fff197819391,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x83001fff197823487,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x83003fff197831679,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x83007fff197848063,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8300ffff197880831,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8301ffff197946367,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8303ffff198077439,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8307ffff198339583,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x830fffff198863871,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x831fffff199912447,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x833fffff202009599,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x83400000202009600,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x83600000204106752,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x83700000205155328,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x83780000205679616,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x837c0000205941760,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x837e0000206072832,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x837f0000206138368,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x837f8000206171136,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x837fc000206187520,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x837fe000206195712,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x837ff000206199808,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x837ff800206201856,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x837ffc00206202880,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x837ffe00206203392,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x837fff00206203648,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x837fff80206203776,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x837fffc0206203840,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x837fffe0206203872,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x837ffff0206203888,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x837ffff8206203896,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x837ffffc206203900,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x837ffffe206203902,32,FLEN)
NAN_BOXED(0x7e73a43d121507901,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x837fffff206203903,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x3,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x199999677721,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x249249396745,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x333333355443,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x36db6d595117,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x3bbbbb914683,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x444444473924,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x4ccccc033164,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5b6db6991862,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x666666710886,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x6db6db190235,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffff8388600,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffffc388604,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffffe388606,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x800000034217728,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x800000134217729,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x800000334217731,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x800000734217735,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x800000f34217743,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x800001f34217759,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x800003f34217791,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x800007f34217855,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x80000ff34217983,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x80001ff34218239,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x80003ff34218751,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x80007ff34219775,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x8000fff34221823,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x8001fff34225919,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x8003fff34234111,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x8007fff34250495,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x800ffff34283263,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x801ffff34348799,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x803ffff34479871,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x807ffff34742015,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x80fffff35266303,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x81fffff36314879,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x83fffff38412031,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x840000038412032,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x860000040509184,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x870000041557760,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x878000042082048,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x87c000042344192,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x87e000042475264,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x87f000042540800,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x87f800042573568,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x87fc00042589952,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x87fe00042598144,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x87ff00042602240,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x87ff80042604288,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x87ffc0042605312,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x87ffe0042605824,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x87fff0042606080,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x87fff8042606208,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x87fffc042606272,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x87fffe042606304,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x87ffff042606320,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x87ffff842606328,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x87ffffc42606332,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x87ffffe42606334,32,FLEN)
NAN_BOXED(0x7e73c933121517363,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x87fffff42606335,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbd800000179282432,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbd800001179282433,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbd800003179282435,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbd800007179282439,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbd80000f179282447,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbd80001f179282463,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbd80003f179282495,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbd80007f179282559,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbd8000ff179282687,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbd8001ff179282943,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbd8003ff179283455,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbd8007ff179284479,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbd800fff179286527,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbd801fff179290623,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbd803fff179298815,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbd807fff179315199,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbd80ffff179347967,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbd81ffff179413503,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbd83ffff179544575,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbd87ffff179806719,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbd8fffff180331007,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbd9fffff181379583,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbdbfffff183476735,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbdc00000183476736,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbde00000185573888,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbdf00000186622464,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbdf80000187146752,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbdfc0000187408896,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbdfe0000187539968,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbdff0000187605504,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbdff8000187638272,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbdffc000187654656,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbdffe000187662848,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbdfff000187666944,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbdfff800187668992,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbdfffc00187670016,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbdfffe00187670528,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbdffff00187670784,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbdffff80187670912,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbdffffc0187670976,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbdffffe0187671008,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbdfffff0187671024,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbdfffff8187671032,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbdfffffc187671036,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbdfffffe187671038,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbdffffff187671039,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbf800001212836865,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbf800003212836867,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbf800007212836871,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbf999999214514585,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbfa49249215233609,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbfb33333216192307,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbfb6db6d216431981,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbfbbbbbb216751547,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbfc44444217310788,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbfcccccc217870028,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbfdb6db6218828726,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbfe66666219547750,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbfedb6db220027099,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbffffff8221225464,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbffffffc221225468,32,FLEN)
NAN_BOXED(0x7e765149121683273,32,FLEN)
NAN_BOXED(0x80850813156202003,32,FLEN)
NAN_BOXED(0xbffffffe221225470,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000001147483649,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000003147483651,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000007147483655,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80199999149161369,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80249249149880393,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80333333150839091,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8036db6d151078765,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x803bbbbb151398331,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80444444151957572,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x804ccccc152516812,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x805b6db6153475510,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80666666154194534,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x806db6db154673883,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffff8155872248,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffc155872252,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffe155872254,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b800000340421632,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b800001340421633,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b800003340421635,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b800007340421639,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b80000f340421647,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b80001f340421663,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b80003f340421695,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b80007f340421759,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b8000ff340421887,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b8001ff340422143,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b8003ff340422655,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b8007ff340423679,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b800fff340425727,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b801fff340429823,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b803fff340438015,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b807fff340454399,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b80ffff340487167,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b81ffff340552703,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b83ffff340683775,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b87ffff340945919,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b8fffff341470207,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8b9fffff342518783,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8bbfffff344615935,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8bc00000344615936,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8be00000346713088,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8bf00000347761664,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8bf80000348285952,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8bfc0000348548096,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8bfe0000348679168,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8bff0000348744704,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8bff8000348777472,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8bffc000348793856,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8bffe000348802048,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8bfff000348806144,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8bfff800348808192,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8bfffc00348809216,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8bfffe00348809728,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8bffff00348809984,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8bffff80348810112,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8bffffc0348810176,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8bffffe0348810208,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8bfffff0348810224,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8bfffff8348810232,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8bfffffc348810236,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8bfffffe348810238,32,FLEN)
NAN_BOXED(0x7e7bf9d0122054096,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8bffffff348810239,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x3100000022083584,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x3100000122083585,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x3100000322083587,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x3100000722083591,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x3100000f22083599,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x3100001f22083615,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x3100003f22083647,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x3100007f22083711,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x310000ff22083839,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x310001ff22084095,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x310003ff22084607,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x310007ff22085631,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x31000fff22087679,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x31001fff22091775,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x31003fff22099967,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x31007fff22116351,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x3100ffff22149119,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x3101ffff22214655,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x3103ffff22345727,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x3107ffff22607871,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x310fffff23132159,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x311fffff24180735,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x313fffff26277887,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x3140000026277888,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x3160000028375040,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x3170000029423616,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x3178000029947904,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x317c000030210048,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x317e000030341120,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x317f000030406656,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x317f800030439424,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x317fc00030455808,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x317fe00030464000,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x317ff00030468096,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x317ff80030470144,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x317ffc0030471168,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x317ffe0030471680,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x317fff0030471936,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x317fff8030472064,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x317fffc030472128,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x317fffe030472160,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x317ffff030472176,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x317ffff830472184,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x317ffffc30472188,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x317ffffe30472190,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x317fffff30472191,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x3f800001065353217,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x3f800003065353219,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x3f800007065353223,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x3f999999067030937,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x3fa49249067749961,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x3fb33333068708659,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x3fb6db6d068948333,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x3fbbbbbb069267899,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x3fc44444069827140,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x3fcccccc070386380,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x3fdb6db6071345078,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x3fe66666072064102,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x3fedb6db072543451,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x3ffffff8073741816,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x3ffffffc073741820,32,FLEN)
NAN_BOXED(0x7e7e5045122207301,32,FLEN)
NAN_BOXED(0x80d94b444235,32,FLEN)
NAN_BOXED(0x3ffffffe073741822,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb7800000078619136,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb7800001078619137,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb7800003078619139,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb7800007078619143,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb780000f078619151,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb780001f078619167,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb780003f078619199,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb780007f078619263,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb78000ff078619391,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb78001ff078619647,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb78003ff078620159,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb78007ff078621183,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb7800fff078623231,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb7801fff078627327,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb7803fff078635519,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb7807fff078651903,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb780ffff078684671,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb781ffff078750207,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb783ffff078881279,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb787ffff079143423,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb78fffff079667711,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb79fffff080716287,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb7bfffff082813439,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb7c00000082813440,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb7e00000084910592,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb7f00000085959168,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb7f80000086483456,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb7fc0000086745600,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb7fe0000086876672,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb7ff0000086942208,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb7ff8000086974976,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb7ffc000086991360,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb7ffe000086999552,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb7fff000087003648,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb7fff800087005696,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb7fffc00087006720,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb7fffe00087007232,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb7ffff00087007488,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb7ffff80087007616,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb7ffffc0087007680,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb7ffffe0087007712,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb7fffff0087007728,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb7fffff8087007736,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb7fffffc087007740,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb7fffffe087007742,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xb7ffffff087007743,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xbf800001212836865,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xbf800003212836867,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xbf800007212836871,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xbf999999214514585,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xbfa49249215233609,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xbfb33333216192307,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xbfb6db6d216431981,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xbfbbbbbb216751547,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xbfc44444217310788,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xbfcccccc217870028,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xbfdb6db6218828726,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xbfe66666219547750,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xbfedb6db220027099,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xbffffff8221225464,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xbffffffc221225468,32,FLEN)
NAN_BOXED(0x7e7f27c1122262465,32,FLEN)
NAN_BOXED(0x80806c7a155900026,32,FLEN)
NAN_BOXED(0xbffffffe221225470,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe7800000883925504,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe7800001883925505,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe7800003883925507,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe7800007883925511,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe780000f883925519,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe780001f883925535,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe780003f883925567,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe780007f883925631,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe78000ff883925759,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe78001ff883926015,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe78003ff883926527,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe78007ff883927551,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe7800fff883929599,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe7801fff883933695,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe7803fff883941887,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe7807fff883958271,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe780ffff883991039,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe781ffff884056575,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe783ffff884187647,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe787ffff884449791,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe78fffff884974079,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe79fffff886022655,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe7bfffff888119807,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe7c00000888119808,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe7e00000890216960,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe7f00000891265536,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe7f80000891789824,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe7fc0000892051968,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe7fe0000892183040,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe7ff0000892248576,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe7ff8000892281344,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe7ffc000892297728,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe7ffe000892305920,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe7fff000892310016,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe7fff800892312064,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe7fffc00892313088,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe7fffe00892313600,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe7ffff00892313856,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe7ffff80892313984,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe7ffffc0892314048,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe7ffffe0892314080,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe7fffff0892314096,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe7fffff8892314104,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe7fffffc892314108,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe7fffffe892314110,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xe7ffffff892314111,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xff000001278190081,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xff000003278190083,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xff000007278190087,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xff199999279867801,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xff249249280586825,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xff333333281545523,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xff36db6d281785197,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xff3bbbbb282104763,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xff444444282664004,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xff4ccccc283223244,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xff5b6db6284181942,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xff666666284900966,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xff6db6db285380315,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xff7ffff8286578680,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xff7ffffc286578684,32,FLEN)
NAN_BOXED(0x7e803c2b122333227,32,FLEN)
NAN_BOXED(0xc07f87e0229583328,32,FLEN)
NAN_BOXED(0xff7ffffe286578686,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000001147483649,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000003147483651,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000007147483655,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80199999149161369,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80249249149880393,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80333333150839091,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8036db6d151078765,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x803bbbbb151398331,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80444444151957572,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x804ccccc152516812,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x805b6db6153475510,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80666666154194534,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x806db6db154673883,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffff8155872248,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffc155872252,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffe155872254,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x88000000281701376,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x88000001281701377,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x88000003281701379,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x88000007281701383,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8800000f281701391,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8800001f281701407,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8800003f281701439,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8800007f281701503,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x880000ff281701631,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x880001ff281701887,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x880003ff281702399,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x880007ff281703423,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x88000fff281705471,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x88001fff281709567,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x88003fff281717759,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x88007fff281734143,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8800ffff281766911,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8801ffff281832447,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8803ffff281963519,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8807ffff282225663,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x880fffff282749951,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x881fffff283798527,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x883fffff285895679,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x88400000285895680,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x88600000287992832,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x88700000289041408,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x88780000289565696,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887c0000289827840,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887e0000289958912,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887f0000290024448,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887f8000290057216,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887fc000290073600,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887fe000290081792,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887ff000290085888,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887ff800290087936,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887ffc00290088960,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887ffe00290089472,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887fff00290089728,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887fff80290089856,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887fffc0290089920,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887fffe0290089952,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887ffff0290089968,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887ffff8290089976,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887ffffc290089980,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887ffffe290089982,32,FLEN)
NAN_BOXED(0x7e8163ad122408877,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887fffff290089983,32,FLEN)
NAN_BOXED(0x7e820c87122452103,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1,32,FLEN)
NAN_BOXED(0x7e820c87122452103,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x3,32,FLEN)
NAN_BOXED(0x7e820c87122452103,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7,32,FLEN)
NAN_BOXED(0x7e820c87122452103,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x199999677721,32,FLEN)
NAN_BOXED(0x7e820c87122452103,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x249249396745,32,FLEN)
NAN_BOXED(0x7e820c87122452103,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x333333355443,32,FLEN)
NAN_BOXED(0x7e820c87122452103,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x36db6d595117,32,FLEN)
NAN_BOXED(0x7e820c87122452103,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x3bbbbb914683,32,FLEN)
NAN_BOXED(0x7e820c87122452103,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x444444473924,32,FLEN)
NAN_BOXED(0x7e820c87122452103,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x4ccccc033164,32,FLEN)
NAN_BOXED(0x7e820c87122452103,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5b6db6991862,32,FLEN)
NAN_BOXED(0x7e820c87122452103,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x666666710886,32,FLEN)
NAN_BOXED(0x7e820c87122452103,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x6db6db190235,32,FLEN)
NAN_BOXED(0x7e820c87122452103,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffff8388600,32,FLEN)
NAN_BOXED(0x7e820c87122452103,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffffc388604,32,FLEN)
NAN_BOXED(0x7e820c87122452103,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffffe388606,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
