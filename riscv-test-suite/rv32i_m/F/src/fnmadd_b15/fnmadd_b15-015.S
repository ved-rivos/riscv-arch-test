
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:18:09 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fnmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fnmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fnmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_10752:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xebff8000; valaddr_reg:x3; val_offset:32256*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32256*0 + 3*0*FLEN/8, x4, x1, x2)

inst_10753:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xebffc000; valaddr_reg:x3; val_offset:32259*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32259*0 + 3*1*FLEN/8, x4, x1, x2)

inst_10754:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xebffe000; valaddr_reg:x3; val_offset:32262*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32262*0 + 3*2*FLEN/8, x4, x1, x2)

inst_10755:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xebfff000; valaddr_reg:x3; val_offset:32265*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32265*0 + 3*3*FLEN/8, x4, x1, x2)

inst_10756:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xebfff800; valaddr_reg:x3; val_offset:32268*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32268*0 + 3*4*FLEN/8, x4, x1, x2)

inst_10757:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xebfffc00; valaddr_reg:x3; val_offset:32271*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32271*0 + 3*5*FLEN/8, x4, x1, x2)

inst_10758:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xebfffe00; valaddr_reg:x3; val_offset:32274*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32274*0 + 3*6*FLEN/8, x4, x1, x2)

inst_10759:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xebffff00; valaddr_reg:x3; val_offset:32277*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32277*0 + 3*7*FLEN/8, x4, x1, x2)

inst_10760:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xebffff80; valaddr_reg:x3; val_offset:32280*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32280*0 + 3*8*FLEN/8, x4, x1, x2)

inst_10761:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xebffffc0; valaddr_reg:x3; val_offset:32283*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32283*0 + 3*9*FLEN/8, x4, x1, x2)

inst_10762:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xebffffe0; valaddr_reg:x3; val_offset:32286*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32286*0 + 3*10*FLEN/8, x4, x1, x2)

inst_10763:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xebfffff0; valaddr_reg:x3; val_offset:32289*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32289*0 + 3*11*FLEN/8, x4, x1, x2)

inst_10764:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xebfffff8; valaddr_reg:x3; val_offset:32292*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32292*0 + 3*12*FLEN/8, x4, x1, x2)

inst_10765:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xebfffffc; valaddr_reg:x3; val_offset:32295*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32295*0 + 3*13*FLEN/8, x4, x1, x2)

inst_10766:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xebfffffe; valaddr_reg:x3; val_offset:32298*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32298*0 + 3*14*FLEN/8, x4, x1, x2)

inst_10767:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xd7 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xebffffff; valaddr_reg:x3; val_offset:32301*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32301*0 + 3*15*FLEN/8, x4, x1, x2)

inst_10768:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xff000001; valaddr_reg:x3; val_offset:32304*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32304*0 + 3*16*FLEN/8, x4, x1, x2)

inst_10769:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xff000003; valaddr_reg:x3; val_offset:32307*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32307*0 + 3*17*FLEN/8, x4, x1, x2)

inst_10770:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xff000007; valaddr_reg:x3; val_offset:32310*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32310*0 + 3*18*FLEN/8, x4, x1, x2)

inst_10771:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xff199999; valaddr_reg:x3; val_offset:32313*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32313*0 + 3*19*FLEN/8, x4, x1, x2)

inst_10772:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xff249249; valaddr_reg:x3; val_offset:32316*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32316*0 + 3*20*FLEN/8, x4, x1, x2)

inst_10773:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xff333333; valaddr_reg:x3; val_offset:32319*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32319*0 + 3*21*FLEN/8, x4, x1, x2)

inst_10774:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:32322*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32322*0 + 3*22*FLEN/8, x4, x1, x2)

inst_10775:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:32325*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32325*0 + 3*23*FLEN/8, x4, x1, x2)

inst_10776:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xff444444; valaddr_reg:x3; val_offset:32328*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32328*0 + 3*24*FLEN/8, x4, x1, x2)

inst_10777:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:32331*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32331*0 + 3*25*FLEN/8, x4, x1, x2)

inst_10778:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:32334*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32334*0 + 3*26*FLEN/8, x4, x1, x2)

inst_10779:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xff666666; valaddr_reg:x3; val_offset:32337*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32337*0 + 3*27*FLEN/8, x4, x1, x2)

inst_10780:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:32340*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32340*0 + 3*28*FLEN/8, x4, x1, x2)

inst_10781:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:32343*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32343*0 + 3*29*FLEN/8, x4, x1, x2)

inst_10782:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:32346*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32346*0 + 3*30*FLEN/8, x4, x1, x2)

inst_10783:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64003e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0fb7fb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64003e; op2val:0xc08fb7fb;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:32349*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32349*0 + 3*31*FLEN/8, x4, x1, x2)

inst_10784:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f000000; valaddr_reg:x3; val_offset:32352*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32352*0 + 3*32*FLEN/8, x4, x1, x2)

inst_10785:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f000001; valaddr_reg:x3; val_offset:32355*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32355*0 + 3*33*FLEN/8, x4, x1, x2)

inst_10786:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f000003; valaddr_reg:x3; val_offset:32358*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32358*0 + 3*34*FLEN/8, x4, x1, x2)

inst_10787:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f000007; valaddr_reg:x3; val_offset:32361*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32361*0 + 3*35*FLEN/8, x4, x1, x2)

inst_10788:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f00000f; valaddr_reg:x3; val_offset:32364*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32364*0 + 3*36*FLEN/8, x4, x1, x2)

inst_10789:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f00001f; valaddr_reg:x3; val_offset:32367*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32367*0 + 3*37*FLEN/8, x4, x1, x2)

inst_10790:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f00003f; valaddr_reg:x3; val_offset:32370*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32370*0 + 3*38*FLEN/8, x4, x1, x2)

inst_10791:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f00007f; valaddr_reg:x3; val_offset:32373*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32373*0 + 3*39*FLEN/8, x4, x1, x2)

inst_10792:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f0000ff; valaddr_reg:x3; val_offset:32376*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32376*0 + 3*40*FLEN/8, x4, x1, x2)

inst_10793:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f0001ff; valaddr_reg:x3; val_offset:32379*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32379*0 + 3*41*FLEN/8, x4, x1, x2)

inst_10794:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f0003ff; valaddr_reg:x3; val_offset:32382*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32382*0 + 3*42*FLEN/8, x4, x1, x2)

inst_10795:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f0007ff; valaddr_reg:x3; val_offset:32385*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32385*0 + 3*43*FLEN/8, x4, x1, x2)

inst_10796:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f000fff; valaddr_reg:x3; val_offset:32388*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32388*0 + 3*44*FLEN/8, x4, x1, x2)

inst_10797:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f001fff; valaddr_reg:x3; val_offset:32391*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32391*0 + 3*45*FLEN/8, x4, x1, x2)

inst_10798:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f003fff; valaddr_reg:x3; val_offset:32394*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32394*0 + 3*46*FLEN/8, x4, x1, x2)

inst_10799:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f007fff; valaddr_reg:x3; val_offset:32397*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32397*0 + 3*47*FLEN/8, x4, x1, x2)

inst_10800:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f00ffff; valaddr_reg:x3; val_offset:32400*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32400*0 + 3*48*FLEN/8, x4, x1, x2)

inst_10801:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f01ffff; valaddr_reg:x3; val_offset:32403*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32403*0 + 3*49*FLEN/8, x4, x1, x2)

inst_10802:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f03ffff; valaddr_reg:x3; val_offset:32406*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32406*0 + 3*50*FLEN/8, x4, x1, x2)

inst_10803:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f07ffff; valaddr_reg:x3; val_offset:32409*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32409*0 + 3*51*FLEN/8, x4, x1, x2)

inst_10804:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f0fffff; valaddr_reg:x3; val_offset:32412*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32412*0 + 3*52*FLEN/8, x4, x1, x2)

inst_10805:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f1fffff; valaddr_reg:x3; val_offset:32415*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32415*0 + 3*53*FLEN/8, x4, x1, x2)

inst_10806:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f3fffff; valaddr_reg:x3; val_offset:32418*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32418*0 + 3*54*FLEN/8, x4, x1, x2)

inst_10807:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f400000; valaddr_reg:x3; val_offset:32421*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32421*0 + 3*55*FLEN/8, x4, x1, x2)

inst_10808:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f600000; valaddr_reg:x3; val_offset:32424*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32424*0 + 3*56*FLEN/8, x4, x1, x2)

inst_10809:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f700000; valaddr_reg:x3; val_offset:32427*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32427*0 + 3*57*FLEN/8, x4, x1, x2)

inst_10810:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f780000; valaddr_reg:x3; val_offset:32430*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32430*0 + 3*58*FLEN/8, x4, x1, x2)

inst_10811:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7c0000; valaddr_reg:x3; val_offset:32433*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32433*0 + 3*59*FLEN/8, x4, x1, x2)

inst_10812:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7e0000; valaddr_reg:x3; val_offset:32436*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32436*0 + 3*60*FLEN/8, x4, x1, x2)

inst_10813:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7f0000; valaddr_reg:x3; val_offset:32439*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32439*0 + 3*61*FLEN/8, x4, x1, x2)

inst_10814:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7f8000; valaddr_reg:x3; val_offset:32442*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32442*0 + 3*62*FLEN/8, x4, x1, x2)

inst_10815:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7fc000; valaddr_reg:x3; val_offset:32445*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32445*0 + 3*63*FLEN/8, x4, x1, x2)

inst_10816:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7fe000; valaddr_reg:x3; val_offset:32448*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32448*0 + 3*64*FLEN/8, x4, x1, x2)

inst_10817:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7ff000; valaddr_reg:x3; val_offset:32451*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32451*0 + 3*65*FLEN/8, x4, x1, x2)

inst_10818:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7ff800; valaddr_reg:x3; val_offset:32454*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32454*0 + 3*66*FLEN/8, x4, x1, x2)

inst_10819:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7ffc00; valaddr_reg:x3; val_offset:32457*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32457*0 + 3*67*FLEN/8, x4, x1, x2)

inst_10820:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7ffe00; valaddr_reg:x3; val_offset:32460*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32460*0 + 3*68*FLEN/8, x4, x1, x2)

inst_10821:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7fff00; valaddr_reg:x3; val_offset:32463*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32463*0 + 3*69*FLEN/8, x4, x1, x2)

inst_10822:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7fff80; valaddr_reg:x3; val_offset:32466*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32466*0 + 3*70*FLEN/8, x4, x1, x2)

inst_10823:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7fffc0; valaddr_reg:x3; val_offset:32469*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32469*0 + 3*71*FLEN/8, x4, x1, x2)

inst_10824:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7fffe0; valaddr_reg:x3; val_offset:32472*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32472*0 + 3*72*FLEN/8, x4, x1, x2)

inst_10825:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7ffff0; valaddr_reg:x3; val_offset:32475*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32475*0 + 3*73*FLEN/8, x4, x1, x2)

inst_10826:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7ffff8; valaddr_reg:x3; val_offset:32478*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32478*0 + 3*74*FLEN/8, x4, x1, x2)

inst_10827:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7ffffc; valaddr_reg:x3; val_offset:32481*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32481*0 + 3*75*FLEN/8, x4, x1, x2)

inst_10828:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7ffffe; valaddr_reg:x3; val_offset:32484*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32484*0 + 3*76*FLEN/8, x4, x1, x2)

inst_10829:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0x9f7fffff; valaddr_reg:x3; val_offset:32487*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32487*0 + 3*77*FLEN/8, x4, x1, x2)

inst_10830:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0xbf800001; valaddr_reg:x3; val_offset:32490*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32490*0 + 3*78*FLEN/8, x4, x1, x2)

inst_10831:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0xbf800003; valaddr_reg:x3; val_offset:32493*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32493*0 + 3*79*FLEN/8, x4, x1, x2)

inst_10832:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0xbf800007; valaddr_reg:x3; val_offset:32496*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32496*0 + 3*80*FLEN/8, x4, x1, x2)

inst_10833:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0xbf999999; valaddr_reg:x3; val_offset:32499*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32499*0 + 3*81*FLEN/8, x4, x1, x2)

inst_10834:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:32502*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32502*0 + 3*82*FLEN/8, x4, x1, x2)

inst_10835:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:32505*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32505*0 + 3*83*FLEN/8, x4, x1, x2)

inst_10836:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:32508*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32508*0 + 3*84*FLEN/8, x4, x1, x2)

inst_10837:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:32511*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32511*0 + 3*85*FLEN/8, x4, x1, x2)

inst_10838:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:32514*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32514*0 + 3*86*FLEN/8, x4, x1, x2)

inst_10839:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:32517*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32517*0 + 3*87*FLEN/8, x4, x1, x2)

inst_10840:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:32520*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32520*0 + 3*88*FLEN/8, x4, x1, x2)

inst_10841:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:32523*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32523*0 + 3*89*FLEN/8, x4, x1, x2)

inst_10842:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:32526*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32526*0 + 3*90*FLEN/8, x4, x1, x2)

inst_10843:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:32529*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32529*0 + 3*91*FLEN/8, x4, x1, x2)

inst_10844:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:32532*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32532*0 + 3*92*FLEN/8, x4, x1, x2)

inst_10845:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x64c58c and fs2 == 1 and fe2 == 0x01 and fm2 == 0x0f3c08 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e64c58c; op2val:0x808f3c08;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:32535*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32535*0 + 3*93*FLEN/8, x4, x1, x2)

inst_10846:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:32538*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32538*0 + 3*94*FLEN/8, x4, x1, x2)

inst_10847:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:32541*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32541*0 + 3*95*FLEN/8, x4, x1, x2)

inst_10848:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:32544*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32544*0 + 3*96*FLEN/8, x4, x1, x2)

inst_10849:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:32547*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32547*0 + 3*97*FLEN/8, x4, x1, x2)

inst_10850:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:32550*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32550*0 + 3*98*FLEN/8, x4, x1, x2)

inst_10851:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:32553*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32553*0 + 3*99*FLEN/8, x4, x1, x2)

inst_10852:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:32556*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32556*0 + 3*100*FLEN/8, x4, x1, x2)

inst_10853:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:32559*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32559*0 + 3*101*FLEN/8, x4, x1, x2)

inst_10854:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:32562*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32562*0 + 3*102*FLEN/8, x4, x1, x2)

inst_10855:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:32565*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32565*0 + 3*103*FLEN/8, x4, x1, x2)

inst_10856:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:32568*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32568*0 + 3*104*FLEN/8, x4, x1, x2)

inst_10857:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:32571*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32571*0 + 3*105*FLEN/8, x4, x1, x2)

inst_10858:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:32574*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32574*0 + 3*106*FLEN/8, x4, x1, x2)

inst_10859:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:32577*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32577*0 + 3*107*FLEN/8, x4, x1, x2)

inst_10860:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:32580*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32580*0 + 3*108*FLEN/8, x4, x1, x2)

inst_10861:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:32583*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32583*0 + 3*109*FLEN/8, x4, x1, x2)

inst_10862:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e800000; valaddr_reg:x3; val_offset:32586*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32586*0 + 3*110*FLEN/8, x4, x1, x2)

inst_10863:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e800001; valaddr_reg:x3; val_offset:32589*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32589*0 + 3*111*FLEN/8, x4, x1, x2)

inst_10864:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e800003; valaddr_reg:x3; val_offset:32592*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32592*0 + 3*112*FLEN/8, x4, x1, x2)

inst_10865:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e800007; valaddr_reg:x3; val_offset:32595*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32595*0 + 3*113*FLEN/8, x4, x1, x2)

inst_10866:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e80000f; valaddr_reg:x3; val_offset:32598*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32598*0 + 3*114*FLEN/8, x4, x1, x2)

inst_10867:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e80001f; valaddr_reg:x3; val_offset:32601*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32601*0 + 3*115*FLEN/8, x4, x1, x2)

inst_10868:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e80003f; valaddr_reg:x3; val_offset:32604*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32604*0 + 3*116*FLEN/8, x4, x1, x2)

inst_10869:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e80007f; valaddr_reg:x3; val_offset:32607*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32607*0 + 3*117*FLEN/8, x4, x1, x2)

inst_10870:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e8000ff; valaddr_reg:x3; val_offset:32610*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32610*0 + 3*118*FLEN/8, x4, x1, x2)

inst_10871:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e8001ff; valaddr_reg:x3; val_offset:32613*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32613*0 + 3*119*FLEN/8, x4, x1, x2)

inst_10872:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e8003ff; valaddr_reg:x3; val_offset:32616*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32616*0 + 3*120*FLEN/8, x4, x1, x2)

inst_10873:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e8007ff; valaddr_reg:x3; val_offset:32619*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32619*0 + 3*121*FLEN/8, x4, x1, x2)

inst_10874:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e800fff; valaddr_reg:x3; val_offset:32622*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32622*0 + 3*122*FLEN/8, x4, x1, x2)

inst_10875:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e801fff; valaddr_reg:x3; val_offset:32625*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32625*0 + 3*123*FLEN/8, x4, x1, x2)

inst_10876:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e803fff; valaddr_reg:x3; val_offset:32628*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32628*0 + 3*124*FLEN/8, x4, x1, x2)

inst_10877:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e807fff; valaddr_reg:x3; val_offset:32631*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32631*0 + 3*125*FLEN/8, x4, x1, x2)

inst_10878:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e80ffff; valaddr_reg:x3; val_offset:32634*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32634*0 + 3*126*FLEN/8, x4, x1, x2)

inst_10879:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e81ffff; valaddr_reg:x3; val_offset:32637*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32637*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_10880:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e83ffff; valaddr_reg:x3; val_offset:32640*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32640*0 + 3*128*FLEN/8, x4, x1, x2)

inst_10881:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e87ffff; valaddr_reg:x3; val_offset:32643*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32643*0 + 3*129*FLEN/8, x4, x1, x2)

inst_10882:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e8fffff; valaddr_reg:x3; val_offset:32646*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32646*0 + 3*130*FLEN/8, x4, x1, x2)

inst_10883:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8e9fffff; valaddr_reg:x3; val_offset:32649*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32649*0 + 3*131*FLEN/8, x4, x1, x2)

inst_10884:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8ebfffff; valaddr_reg:x3; val_offset:32652*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32652*0 + 3*132*FLEN/8, x4, x1, x2)

inst_10885:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8ec00000; valaddr_reg:x3; val_offset:32655*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32655*0 + 3*133*FLEN/8, x4, x1, x2)

inst_10886:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8ee00000; valaddr_reg:x3; val_offset:32658*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32658*0 + 3*134*FLEN/8, x4, x1, x2)

inst_10887:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8ef00000; valaddr_reg:x3; val_offset:32661*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32661*0 + 3*135*FLEN/8, x4, x1, x2)

inst_10888:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8ef80000; valaddr_reg:x3; val_offset:32664*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32664*0 + 3*136*FLEN/8, x4, x1, x2)

inst_10889:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8efc0000; valaddr_reg:x3; val_offset:32667*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32667*0 + 3*137*FLEN/8, x4, x1, x2)

inst_10890:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8efe0000; valaddr_reg:x3; val_offset:32670*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32670*0 + 3*138*FLEN/8, x4, x1, x2)

inst_10891:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8eff0000; valaddr_reg:x3; val_offset:32673*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32673*0 + 3*139*FLEN/8, x4, x1, x2)

inst_10892:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8eff8000; valaddr_reg:x3; val_offset:32676*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32676*0 + 3*140*FLEN/8, x4, x1, x2)

inst_10893:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8effc000; valaddr_reg:x3; val_offset:32679*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32679*0 + 3*141*FLEN/8, x4, x1, x2)

inst_10894:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8effe000; valaddr_reg:x3; val_offset:32682*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32682*0 + 3*142*FLEN/8, x4, x1, x2)

inst_10895:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8efff000; valaddr_reg:x3; val_offset:32685*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32685*0 + 3*143*FLEN/8, x4, x1, x2)

inst_10896:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8efff800; valaddr_reg:x3; val_offset:32688*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32688*0 + 3*144*FLEN/8, x4, x1, x2)

inst_10897:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8efffc00; valaddr_reg:x3; val_offset:32691*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32691*0 + 3*145*FLEN/8, x4, x1, x2)

inst_10898:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8efffe00; valaddr_reg:x3; val_offset:32694*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32694*0 + 3*146*FLEN/8, x4, x1, x2)

inst_10899:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8effff00; valaddr_reg:x3; val_offset:32697*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32697*0 + 3*147*FLEN/8, x4, x1, x2)

inst_10900:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8effff80; valaddr_reg:x3; val_offset:32700*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32700*0 + 3*148*FLEN/8, x4, x1, x2)

inst_10901:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8effffc0; valaddr_reg:x3; val_offset:32703*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32703*0 + 3*149*FLEN/8, x4, x1, x2)

inst_10902:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8effffe0; valaddr_reg:x3; val_offset:32706*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32706*0 + 3*150*FLEN/8, x4, x1, x2)

inst_10903:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8efffff0; valaddr_reg:x3; val_offset:32709*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32709*0 + 3*151*FLEN/8, x4, x1, x2)

inst_10904:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8efffff8; valaddr_reg:x3; val_offset:32712*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32712*0 + 3*152*FLEN/8, x4, x1, x2)

inst_10905:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8efffffc; valaddr_reg:x3; val_offset:32715*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32715*0 + 3*153*FLEN/8, x4, x1, x2)

inst_10906:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8efffffe; valaddr_reg:x3; val_offset:32718*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32718*0 + 3*154*FLEN/8, x4, x1, x2)

inst_10907:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x656a56 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e656a56; op2val:0x80000000;
op3val:0x8effffff; valaddr_reg:x3; val_offset:32721*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32721*0 + 3*155*FLEN/8, x4, x1, x2)

inst_10908:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:32724*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32724*0 + 3*156*FLEN/8, x4, x1, x2)

inst_10909:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:32727*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32727*0 + 3*157*FLEN/8, x4, x1, x2)

inst_10910:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:32730*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32730*0 + 3*158*FLEN/8, x4, x1, x2)

inst_10911:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:32733*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32733*0 + 3*159*FLEN/8, x4, x1, x2)

inst_10912:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:32736*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32736*0 + 3*160*FLEN/8, x4, x1, x2)

inst_10913:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:32739*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32739*0 + 3*161*FLEN/8, x4, x1, x2)

inst_10914:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:32742*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32742*0 + 3*162*FLEN/8, x4, x1, x2)

inst_10915:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:32745*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32745*0 + 3*163*FLEN/8, x4, x1, x2)

inst_10916:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:32748*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32748*0 + 3*164*FLEN/8, x4, x1, x2)

inst_10917:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:32751*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32751*0 + 3*165*FLEN/8, x4, x1, x2)

inst_10918:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:32754*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32754*0 + 3*166*FLEN/8, x4, x1, x2)

inst_10919:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:32757*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32757*0 + 3*167*FLEN/8, x4, x1, x2)

inst_10920:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:32760*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32760*0 + 3*168*FLEN/8, x4, x1, x2)

inst_10921:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:32763*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32763*0 + 3*169*FLEN/8, x4, x1, x2)

inst_10922:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:32766*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32766*0 + 3*170*FLEN/8, x4, x1, x2)

inst_10923:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:32769*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32769*0 + 3*171*FLEN/8, x4, x1, x2)

inst_10924:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f000000; valaddr_reg:x3; val_offset:32772*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32772*0 + 3*172*FLEN/8, x4, x1, x2)

inst_10925:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f000001; valaddr_reg:x3; val_offset:32775*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32775*0 + 3*173*FLEN/8, x4, x1, x2)

inst_10926:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f000003; valaddr_reg:x3; val_offset:32778*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32778*0 + 3*174*FLEN/8, x4, x1, x2)

inst_10927:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f000007; valaddr_reg:x3; val_offset:32781*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32781*0 + 3*175*FLEN/8, x4, x1, x2)

inst_10928:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f00000f; valaddr_reg:x3; val_offset:32784*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32784*0 + 3*176*FLEN/8, x4, x1, x2)

inst_10929:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f00001f; valaddr_reg:x3; val_offset:32787*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32787*0 + 3*177*FLEN/8, x4, x1, x2)

inst_10930:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f00003f; valaddr_reg:x3; val_offset:32790*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32790*0 + 3*178*FLEN/8, x4, x1, x2)

inst_10931:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f00007f; valaddr_reg:x3; val_offset:32793*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32793*0 + 3*179*FLEN/8, x4, x1, x2)

inst_10932:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f0000ff; valaddr_reg:x3; val_offset:32796*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32796*0 + 3*180*FLEN/8, x4, x1, x2)

inst_10933:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f0001ff; valaddr_reg:x3; val_offset:32799*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32799*0 + 3*181*FLEN/8, x4, x1, x2)

inst_10934:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f0003ff; valaddr_reg:x3; val_offset:32802*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32802*0 + 3*182*FLEN/8, x4, x1, x2)

inst_10935:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f0007ff; valaddr_reg:x3; val_offset:32805*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32805*0 + 3*183*FLEN/8, x4, x1, x2)

inst_10936:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f000fff; valaddr_reg:x3; val_offset:32808*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32808*0 + 3*184*FLEN/8, x4, x1, x2)

inst_10937:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f001fff; valaddr_reg:x3; val_offset:32811*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32811*0 + 3*185*FLEN/8, x4, x1, x2)

inst_10938:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f003fff; valaddr_reg:x3; val_offset:32814*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32814*0 + 3*186*FLEN/8, x4, x1, x2)

inst_10939:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f007fff; valaddr_reg:x3; val_offset:32817*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32817*0 + 3*187*FLEN/8, x4, x1, x2)

inst_10940:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f00ffff; valaddr_reg:x3; val_offset:32820*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32820*0 + 3*188*FLEN/8, x4, x1, x2)

inst_10941:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f01ffff; valaddr_reg:x3; val_offset:32823*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32823*0 + 3*189*FLEN/8, x4, x1, x2)

inst_10942:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f03ffff; valaddr_reg:x3; val_offset:32826*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32826*0 + 3*190*FLEN/8, x4, x1, x2)

inst_10943:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f07ffff; valaddr_reg:x3; val_offset:32829*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32829*0 + 3*191*FLEN/8, x4, x1, x2)

inst_10944:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f0fffff; valaddr_reg:x3; val_offset:32832*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32832*0 + 3*192*FLEN/8, x4, x1, x2)

inst_10945:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f1fffff; valaddr_reg:x3; val_offset:32835*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32835*0 + 3*193*FLEN/8, x4, x1, x2)

inst_10946:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f3fffff; valaddr_reg:x3; val_offset:32838*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32838*0 + 3*194*FLEN/8, x4, x1, x2)

inst_10947:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f400000; valaddr_reg:x3; val_offset:32841*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32841*0 + 3*195*FLEN/8, x4, x1, x2)

inst_10948:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f600000; valaddr_reg:x3; val_offset:32844*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32844*0 + 3*196*FLEN/8, x4, x1, x2)

inst_10949:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f700000; valaddr_reg:x3; val_offset:32847*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32847*0 + 3*197*FLEN/8, x4, x1, x2)

inst_10950:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f780000; valaddr_reg:x3; val_offset:32850*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32850*0 + 3*198*FLEN/8, x4, x1, x2)

inst_10951:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7c0000; valaddr_reg:x3; val_offset:32853*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32853*0 + 3*199*FLEN/8, x4, x1, x2)

inst_10952:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7e0000; valaddr_reg:x3; val_offset:32856*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32856*0 + 3*200*FLEN/8, x4, x1, x2)

inst_10953:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7f0000; valaddr_reg:x3; val_offset:32859*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32859*0 + 3*201*FLEN/8, x4, x1, x2)

inst_10954:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7f8000; valaddr_reg:x3; val_offset:32862*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32862*0 + 3*202*FLEN/8, x4, x1, x2)

inst_10955:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7fc000; valaddr_reg:x3; val_offset:32865*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32865*0 + 3*203*FLEN/8, x4, x1, x2)

inst_10956:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7fe000; valaddr_reg:x3; val_offset:32868*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32868*0 + 3*204*FLEN/8, x4, x1, x2)

inst_10957:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7ff000; valaddr_reg:x3; val_offset:32871*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32871*0 + 3*205*FLEN/8, x4, x1, x2)

inst_10958:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7ff800; valaddr_reg:x3; val_offset:32874*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32874*0 + 3*206*FLEN/8, x4, x1, x2)

inst_10959:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7ffc00; valaddr_reg:x3; val_offset:32877*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32877*0 + 3*207*FLEN/8, x4, x1, x2)

inst_10960:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7ffe00; valaddr_reg:x3; val_offset:32880*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32880*0 + 3*208*FLEN/8, x4, x1, x2)

inst_10961:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7fff00; valaddr_reg:x3; val_offset:32883*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32883*0 + 3*209*FLEN/8, x4, x1, x2)

inst_10962:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7fff80; valaddr_reg:x3; val_offset:32886*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32886*0 + 3*210*FLEN/8, x4, x1, x2)

inst_10963:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7fffc0; valaddr_reg:x3; val_offset:32889*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32889*0 + 3*211*FLEN/8, x4, x1, x2)

inst_10964:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7fffe0; valaddr_reg:x3; val_offset:32892*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32892*0 + 3*212*FLEN/8, x4, x1, x2)

inst_10965:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7ffff0; valaddr_reg:x3; val_offset:32895*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32895*0 + 3*213*FLEN/8, x4, x1, x2)

inst_10966:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7ffff8; valaddr_reg:x3; val_offset:32898*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32898*0 + 3*214*FLEN/8, x4, x1, x2)

inst_10967:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7ffffc; valaddr_reg:x3; val_offset:32901*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32901*0 + 3*215*FLEN/8, x4, x1, x2)

inst_10968:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7ffffe; valaddr_reg:x3; val_offset:32904*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32904*0 + 3*216*FLEN/8, x4, x1, x2)

inst_10969:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x66111b and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e66111b; op2val:0x80000000;
op3val:0x8f7fffff; valaddr_reg:x3; val_offset:32907*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32907*0 + 3*217*FLEN/8, x4, x1, x2)

inst_10970:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5800000; valaddr_reg:x3; val_offset:32910*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32910*0 + 3*218*FLEN/8, x4, x1, x2)

inst_10971:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5800001; valaddr_reg:x3; val_offset:32913*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32913*0 + 3*219*FLEN/8, x4, x1, x2)

inst_10972:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5800003; valaddr_reg:x3; val_offset:32916*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32916*0 + 3*220*FLEN/8, x4, x1, x2)

inst_10973:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5800007; valaddr_reg:x3; val_offset:32919*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32919*0 + 3*221*FLEN/8, x4, x1, x2)

inst_10974:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc580000f; valaddr_reg:x3; val_offset:32922*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32922*0 + 3*222*FLEN/8, x4, x1, x2)

inst_10975:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc580001f; valaddr_reg:x3; val_offset:32925*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32925*0 + 3*223*FLEN/8, x4, x1, x2)

inst_10976:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc580003f; valaddr_reg:x3; val_offset:32928*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32928*0 + 3*224*FLEN/8, x4, x1, x2)

inst_10977:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc580007f; valaddr_reg:x3; val_offset:32931*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32931*0 + 3*225*FLEN/8, x4, x1, x2)

inst_10978:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc58000ff; valaddr_reg:x3; val_offset:32934*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32934*0 + 3*226*FLEN/8, x4, x1, x2)

inst_10979:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc58001ff; valaddr_reg:x3; val_offset:32937*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32937*0 + 3*227*FLEN/8, x4, x1, x2)

inst_10980:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc58003ff; valaddr_reg:x3; val_offset:32940*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32940*0 + 3*228*FLEN/8, x4, x1, x2)

inst_10981:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc58007ff; valaddr_reg:x3; val_offset:32943*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32943*0 + 3*229*FLEN/8, x4, x1, x2)

inst_10982:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5800fff; valaddr_reg:x3; val_offset:32946*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32946*0 + 3*230*FLEN/8, x4, x1, x2)

inst_10983:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5801fff; valaddr_reg:x3; val_offset:32949*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32949*0 + 3*231*FLEN/8, x4, x1, x2)

inst_10984:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5803fff; valaddr_reg:x3; val_offset:32952*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32952*0 + 3*232*FLEN/8, x4, x1, x2)

inst_10985:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5807fff; valaddr_reg:x3; val_offset:32955*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32955*0 + 3*233*FLEN/8, x4, x1, x2)

inst_10986:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc580ffff; valaddr_reg:x3; val_offset:32958*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32958*0 + 3*234*FLEN/8, x4, x1, x2)

inst_10987:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc581ffff; valaddr_reg:x3; val_offset:32961*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32961*0 + 3*235*FLEN/8, x4, x1, x2)

inst_10988:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc583ffff; valaddr_reg:x3; val_offset:32964*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32964*0 + 3*236*FLEN/8, x4, x1, x2)

inst_10989:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc587ffff; valaddr_reg:x3; val_offset:32967*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32967*0 + 3*237*FLEN/8, x4, x1, x2)

inst_10990:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc58fffff; valaddr_reg:x3; val_offset:32970*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32970*0 + 3*238*FLEN/8, x4, x1, x2)

inst_10991:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc59fffff; valaddr_reg:x3; val_offset:32973*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32973*0 + 3*239*FLEN/8, x4, x1, x2)

inst_10992:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5bfffff; valaddr_reg:x3; val_offset:32976*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32976*0 + 3*240*FLEN/8, x4, x1, x2)

inst_10993:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5c00000; valaddr_reg:x3; val_offset:32979*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32979*0 + 3*241*FLEN/8, x4, x1, x2)

inst_10994:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5e00000; valaddr_reg:x3; val_offset:32982*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32982*0 + 3*242*FLEN/8, x4, x1, x2)

inst_10995:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5f00000; valaddr_reg:x3; val_offset:32985*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32985*0 + 3*243*FLEN/8, x4, x1, x2)

inst_10996:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5f80000; valaddr_reg:x3; val_offset:32988*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32988*0 + 3*244*FLEN/8, x4, x1, x2)

inst_10997:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5fc0000; valaddr_reg:x3; val_offset:32991*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32991*0 + 3*245*FLEN/8, x4, x1, x2)

inst_10998:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5fe0000; valaddr_reg:x3; val_offset:32994*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32994*0 + 3*246*FLEN/8, x4, x1, x2)

inst_10999:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5ff0000; valaddr_reg:x3; val_offset:32997*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 32997*0 + 3*247*FLEN/8, x4, x1, x2)

inst_11000:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5ff8000; valaddr_reg:x3; val_offset:33000*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33000*0 + 3*248*FLEN/8, x4, x1, x2)

inst_11001:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5ffc000; valaddr_reg:x3; val_offset:33003*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33003*0 + 3*249*FLEN/8, x4, x1, x2)

inst_11002:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5ffe000; valaddr_reg:x3; val_offset:33006*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33006*0 + 3*250*FLEN/8, x4, x1, x2)

inst_11003:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5fff000; valaddr_reg:x3; val_offset:33009*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33009*0 + 3*251*FLEN/8, x4, x1, x2)

inst_11004:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5fff800; valaddr_reg:x3; val_offset:33012*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33012*0 + 3*252*FLEN/8, x4, x1, x2)

inst_11005:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5fffc00; valaddr_reg:x3; val_offset:33015*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33015*0 + 3*253*FLEN/8, x4, x1, x2)

inst_11006:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5fffe00; valaddr_reg:x3; val_offset:33018*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33018*0 + 3*254*FLEN/8, x4, x1, x2)

inst_11007:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5ffff00; valaddr_reg:x3; val_offset:33021*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33021*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_11008:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5ffff80; valaddr_reg:x3; val_offset:33024*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33024*0 + 3*256*FLEN/8, x4, x1, x2)

inst_11009:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5ffffc0; valaddr_reg:x3; val_offset:33027*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33027*0 + 3*257*FLEN/8, x4, x1, x2)

inst_11010:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5ffffe0; valaddr_reg:x3; val_offset:33030*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33030*0 + 3*258*FLEN/8, x4, x1, x2)

inst_11011:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5fffff0; valaddr_reg:x3; val_offset:33033*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33033*0 + 3*259*FLEN/8, x4, x1, x2)

inst_11012:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5fffff8; valaddr_reg:x3; val_offset:33036*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33036*0 + 3*260*FLEN/8, x4, x1, x2)

inst_11013:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5fffffc; valaddr_reg:x3; val_offset:33039*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33039*0 + 3*261*FLEN/8, x4, x1, x2)

inst_11014:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5fffffe; valaddr_reg:x3; val_offset:33042*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33042*0 + 3*262*FLEN/8, x4, x1, x2)

inst_11015:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0x8b and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xc5ffffff; valaddr_reg:x3; val_offset:33045*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33045*0 + 3*263*FLEN/8, x4, x1, x2)

inst_11016:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff000001; valaddr_reg:x3; val_offset:33048*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33048*0 + 3*264*FLEN/8, x4, x1, x2)

inst_11017:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff000003; valaddr_reg:x3; val_offset:33051*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33051*0 + 3*265*FLEN/8, x4, x1, x2)

inst_11018:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff000007; valaddr_reg:x3; val_offset:33054*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33054*0 + 3*266*FLEN/8, x4, x1, x2)

inst_11019:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff199999; valaddr_reg:x3; val_offset:33057*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33057*0 + 3*267*FLEN/8, x4, x1, x2)

inst_11020:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff249249; valaddr_reg:x3; val_offset:33060*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33060*0 + 3*268*FLEN/8, x4, x1, x2)

inst_11021:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff333333; valaddr_reg:x3; val_offset:33063*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33063*0 + 3*269*FLEN/8, x4, x1, x2)

inst_11022:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:33066*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33066*0 + 3*270*FLEN/8, x4, x1, x2)

inst_11023:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:33069*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33069*0 + 3*271*FLEN/8, x4, x1, x2)

inst_11024:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff444444; valaddr_reg:x3; val_offset:33072*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33072*0 + 3*272*FLEN/8, x4, x1, x2)

inst_11025:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:33075*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33075*0 + 3*273*FLEN/8, x4, x1, x2)

inst_11026:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:33078*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33078*0 + 3*274*FLEN/8, x4, x1, x2)

inst_11027:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff666666; valaddr_reg:x3; val_offset:33081*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33081*0 + 3*275*FLEN/8, x4, x1, x2)

inst_11028:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:33084*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33084*0 + 3*276*FLEN/8, x4, x1, x2)

inst_11029:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:33087*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33087*0 + 3*277*FLEN/8, x4, x1, x2)

inst_11030:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:33090*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33090*0 + 3*278*FLEN/8, x4, x1, x2)

inst_11031:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6937b8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c8101 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6937b8; op2val:0xc08c8101;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:33093*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33093*0 + 3*279*FLEN/8, x4, x1, x2)

inst_11032:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe6000000; valaddr_reg:x3; val_offset:33096*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33096*0 + 3*280*FLEN/8, x4, x1, x2)

inst_11033:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe6000001; valaddr_reg:x3; val_offset:33099*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33099*0 + 3*281*FLEN/8, x4, x1, x2)

inst_11034:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe6000003; valaddr_reg:x3; val_offset:33102*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33102*0 + 3*282*FLEN/8, x4, x1, x2)

inst_11035:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe6000007; valaddr_reg:x3; val_offset:33105*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33105*0 + 3*283*FLEN/8, x4, x1, x2)

inst_11036:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe600000f; valaddr_reg:x3; val_offset:33108*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33108*0 + 3*284*FLEN/8, x4, x1, x2)

inst_11037:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe600001f; valaddr_reg:x3; val_offset:33111*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33111*0 + 3*285*FLEN/8, x4, x1, x2)

inst_11038:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe600003f; valaddr_reg:x3; val_offset:33114*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33114*0 + 3*286*FLEN/8, x4, x1, x2)

inst_11039:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe600007f; valaddr_reg:x3; val_offset:33117*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33117*0 + 3*287*FLEN/8, x4, x1, x2)

inst_11040:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe60000ff; valaddr_reg:x3; val_offset:33120*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33120*0 + 3*288*FLEN/8, x4, x1, x2)

inst_11041:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe60001ff; valaddr_reg:x3; val_offset:33123*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33123*0 + 3*289*FLEN/8, x4, x1, x2)

inst_11042:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe60003ff; valaddr_reg:x3; val_offset:33126*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33126*0 + 3*290*FLEN/8, x4, x1, x2)

inst_11043:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe60007ff; valaddr_reg:x3; val_offset:33129*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33129*0 + 3*291*FLEN/8, x4, x1, x2)

inst_11044:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe6000fff; valaddr_reg:x3; val_offset:33132*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33132*0 + 3*292*FLEN/8, x4, x1, x2)

inst_11045:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe6001fff; valaddr_reg:x3; val_offset:33135*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33135*0 + 3*293*FLEN/8, x4, x1, x2)

inst_11046:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe6003fff; valaddr_reg:x3; val_offset:33138*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33138*0 + 3*294*FLEN/8, x4, x1, x2)

inst_11047:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe6007fff; valaddr_reg:x3; val_offset:33141*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33141*0 + 3*295*FLEN/8, x4, x1, x2)

inst_11048:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe600ffff; valaddr_reg:x3; val_offset:33144*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33144*0 + 3*296*FLEN/8, x4, x1, x2)

inst_11049:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe601ffff; valaddr_reg:x3; val_offset:33147*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33147*0 + 3*297*FLEN/8, x4, x1, x2)

inst_11050:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe603ffff; valaddr_reg:x3; val_offset:33150*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33150*0 + 3*298*FLEN/8, x4, x1, x2)

inst_11051:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe607ffff; valaddr_reg:x3; val_offset:33153*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33153*0 + 3*299*FLEN/8, x4, x1, x2)

inst_11052:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe60fffff; valaddr_reg:x3; val_offset:33156*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33156*0 + 3*300*FLEN/8, x4, x1, x2)

inst_11053:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe61fffff; valaddr_reg:x3; val_offset:33159*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33159*0 + 3*301*FLEN/8, x4, x1, x2)

inst_11054:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe63fffff; valaddr_reg:x3; val_offset:33162*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33162*0 + 3*302*FLEN/8, x4, x1, x2)

inst_11055:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe6400000; valaddr_reg:x3; val_offset:33165*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33165*0 + 3*303*FLEN/8, x4, x1, x2)

inst_11056:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe6600000; valaddr_reg:x3; val_offset:33168*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33168*0 + 3*304*FLEN/8, x4, x1, x2)

inst_11057:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe6700000; valaddr_reg:x3; val_offset:33171*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33171*0 + 3*305*FLEN/8, x4, x1, x2)

inst_11058:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe6780000; valaddr_reg:x3; val_offset:33174*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33174*0 + 3*306*FLEN/8, x4, x1, x2)

inst_11059:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67c0000; valaddr_reg:x3; val_offset:33177*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33177*0 + 3*307*FLEN/8, x4, x1, x2)

inst_11060:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67e0000; valaddr_reg:x3; val_offset:33180*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33180*0 + 3*308*FLEN/8, x4, x1, x2)

inst_11061:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67f0000; valaddr_reg:x3; val_offset:33183*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33183*0 + 3*309*FLEN/8, x4, x1, x2)

inst_11062:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67f8000; valaddr_reg:x3; val_offset:33186*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33186*0 + 3*310*FLEN/8, x4, x1, x2)

inst_11063:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67fc000; valaddr_reg:x3; val_offset:33189*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33189*0 + 3*311*FLEN/8, x4, x1, x2)

inst_11064:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67fe000; valaddr_reg:x3; val_offset:33192*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33192*0 + 3*312*FLEN/8, x4, x1, x2)

inst_11065:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67ff000; valaddr_reg:x3; val_offset:33195*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33195*0 + 3*313*FLEN/8, x4, x1, x2)

inst_11066:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67ff800; valaddr_reg:x3; val_offset:33198*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33198*0 + 3*314*FLEN/8, x4, x1, x2)

inst_11067:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67ffc00; valaddr_reg:x3; val_offset:33201*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33201*0 + 3*315*FLEN/8, x4, x1, x2)

inst_11068:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67ffe00; valaddr_reg:x3; val_offset:33204*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33204*0 + 3*316*FLEN/8, x4, x1, x2)

inst_11069:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67fff00; valaddr_reg:x3; val_offset:33207*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33207*0 + 3*317*FLEN/8, x4, x1, x2)

inst_11070:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67fff80; valaddr_reg:x3; val_offset:33210*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33210*0 + 3*318*FLEN/8, x4, x1, x2)

inst_11071:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67fffc0; valaddr_reg:x3; val_offset:33213*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33213*0 + 3*319*FLEN/8, x4, x1, x2)

inst_11072:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67fffe0; valaddr_reg:x3; val_offset:33216*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33216*0 + 3*320*FLEN/8, x4, x1, x2)

inst_11073:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67ffff0; valaddr_reg:x3; val_offset:33219*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33219*0 + 3*321*FLEN/8, x4, x1, x2)

inst_11074:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67ffff8; valaddr_reg:x3; val_offset:33222*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33222*0 + 3*322*FLEN/8, x4, x1, x2)

inst_11075:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67ffffc; valaddr_reg:x3; val_offset:33225*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33225*0 + 3*323*FLEN/8, x4, x1, x2)

inst_11076:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67ffffe; valaddr_reg:x3; val_offset:33228*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33228*0 + 3*324*FLEN/8, x4, x1, x2)

inst_11077:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xe67fffff; valaddr_reg:x3; val_offset:33231*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33231*0 + 3*325*FLEN/8, x4, x1, x2)

inst_11078:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xff000001; valaddr_reg:x3; val_offset:33234*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33234*0 + 3*326*FLEN/8, x4, x1, x2)

inst_11079:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xff000003; valaddr_reg:x3; val_offset:33237*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33237*0 + 3*327*FLEN/8, x4, x1, x2)

inst_11080:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xff000007; valaddr_reg:x3; val_offset:33240*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33240*0 + 3*328*FLEN/8, x4, x1, x2)

inst_11081:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xff199999; valaddr_reg:x3; val_offset:33243*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33243*0 + 3*329*FLEN/8, x4, x1, x2)

inst_11082:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xff249249; valaddr_reg:x3; val_offset:33246*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33246*0 + 3*330*FLEN/8, x4, x1, x2)

inst_11083:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xff333333; valaddr_reg:x3; val_offset:33249*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33249*0 + 3*331*FLEN/8, x4, x1, x2)

inst_11084:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:33252*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33252*0 + 3*332*FLEN/8, x4, x1, x2)

inst_11085:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:33255*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33255*0 + 3*333*FLEN/8, x4, x1, x2)

inst_11086:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xff444444; valaddr_reg:x3; val_offset:33258*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33258*0 + 3*334*FLEN/8, x4, x1, x2)

inst_11087:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:33261*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33261*0 + 3*335*FLEN/8, x4, x1, x2)

inst_11088:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:33264*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33264*0 + 3*336*FLEN/8, x4, x1, x2)

inst_11089:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xff666666; valaddr_reg:x3; val_offset:33267*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33267*0 + 3*337*FLEN/8, x4, x1, x2)

inst_11090:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:33270*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33270*0 + 3*338*FLEN/8, x4, x1, x2)

inst_11091:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:33273*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33273*0 + 3*339*FLEN/8, x4, x1, x2)

inst_11092:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:33276*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33276*0 + 3*340*FLEN/8, x4, x1, x2)

inst_11093:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x69c81e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x0c2a39 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e69c81e; op2val:0xc08c2a39;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:33279*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33279*0 + 3*341*FLEN/8, x4, x1, x2)

inst_11094:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65800000; valaddr_reg:x3; val_offset:33282*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33282*0 + 3*342*FLEN/8, x4, x1, x2)

inst_11095:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65800001; valaddr_reg:x3; val_offset:33285*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33285*0 + 3*343*FLEN/8, x4, x1, x2)

inst_11096:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65800003; valaddr_reg:x3; val_offset:33288*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33288*0 + 3*344*FLEN/8, x4, x1, x2)

inst_11097:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65800007; valaddr_reg:x3; val_offset:33291*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33291*0 + 3*345*FLEN/8, x4, x1, x2)

inst_11098:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x6580000f; valaddr_reg:x3; val_offset:33294*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33294*0 + 3*346*FLEN/8, x4, x1, x2)

inst_11099:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x6580001f; valaddr_reg:x3; val_offset:33297*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33297*0 + 3*347*FLEN/8, x4, x1, x2)

inst_11100:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x6580003f; valaddr_reg:x3; val_offset:33300*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33300*0 + 3*348*FLEN/8, x4, x1, x2)

inst_11101:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x6580007f; valaddr_reg:x3; val_offset:33303*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33303*0 + 3*349*FLEN/8, x4, x1, x2)

inst_11102:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x658000ff; valaddr_reg:x3; val_offset:33306*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33306*0 + 3*350*FLEN/8, x4, x1, x2)

inst_11103:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x658001ff; valaddr_reg:x3; val_offset:33309*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33309*0 + 3*351*FLEN/8, x4, x1, x2)

inst_11104:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x658003ff; valaddr_reg:x3; val_offset:33312*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33312*0 + 3*352*FLEN/8, x4, x1, x2)

inst_11105:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x658007ff; valaddr_reg:x3; val_offset:33315*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33315*0 + 3*353*FLEN/8, x4, x1, x2)

inst_11106:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65800fff; valaddr_reg:x3; val_offset:33318*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33318*0 + 3*354*FLEN/8, x4, x1, x2)

inst_11107:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65801fff; valaddr_reg:x3; val_offset:33321*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33321*0 + 3*355*FLEN/8, x4, x1, x2)

inst_11108:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65803fff; valaddr_reg:x3; val_offset:33324*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33324*0 + 3*356*FLEN/8, x4, x1, x2)

inst_11109:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65807fff; valaddr_reg:x3; val_offset:33327*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33327*0 + 3*357*FLEN/8, x4, x1, x2)

inst_11110:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x6580ffff; valaddr_reg:x3; val_offset:33330*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33330*0 + 3*358*FLEN/8, x4, x1, x2)

inst_11111:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x6581ffff; valaddr_reg:x3; val_offset:33333*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33333*0 + 3*359*FLEN/8, x4, x1, x2)

inst_11112:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x6583ffff; valaddr_reg:x3; val_offset:33336*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33336*0 + 3*360*FLEN/8, x4, x1, x2)

inst_11113:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x6587ffff; valaddr_reg:x3; val_offset:33339*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33339*0 + 3*361*FLEN/8, x4, x1, x2)

inst_11114:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x658fffff; valaddr_reg:x3; val_offset:33342*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33342*0 + 3*362*FLEN/8, x4, x1, x2)

inst_11115:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x659fffff; valaddr_reg:x3; val_offset:33345*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33345*0 + 3*363*FLEN/8, x4, x1, x2)

inst_11116:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65bfffff; valaddr_reg:x3; val_offset:33348*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33348*0 + 3*364*FLEN/8, x4, x1, x2)

inst_11117:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65c00000; valaddr_reg:x3; val_offset:33351*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33351*0 + 3*365*FLEN/8, x4, x1, x2)

inst_11118:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65e00000; valaddr_reg:x3; val_offset:33354*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33354*0 + 3*366*FLEN/8, x4, x1, x2)

inst_11119:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65f00000; valaddr_reg:x3; val_offset:33357*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33357*0 + 3*367*FLEN/8, x4, x1, x2)

inst_11120:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65f80000; valaddr_reg:x3; val_offset:33360*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33360*0 + 3*368*FLEN/8, x4, x1, x2)

inst_11121:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65fc0000; valaddr_reg:x3; val_offset:33363*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33363*0 + 3*369*FLEN/8, x4, x1, x2)

inst_11122:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65fe0000; valaddr_reg:x3; val_offset:33366*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33366*0 + 3*370*FLEN/8, x4, x1, x2)

inst_11123:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65ff0000; valaddr_reg:x3; val_offset:33369*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33369*0 + 3*371*FLEN/8, x4, x1, x2)

inst_11124:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65ff8000; valaddr_reg:x3; val_offset:33372*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33372*0 + 3*372*FLEN/8, x4, x1, x2)

inst_11125:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65ffc000; valaddr_reg:x3; val_offset:33375*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33375*0 + 3*373*FLEN/8, x4, x1, x2)

inst_11126:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65ffe000; valaddr_reg:x3; val_offset:33378*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33378*0 + 3*374*FLEN/8, x4, x1, x2)

inst_11127:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65fff000; valaddr_reg:x3; val_offset:33381*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33381*0 + 3*375*FLEN/8, x4, x1, x2)

inst_11128:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65fff800; valaddr_reg:x3; val_offset:33384*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33384*0 + 3*376*FLEN/8, x4, x1, x2)

inst_11129:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65fffc00; valaddr_reg:x3; val_offset:33387*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33387*0 + 3*377*FLEN/8, x4, x1, x2)

inst_11130:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65fffe00; valaddr_reg:x3; val_offset:33390*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33390*0 + 3*378*FLEN/8, x4, x1, x2)

inst_11131:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65ffff00; valaddr_reg:x3; val_offset:33393*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33393*0 + 3*379*FLEN/8, x4, x1, x2)

inst_11132:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65ffff80; valaddr_reg:x3; val_offset:33396*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33396*0 + 3*380*FLEN/8, x4, x1, x2)

inst_11133:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65ffffc0; valaddr_reg:x3; val_offset:33399*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33399*0 + 3*381*FLEN/8, x4, x1, x2)

inst_11134:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65ffffe0; valaddr_reg:x3; val_offset:33402*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33402*0 + 3*382*FLEN/8, x4, x1, x2)

inst_11135:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65fffff0; valaddr_reg:x3; val_offset:33405*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33405*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_11136:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65fffff8; valaddr_reg:x3; val_offset:33408*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33408*0 + 3*384*FLEN/8, x4, x1, x2)

inst_11137:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65fffffc; valaddr_reg:x3; val_offset:33411*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33411*0 + 3*385*FLEN/8, x4, x1, x2)

inst_11138:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65fffffe; valaddr_reg:x3; val_offset:33414*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33414*0 + 3*386*FLEN/8, x4, x1, x2)

inst_11139:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xcb and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x65ffffff; valaddr_reg:x3; val_offset:33417*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33417*0 + 3*387*FLEN/8, x4, x1, x2)

inst_11140:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x7f000001; valaddr_reg:x3; val_offset:33420*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33420*0 + 3*388*FLEN/8, x4, x1, x2)

inst_11141:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x7f000003; valaddr_reg:x3; val_offset:33423*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33423*0 + 3*389*FLEN/8, x4, x1, x2)

inst_11142:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x7f000007; valaddr_reg:x3; val_offset:33426*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33426*0 + 3*390*FLEN/8, x4, x1, x2)

inst_11143:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x7f199999; valaddr_reg:x3; val_offset:33429*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33429*0 + 3*391*FLEN/8, x4, x1, x2)

inst_11144:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x7f249249; valaddr_reg:x3; val_offset:33432*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33432*0 + 3*392*FLEN/8, x4, x1, x2)

inst_11145:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x7f333333; valaddr_reg:x3; val_offset:33435*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33435*0 + 3*393*FLEN/8, x4, x1, x2)

inst_11146:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:33438*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33438*0 + 3*394*FLEN/8, x4, x1, x2)

inst_11147:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:33441*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33441*0 + 3*395*FLEN/8, x4, x1, x2)

inst_11148:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x7f444444; valaddr_reg:x3; val_offset:33444*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33444*0 + 3*396*FLEN/8, x4, x1, x2)

inst_11149:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:33447*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33447*0 + 3*397*FLEN/8, x4, x1, x2)

inst_11150:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:33450*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33450*0 + 3*398*FLEN/8, x4, x1, x2)

inst_11151:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x7f666666; valaddr_reg:x3; val_offset:33453*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33453*0 + 3*399*FLEN/8, x4, x1, x2)

inst_11152:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:33456*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33456*0 + 3*400*FLEN/8, x4, x1, x2)

inst_11153:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:33459*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33459*0 + 3*401*FLEN/8, x4, x1, x2)

inst_11154:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:33462*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33462*0 + 3*402*FLEN/8, x4, x1, x2)

inst_11155:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a15f4 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bfb9d and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a15f4; op2val:0x408bfb9d;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:33465*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33465*0 + 3*403*FLEN/8, x4, x1, x2)

inst_11156:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f800000; valaddr_reg:x3; val_offset:33468*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33468*0 + 3*404*FLEN/8, x4, x1, x2)

inst_11157:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f800001; valaddr_reg:x3; val_offset:33471*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33471*0 + 3*405*FLEN/8, x4, x1, x2)

inst_11158:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f800003; valaddr_reg:x3; val_offset:33474*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33474*0 + 3*406*FLEN/8, x4, x1, x2)

inst_11159:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f800007; valaddr_reg:x3; val_offset:33477*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33477*0 + 3*407*FLEN/8, x4, x1, x2)

inst_11160:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f80000f; valaddr_reg:x3; val_offset:33480*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33480*0 + 3*408*FLEN/8, x4, x1, x2)

inst_11161:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f80001f; valaddr_reg:x3; val_offset:33483*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33483*0 + 3*409*FLEN/8, x4, x1, x2)

inst_11162:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f80003f; valaddr_reg:x3; val_offset:33486*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33486*0 + 3*410*FLEN/8, x4, x1, x2)

inst_11163:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f80007f; valaddr_reg:x3; val_offset:33489*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33489*0 + 3*411*FLEN/8, x4, x1, x2)

inst_11164:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f8000ff; valaddr_reg:x3; val_offset:33492*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33492*0 + 3*412*FLEN/8, x4, x1, x2)

inst_11165:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f8001ff; valaddr_reg:x3; val_offset:33495*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33495*0 + 3*413*FLEN/8, x4, x1, x2)

inst_11166:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f8003ff; valaddr_reg:x3; val_offset:33498*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33498*0 + 3*414*FLEN/8, x4, x1, x2)

inst_11167:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f8007ff; valaddr_reg:x3; val_offset:33501*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33501*0 + 3*415*FLEN/8, x4, x1, x2)

inst_11168:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f800fff; valaddr_reg:x3; val_offset:33504*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33504*0 + 3*416*FLEN/8, x4, x1, x2)

inst_11169:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f801fff; valaddr_reg:x3; val_offset:33507*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33507*0 + 3*417*FLEN/8, x4, x1, x2)

inst_11170:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f803fff; valaddr_reg:x3; val_offset:33510*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33510*0 + 3*418*FLEN/8, x4, x1, x2)

inst_11171:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f807fff; valaddr_reg:x3; val_offset:33513*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33513*0 + 3*419*FLEN/8, x4, x1, x2)

inst_11172:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f80ffff; valaddr_reg:x3; val_offset:33516*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33516*0 + 3*420*FLEN/8, x4, x1, x2)

inst_11173:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f81ffff; valaddr_reg:x3; val_offset:33519*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33519*0 + 3*421*FLEN/8, x4, x1, x2)

inst_11174:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f83ffff; valaddr_reg:x3; val_offset:33522*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33522*0 + 3*422*FLEN/8, x4, x1, x2)

inst_11175:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f87ffff; valaddr_reg:x3; val_offset:33525*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33525*0 + 3*423*FLEN/8, x4, x1, x2)

inst_11176:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f8fffff; valaddr_reg:x3; val_offset:33528*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33528*0 + 3*424*FLEN/8, x4, x1, x2)

inst_11177:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6f9fffff; valaddr_reg:x3; val_offset:33531*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33531*0 + 3*425*FLEN/8, x4, x1, x2)

inst_11178:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6fbfffff; valaddr_reg:x3; val_offset:33534*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33534*0 + 3*426*FLEN/8, x4, x1, x2)

inst_11179:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6fc00000; valaddr_reg:x3; val_offset:33537*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33537*0 + 3*427*FLEN/8, x4, x1, x2)

inst_11180:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6fe00000; valaddr_reg:x3; val_offset:33540*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33540*0 + 3*428*FLEN/8, x4, x1, x2)

inst_11181:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6ff00000; valaddr_reg:x3; val_offset:33543*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33543*0 + 3*429*FLEN/8, x4, x1, x2)

inst_11182:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6ff80000; valaddr_reg:x3; val_offset:33546*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33546*0 + 3*430*FLEN/8, x4, x1, x2)

inst_11183:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6ffc0000; valaddr_reg:x3; val_offset:33549*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33549*0 + 3*431*FLEN/8, x4, x1, x2)

inst_11184:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6ffe0000; valaddr_reg:x3; val_offset:33552*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33552*0 + 3*432*FLEN/8, x4, x1, x2)

inst_11185:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6fff0000; valaddr_reg:x3; val_offset:33555*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33555*0 + 3*433*FLEN/8, x4, x1, x2)

inst_11186:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6fff8000; valaddr_reg:x3; val_offset:33558*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33558*0 + 3*434*FLEN/8, x4, x1, x2)

inst_11187:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6fffc000; valaddr_reg:x3; val_offset:33561*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33561*0 + 3*435*FLEN/8, x4, x1, x2)

inst_11188:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6fffe000; valaddr_reg:x3; val_offset:33564*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33564*0 + 3*436*FLEN/8, x4, x1, x2)

inst_11189:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6ffff000; valaddr_reg:x3; val_offset:33567*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33567*0 + 3*437*FLEN/8, x4, x1, x2)

inst_11190:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6ffff800; valaddr_reg:x3; val_offset:33570*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33570*0 + 3*438*FLEN/8, x4, x1, x2)

inst_11191:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6ffffc00; valaddr_reg:x3; val_offset:33573*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33573*0 + 3*439*FLEN/8, x4, x1, x2)

inst_11192:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6ffffe00; valaddr_reg:x3; val_offset:33576*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33576*0 + 3*440*FLEN/8, x4, x1, x2)

inst_11193:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6fffff00; valaddr_reg:x3; val_offset:33579*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33579*0 + 3*441*FLEN/8, x4, x1, x2)

inst_11194:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6fffff80; valaddr_reg:x3; val_offset:33582*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33582*0 + 3*442*FLEN/8, x4, x1, x2)

inst_11195:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6fffffc0; valaddr_reg:x3; val_offset:33585*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33585*0 + 3*443*FLEN/8, x4, x1, x2)

inst_11196:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6fffffe0; valaddr_reg:x3; val_offset:33588*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33588*0 + 3*444*FLEN/8, x4, x1, x2)

inst_11197:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6ffffff0; valaddr_reg:x3; val_offset:33591*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33591*0 + 3*445*FLEN/8, x4, x1, x2)

inst_11198:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6ffffff8; valaddr_reg:x3; val_offset:33594*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33594*0 + 3*446*FLEN/8, x4, x1, x2)

inst_11199:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6ffffffc; valaddr_reg:x3; val_offset:33597*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33597*0 + 3*447*FLEN/8, x4, x1, x2)

inst_11200:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6ffffffe; valaddr_reg:x3; val_offset:33600*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33600*0 + 3*448*FLEN/8, x4, x1, x2)

inst_11201:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xdf and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x6fffffff; valaddr_reg:x3; val_offset:33603*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33603*0 + 3*449*FLEN/8, x4, x1, x2)

inst_11202:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x7f000001; valaddr_reg:x3; val_offset:33606*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33606*0 + 3*450*FLEN/8, x4, x1, x2)

inst_11203:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x7f000003; valaddr_reg:x3; val_offset:33609*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33609*0 + 3*451*FLEN/8, x4, x1, x2)

inst_11204:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x7f000007; valaddr_reg:x3; val_offset:33612*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33612*0 + 3*452*FLEN/8, x4, x1, x2)

inst_11205:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x7f199999; valaddr_reg:x3; val_offset:33615*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33615*0 + 3*453*FLEN/8, x4, x1, x2)

inst_11206:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x7f249249; valaddr_reg:x3; val_offset:33618*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33618*0 + 3*454*FLEN/8, x4, x1, x2)

inst_11207:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x7f333333; valaddr_reg:x3; val_offset:33621*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33621*0 + 3*455*FLEN/8, x4, x1, x2)

inst_11208:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:33624*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33624*0 + 3*456*FLEN/8, x4, x1, x2)

inst_11209:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:33627*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33627*0 + 3*457*FLEN/8, x4, x1, x2)

inst_11210:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x7f444444; valaddr_reg:x3; val_offset:33630*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33630*0 + 3*458*FLEN/8, x4, x1, x2)

inst_11211:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:33633*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33633*0 + 3*459*FLEN/8, x4, x1, x2)

inst_11212:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:33636*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33636*0 + 3*460*FLEN/8, x4, x1, x2)

inst_11213:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x7f666666; valaddr_reg:x3; val_offset:33639*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33639*0 + 3*461*FLEN/8, x4, x1, x2)

inst_11214:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:33642*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33642*0 + 3*462*FLEN/8, x4, x1, x2)

inst_11215:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:33645*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33645*0 + 3*463*FLEN/8, x4, x1, x2)

inst_11216:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:33648*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33648*0 + 3*464*FLEN/8, x4, x1, x2)

inst_11217:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7f9d and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0bbc8b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7f9d; op2val:0x408bbc8b;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:33651*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33651*0 + 3*465*FLEN/8, x4, x1, x2)

inst_11218:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:33654*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33654*0 + 3*466*FLEN/8, x4, x1, x2)

inst_11219:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:33657*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33657*0 + 3*467*FLEN/8, x4, x1, x2)

inst_11220:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:33660*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33660*0 + 3*468*FLEN/8, x4, x1, x2)

inst_11221:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:33663*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33663*0 + 3*469*FLEN/8, x4, x1, x2)

inst_11222:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:33666*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33666*0 + 3*470*FLEN/8, x4, x1, x2)

inst_11223:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:33669*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33669*0 + 3*471*FLEN/8, x4, x1, x2)

inst_11224:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:33672*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33672*0 + 3*472*FLEN/8, x4, x1, x2)

inst_11225:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:33675*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33675*0 + 3*473*FLEN/8, x4, x1, x2)

inst_11226:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:33678*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33678*0 + 3*474*FLEN/8, x4, x1, x2)

inst_11227:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:33681*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33681*0 + 3*475*FLEN/8, x4, x1, x2)

inst_11228:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:33684*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33684*0 + 3*476*FLEN/8, x4, x1, x2)

inst_11229:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:33687*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33687*0 + 3*477*FLEN/8, x4, x1, x2)

inst_11230:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:33690*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33690*0 + 3*478*FLEN/8, x4, x1, x2)

inst_11231:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:33693*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33693*0 + 3*479*FLEN/8, x4, x1, x2)

inst_11232:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:33696*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33696*0 + 3*480*FLEN/8, x4, x1, x2)

inst_11233:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:33699*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33699*0 + 3*481*FLEN/8, x4, x1, x2)

inst_11234:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f000000; valaddr_reg:x3; val_offset:33702*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33702*0 + 3*482*FLEN/8, x4, x1, x2)

inst_11235:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f000001; valaddr_reg:x3; val_offset:33705*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33705*0 + 3*483*FLEN/8, x4, x1, x2)

inst_11236:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f000003; valaddr_reg:x3; val_offset:33708*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33708*0 + 3*484*FLEN/8, x4, x1, x2)

inst_11237:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f000007; valaddr_reg:x3; val_offset:33711*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33711*0 + 3*485*FLEN/8, x4, x1, x2)

inst_11238:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f00000f; valaddr_reg:x3; val_offset:33714*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33714*0 + 3*486*FLEN/8, x4, x1, x2)

inst_11239:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f00001f; valaddr_reg:x3; val_offset:33717*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33717*0 + 3*487*FLEN/8, x4, x1, x2)

inst_11240:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f00003f; valaddr_reg:x3; val_offset:33720*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33720*0 + 3*488*FLEN/8, x4, x1, x2)

inst_11241:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f00007f; valaddr_reg:x3; val_offset:33723*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33723*0 + 3*489*FLEN/8, x4, x1, x2)

inst_11242:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f0000ff; valaddr_reg:x3; val_offset:33726*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33726*0 + 3*490*FLEN/8, x4, x1, x2)

inst_11243:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f0001ff; valaddr_reg:x3; val_offset:33729*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33729*0 + 3*491*FLEN/8, x4, x1, x2)

inst_11244:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f0003ff; valaddr_reg:x3; val_offset:33732*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33732*0 + 3*492*FLEN/8, x4, x1, x2)

inst_11245:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f0007ff; valaddr_reg:x3; val_offset:33735*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33735*0 + 3*493*FLEN/8, x4, x1, x2)

inst_11246:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f000fff; valaddr_reg:x3; val_offset:33738*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33738*0 + 3*494*FLEN/8, x4, x1, x2)

inst_11247:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f001fff; valaddr_reg:x3; val_offset:33741*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33741*0 + 3*495*FLEN/8, x4, x1, x2)

inst_11248:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f003fff; valaddr_reg:x3; val_offset:33744*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33744*0 + 3*496*FLEN/8, x4, x1, x2)

inst_11249:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f007fff; valaddr_reg:x3; val_offset:33747*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33747*0 + 3*497*FLEN/8, x4, x1, x2)

inst_11250:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f00ffff; valaddr_reg:x3; val_offset:33750*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33750*0 + 3*498*FLEN/8, x4, x1, x2)

inst_11251:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f01ffff; valaddr_reg:x3; val_offset:33753*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33753*0 + 3*499*FLEN/8, x4, x1, x2)

inst_11252:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f03ffff; valaddr_reg:x3; val_offset:33756*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33756*0 + 3*500*FLEN/8, x4, x1, x2)

inst_11253:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f07ffff; valaddr_reg:x3; val_offset:33759*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33759*0 + 3*501*FLEN/8, x4, x1, x2)

inst_11254:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f0fffff; valaddr_reg:x3; val_offset:33762*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33762*0 + 3*502*FLEN/8, x4, x1, x2)

inst_11255:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f1fffff; valaddr_reg:x3; val_offset:33765*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33765*0 + 3*503*FLEN/8, x4, x1, x2)

inst_11256:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f3fffff; valaddr_reg:x3; val_offset:33768*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33768*0 + 3*504*FLEN/8, x4, x1, x2)

inst_11257:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f400000; valaddr_reg:x3; val_offset:33771*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33771*0 + 3*505*FLEN/8, x4, x1, x2)

inst_11258:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f600000; valaddr_reg:x3; val_offset:33774*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33774*0 + 3*506*FLEN/8, x4, x1, x2)

inst_11259:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f700000; valaddr_reg:x3; val_offset:33777*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33777*0 + 3*507*FLEN/8, x4, x1, x2)

inst_11260:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f780000; valaddr_reg:x3; val_offset:33780*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33780*0 + 3*508*FLEN/8, x4, x1, x2)

inst_11261:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f7c0000; valaddr_reg:x3; val_offset:33783*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33783*0 + 3*509*FLEN/8, x4, x1, x2)

inst_11262:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f7e0000; valaddr_reg:x3; val_offset:33786*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33786*0 + 3*510*FLEN/8, x4, x1, x2)

inst_11263:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f7f0000; valaddr_reg:x3; val_offset:33789*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33789*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_11264:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f7f8000; valaddr_reg:x3; val_offset:33792*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33792*0 + 3*512*FLEN/8, x4, x1, x2)

inst_11265:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f7fc000; valaddr_reg:x3; val_offset:33795*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33795*0 + 3*513*FLEN/8, x4, x1, x2)

inst_11266:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f7fe000; valaddr_reg:x3; val_offset:33798*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33798*0 + 3*514*FLEN/8, x4, x1, x2)

inst_11267:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f7ff000; valaddr_reg:x3; val_offset:33801*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33801*0 + 3*515*FLEN/8, x4, x1, x2)

inst_11268:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f7ff800; valaddr_reg:x3; val_offset:33804*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33804*0 + 3*516*FLEN/8, x4, x1, x2)

inst_11269:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f7ffc00; valaddr_reg:x3; val_offset:33807*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33807*0 + 3*517*FLEN/8, x4, x1, x2)

inst_11270:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f7ffe00; valaddr_reg:x3; val_offset:33810*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33810*0 + 3*518*FLEN/8, x4, x1, x2)

inst_11271:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f7fff00; valaddr_reg:x3; val_offset:33813*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33813*0 + 3*519*FLEN/8, x4, x1, x2)

inst_11272:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f7fff80; valaddr_reg:x3; val_offset:33816*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33816*0 + 3*520*FLEN/8, x4, x1, x2)

inst_11273:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f7fffc0; valaddr_reg:x3; val_offset:33819*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33819*0 + 3*521*FLEN/8, x4, x1, x2)

inst_11274:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f7fffe0; valaddr_reg:x3; val_offset:33822*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33822*0 + 3*522*FLEN/8, x4, x1, x2)

inst_11275:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f7ffff0; valaddr_reg:x3; val_offset:33825*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33825*0 + 3*523*FLEN/8, x4, x1, x2)

inst_11276:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f7ffff8; valaddr_reg:x3; val_offset:33828*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33828*0 + 3*524*FLEN/8, x4, x1, x2)

inst_11277:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f7ffffc; valaddr_reg:x3; val_offset:33831*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33831*0 + 3*525*FLEN/8, x4, x1, x2)

inst_11278:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f7ffffe; valaddr_reg:x3; val_offset:33834*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33834*0 + 3*526*FLEN/8, x4, x1, x2)

inst_11279:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ab7e6 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ab7e6; op2val:0x80000000;
op3val:0x8f7fffff; valaddr_reg:x3; val_offset:33837*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33837*0 + 3*527*FLEN/8, x4, x1, x2)

inst_11280:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:33840*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33840*0 + 3*528*FLEN/8, x4, x1, x2)

inst_11281:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:33843*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33843*0 + 3*529*FLEN/8, x4, x1, x2)

inst_11282:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:33846*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33846*0 + 3*530*FLEN/8, x4, x1, x2)

inst_11283:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:33849*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33849*0 + 3*531*FLEN/8, x4, x1, x2)

inst_11284:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:33852*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33852*0 + 3*532*FLEN/8, x4, x1, x2)

inst_11285:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:33855*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33855*0 + 3*533*FLEN/8, x4, x1, x2)

inst_11286:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:33858*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33858*0 + 3*534*FLEN/8, x4, x1, x2)

inst_11287:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:33861*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33861*0 + 3*535*FLEN/8, x4, x1, x2)

inst_11288:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:33864*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33864*0 + 3*536*FLEN/8, x4, x1, x2)

inst_11289:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:33867*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33867*0 + 3*537*FLEN/8, x4, x1, x2)

inst_11290:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:33870*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33870*0 + 3*538*FLEN/8, x4, x1, x2)

inst_11291:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:33873*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33873*0 + 3*539*FLEN/8, x4, x1, x2)

inst_11292:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:33876*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33876*0 + 3*540*FLEN/8, x4, x1, x2)

inst_11293:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:33879*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33879*0 + 3*541*FLEN/8, x4, x1, x2)

inst_11294:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:33882*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33882*0 + 3*542*FLEN/8, x4, x1, x2)

inst_11295:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:33885*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33885*0 + 3*543*FLEN/8, x4, x1, x2)

inst_11296:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc000000; valaddr_reg:x3; val_offset:33888*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33888*0 + 3*544*FLEN/8, x4, x1, x2)

inst_11297:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc000001; valaddr_reg:x3; val_offset:33891*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33891*0 + 3*545*FLEN/8, x4, x1, x2)

inst_11298:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc000003; valaddr_reg:x3; val_offset:33894*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33894*0 + 3*546*FLEN/8, x4, x1, x2)

inst_11299:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc000007; valaddr_reg:x3; val_offset:33897*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33897*0 + 3*547*FLEN/8, x4, x1, x2)

inst_11300:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc00000f; valaddr_reg:x3; val_offset:33900*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33900*0 + 3*548*FLEN/8, x4, x1, x2)

inst_11301:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc00001f; valaddr_reg:x3; val_offset:33903*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33903*0 + 3*549*FLEN/8, x4, x1, x2)

inst_11302:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc00003f; valaddr_reg:x3; val_offset:33906*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33906*0 + 3*550*FLEN/8, x4, x1, x2)

inst_11303:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc00007f; valaddr_reg:x3; val_offset:33909*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33909*0 + 3*551*FLEN/8, x4, x1, x2)

inst_11304:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc0000ff; valaddr_reg:x3; val_offset:33912*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33912*0 + 3*552*FLEN/8, x4, x1, x2)

inst_11305:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc0001ff; valaddr_reg:x3; val_offset:33915*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33915*0 + 3*553*FLEN/8, x4, x1, x2)

inst_11306:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc0003ff; valaddr_reg:x3; val_offset:33918*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33918*0 + 3*554*FLEN/8, x4, x1, x2)

inst_11307:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc0007ff; valaddr_reg:x3; val_offset:33921*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33921*0 + 3*555*FLEN/8, x4, x1, x2)

inst_11308:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc000fff; valaddr_reg:x3; val_offset:33924*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33924*0 + 3*556*FLEN/8, x4, x1, x2)

inst_11309:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc001fff; valaddr_reg:x3; val_offset:33927*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33927*0 + 3*557*FLEN/8, x4, x1, x2)

inst_11310:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc003fff; valaddr_reg:x3; val_offset:33930*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33930*0 + 3*558*FLEN/8, x4, x1, x2)

inst_11311:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc007fff; valaddr_reg:x3; val_offset:33933*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33933*0 + 3*559*FLEN/8, x4, x1, x2)

inst_11312:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc00ffff; valaddr_reg:x3; val_offset:33936*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33936*0 + 3*560*FLEN/8, x4, x1, x2)

inst_11313:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc01ffff; valaddr_reg:x3; val_offset:33939*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33939*0 + 3*561*FLEN/8, x4, x1, x2)

inst_11314:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc03ffff; valaddr_reg:x3; val_offset:33942*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33942*0 + 3*562*FLEN/8, x4, x1, x2)

inst_11315:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc07ffff; valaddr_reg:x3; val_offset:33945*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33945*0 + 3*563*FLEN/8, x4, x1, x2)

inst_11316:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc0fffff; valaddr_reg:x3; val_offset:33948*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33948*0 + 3*564*FLEN/8, x4, x1, x2)

inst_11317:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc1fffff; valaddr_reg:x3; val_offset:33951*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33951*0 + 3*565*FLEN/8, x4, x1, x2)

inst_11318:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc3fffff; valaddr_reg:x3; val_offset:33954*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33954*0 + 3*566*FLEN/8, x4, x1, x2)

inst_11319:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc400000; valaddr_reg:x3; val_offset:33957*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33957*0 + 3*567*FLEN/8, x4, x1, x2)

inst_11320:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc600000; valaddr_reg:x3; val_offset:33960*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33960*0 + 3*568*FLEN/8, x4, x1, x2)

inst_11321:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc700000; valaddr_reg:x3; val_offset:33963*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33963*0 + 3*569*FLEN/8, x4, x1, x2)

inst_11322:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc780000; valaddr_reg:x3; val_offset:33966*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33966*0 + 3*570*FLEN/8, x4, x1, x2)

inst_11323:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc7c0000; valaddr_reg:x3; val_offset:33969*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33969*0 + 3*571*FLEN/8, x4, x1, x2)

inst_11324:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc7e0000; valaddr_reg:x3; val_offset:33972*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33972*0 + 3*572*FLEN/8, x4, x1, x2)

inst_11325:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc7f0000; valaddr_reg:x3; val_offset:33975*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33975*0 + 3*573*FLEN/8, x4, x1, x2)

inst_11326:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc7f8000; valaddr_reg:x3; val_offset:33978*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33978*0 + 3*574*FLEN/8, x4, x1, x2)

inst_11327:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc7fc000; valaddr_reg:x3; val_offset:33981*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33981*0 + 3*575*FLEN/8, x4, x1, x2)

inst_11328:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc7fe000; valaddr_reg:x3; val_offset:33984*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33984*0 + 3*576*FLEN/8, x4, x1, x2)

inst_11329:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc7ff000; valaddr_reg:x3; val_offset:33987*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33987*0 + 3*577*FLEN/8, x4, x1, x2)

inst_11330:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc7ff800; valaddr_reg:x3; val_offset:33990*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33990*0 + 3*578*FLEN/8, x4, x1, x2)

inst_11331:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc7ffc00; valaddr_reg:x3; val_offset:33993*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33993*0 + 3*579*FLEN/8, x4, x1, x2)

inst_11332:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc7ffe00; valaddr_reg:x3; val_offset:33996*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33996*0 + 3*580*FLEN/8, x4, x1, x2)

inst_11333:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc7fff00; valaddr_reg:x3; val_offset:33999*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 33999*0 + 3*581*FLEN/8, x4, x1, x2)

inst_11334:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc7fff80; valaddr_reg:x3; val_offset:34002*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34002*0 + 3*582*FLEN/8, x4, x1, x2)

inst_11335:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc7fffc0; valaddr_reg:x3; val_offset:34005*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34005*0 + 3*583*FLEN/8, x4, x1, x2)

inst_11336:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc7fffe0; valaddr_reg:x3; val_offset:34008*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34008*0 + 3*584*FLEN/8, x4, x1, x2)

inst_11337:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc7ffff0; valaddr_reg:x3; val_offset:34011*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34011*0 + 3*585*FLEN/8, x4, x1, x2)

inst_11338:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc7ffff8; valaddr_reg:x3; val_offset:34014*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34014*0 + 3*586*FLEN/8, x4, x1, x2)

inst_11339:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc7ffffc; valaddr_reg:x3; val_offset:34017*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34017*0 + 3*587*FLEN/8, x4, x1, x2)

inst_11340:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc7ffffe; valaddr_reg:x3; val_offset:34020*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34020*0 + 3*588*FLEN/8, x4, x1, x2)

inst_11341:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6c05c9 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x18 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6c05c9; op2val:0x0;
op3val:0xc7fffff; valaddr_reg:x3; val_offset:34023*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34023*0 + 3*589*FLEN/8, x4, x1, x2)

inst_11342:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfd800000; valaddr_reg:x3; val_offset:34026*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34026*0 + 3*590*FLEN/8, x4, x1, x2)

inst_11343:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfd800001; valaddr_reg:x3; val_offset:34029*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34029*0 + 3*591*FLEN/8, x4, x1, x2)

inst_11344:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfd800003; valaddr_reg:x3; val_offset:34032*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34032*0 + 3*592*FLEN/8, x4, x1, x2)

inst_11345:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfd800007; valaddr_reg:x3; val_offset:34035*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34035*0 + 3*593*FLEN/8, x4, x1, x2)

inst_11346:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfd80000f; valaddr_reg:x3; val_offset:34038*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34038*0 + 3*594*FLEN/8, x4, x1, x2)

inst_11347:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfd80001f; valaddr_reg:x3; val_offset:34041*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34041*0 + 3*595*FLEN/8, x4, x1, x2)

inst_11348:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfd80003f; valaddr_reg:x3; val_offset:34044*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34044*0 + 3*596*FLEN/8, x4, x1, x2)

inst_11349:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfd80007f; valaddr_reg:x3; val_offset:34047*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34047*0 + 3*597*FLEN/8, x4, x1, x2)

inst_11350:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfd8000ff; valaddr_reg:x3; val_offset:34050*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34050*0 + 3*598*FLEN/8, x4, x1, x2)

inst_11351:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfd8001ff; valaddr_reg:x3; val_offset:34053*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34053*0 + 3*599*FLEN/8, x4, x1, x2)

inst_11352:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfd8003ff; valaddr_reg:x3; val_offset:34056*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34056*0 + 3*600*FLEN/8, x4, x1, x2)

inst_11353:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfd8007ff; valaddr_reg:x3; val_offset:34059*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34059*0 + 3*601*FLEN/8, x4, x1, x2)

inst_11354:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfd800fff; valaddr_reg:x3; val_offset:34062*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34062*0 + 3*602*FLEN/8, x4, x1, x2)

inst_11355:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfd801fff; valaddr_reg:x3; val_offset:34065*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34065*0 + 3*603*FLEN/8, x4, x1, x2)

inst_11356:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfd803fff; valaddr_reg:x3; val_offset:34068*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34068*0 + 3*604*FLEN/8, x4, x1, x2)

inst_11357:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfd807fff; valaddr_reg:x3; val_offset:34071*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34071*0 + 3*605*FLEN/8, x4, x1, x2)

inst_11358:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfd80ffff; valaddr_reg:x3; val_offset:34074*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34074*0 + 3*606*FLEN/8, x4, x1, x2)

inst_11359:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfd81ffff; valaddr_reg:x3; val_offset:34077*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34077*0 + 3*607*FLEN/8, x4, x1, x2)

inst_11360:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfd83ffff; valaddr_reg:x3; val_offset:34080*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34080*0 + 3*608*FLEN/8, x4, x1, x2)

inst_11361:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfd87ffff; valaddr_reg:x3; val_offset:34083*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34083*0 + 3*609*FLEN/8, x4, x1, x2)

inst_11362:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfd8fffff; valaddr_reg:x3; val_offset:34086*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34086*0 + 3*610*FLEN/8, x4, x1, x2)

inst_11363:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfd9fffff; valaddr_reg:x3; val_offset:34089*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34089*0 + 3*611*FLEN/8, x4, x1, x2)

inst_11364:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfdbfffff; valaddr_reg:x3; val_offset:34092*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34092*0 + 3*612*FLEN/8, x4, x1, x2)

inst_11365:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfdc00000; valaddr_reg:x3; val_offset:34095*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34095*0 + 3*613*FLEN/8, x4, x1, x2)

inst_11366:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfde00000; valaddr_reg:x3; val_offset:34098*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34098*0 + 3*614*FLEN/8, x4, x1, x2)

inst_11367:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfdf00000; valaddr_reg:x3; val_offset:34101*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34101*0 + 3*615*FLEN/8, x4, x1, x2)

inst_11368:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfdf80000; valaddr_reg:x3; val_offset:34104*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34104*0 + 3*616*FLEN/8, x4, x1, x2)

inst_11369:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfdfc0000; valaddr_reg:x3; val_offset:34107*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34107*0 + 3*617*FLEN/8, x4, x1, x2)

inst_11370:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfdfe0000; valaddr_reg:x3; val_offset:34110*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34110*0 + 3*618*FLEN/8, x4, x1, x2)

inst_11371:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfdff0000; valaddr_reg:x3; val_offset:34113*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34113*0 + 3*619*FLEN/8, x4, x1, x2)

inst_11372:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfdff8000; valaddr_reg:x3; val_offset:34116*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34116*0 + 3*620*FLEN/8, x4, x1, x2)

inst_11373:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfdffc000; valaddr_reg:x3; val_offset:34119*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34119*0 + 3*621*FLEN/8, x4, x1, x2)

inst_11374:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfdffe000; valaddr_reg:x3; val_offset:34122*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34122*0 + 3*622*FLEN/8, x4, x1, x2)

inst_11375:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfdfff000; valaddr_reg:x3; val_offset:34125*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34125*0 + 3*623*FLEN/8, x4, x1, x2)

inst_11376:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfdfff800; valaddr_reg:x3; val_offset:34128*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34128*0 + 3*624*FLEN/8, x4, x1, x2)

inst_11377:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfdfffc00; valaddr_reg:x3; val_offset:34131*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34131*0 + 3*625*FLEN/8, x4, x1, x2)

inst_11378:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfdfffe00; valaddr_reg:x3; val_offset:34134*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34134*0 + 3*626*FLEN/8, x4, x1, x2)

inst_11379:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfdffff00; valaddr_reg:x3; val_offset:34137*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34137*0 + 3*627*FLEN/8, x4, x1, x2)

inst_11380:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfdffff80; valaddr_reg:x3; val_offset:34140*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34140*0 + 3*628*FLEN/8, x4, x1, x2)

inst_11381:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfdffffc0; valaddr_reg:x3; val_offset:34143*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34143*0 + 3*629*FLEN/8, x4, x1, x2)

inst_11382:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfdffffe0; valaddr_reg:x3; val_offset:34146*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34146*0 + 3*630*FLEN/8, x4, x1, x2)

inst_11383:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfdfffff0; valaddr_reg:x3; val_offset:34149*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34149*0 + 3*631*FLEN/8, x4, x1, x2)

inst_11384:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfdfffff8; valaddr_reg:x3; val_offset:34152*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34152*0 + 3*632*FLEN/8, x4, x1, x2)

inst_11385:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfdfffffc; valaddr_reg:x3; val_offset:34155*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34155*0 + 3*633*FLEN/8, x4, x1, x2)

inst_11386:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfdfffffe; valaddr_reg:x3; val_offset:34158*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34158*0 + 3*634*FLEN/8, x4, x1, x2)

inst_11387:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfb and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xfdffffff; valaddr_reg:x3; val_offset:34161*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34161*0 + 3*635*FLEN/8, x4, x1, x2)

inst_11388:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xff000001; valaddr_reg:x3; val_offset:34164*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34164*0 + 3*636*FLEN/8, x4, x1, x2)

inst_11389:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xff000003; valaddr_reg:x3; val_offset:34167*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34167*0 + 3*637*FLEN/8, x4, x1, x2)

inst_11390:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xff000007; valaddr_reg:x3; val_offset:34170*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34170*0 + 3*638*FLEN/8, x4, x1, x2)

inst_11391:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xff199999; valaddr_reg:x3; val_offset:34173*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34173*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_11392:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xff249249; valaddr_reg:x3; val_offset:34176*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34176*0 + 3*640*FLEN/8, x4, x1, x2)

inst_11393:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xff333333; valaddr_reg:x3; val_offset:34179*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34179*0 + 3*641*FLEN/8, x4, x1, x2)

inst_11394:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:34182*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34182*0 + 3*642*FLEN/8, x4, x1, x2)

inst_11395:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:34185*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34185*0 + 3*643*FLEN/8, x4, x1, x2)

inst_11396:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xff444444; valaddr_reg:x3; val_offset:34188*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34188*0 + 3*644*FLEN/8, x4, x1, x2)

inst_11397:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:34191*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34191*0 + 3*645*FLEN/8, x4, x1, x2)

inst_11398:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:34194*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34194*0 + 3*646*FLEN/8, x4, x1, x2)

inst_11399:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xff666666; valaddr_reg:x3; val_offset:34197*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34197*0 + 3*647*FLEN/8, x4, x1, x2)

inst_11400:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:34200*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34200*0 + 3*648*FLEN/8, x4, x1, x2)

inst_11401:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:34203*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34203*0 + 3*649*FLEN/8, x4, x1, x2)

inst_11402:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:34206*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34206*0 + 3*650*FLEN/8, x4, x1, x2)

inst_11403:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6de5a8 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x09bd7e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6de5a8; op2val:0xc089bd7e;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:34209*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34209*0 + 3*651*FLEN/8, x4, x1, x2)

inst_11404:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:34212*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34212*0 + 3*652*FLEN/8, x4, x1, x2)

inst_11405:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:34215*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34215*0 + 3*653*FLEN/8, x4, x1, x2)

inst_11406:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:34218*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34218*0 + 3*654*FLEN/8, x4, x1, x2)

inst_11407:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:34221*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34221*0 + 3*655*FLEN/8, x4, x1, x2)

inst_11408:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:34224*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34224*0 + 3*656*FLEN/8, x4, x1, x2)

inst_11409:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:34227*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34227*0 + 3*657*FLEN/8, x4, x1, x2)

inst_11410:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:34230*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34230*0 + 3*658*FLEN/8, x4, x1, x2)

inst_11411:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:34233*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34233*0 + 3*659*FLEN/8, x4, x1, x2)

inst_11412:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:34236*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34236*0 + 3*660*FLEN/8, x4, x1, x2)

inst_11413:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:34239*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34239*0 + 3*661*FLEN/8, x4, x1, x2)

inst_11414:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:34242*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34242*0 + 3*662*FLEN/8, x4, x1, x2)

inst_11415:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:34245*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34245*0 + 3*663*FLEN/8, x4, x1, x2)

inst_11416:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:34248*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34248*0 + 3*664*FLEN/8, x4, x1, x2)

inst_11417:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:34251*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34251*0 + 3*665*FLEN/8, x4, x1, x2)

inst_11418:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:34254*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34254*0 + 3*666*FLEN/8, x4, x1, x2)

inst_11419:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:34257*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34257*0 + 3*667*FLEN/8, x4, x1, x2)

inst_11420:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a000000; valaddr_reg:x3; val_offset:34260*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34260*0 + 3*668*FLEN/8, x4, x1, x2)

inst_11421:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a000001; valaddr_reg:x3; val_offset:34263*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34263*0 + 3*669*FLEN/8, x4, x1, x2)

inst_11422:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a000003; valaddr_reg:x3; val_offset:34266*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34266*0 + 3*670*FLEN/8, x4, x1, x2)

inst_11423:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a000007; valaddr_reg:x3; val_offset:34269*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34269*0 + 3*671*FLEN/8, x4, x1, x2)

inst_11424:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a00000f; valaddr_reg:x3; val_offset:34272*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34272*0 + 3*672*FLEN/8, x4, x1, x2)

inst_11425:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a00001f; valaddr_reg:x3; val_offset:34275*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34275*0 + 3*673*FLEN/8, x4, x1, x2)

inst_11426:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a00003f; valaddr_reg:x3; val_offset:34278*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34278*0 + 3*674*FLEN/8, x4, x1, x2)

inst_11427:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a00007f; valaddr_reg:x3; val_offset:34281*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34281*0 + 3*675*FLEN/8, x4, x1, x2)

inst_11428:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a0000ff; valaddr_reg:x3; val_offset:34284*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34284*0 + 3*676*FLEN/8, x4, x1, x2)

inst_11429:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a0001ff; valaddr_reg:x3; val_offset:34287*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34287*0 + 3*677*FLEN/8, x4, x1, x2)

inst_11430:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a0003ff; valaddr_reg:x3; val_offset:34290*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34290*0 + 3*678*FLEN/8, x4, x1, x2)

inst_11431:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a0007ff; valaddr_reg:x3; val_offset:34293*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34293*0 + 3*679*FLEN/8, x4, x1, x2)

inst_11432:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a000fff; valaddr_reg:x3; val_offset:34296*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34296*0 + 3*680*FLEN/8, x4, x1, x2)

inst_11433:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a001fff; valaddr_reg:x3; val_offset:34299*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34299*0 + 3*681*FLEN/8, x4, x1, x2)

inst_11434:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a003fff; valaddr_reg:x3; val_offset:34302*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34302*0 + 3*682*FLEN/8, x4, x1, x2)

inst_11435:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a007fff; valaddr_reg:x3; val_offset:34305*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34305*0 + 3*683*FLEN/8, x4, x1, x2)

inst_11436:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a00ffff; valaddr_reg:x3; val_offset:34308*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34308*0 + 3*684*FLEN/8, x4, x1, x2)

inst_11437:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a01ffff; valaddr_reg:x3; val_offset:34311*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34311*0 + 3*685*FLEN/8, x4, x1, x2)

inst_11438:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a03ffff; valaddr_reg:x3; val_offset:34314*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34314*0 + 3*686*FLEN/8, x4, x1, x2)

inst_11439:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a07ffff; valaddr_reg:x3; val_offset:34317*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34317*0 + 3*687*FLEN/8, x4, x1, x2)

inst_11440:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a0fffff; valaddr_reg:x3; val_offset:34320*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34320*0 + 3*688*FLEN/8, x4, x1, x2)

inst_11441:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a1fffff; valaddr_reg:x3; val_offset:34323*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34323*0 + 3*689*FLEN/8, x4, x1, x2)

inst_11442:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a3fffff; valaddr_reg:x3; val_offset:34326*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34326*0 + 3*690*FLEN/8, x4, x1, x2)

inst_11443:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a400000; valaddr_reg:x3; val_offset:34329*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34329*0 + 3*691*FLEN/8, x4, x1, x2)

inst_11444:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a600000; valaddr_reg:x3; val_offset:34332*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34332*0 + 3*692*FLEN/8, x4, x1, x2)

inst_11445:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a700000; valaddr_reg:x3; val_offset:34335*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34335*0 + 3*693*FLEN/8, x4, x1, x2)

inst_11446:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a780000; valaddr_reg:x3; val_offset:34338*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34338*0 + 3*694*FLEN/8, x4, x1, x2)

inst_11447:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7c0000; valaddr_reg:x3; val_offset:34341*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34341*0 + 3*695*FLEN/8, x4, x1, x2)

inst_11448:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7e0000; valaddr_reg:x3; val_offset:34344*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34344*0 + 3*696*FLEN/8, x4, x1, x2)

inst_11449:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7f0000; valaddr_reg:x3; val_offset:34347*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34347*0 + 3*697*FLEN/8, x4, x1, x2)

inst_11450:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7f8000; valaddr_reg:x3; val_offset:34350*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34350*0 + 3*698*FLEN/8, x4, x1, x2)

inst_11451:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7fc000; valaddr_reg:x3; val_offset:34353*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34353*0 + 3*699*FLEN/8, x4, x1, x2)

inst_11452:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7fe000; valaddr_reg:x3; val_offset:34356*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34356*0 + 3*700*FLEN/8, x4, x1, x2)

inst_11453:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7ff000; valaddr_reg:x3; val_offset:34359*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34359*0 + 3*701*FLEN/8, x4, x1, x2)

inst_11454:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7ff800; valaddr_reg:x3; val_offset:34362*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34362*0 + 3*702*FLEN/8, x4, x1, x2)

inst_11455:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7ffc00; valaddr_reg:x3; val_offset:34365*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34365*0 + 3*703*FLEN/8, x4, x1, x2)

inst_11456:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7ffe00; valaddr_reg:x3; val_offset:34368*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34368*0 + 3*704*FLEN/8, x4, x1, x2)

inst_11457:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7fff00; valaddr_reg:x3; val_offset:34371*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34371*0 + 3*705*FLEN/8, x4, x1, x2)

inst_11458:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7fff80; valaddr_reg:x3; val_offset:34374*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34374*0 + 3*706*FLEN/8, x4, x1, x2)

inst_11459:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7fffc0; valaddr_reg:x3; val_offset:34377*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34377*0 + 3*707*FLEN/8, x4, x1, x2)

inst_11460:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7fffe0; valaddr_reg:x3; val_offset:34380*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34380*0 + 3*708*FLEN/8, x4, x1, x2)

inst_11461:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7ffff0; valaddr_reg:x3; val_offset:34383*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34383*0 + 3*709*FLEN/8, x4, x1, x2)

inst_11462:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7ffff8; valaddr_reg:x3; val_offset:34386*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34386*0 + 3*710*FLEN/8, x4, x1, x2)

inst_11463:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7ffffc; valaddr_reg:x3; val_offset:34389*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34389*0 + 3*711*FLEN/8, x4, x1, x2)

inst_11464:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7ffffe; valaddr_reg:x3; val_offset:34392*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34392*0 + 3*712*FLEN/8, x4, x1, x2)

inst_11465:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6ef3c1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x14 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6ef3c1; op2val:0x80000000;
op3val:0x8a7fffff; valaddr_reg:x3; val_offset:34395*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34395*0 + 3*713*FLEN/8, x4, x1, x2)

inst_11466:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x62000000; valaddr_reg:x3; val_offset:34398*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34398*0 + 3*714*FLEN/8, x4, x1, x2)

inst_11467:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x62000001; valaddr_reg:x3; val_offset:34401*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34401*0 + 3*715*FLEN/8, x4, x1, x2)

inst_11468:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x62000003; valaddr_reg:x3; val_offset:34404*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34404*0 + 3*716*FLEN/8, x4, x1, x2)

inst_11469:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x62000007; valaddr_reg:x3; val_offset:34407*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34407*0 + 3*717*FLEN/8, x4, x1, x2)

inst_11470:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x6200000f; valaddr_reg:x3; val_offset:34410*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34410*0 + 3*718*FLEN/8, x4, x1, x2)

inst_11471:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x6200001f; valaddr_reg:x3; val_offset:34413*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34413*0 + 3*719*FLEN/8, x4, x1, x2)

inst_11472:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x6200003f; valaddr_reg:x3; val_offset:34416*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34416*0 + 3*720*FLEN/8, x4, x1, x2)

inst_11473:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x6200007f; valaddr_reg:x3; val_offset:34419*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34419*0 + 3*721*FLEN/8, x4, x1, x2)

inst_11474:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x620000ff; valaddr_reg:x3; val_offset:34422*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34422*0 + 3*722*FLEN/8, x4, x1, x2)

inst_11475:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x620001ff; valaddr_reg:x3; val_offset:34425*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34425*0 + 3*723*FLEN/8, x4, x1, x2)

inst_11476:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x620003ff; valaddr_reg:x3; val_offset:34428*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34428*0 + 3*724*FLEN/8, x4, x1, x2)

inst_11477:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x620007ff; valaddr_reg:x3; val_offset:34431*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34431*0 + 3*725*FLEN/8, x4, x1, x2)

inst_11478:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x62000fff; valaddr_reg:x3; val_offset:34434*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34434*0 + 3*726*FLEN/8, x4, x1, x2)

inst_11479:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x62001fff; valaddr_reg:x3; val_offset:34437*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34437*0 + 3*727*FLEN/8, x4, x1, x2)

inst_11480:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x62003fff; valaddr_reg:x3; val_offset:34440*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34440*0 + 3*728*FLEN/8, x4, x1, x2)

inst_11481:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x62007fff; valaddr_reg:x3; val_offset:34443*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34443*0 + 3*729*FLEN/8, x4, x1, x2)

inst_11482:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x6200ffff; valaddr_reg:x3; val_offset:34446*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34446*0 + 3*730*FLEN/8, x4, x1, x2)

inst_11483:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x6201ffff; valaddr_reg:x3; val_offset:34449*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34449*0 + 3*731*FLEN/8, x4, x1, x2)

inst_11484:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x6203ffff; valaddr_reg:x3; val_offset:34452*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34452*0 + 3*732*FLEN/8, x4, x1, x2)

inst_11485:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x6207ffff; valaddr_reg:x3; val_offset:34455*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34455*0 + 3*733*FLEN/8, x4, x1, x2)

inst_11486:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x620fffff; valaddr_reg:x3; val_offset:34458*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34458*0 + 3*734*FLEN/8, x4, x1, x2)

inst_11487:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x621fffff; valaddr_reg:x3; val_offset:34461*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34461*0 + 3*735*FLEN/8, x4, x1, x2)

inst_11488:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x623fffff; valaddr_reg:x3; val_offset:34464*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34464*0 + 3*736*FLEN/8, x4, x1, x2)

inst_11489:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x62400000; valaddr_reg:x3; val_offset:34467*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34467*0 + 3*737*FLEN/8, x4, x1, x2)

inst_11490:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x62600000; valaddr_reg:x3; val_offset:34470*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34470*0 + 3*738*FLEN/8, x4, x1, x2)

inst_11491:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x62700000; valaddr_reg:x3; val_offset:34473*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34473*0 + 3*739*FLEN/8, x4, x1, x2)

inst_11492:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x62780000; valaddr_reg:x3; val_offset:34476*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34476*0 + 3*740*FLEN/8, x4, x1, x2)

inst_11493:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627c0000; valaddr_reg:x3; val_offset:34479*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34479*0 + 3*741*FLEN/8, x4, x1, x2)

inst_11494:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627e0000; valaddr_reg:x3; val_offset:34482*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34482*0 + 3*742*FLEN/8, x4, x1, x2)

inst_11495:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627f0000; valaddr_reg:x3; val_offset:34485*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34485*0 + 3*743*FLEN/8, x4, x1, x2)

inst_11496:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627f8000; valaddr_reg:x3; val_offset:34488*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34488*0 + 3*744*FLEN/8, x4, x1, x2)

inst_11497:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627fc000; valaddr_reg:x3; val_offset:34491*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34491*0 + 3*745*FLEN/8, x4, x1, x2)

inst_11498:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627fe000; valaddr_reg:x3; val_offset:34494*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34494*0 + 3*746*FLEN/8, x4, x1, x2)

inst_11499:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627ff000; valaddr_reg:x3; val_offset:34497*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34497*0 + 3*747*FLEN/8, x4, x1, x2)

inst_11500:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627ff800; valaddr_reg:x3; val_offset:34500*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34500*0 + 3*748*FLEN/8, x4, x1, x2)

inst_11501:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627ffc00; valaddr_reg:x3; val_offset:34503*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34503*0 + 3*749*FLEN/8, x4, x1, x2)

inst_11502:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627ffe00; valaddr_reg:x3; val_offset:34506*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34506*0 + 3*750*FLEN/8, x4, x1, x2)

inst_11503:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627fff00; valaddr_reg:x3; val_offset:34509*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34509*0 + 3*751*FLEN/8, x4, x1, x2)

inst_11504:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627fff80; valaddr_reg:x3; val_offset:34512*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34512*0 + 3*752*FLEN/8, x4, x1, x2)

inst_11505:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627fffc0; valaddr_reg:x3; val_offset:34515*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34515*0 + 3*753*FLEN/8, x4, x1, x2)

inst_11506:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627fffe0; valaddr_reg:x3; val_offset:34518*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34518*0 + 3*754*FLEN/8, x4, x1, x2)

inst_11507:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627ffff0; valaddr_reg:x3; val_offset:34521*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34521*0 + 3*755*FLEN/8, x4, x1, x2)

inst_11508:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627ffff8; valaddr_reg:x3; val_offset:34524*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34524*0 + 3*756*FLEN/8, x4, x1, x2)

inst_11509:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627ffffc; valaddr_reg:x3; val_offset:34527*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34527*0 + 3*757*FLEN/8, x4, x1, x2)

inst_11510:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627ffffe; valaddr_reg:x3; val_offset:34530*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34530*0 + 3*758*FLEN/8, x4, x1, x2)

inst_11511:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xc4 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x627fffff; valaddr_reg:x3; val_offset:34533*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34533*0 + 3*759*FLEN/8, x4, x1, x2)

inst_11512:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x7f000001; valaddr_reg:x3; val_offset:34536*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34536*0 + 3*760*FLEN/8, x4, x1, x2)

inst_11513:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x7f000003; valaddr_reg:x3; val_offset:34539*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34539*0 + 3*761*FLEN/8, x4, x1, x2)

inst_11514:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x7f000007; valaddr_reg:x3; val_offset:34542*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34542*0 + 3*762*FLEN/8, x4, x1, x2)

inst_11515:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x7f199999; valaddr_reg:x3; val_offset:34545*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34545*0 + 3*763*FLEN/8, x4, x1, x2)

inst_11516:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x7f249249; valaddr_reg:x3; val_offset:34548*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34548*0 + 3*764*FLEN/8, x4, x1, x2)

inst_11517:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x7f333333; valaddr_reg:x3; val_offset:34551*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34551*0 + 3*765*FLEN/8, x4, x1, x2)

inst_11518:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:34554*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34554*0 + 3*766*FLEN/8, x4, x1, x2)

inst_11519:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6f0a86 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x0914bd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6f0a86; op2val:0x408914bd;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:34557*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 34557*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(0x7e64003e120482878,32,FLEN)
NAN_BOXED(0xc08fb7fb230644219,32,FLEN)
NAN_BOXED(0xebff8000959390208,32,FLEN)
NAN_BOXED(0x7e64003e120482878,32,FLEN)
NAN_BOXED(0xc08fb7fb230644219,32,FLEN)
NAN_BOXED(0xebffc000959406592,32,FLEN)
NAN_BOXED(0x7e64003e120482878,32,FLEN)
NAN_BOXED(0xc08fb7fb230644219,32,FLEN)
NAN_BOXED(0xebffe000959414784,32,FLEN)
NAN_BOXED(0x7e64003e120482878,32,FLEN)
NAN_BOXED(0xc08fb7fb230644219,32,FLEN)
NAN_BOXED(0xebfff000959418880,32,FLEN)
NAN_BOXED(0x7e64003e120482878,32,FLEN)
NAN_BOXED(0xc08fb7fb230644219,32,FLEN)
NAN_BOXED(0xebfff800959420928,32,FLEN)
NAN_BOXED(0x7e64003e120482878,32,FLEN)
NAN_BOXED(0xc08fb7fb230644219,32,FLEN)
NAN_BOXED(0xebfffc00959421952,32,FLEN)
NAN_BOXED(0x7e64003e120482878,32,FLEN)
NAN_BOXED(0xc08fb7fb230644219,32,FLEN)
NAN_BOXED(0xebfffe00959422464,32,FLEN)
NAN_BOXED(0x7e64003e120482878,32,FLEN)
NAN_BOXED(0xc08fb7fb230644219,32,FLEN)
NAN_BOXED(0xebffff00959422720,32,FLEN)
NAN_BOXED(0x7e64003e120482878,32,FLEN)
NAN_BOXED(0xc08fb7fb230644219,32,FLEN)
NAN_BOXED(0xebffff80959422848,32,FLEN)
NAN_BOXED(0x7e64003e120482878,32,FLEN)
NAN_BOXED(0xc08fb7fb230644219,32,FLEN)
NAN_BOXED(0xebffffc0959422912,32,FLEN)
NAN_BOXED(0x7e64003e120482878,32,FLEN)
NAN_BOXED(0xc08fb7fb230644219,32,FLEN)
NAN_BOXED(0xebffffe0959422944,32,FLEN)
NAN_BOXED(0x7e64003e120482878,32,FLEN)
NAN_BOXED(0xc08fb7fb230644219,32,FLEN)
NAN_BOXED(0xebfffff0959422960,32,FLEN)
NAN_BOXED(0x7e64003e120482878,32,FLEN)
NAN_BOXED(0xc08fb7fb230644219,32,FLEN)
NAN_BOXED(0xebfffff8959422968,32,FLEN)
NAN_BOXED(0x7e64003e120482878,32,FLEN)
NAN_BOXED(0xc08fb7fb230644219,32,FLEN)
NAN_BOXED(0xebfffffc959422972,32,FLEN)
NAN_BOXED(0x7e64003e120482878,32,FLEN)
NAN_BOXED(0xc08fb7fb230644219,32,FLEN)
NAN_BOXED(0xebfffffe959422974,32,FLEN)
NAN_BOXED(0x7e64003e120482878,32,FLEN)
NAN_BOXED(0xc08fb7fb230644219,32,FLEN)
NAN_BOXED(0xebffffff959422975,32,FLEN)
NAN_BOXED(0x7e64003e120482878,32,FLEN)
NAN_BOXED(0xc08fb7fb230644219,32,FLEN)
NAN_BOXED(0xff000001278190081,32,FLEN)
NAN_BOXED(0x7e64003e120482878,32,FLEN)
NAN_BOXED(0xc08fb7fb230644219,32,FLEN)
NAN_BOXED(0xff000003278190083,32,FLEN)
NAN_BOXED(0x7e64003e120482878,32,FLEN)
NAN_BOXED(0xc08fb7fb230644219,32,FLEN)
NAN_BOXED(0xff000007278190087,32,FLEN)
NAN_BOXED(0x7e64003e120482878,32,FLEN)
NAN_BOXED(0xc08fb7fb230644219,32,FLEN)
NAN_BOXED(0xff199999279867801,32,FLEN)
NAN_BOXED(0x7e64003e120482878,32,FLEN)
NAN_BOXED(0xc08fb7fb230644219,32,FLEN)
NAN_BOXED(0xff249249280586825,32,FLEN)
NAN_BOXED(0x7e64003e120482878,32,FLEN)
NAN_BOXED(0xc08fb7fb230644219,32,FLEN)
NAN_BOXED(0xff333333281545523,32,FLEN)
NAN_BOXED(0x7e64003e120482878,32,FLEN)
NAN_BOXED(0xc08fb7fb230644219,32,FLEN)
NAN_BOXED(0xff36db6d281785197,32,FLEN)
NAN_BOXED(0x7e64003e120482878,32,FLEN)
NAN_BOXED(0xc08fb7fb230644219,32,FLEN)
NAN_BOXED(0xff3bbbbb282104763,32,FLEN)
NAN_BOXED(0x7e64003e120482878,32,FLEN)
NAN_BOXED(0xc08fb7fb230644219,32,FLEN)
NAN_BOXED(0xff444444282664004,32,FLEN)
NAN_BOXED(0x7e64003e120482878,32,FLEN)
NAN_BOXED(0xc08fb7fb230644219,32,FLEN)
NAN_BOXED(0xff4ccccc283223244,32,FLEN)
NAN_BOXED(0x7e64003e120482878,32,FLEN)
NAN_BOXED(0xc08fb7fb230644219,32,FLEN)
NAN_BOXED(0xff5b6db6284181942,32,FLEN)
NAN_BOXED(0x7e64003e120482878,32,FLEN)
NAN_BOXED(0xc08fb7fb230644219,32,FLEN)
NAN_BOXED(0xff666666284900966,32,FLEN)
NAN_BOXED(0x7e64003e120482878,32,FLEN)
NAN_BOXED(0xc08fb7fb230644219,32,FLEN)
NAN_BOXED(0xff6db6db285380315,32,FLEN)
NAN_BOXED(0x7e64003e120482878,32,FLEN)
NAN_BOXED(0xc08fb7fb230644219,32,FLEN)
NAN_BOXED(0xff7ffff8286578680,32,FLEN)
NAN_BOXED(0x7e64003e120482878,32,FLEN)
NAN_BOXED(0xc08fb7fb230644219,32,FLEN)
NAN_BOXED(0xff7ffffc286578684,32,FLEN)
NAN_BOXED(0x7e64003e120482878,32,FLEN)
NAN_BOXED(0xc08fb7fb230644219,32,FLEN)
NAN_BOXED(0xff7ffffe286578686,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f000000667577344,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f000001667577345,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f000003667577347,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f000007667577351,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f00000f667577359,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f00001f667577375,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f00003f667577407,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f00007f667577471,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f0000ff667577599,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f0001ff667577855,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f0003ff667578367,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f0007ff667579391,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f000fff667581439,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f001fff667585535,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f003fff667593727,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f007fff667610111,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f00ffff667642879,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f01ffff667708415,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f03ffff667839487,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f07ffff668101631,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f0fffff668625919,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f1fffff669674495,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f3fffff671771647,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f400000671771648,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f600000673868800,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f700000674917376,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f780000675441664,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f7c0000675703808,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f7e0000675834880,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f7f0000675900416,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f7f8000675933184,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f7fc000675949568,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f7fe000675957760,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f7ff000675961856,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f7ff800675963904,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f7ffc00675964928,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f7ffe00675965440,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f7fff00675965696,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f7fff80675965824,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f7fffc0675965888,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f7fffe0675965920,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f7ffff0675965936,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f7ffff8675965944,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f7ffffc675965948,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f7ffffe675965950,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0x9f7fffff675965951,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0xbf800001212836865,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0xbf800003212836867,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0xbf800007212836871,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0xbf999999214514585,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0xbfa49249215233609,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0xbfb33333216192307,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0xbfb6db6d216431981,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0xbfbbbbbb216751547,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0xbfc44444217310788,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0xbfcccccc217870028,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0xbfdb6db6218828726,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0xbfe66666219547750,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0xbfedb6db220027099,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0xbffffff8221225464,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0xbffffffc221225468,32,FLEN)
NAN_BOXED(0x7e64c58c120533388,32,FLEN)
NAN_BOXED(0x808f3c08156870664,32,FLEN)
NAN_BOXED(0xbffffffe221225470,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000001147483649,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000003147483651,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000007147483655,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80199999149161369,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80249249149880393,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80333333150839091,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8036db6d151078765,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x803bbbbb151398331,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80444444151957572,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x804ccccc152516812,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x805b6db6153475510,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80666666154194534,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x806db6db154673883,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffff8155872248,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffc155872252,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffe155872254,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e800000390753280,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e800001390753281,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e800003390753283,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e800007390753287,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e80000f390753295,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e80001f390753311,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e80003f390753343,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e80007f390753407,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e8000ff390753535,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e8001ff390753791,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e8003ff390754303,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e8007ff390755327,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e800fff390757375,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e801fff390761471,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e803fff390769663,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e807fff390786047,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e80ffff390818815,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e81ffff390884351,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e83ffff391015423,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e87ffff391277567,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e8fffff391801855,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8e9fffff392850431,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8ebfffff394947583,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8ec00000394947584,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8ee00000397044736,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8ef00000398093312,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8ef80000398617600,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8efc0000398879744,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8efe0000399010816,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8eff0000399076352,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8eff8000399109120,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8effc000399125504,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8effe000399133696,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8efff000399137792,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8efff800399139840,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8efffc00399140864,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8efffe00399141376,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8effff00399141632,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8effff80399141760,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8effffc0399141824,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8effffe0399141856,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8efffff0399141872,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8efffff8399141880,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8efffffc399141884,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8efffffe399141886,32,FLEN)
NAN_BOXED(0x7e656a56120575574,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8effffff399141887,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000001147483649,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000003147483651,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000007147483655,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80199999149161369,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80249249149880393,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80333333150839091,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8036db6d151078765,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x803bbbbb151398331,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80444444151957572,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x804ccccc152516812,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x805b6db6153475510,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80666666154194534,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x806db6db154673883,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffff8155872248,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffc155872252,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffe155872254,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f000000399141888,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f000001399141889,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f000003399141891,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f000007399141895,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f00000f399141903,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f00001f399141919,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f00003f399141951,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f00007f399142015,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f0000ff399142143,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f0001ff399142399,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f0003ff399142911,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f0007ff399143935,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f000fff399145983,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f001fff399150079,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f003fff399158271,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f007fff399174655,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f00ffff399207423,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f01ffff399272959,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f03ffff399404031,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f07ffff399666175,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f0fffff400190463,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f1fffff401239039,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f3fffff403336191,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f400000403336192,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f600000405433344,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f700000406481920,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f780000407006208,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7c0000407268352,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7e0000407399424,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7f0000407464960,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7f8000407497728,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7fc000407514112,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7fe000407522304,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7ff000407526400,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7ff800407528448,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7ffc00407529472,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7ffe00407529984,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7fff00407530240,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7fff80407530368,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7fffc0407530432,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7fffe0407530464,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7ffff0407530480,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7ffff8407530488,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7ffffc407530492,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7ffffe407530494,32,FLEN)
NAN_BOXED(0x7e66111b120618267,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7fffff407530495,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc5800000313500160,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc5800001313500161,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc5800003313500163,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc5800007313500167,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc580000f313500175,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc580001f313500191,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc580003f313500223,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc580007f313500287,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc58000ff313500415,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc58001ff313500671,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc58003ff313501183,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc58007ff313502207,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc5800fff313504255,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc5801fff313508351,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc5803fff313516543,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc5807fff313532927,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc580ffff313565695,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc581ffff313631231,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc583ffff313762303,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc587ffff314024447,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc58fffff314548735,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc59fffff315597311,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc5bfffff317694463,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc5c00000317694464,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc5e00000319791616,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc5f00000320840192,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc5f80000321364480,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc5fc0000321626624,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc5fe0000321757696,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc5ff0000321823232,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc5ff8000321856000,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc5ffc000321872384,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc5ffe000321880576,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc5fff000321884672,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc5fff800321886720,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc5fffc00321887744,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc5fffe00321888256,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc5ffff00321888512,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc5ffff80321888640,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc5ffffc0321888704,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc5ffffe0321888736,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc5fffff0321888752,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc5fffff8321888760,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc5fffffc321888764,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc5fffffe321888766,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xc5ffffff321888767,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xff000001278190081,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xff000003278190083,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xff000007278190087,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xff199999279867801,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xff249249280586825,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xff333333281545523,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xff36db6d281785197,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xff3bbbbb282104763,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xff444444282664004,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xff4ccccc283223244,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xff5b6db6284181942,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xff666666284900966,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xff6db6db285380315,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xff7ffff8286578680,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xff7ffffc286578684,32,FLEN)
NAN_BOXED(0x7e6937b8120824760,32,FLEN)
NAN_BOXED(0xc08c8101230433537,32,FLEN)
NAN_BOXED(0xff7ffffe286578686,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe6000000858759680,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe6000001858759681,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe6000003858759683,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe6000007858759687,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe600000f858759695,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe600001f858759711,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe600003f858759743,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe600007f858759807,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe60000ff858759935,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe60001ff858760191,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe60003ff858760703,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe60007ff858761727,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe6000fff858763775,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe6001fff858767871,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe6003fff858776063,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe6007fff858792447,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe600ffff858825215,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe601ffff858890751,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe603ffff859021823,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe607ffff859283967,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe60fffff859808255,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe61fffff860856831,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe63fffff862953983,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe6400000862953984,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe6600000865051136,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe6700000866099712,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe6780000866624000,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe67c0000866886144,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe67e0000867017216,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe67f0000867082752,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe67f8000867115520,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe67fc000867131904,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe67fe000867140096,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe67ff000867144192,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe67ff800867146240,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe67ffc00867147264,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe67ffe00867147776,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe67fff00867148032,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe67fff80867148160,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe67fffc0867148224,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe67fffe0867148256,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe67ffff0867148272,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe67ffff8867148280,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe67ffffc867148284,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe67ffffe867148286,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xe67fffff867148287,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xff000001278190081,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xff000003278190083,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xff000007278190087,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xff199999279867801,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xff249249280586825,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xff333333281545523,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xff36db6d281785197,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xff3bbbbb282104763,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xff444444282664004,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xff4ccccc283223244,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xff5b6db6284181942,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xff666666284900966,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xff6db6db285380315,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xff7ffff8286578680,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xff7ffffc286578684,32,FLEN)
NAN_BOXED(0x7e69c81e120861726,32,FLEN)
NAN_BOXED(0xc08c2a39230411321,32,FLEN)
NAN_BOXED(0xff7ffffe286578686,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x65800000702887424,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x65800001702887425,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x65800003702887427,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x65800007702887431,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x6580000f702887439,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x6580001f702887455,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x6580003f702887487,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x6580007f702887551,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x658000ff702887679,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x658001ff702887935,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x658003ff702888447,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x658007ff702889471,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x65800fff702891519,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x65801fff702895615,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x65803fff702903807,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x65807fff702920191,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x6580ffff702952959,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x6581ffff703018495,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x6583ffff703149567,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x6587ffff703411711,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x658fffff703935999,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x659fffff704984575,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x65bfffff707081727,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x65c00000707081728,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x65e00000709178880,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x65f00000710227456,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x65f80000710751744,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x65fc0000711013888,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x65fe0000711144960,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x65ff0000711210496,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x65ff8000711243264,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x65ffc000711259648,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x65ffe000711267840,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x65fff000711271936,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x65fff800711273984,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x65fffc00711275008,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x65fffe00711275520,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x65ffff00711275776,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x65ffff80711275904,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x65ffffc0711275968,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x65ffffe0711276000,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x65fffff0711276016,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x65fffff8711276024,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x65fffffc711276028,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x65fffffe711276030,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x65ffffff711276031,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x7f000001130706433,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x7f000003130706435,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x7f000007130706439,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x7f199999132384153,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x7f249249133103177,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x7f333333134061875,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x7f36db6d134301549,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x7f3bbbbb134621115,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x7f444444135180356,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x7f4ccccc135739596,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x7f5b6db6136698294,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x7f666666137417318,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x7f6db6db137896667,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x7f7ffff8139095032,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x7f7ffffc139095036,32,FLEN)
NAN_BOXED(0x7e6a15f4120881652,32,FLEN)
NAN_BOXED(0x408bfb9d082915741,32,FLEN)
NAN_BOXED(0x7f7ffffe139095038,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6f800000870659584,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6f800001870659585,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6f800003870659587,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6f800007870659591,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6f80000f870659599,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6f80001f870659615,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6f80003f870659647,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6f80007f870659711,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6f8000ff870659839,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6f8001ff870660095,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6f8003ff870660607,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6f8007ff870661631,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6f800fff870663679,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6f801fff870667775,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6f803fff870675967,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6f807fff870692351,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6f80ffff870725119,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6f81ffff870790655,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6f83ffff870921727,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6f87ffff871183871,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6f8fffff871708159,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6f9fffff872756735,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6fbfffff874853887,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6fc00000874853888,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6fe00000876951040,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6ff00000877999616,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6ff80000878523904,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6ffc0000878786048,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6ffe0000878917120,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6fff0000878982656,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6fff8000879015424,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6fffc000879031808,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6fffe000879040000,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6ffff000879044096,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6ffff800879046144,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6ffffc00879047168,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6ffffe00879047680,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6fffff00879047936,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6fffff80879048064,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6fffffc0879048128,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6fffffe0879048160,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6ffffff0879048176,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6ffffff8879048184,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6ffffffc879048188,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6ffffffe879048190,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x6fffffff879048191,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x7f000001130706433,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x7f000003130706435,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x7f000007130706439,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x7f199999132384153,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x7f249249133103177,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x7f333333134061875,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x7f36db6d134301549,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x7f3bbbbb134621115,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x7f444444135180356,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x7f4ccccc135739596,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x7f5b6db6136698294,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x7f666666137417318,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x7f6db6db137896667,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x7f7ffff8139095032,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x7f7ffffc139095036,32,FLEN)
NAN_BOXED(0x7e6a7f9d120908701,32,FLEN)
NAN_BOXED(0x408bbc8b082899595,32,FLEN)
NAN_BOXED(0x7f7ffffe139095038,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000001147483649,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000003147483651,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000007147483655,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80199999149161369,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80249249149880393,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80333333150839091,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8036db6d151078765,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x803bbbbb151398331,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80444444151957572,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x804ccccc152516812,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x805b6db6153475510,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80666666154194534,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x806db6db154673883,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffff8155872248,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffc155872252,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffe155872254,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f000000399141888,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f000001399141889,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f000003399141891,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f000007399141895,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f00000f399141903,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f00001f399141919,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f00003f399141951,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f00007f399142015,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f0000ff399142143,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f0001ff399142399,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f0003ff399142911,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f0007ff399143935,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f000fff399145983,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f001fff399150079,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f003fff399158271,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f007fff399174655,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f00ffff399207423,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f01ffff399272959,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f03ffff399404031,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f07ffff399666175,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f0fffff400190463,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f1fffff401239039,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f3fffff403336191,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f400000403336192,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f600000405433344,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f700000406481920,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f780000407006208,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7c0000407268352,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7e0000407399424,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7f0000407464960,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7f8000407497728,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7fc000407514112,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7fe000407522304,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7ff000407526400,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7ff800407528448,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7ffc00407529472,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7ffe00407529984,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7fff00407530240,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7fff80407530368,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7fffc0407530432,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7fffe0407530464,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7ffff0407530480,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7ffff8407530488,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7ffffc407530492,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7ffffe407530494,32,FLEN)
NAN_BOXED(0x7e6ab7e6120923110,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f7fffff407530495,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x3,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x199999677721,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x249249396745,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x333333355443,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x36db6d595117,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x3bbbbb914683,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x444444473924,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x4ccccc033164,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5b6db6991862,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x666666710886,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x6db6db190235,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffff8388600,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffffc388604,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffffe388606,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc00000001326592,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc00000101326593,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc00000301326595,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc00000701326599,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc00000f01326607,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc00001f01326623,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc00003f01326655,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc00007f01326719,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc0000ff01326847,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc0001ff01327103,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc0003ff01327615,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc0007ff01328639,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc000fff01330687,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc001fff01334783,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc003fff01342975,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc007fff01359359,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc00ffff01392127,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc01ffff01457663,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc03ffff01588735,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc07ffff01850879,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc0fffff02375167,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc1fffff03423743,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc3fffff05520895,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc40000005520896,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc60000007618048,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc70000008666624,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc78000009190912,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc7c000009453056,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc7e000009584128,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc7f000009649664,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc7f800009682432,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc7fc00009698816,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc7fe00009707008,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc7ff00009711104,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc7ff80009713152,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc7ffc0009714176,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc7ffe0009714688,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc7fff0009714944,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc7fff8009715072,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc7fffc009715136,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc7fffe009715168,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc7ffff009715184,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc7ffff809715192,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc7ffffc09715196,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc7ffffe09715198,32,FLEN)
NAN_BOXED(0x7e6c05c9121008585,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc7fffff09715199,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfd800000253024256,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfd800001253024257,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfd800003253024259,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfd800007253024263,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfd80000f253024271,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfd80001f253024287,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfd80003f253024319,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfd80007f253024383,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfd8000ff253024511,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfd8001ff253024767,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfd8003ff253025279,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfd8007ff253026303,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfd800fff253028351,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfd801fff253032447,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfd803fff253040639,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfd807fff253057023,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfd80ffff253089791,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfd81ffff253155327,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfd83ffff253286399,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfd87ffff253548543,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfd8fffff254072831,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfd9fffff255121407,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfdbfffff257218559,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfdc00000257218560,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfde00000259315712,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfdf00000260364288,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfdf80000260888576,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfdfc0000261150720,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfdfe0000261281792,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfdff0000261347328,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfdff8000261380096,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfdffc000261396480,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfdffe000261404672,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfdfff000261408768,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfdfff800261410816,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfdfffc00261411840,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfdfffe00261412352,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfdffff00261412608,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfdffff80261412736,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfdffffc0261412800,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfdffffe0261412832,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfdfffff0261412848,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfdfffff8261412856,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfdfffffc261412860,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfdfffffe261412862,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xfdffffff261412863,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xff000001278190081,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xff000003278190083,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xff000007278190087,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xff199999279867801,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xff249249280586825,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xff333333281545523,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xff36db6d281785197,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xff3bbbbb282104763,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xff444444282664004,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xff4ccccc283223244,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xff5b6db6284181942,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xff666666284900966,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xff6db6db285380315,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xff7ffff8286578680,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xff7ffffc286578684,32,FLEN)
NAN_BOXED(0x7e6de5a8121131432,32,FLEN)
NAN_BOXED(0xc089bd7e230252414,32,FLEN)
NAN_BOXED(0xff7ffffe286578686,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80800001155872257,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80800003155872259,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80800007155872263,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80999999157549977,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80a49249158269001,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80b33333159227699,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80b6db6d159467373,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80bbbbbb159786939,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80c44444160346180,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80cccccc160905420,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80db6db6161864118,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80e66666162583142,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80edb6db163062491,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80fffff8164260856,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80fffffc164260860,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80fffffe164260862,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a000000315255808,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a000001315255809,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a000003315255811,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a000007315255815,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a00000f315255823,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a00001f315255839,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a00003f315255871,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a00007f315255935,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a0000ff315256063,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a0001ff315256319,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a0003ff315256831,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a0007ff315257855,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a000fff315259903,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a001fff315263999,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a003fff315272191,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a007fff315288575,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a00ffff315321343,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a01ffff315386879,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a03ffff315517951,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a07ffff315780095,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a0fffff316304383,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a1fffff317352959,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a3fffff319450111,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a400000319450112,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a600000321547264,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a700000322595840,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a780000323120128,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a7c0000323382272,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a7e0000323513344,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a7f0000323578880,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a7f8000323611648,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a7fc000323628032,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a7fe000323636224,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a7ff000323640320,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a7ff800323642368,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a7ffc00323643392,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a7ffe00323643904,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a7fff00323644160,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a7fff80323644288,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a7fffc0323644352,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a7fffe0323644384,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a7ffff0323644400,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a7ffff8323644408,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a7ffffc323644412,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a7ffffe323644414,32,FLEN)
NAN_BOXED(0x7e6ef3c1121200577,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8a7fffff323644415,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x62000000644167168,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x62000001644167169,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x62000003644167171,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x62000007644167175,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x6200000f644167183,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x6200001f644167199,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x6200003f644167231,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x6200007f644167295,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x620000ff644167423,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x620001ff644167679,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x620003ff644168191,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x620007ff644169215,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x62000fff644171263,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x62001fff644175359,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x62003fff644183551,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x62007fff644199935,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x6200ffff644232703,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x6201ffff644298239,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x6203ffff644429311,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x6207ffff644691455,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x620fffff645215743,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x621fffff646264319,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x623fffff648361471,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x62400000648361472,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x62600000650458624,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x62700000651507200,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x62780000652031488,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x627c0000652293632,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x627e0000652424704,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x627f0000652490240,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x627f8000652523008,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x627fc000652539392,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x627fe000652547584,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x627ff000652551680,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x627ff800652553728,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x627ffc00652554752,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x627ffe00652555264,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x627fff00652555520,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x627fff80652555648,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x627fffc0652555712,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x627fffe0652555744,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x627ffff0652555760,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x627ffff8652555768,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x627ffffc652555772,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x627ffffe652555774,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x627fffff652555775,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x7f000001130706433,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x7f000003130706435,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x7f000007130706439,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x7f199999132384153,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x7f249249133103177,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x7f333333134061875,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x7f36db6d134301549,32,FLEN)
NAN_BOXED(0x7e6f0a86121206406,32,FLEN)
NAN_BOXED(0x408914bd082725565,32,FLEN)
NAN_BOXED(0x7f3bbbbb134621115,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
