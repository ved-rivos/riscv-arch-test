
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b16 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b16)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==f14, rs2==f12, rs3==f11, rd==f12,fs1 == 0 and fe1 == 0xf2 and fm1 == 0x3d4a9b and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0bc08b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f14; op2:f12; op3:f11; dest:f12; op1val:0x793d4a9b; op2val:0x7e0bc08b;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f12, f14, f12, f11, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 == rs2 == rs3 == rd, rs1==f7, rs2==f7, rs3==f7, rd==f7,fs1 == 0 and fe1 == 0xf5 and fm1 == 0x15d64c and fs2 == 0 and fe2 == 0xfc and fm2 == 0x13b197 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f7; op2:f7; op3:f7; dest:f7; op1val:0x7a95d64c; op2val:0x7a95d64c;
op3val:0x7a95d64c; valaddr_reg:x3; val_offset:3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f7, f7, f7, f7, dyn, 0, 0, x3, 3*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 == rd != rs3, rs1==f17, rs2==f17, rs3==f15, rd==f17,fs1 == 0 and fe1 == 0xf5 and fm1 == 0x67c20e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1df6e4 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f17; op2:f17; op3:f15; dest:f17; op1val:0x7ae7c20e; op2val:0x7ae7c20e;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f17, f17, f17, f15, dyn, 0, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_3:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==f31, rs2==f18, rs3==f3, rd==f14,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x0bf9e4 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x237008 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f31; op2:f18; op3:f3; dest:f14; op1val:0x7c8bf9e4; op2val:0x7ea37008;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f14, f31, f18, f3, dyn, 0, 0, x3, 9*FLEN/8, x4, x1, x2)

inst_4:
// rs1 == rs2 == rs3 != rd, rs1==f16, rs2==f16, rs3==f16, rd==f23,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x24066c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x73d707 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f16; op2:f16; op3:f16; dest:f23; op1val:0x7ca4066c; op2val:0x7ca4066c;
op3val:0x7ca4066c; valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f23, f16, f16, f16, dyn, 0, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_5:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==f29, rs2==f23, rs3==f1, rd==f29,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6d14ed and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f29; op2:f23; op3:f1; dest:f29; op1val:0x7cc777c1; op2val:0x7eed14ed;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f29, f29, f23, f1, dyn, 0, 0, x3, 15*FLEN/8, x4, x1, x2)

inst_6:
// rd == rs2 == rs3 != rs1, rs1==f9, rs2==f22, rs3==f22, rd==f22,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x59eac0 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x63e43a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f9; op2:f22; op3:f22; dest:f22; op1val:0x7cd9eac0; op2val:0x7de3e43a;
op3val:0x7de3e43a; valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f22, f9, f22, f22, dyn, 0, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_7:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==f3, rs2==f3, rs3==f6, rd==f27,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x71f159 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x1b03d8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f3; op2:f3; op3:f6; dest:f27; op1val:0x7cf1f159; op2val:0x7cf1f159;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f27, f3, f3, f6, dyn, 0, 0, x3, 21*FLEN/8, x4, x1, x2)

inst_8:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==f19, rs2==f14, rs3==f14, rd==f30,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79d5cb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x02c05a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f19; op2:f14; op3:f14; dest:f30; op1val:0x7cf9d5cb; op2val:0x7f02c05a;
op3val:0x7f02c05a; valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f30, f19, f14, f14, dyn, 0, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_9:
// rs1 == rd == rs3 != rs2, rs1==f25, rs2==f28, rs3==f25, rd==f25,fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7d26a2 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7bb095 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f25; op2:f28; op3:f25; dest:f25; op1val:0x7cfd26a2; op2val:0x7dfbb095;
op3val:0x7cfd26a2; valaddr_reg:x3; val_offset:27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f25, f25, f28, f25, dyn, 0, 0, x3, 27*FLEN/8, x4, x1, x2)

inst_10:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==f5, rs2==f31, rs3==f5, rd==f6,fs1 == 0 and fe1 == 0xfa and fm1 == 0x0109b4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0fd579 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f5; op2:f31; op3:f5; dest:f6; op1val:0x7d0109b4; op2val:0x7f0fd579;
op3val:0x7d0109b4; valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f6, f5, f31, f5, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_11:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==f6, rs2==f5, rs3==f24, rd==f24,fs1 == 0 and fe1 == 0xfa and fm1 == 0x0155e8 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x360231 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f6; op2:f5; op3:f24; dest:f24; op1val:0x7d0155e8; op2val:0x7f360231;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f24, f6, f5, f24, dyn, 0, 0, x3, 33*FLEN/8, x4, x1, x2)

inst_12:
// rs1==f30, rs2==f26, rs3==f21, rd==f1,fs1 == 0 and fe1 == 0xfa and fm1 == 0x107c30 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x34d24a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f26; op3:f21; dest:f1; op1val:0x7d107c30; op2val:0x7eb4d24a;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f1, f30, f26, f21, dyn, 0, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_13:
// rs1==f1, rs2==f8, rs3==f13, rd==f26,fs1 == 0 and fe1 == 0xfa and fm1 == 0x143e58 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x09ec35 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f1; op2:f8; op3:f13; dest:f26; op1val:0x7d143e58; op2val:0x7e09ec35;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f26, f1, f8, f13, dyn, 0, 0, x3, 39*FLEN/8, x4, x1, x2)

inst_14:
// rs1==f22, rs2==f19, rs3==f29, rd==f21,fs1 == 0 and fe1 == 0xfa and fm1 == 0x2a943e and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x5cc707 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f22; op2:f19; op3:f29; dest:f21; op1val:0x7d2a943e; op2val:0x7cdcc707;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f21, f22, f19, f29, dyn, 0, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_15:
// rs1==f20, rs2==f4, rs3==f12, rd==f28,fs1 == 0 and fe1 == 0xfa and fm1 == 0x3bdf28 and fs2 == 0 and fe2 == 0xf7 and fm2 == 0x40f240 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f20; op2:f4; op3:f12; dest:f28; op1val:0x7d3bdf28; op2val:0x7bc0f240;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f28, f20, f4, f12, dyn, 0, 0, x3, 45*FLEN/8, x4, x1, x2)

inst_16:
// rs1==f26, rs2==f13, rs3==f4, rd==f8,fs1 == 0 and fe1 == 0xfa and fm1 == 0x442bee and fs2 == 0 and fe2 == 0xfe and fm2 == 0x25cea1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f26; op2:f13; op3:f4; dest:f8; op1val:0x7d442bee; op2val:0x7f25cea1;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f8, f26, f13, f4, dyn, 0, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_17:
// rs1==f0, rs2==f24, rs3==f20, rd==f10,fs1 == 0 and fe1 == 0xfa and fm1 == 0x4a3e7e and fs2 == 0 and fe2 == 0xfb and fm2 == 0x020d6d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f0; op2:f24; op3:f20; dest:f10; op1val:0x7d4a3e7e; op2val:0x7d820d6d;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f10, f0, f24, f20, dyn, 0, 0, x3, 51*FLEN/8, x4, x1, x2)

inst_18:
// rs1==f12, rs2==f25, rs3==f0, rd==f11,fs1 == 0 and fe1 == 0xfa and fm1 == 0x580d57 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x09f409 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f12; op2:f25; op3:f0; dest:f11; op1val:0x7d580d57; op2val:0x7e89f409;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f11, f12, f25, f0, dyn, 0, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_19:
// rs1==f23, rs2==f27, rs3==f30, rd==f9,fs1 == 0 and fe1 == 0xfa and fm1 == 0x59b0d6 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1ad123 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f23; op2:f27; op3:f30; dest:f9; op1val:0x7d59b0d6; op2val:0x7e9ad123;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f9, f23, f27, f30, dyn, 0, 0, x3, 57*FLEN/8, x4, x1, x2)

inst_20:
// rs1==f21, rs2==f1, rs3==f27, rd==f13,fs1 == 0 and fe1 == 0xfa and fm1 == 0x60e796 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x215e74 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f21; op2:f1; op3:f27; dest:f13; op1val:0x7d60e796; op2val:0x7ea15e74;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f13, f21, f1, f27, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_21:
// rs1==f2, rs2==f29, rs3==f10, rd==f5,fs1 == 0 and fe1 == 0xfa and fm1 == 0x677175 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x092308 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f2; op2:f29; op3:f10; dest:f5; op1val:0x7d677175; op2val:0x7d092308;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f5, f2, f29, f10, dyn, 0, 0, x3, 63*FLEN/8, x4, x1, x2)

inst_22:
// rs1==f8, rs2==f6, rs3==f2, rd==f3,fs1 == 0 and fe1 == 0xfa and fm1 == 0x79e4a2 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x52faef and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f8; op2:f6; op3:f2; dest:f3; op1val:0x7d79e4a2; op2val:0x7e52faef;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f3, f8, f6, f2, dyn, 0, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_23:
// rs1==f27, rs2==f15, rs3==f28, rd==f18,fs1 == 0 and fe1 == 0xfb and fm1 == 0x020308 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x26d3f0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f27; op2:f15; op3:f28; dest:f18; op1val:0x7d820308; op2val:0x7f26d3f0;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f18, f27, f15, f28, dyn, 0, 0, x3, 69*FLEN/8, x4, x1, x2)

inst_24:
// rs1==f10, rs2==f20, rs3==f18, rd==f19,fs1 == 0 and fe1 == 0xfb and fm1 == 0x09f85f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1175bf and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f10; op2:f20; op3:f18; dest:f19; op1val:0x7d89f85f; op2val:0x7f1175bf;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f19, f10, f20, f18, dyn, 0, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_25:
// rs1==f24, rs2==f10, rs3==f8, rd==f0,fs1 == 0 and fe1 == 0xfb and fm1 == 0x0f9457 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1d52dc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f24; op2:f10; op3:f8; dest:f0; op1val:0x7d8f9457; op2val:0x7f1d52dc;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f0, f24, f10, f8, dyn, 0, 0, x3, 75*FLEN/8, x4, x1, x2)

inst_26:
// rs1==f18, rs2==f21, rs3==f31, rd==f4,fs1 == 0 and fe1 == 0xfb and fm1 == 0x16325d and fs2 == 0 and fe2 == 0xfb and fm2 == 0x36a2e9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f18; op2:f21; op3:f31; dest:f4; op1val:0x7d96325d; op2val:0x7db6a2e9;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f4, f18, f21, f31, dyn, 0, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_27:
// rs1==f15, rs2==f11, rs3==f9, rd==f31,fs1 == 0 and fe1 == 0xfb and fm1 == 0x19e0a5 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x23f4c3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f15; op2:f11; op3:f9; dest:f31; op1val:0x7d99e0a5; op2val:0x7f23f4c3;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f15, f11, f9, dyn, 0, 0, x3, 81*FLEN/8, x4, x1, x2)

inst_28:
// rs1==f13, rs2==f30, rs3==f19, rd==f16,fs1 == 0 and fe1 == 0xfb and fm1 == 0x1d9044 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5f0bd0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f13; op2:f30; op3:f19; dest:f16; op1val:0x7d9d9044; op2val:0x7edf0bd0;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f16, f13, f30, f19, dyn, 0, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_29:
// rs1==f28, rs2==f2, rs3==f26, rd==f15,fs1 == 0 and fe1 == 0xfb and fm1 == 0x21bad2 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x52df06 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f28; op2:f2; op3:f26; dest:f15; op1val:0x7da1bad2; op2val:0x7ed2df06;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f15, f28, f2, f26, dyn, 0, 0, x3, 87*FLEN/8, x4, x1, x2)

inst_30:
// rs1==f11, rs2==f9, rs3==f23, rd==f20,fs1 == 0 and fe1 == 0xfb and fm1 == 0x36a56c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x18d06d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f11; op2:f9; op3:f23; dest:f20; op1val:0x7db6a56c; op2val:0x7e98d06d;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f20, f11, f9, f23, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_31:
// rs1==f4, rs2==f0, rs3==f17, rd==f2,fs1 == 0 and fe1 == 0xfb and fm1 == 0x433d56 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2f0ff8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f4; op2:f0; op3:f17; dest:f2; op1val:0x7dc33d56; op2val:0x7f2f0ff8;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f2, f4, f0, f17, dyn, 0, 0, x3, 93*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x439094 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x5c7bdc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dc39094; op2val:0x7e5c7bdc;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x4b1c72 and fs2 == 0 and fe2 == 0xf8 and fm2 == 0x7c8383 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7dcb1c72; op2val:0x7c7c8383;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 99*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x60ccec and fs2 == 0 and fe2 == 0xfc and fm2 == 0x180a7e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de0ccec; op2val:0x7e180a7e;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x649633 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7befa5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de49633; op2val:0x7efbefa5;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 105*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x67f8b9 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x000760 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7de7f8b9; op2val:0x7e800760;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0xfb and fm1 == 0x6ff4a3 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x079bc3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7deff4a3; op2val:0x7f079bc3;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 111*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x0642e8 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x351aa9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e0642e8; op2val:0x7eb51aa9;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x113ff8 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x162a78 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e113ff8; op2val:0x7f162a78;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 117*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x191af1 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x09af6b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e191af1; op2val:0x7e89af6b;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1c653b and fs2 == 0 and fe2 == 0xf5 and fm2 == 0x3530a7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1c653b; op2val:0x7ab530a7;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 123*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1f9fcf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6174c8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1f9fcf; op2val:0x7ee174c8;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x1fba25 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1d4781 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e1fba25; op2val:0x7e1d4781;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 129*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x21b906 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x19be4b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e21b906; op2val:0x7f19be4b;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x29504d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x188f57 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e29504d; op2val:0x7f188f57;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 135*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x2cde9f and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x79a4a6 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e2cde9f; op2val:0x7cf9a4a6;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 0 and fe2 == 0xfe and fm2 == 0x39c489 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x7f39c489;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 141*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x37df17 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x74c2e8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e37df17; op2val:0x7ef4c2e8;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x386b8e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x370036 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e386b8e; op2val:0x7f370036;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 147*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3aa6be and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0c7228 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3aa6be; op2val:0x7f0c7228;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x40638c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2eabd8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e40638c; op2val:0x7f2eabd8;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 153*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x408722 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x652afa and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e408722; op2val:0x7ee52afa;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x436cc0 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x499654 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e436cc0; op2val:0x7d499654;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 159*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x46d91a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x445459 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e46d91a; op2val:0x7ec45459;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x471615 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7234e1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e471615; op2val:0x7df234e1;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 165*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x479e53 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x2998cc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e479e53; op2val:0x7e2998cc;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x54b690 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x56577b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e54b690; op2val:0x7ed6577b;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 171*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x587392 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x111d49 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e587392; op2val:0x7f111d49;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5d1719 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x09eee9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5d1719; op2val:0x7e89eee9;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 177*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5e5c14 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1799a1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5e5c14; op2val:0x7e9799a1;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5ef919 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1173d9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5ef919; op2val:0x7e1173d9;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 183*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x5f88a0 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x213294 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e5f88a0; op2val:0x7ea13294;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x60bdc9 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x33eda8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e60bdc9; op2val:0x7f33eda8;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 189*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x615629 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3793aa and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e615629; op2val:0x7eb793aa;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x6a7ab2 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x2e4058 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e6a7ab2; op2val:0x7dae4058;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 195*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x729ac7 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3a8006 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e729ac7; op2val:0x7e3a8006;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x72d2f3 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x23fca7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e72d2f3; op2val:0x7e23fca7;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 201*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x76467b and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1caa1e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e76467b; op2val:0x7e1caa1e;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x00fdf0 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x0c612e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e80fdf0; op2val:0x7d0c612e;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 207*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x03f653 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x37f81e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e83f653; op2val:0x7eb7f81e;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0444c5 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x382932 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8444c5; op2val:0x7f382932;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 213*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0595c5 and fs2 == 0 and fe2 == 0xf7 and fm2 == 0x74e195 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8595c5; op2val:0x7bf4e195;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x06834b and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0a7bf0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e86834b; op2val:0x7e0a7bf0;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 219*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x092570 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x20d4b8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e892570; op2val:0x7f20d4b8;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0d7074 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3dc8bc and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8d7074; op2val:0x7f3dc8bc;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 225*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0dbef7 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x17731e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8dbef7; op2val:0x7c97731e;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x0dcb58 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3631e6 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e8dcb58; op2val:0x7f3631e6;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 231*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x10382a and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3b1d98 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e90382a; op2val:0x7f3b1d98;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x133b22 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x151296 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e933b22; op2val:0x7f151296;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 237*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x14ffa5 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1f22f1 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e94ffa5; op2val:0x7e9f22f1;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1a7876 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x06c054 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9a7876; op2val:0x7f06c054;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 243*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1ce997 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2036ee and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9ce997; op2val:0x7ea036ee;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1de0b9 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6aeb85 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9de0b9; op2val:0x7eeaeb85;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 249*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f40ca and fs2 == 0 and fe2 == 0xfb and fm2 == 0x18adcd and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f40ca; op2val:0x7d98adcd;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x1f9b30 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x186358 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e9f9b30; op2val:0x7d986358;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 255*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x23ca20 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x67dc90 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ea3ca20; op2val:0x7e67dc90;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2c0532 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x772129 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eac0532; op2val:0x7d772129;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 261*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x2e1fa7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x33ec90 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eae1fa7; op2val:0x7f33ec90;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x31933e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x74b97b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb1933e; op2val:0x7ef4b97b;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 267*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x33495f and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1b5638 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb3495f; op2val:0x7f1b5638;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x34d220 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x367396 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb4d220; op2val:0x7f367396;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 273*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x354d84 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x1aad53 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb54d84; op2val:0x7d9aad53;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x36048d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x217160 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb6048d; op2val:0x7f217160;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 279*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x372bf7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2623b6 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb72bf7; op2val:0x7f2623b6;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2d0175 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x7f2d0175;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 285*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3acb68 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x71fa00 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebacb68; op2val:0x7ef1fa00;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 288*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b1c27 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x579458 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb1c27; op2val:0x7ed79458;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 291*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x25c228 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x7f25c228;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 294*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3f7af3 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x00a730 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebf7af3; op2val:0x7f00a730;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 297*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x41eb7c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2d0265 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec1eb7c; op2val:0x7f2d0265;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 300*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x430c98 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x331aa5 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec30c98; op2val:0x7f331aa5;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 303*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x474c23 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2c3db2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec74c23; op2val:0x7eac3db2;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 306*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x480329 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x79e697 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ec80329; op2val:0x7ef9e697;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 309*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x51d071 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x687317 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed1d071; op2val:0x7de87317;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 312*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x53afc5 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x07a8e7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed3afc5; op2val:0x7f07a8e7;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 315*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x57453d and fs2 == 0 and fe2 == 0xf8 and fm2 == 0x18d146 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed7453d; op2val:0x7c18d146;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 318*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x595956 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x31316c and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ed95956; op2val:0x7f31316c;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 321*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5a8a0e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x434d6c and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eda8a0e; op2val:0x7ec34d6c;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 324*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5c5df5 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x024923 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edc5df5; op2val:0x7f024923;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 327*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x5d2a79 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x163972 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7edd2a79; op2val:0x7e963972;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 330*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6004c9 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2e5b90 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee004c9; op2val:0x7f2e5b90;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 333*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6098e5 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x026d14 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee098e5; op2val:0x7f026d14;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 336*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x64f961 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x13cd52 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee4f961; op2val:0x7e93cd52;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 339*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x65de2c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1e88a3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee5de2c; op2val:0x7f1e88a3;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 342*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x679f8e and fs2 == 0 and fe2 == 0xfd and fm2 == 0x61a51b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ee79f8e; op2val:0x7ee1a51b;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 345*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a26e3 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x28048a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea26e3; op2val:0x7e28048a;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 348*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6a94a1 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2f4c51 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eea94a1; op2val:0x7f2f4c51;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 351*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6b4e0d and fs2 == 0 and fe2 == 0xfd and fm2 == 0x7c283d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eeb4e0d; op2val:0x7efc283d;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 354*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x6d982c and fs2 == 0 and fe2 == 0xf7 and fm2 == 0x3f1e72 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eed982c; op2val:0x7bbf1e72;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 357*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x72cedb and fs2 == 0 and fe2 == 0xfd and fm2 == 0x01bd84 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef2cedb; op2val:0x7e81bd84;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 360*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x731b27 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x003494 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef31b27; op2val:0x7d803494;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 363*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x735bf2 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6e7e55 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef35bf2; op2val:0x7eee7e55;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 366*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74310e and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0d58d3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4310e; op2val:0x7e0d58d3;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 369*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x74984e and fs2 == 0 and fe2 == 0xfb and fm2 == 0x01e0a6 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef4984e; op2val:0x7d81e0a6;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 372*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x75d070 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0f0540 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ef5d070; op2val:0x7e8f0540;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 375*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ba8b0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x08c5cd and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efba8b0; op2val:0x7f08c5cd;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 378*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7d88c2 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3f4810 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efd88c2; op2val:0x7f3f4810;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 381*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7e4880 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x0fb50a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efe4880; op2val:0x7d0fb50a;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 384*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x7ff0b5 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5b91e9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7efff0b5; op2val:0x7edb91e9;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 387*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x004910 and fs2 == 0 and fe2 == 0xf4 and fm2 == 0x60affa and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f004910; op2val:0x7a60affa;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 390*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0125a0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3993cf and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0125a0; op2val:0x7f3993cf;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 393*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x015206 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x688296 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f015206; op2val:0x7de88296;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 396*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x01d4ab and fs2 == 0 and fe2 == 0xfe and fm2 == 0x22524e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f01d4ab; op2val:0x7f22524e;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 399*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0235d7 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x11efef and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0235d7; op2val:0x7f11efef;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 402*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x028be4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x288293 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f028be4; op2val:0x7f288293;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 405*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6edcc4 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x7eeedcc4;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 408*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x03cad2 and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x39250d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f03cad2; op2val:0x7cb9250d;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 411*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f3e7 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x0af584 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f3e7; op2val:0x7d0af584;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 414*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x076a16 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x53afdf and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f076a16; op2val:0x7e53afdf;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 417*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09e19b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1af462 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09e19b; op2val:0x7f1af462;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 420*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x09f3ae and fs2 == 0 and fe2 == 0xfd and fm2 == 0x01e3e9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f09f3ae; op2val:0x7e81e3e9;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 423*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0a2eec and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1925f2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0a2eec; op2val:0x7e9925f2;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 426*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0c20b0 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2c93b2 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0c20b0; op2val:0x7f2c93b2;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 429*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0cfb4b and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x3ca040 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0cfb4b; op2val:0x7cbca040;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 432*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0e3fac and fs2 == 0 and fe2 == 0xfb and fm2 == 0x5a8c22 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0e3fac; op2val:0x7dda8c22;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 435*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x114532 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2ee68b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f114532; op2val:0x7eaee68b;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 438*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1181a9 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3e2ea7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1181a9; op2val:0x7f3e2ea7;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 441*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x124d93 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x571b9d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f124d93; op2val:0x7e571b9d;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 444*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x136313 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x25c774 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f136313; op2val:0x7ea5c774;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 447*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1393e8 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x718162 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1393e8; op2val:0x7ef18162;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 450*FLEN/8, x4, x1, x2)

inst_151:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x153406 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2596bf and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f153406; op2val:0x7ea596bf;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 453*FLEN/8, x4, x1, x2)

inst_152:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x15a4db and fs2 == 0 and fe2 == 0xfe and fm2 == 0x061cca and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f15a4db; op2val:0x7f061cca;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 456*FLEN/8, x4, x1, x2)

inst_153:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x167d44 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x68f1b4 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f167d44; op2val:0x7e68f1b4;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 459*FLEN/8, x4, x1, x2)

inst_154:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x168f5a and fs2 == 0 and fe2 == 0xfe and fm2 == 0x21ba5d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f168f5a; op2val:0x7f21ba5d;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 462*FLEN/8, x4, x1, x2)

inst_155:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x17e134 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1535df and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f17e134; op2val:0x7e9535df;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 465*FLEN/8, x4, x1, x2)

inst_156:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18212b and fs2 == 0 and fe2 == 0xfe and fm2 == 0x25618f and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18212b; op2val:0x7f25618f;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 468*FLEN/8, x4, x1, x2)

inst_157:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x185183 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x7d0cc0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f185183; op2val:0x7d7d0cc0;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 471*FLEN/8, x4, x1, x2)

inst_158:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x18c423 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2b53bd and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f18c423; op2val:0x7eab53bd;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 474*FLEN/8, x4, x1, x2)

inst_159:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1a90b9 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x52b355 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1a90b9; op2val:0x7ed2b355;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 477*FLEN/8, x4, x1, x2)

inst_160:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b86f6 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x3f4247 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b86f6; op2val:0x7d3f4247;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 480*FLEN/8, x4, x1, x2)

inst_161:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b8fcb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2d3742 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b8fcb; op2val:0x7f2d3742;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 483*FLEN/8, x4, x1, x2)

inst_162:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1b9172 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x474c7e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1b9172; op2val:0x7ec74c7e;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 486*FLEN/8, x4, x1, x2)

inst_163:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1bfbd1 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x10628e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1bfbd1; op2val:0x7e10628e;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 489*FLEN/8, x4, x1, x2)

inst_164:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1c60ac and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4f7809 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1c60ac; op2val:0x7ecf7809;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 492*FLEN/8, x4, x1, x2)

inst_165:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1ca7c2 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x1a887c and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1ca7c2; op2val:0x7d9a887c;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 495*FLEN/8, x4, x1, x2)

inst_166:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x1d3fd0 and fs2 == 0 and fe2 == 0xfa and fm2 == 0x58a14d and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f1d3fd0; op2val:0x7d58a14d;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 498*FLEN/8, x4, x1, x2)

inst_167:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x20f56c and fs2 == 0 and fe2 == 0xfe and fm2 == 0x30593a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f20f56c; op2val:0x7f30593a;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 501*FLEN/8, x4, x1, x2)

inst_168:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x220a0f and fs2 == 0 and fe2 == 0xfc and fm2 == 0x7de57e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f220a0f; op2val:0x7e7de57e;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 504*FLEN/8, x4, x1, x2)

inst_169:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x222105 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1186f9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f222105; op2val:0x7f1186f9;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 507*FLEN/8, x4, x1, x2)

inst_170:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2319ee and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2bd8f4 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2319ee; op2val:0x7f2bd8f4;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 510*FLEN/8, x4, x1, x2)

inst_171:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2373e9 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x193a37 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2373e9; op2val:0x7f193a37;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 513*FLEN/8, x4, x1, x2)

inst_172:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x24f632 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0f9c10 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f24f632; op2val:0x7e0f9c10;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 516*FLEN/8, x4, x1, x2)

inst_173:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x269468 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x3b52d3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f269468; op2val:0x7e3b52d3;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 519*FLEN/8, x4, x1, x2)

inst_174:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x272166 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x12bd51 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f272166; op2val:0x7e12bd51;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 522*FLEN/8, x4, x1, x2)

inst_175:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2765d9 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x55d198 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2765d9; op2val:0x7e55d198;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 525*FLEN/8, x4, x1, x2)

inst_176:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x27bdd4 and fs2 == 0 and fe2 == 0xfc and fm2 == 0x5706d8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f27bdd4; op2val:0x7e5706d8;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 528*FLEN/8, x4, x1, x2)

inst_177:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2814cf and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5a2b8e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2814cf; op2val:0x7eda2b8e;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 531*FLEN/8, x4, x1, x2)

inst_178:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x293481 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6a4935 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f293481; op2val:0x7eea4935;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 534*FLEN/8, x4, x1, x2)

inst_179:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x29b43a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x3deb73 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f29b43a; op2val:0x7ebdeb73;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 537*FLEN/8, x4, x1, x2)

inst_180:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2bb989 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x30948b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2bb989; op2val:0x7f30948b;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 540*FLEN/8, x4, x1, x2)

inst_181:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2c5a89 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x3591fb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2c5a89; op2val:0x7f3591fb;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 543*FLEN/8, x4, x1, x2)

inst_182:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2d60c7 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x2d6b3e and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2d60c7; op2val:0x7ead6b3e;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 546*FLEN/8, x4, x1, x2)

inst_183:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2de8ee and fs2 == 0 and fe2 == 0xfc and fm2 == 0x1e49db and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2de8ee; op2val:0x7e1e49db;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 549*FLEN/8, x4, x1, x2)

inst_184:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x2eb91a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4d21cb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f2eb91a; op2val:0x7ecd21cb;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 552*FLEN/8, x4, x1, x2)

inst_185:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x300ad9 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2786d3 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f300ad9; op2val:0x7f2786d3;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 555*FLEN/8, x4, x1, x2)

inst_186:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3012ad and fs2 == 0 and fe2 == 0xfc and fm2 == 0x77a646 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3012ad; op2val:0x7e77a646;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 558*FLEN/8, x4, x1, x2)

inst_187:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x313b58 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x4f9722 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f313b58; op2val:0x7ecf9722;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 561*FLEN/8, x4, x1, x2)

inst_188:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x314a05 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x21c09a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f314a05; op2val:0x7f21c09a;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 564*FLEN/8, x4, x1, x2)

inst_189:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x342577 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x3d3789 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f342577; op2val:0x7dbd3789;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 567*FLEN/8, x4, x1, x2)

inst_190:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x350bba and fs2 == 0 and fe2 == 0xfc and fm2 == 0x688ddb and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f350bba; op2val:0x7e688ddb;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 570*FLEN/8, x4, x1, x2)

inst_191:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x35ba7d and fs2 == 0 and fe2 == 0xfe and fm2 == 0x342e24 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f35ba7d; op2val:0x7f342e24;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 573*FLEN/8, x4, x1, x2)

inst_192:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x365ad7 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x5e9a56 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f365ad7; op2val:0x7ede9a56;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 576*FLEN/8, x4, x1, x2)

inst_193:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38849b and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0e0ef6 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38849b; op2val:0x7e0e0ef6;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 579*FLEN/8, x4, x1, x2)

inst_194:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38c024 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0aba6b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38c024; op2val:0x7f0aba6b;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 582*FLEN/8, x4, x1, x2)

inst_195:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x38d010 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x2c9c0a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f38d010; op2val:0x7f2c9c0a;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 585*FLEN/8, x4, x1, x2)

inst_196:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x39925a and fs2 == 0 and fe2 == 0xfd and fm2 == 0x0b19a0 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f39925a; op2val:0x7e8b19a0;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 588*FLEN/8, x4, x1, x2)

inst_197:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3c425a and fs2 == 0 and fe2 == 0xf9 and fm2 == 0x5f97b9 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3c425a; op2val:0x7cdf97b9;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 591*FLEN/8, x4, x1, x2)

inst_198:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3cbbe2 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x63f20b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3cbbe2; op2val:0x7de3f20b;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 594*FLEN/8, x4, x1, x2)

inst_199:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x3d783f and fs2 == 0 and fe2 == 0xfd and fm2 == 0x1a4c33 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f3d783f; op2val:0x7e9a4c33;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 597*FLEN/8, x4, x1, x2)

inst_200:
// fs1 == 0 and fe1 == 0xf2 and fm1 == 0x3d4a9b and fs2 == 0 and fe2 == 0xfc and fm2 == 0x0bc08b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x793d4a9b; op2val:0x7e0bc08b;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 600*FLEN/8, x4, x1, x2)

inst_201:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x15d64c and fs2 == 0 and fe2 == 0xfc and fm2 == 0x13b197 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7a95d64c; op2val:0x7e13b197;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 603*FLEN/8, x4, x1, x2)

inst_202:
// fs1 == 0 and fe1 == 0xf5 and fm1 == 0x67c20e and fs2 == 0 and fe2 == 0xfe and fm2 == 0x1df6e4 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ae7c20e; op2val:0x7f1df6e4;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 606*FLEN/8, x4, x1, x2)

inst_203:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x24066c and fs2 == 0 and fe2 == 0xfd and fm2 == 0x73d707 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ca4066c; op2val:0x7ef3d707;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 609*FLEN/8, x4, x1, x2)

inst_204:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x4777c1 and fs2 == 0 and fe2 == 0xfd and fm2 == 0x6d14ed and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cc777c1; op2val:0x7eed14ed;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 612*FLEN/8, x4, x1, x2)

inst_205:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x59eac0 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x63e43a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cd9eac0; op2val:0x7de3e43a;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 615*FLEN/8, x4, x1, x2)

inst_206:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x71f159 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x1b03d8 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf1f159; op2val:0x7d9b03d8;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 618*FLEN/8, x4, x1, x2)

inst_207:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x79d5cb and fs2 == 0 and fe2 == 0xfe and fm2 == 0x02c05a and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cf9d5cb; op2val:0x7f02c05a;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 621*FLEN/8, x4, x1, x2)

inst_208:
// fs1 == 0 and fe1 == 0xf9 and fm1 == 0x7d26a2 and fs2 == 0 and fe2 == 0xfb and fm2 == 0x7bb095 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7cfd26a2; op2val:0x7dfbb095;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 624*FLEN/8, x4, x1, x2)

inst_209:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0109b4 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x0fd579 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0109b4; op2val:0x7f0fd579;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 627*FLEN/8, x4, x1, x2)

inst_210:
// fs1 == 0 and fe1 == 0xfa and fm1 == 0x0155e8 and fs2 == 0 and fe2 == 0xfe and fm2 == 0x360231 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7d0155e8; op2val:0x7f360231;
op3val:0xff7fffff; valaddr_reg:x3; val_offset:630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 630*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(0x793d4a9b034059931,32,FLEN)
NAN_BOXED(0x7e0bc08b114699403,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7a95d64c056640076,32,FLEN)
NAN_BOXED(0x7a95d64c056640076,32,FLEN)
NAN_BOXED(0x7a95d64c056640076,32,FLEN)
NAN_BOXED(0x7ae7c20e062008846,32,FLEN)
NAN_BOXED(0x7ae7c20e062008846,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7c8bf9e4089548260,32,FLEN)
NAN_BOXED(0x7ea37008124640264,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7ca4066c091124332,32,FLEN)
NAN_BOXED(0x7ca4066c091124332,32,FLEN)
NAN_BOXED(0x7ca4066c091124332,32,FLEN)
NAN_BOXED(0x7cc777c1093447105,32,FLEN)
NAN_BOXED(0x7eed14ed129466605,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7cd9eac0094656192,32,FLEN)
NAN_BOXED(0x7de3e43a112087098,32,FLEN)
NAN_BOXED(0x7de3e43a112087098,32,FLEN)
NAN_BOXED(0x7cf1f159096230745,32,FLEN)
NAN_BOXED(0x7cf1f159096230745,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7cf9d5cb096747979,32,FLEN)
NAN_BOXED(0x7f02c05a130886746,32,FLEN)
NAN_BOXED(0x7f02c05a130886746,32,FLEN)
NAN_BOXED(0x7cfd26a2096965282,32,FLEN)
NAN_BOXED(0x7dfbb095113646741,32,FLEN)
NAN_BOXED(0x7cfd26a2096965282,32,FLEN)
NAN_BOXED(0x7d0109b4097220020,32,FLEN)
NAN_BOXED(0x7f0fd579131744121,32,FLEN)
NAN_BOXED(0x7d0109b4097220020,32,FLEN)
NAN_BOXED(0x7d0155e8097239528,32,FLEN)
NAN_BOXED(0x7f360231134245937,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7d107c30098232368,32,FLEN)
NAN_BOXED(0x7eb4d24a125779530,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7d143e58098478680,32,FLEN)
NAN_BOXED(0x7e09ec35114579509,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7d2a943e099942462,32,FLEN)
NAN_BOXED(0x7cdcc707094843655,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7d3bdf28101075752,32,FLEN)
NAN_BOXED(0x7bc0f240076242496,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7d442bee101619694,32,FLEN)
NAN_BOXED(0x7f25cea1133184161,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7d4a3e7e102017662,32,FLEN)
NAN_BOXED(0x7d820d6d105675117,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7d580d57102922583,32,FLEN)
NAN_BOXED(0x7e89f409122970121,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7d59b0d6103029974,32,FLEN)
NAN_BOXED(0x7e9ad123124075299,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7d60e796103502742,32,FLEN)
NAN_BOXED(0x7ea15e74124504692,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7d677175103931253,32,FLEN)
NAN_BOXED(0x7d092308097750792,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7d79e4a2105140386,32,FLEN)
NAN_BOXED(0x7e52faef119367407,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7d820308105672456,32,FLEN)
NAN_BOXED(0x7f26d3f0133251056,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7d89f85f106194015,32,FLEN)
NAN_BOXED(0x7f1175bf131850687,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7d8f9457106561623,32,FLEN)
NAN_BOXED(0x7f1d52dc132628188,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7d96325d106995293,32,FLEN)
NAN_BOXED(0x7db6a2e9109121257,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7d99e0a5107236517,32,FLEN)
NAN_BOXED(0x7f23f4c3133062851,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7d9d9044107478084,32,FLEN)
NAN_BOXED(0x7edf0bd0128546768,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7da1bad2107751122,32,FLEN)
NAN_BOXED(0x7ed2df06127748870,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7db6a56c109121900,32,FLEN)
NAN_BOXED(0x7e98d06d123944045,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7dc33d56109947222,32,FLEN)
NAN_BOXED(0x7f2f0ff8133790712,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7dc39094109968532,32,FLEN)
NAN_BOXED(0x7e5c7bdc119990236,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7dcb1c72110463090,32,FLEN)
NAN_BOXED(0x7c7c8383088534915,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7de0ccec111884524,32,FLEN)
NAN_BOXED(0x7e180a7e115504766,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7de49633112132659,32,FLEN)
NAN_BOXED(0x7efbefa5130440101,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7de7f8b9112354489,32,FLEN)
NAN_BOXED(0x7e800760122319712,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7deff4a3112877731,32,FLEN)
NAN_BOXED(0x7f079bc3131205059,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e0642e8114339560,32,FLEN)
NAN_BOXED(0x7eb51aa9125798057,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e113ff8115059704,32,FLEN)
NAN_BOXED(0x7f162a78132159096,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e191af1115574513,32,FLEN)
NAN_BOXED(0x7e89af6b122952555,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e1c653b115790139,32,FLEN)
NAN_BOXED(0x7ab530a7058694823,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e1f9fcf116001743,32,FLEN)
NAN_BOXED(0x7ee174c8128704712,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e1fba25116008485,32,FLEN)
NAN_BOXED(0x7e1d4781115848065,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e21b906116139270,32,FLEN)
NAN_BOXED(0x7f19be4b132393547,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e29504d116636749,32,FLEN)
NAN_BOXED(0x7f188f57132315991,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e2cde9f116869791,32,FLEN)
NAN_BOXED(0x7cf9a4a6096735398,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x7f39c489134492297,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e37df17117590807,32,FLEN)
NAN_BOXED(0x7ef4c2e8129969896,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e386b8e117626766,32,FLEN)
NAN_BOXED(0x7f370036134310966,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e3aa6be117772990,32,FLEN)
NAN_BOXED(0x7f0c7228131522088,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e40638c118149004,32,FLEN)
NAN_BOXED(0x7f2eabd8133765080,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e408722118158114,32,FLEN)
NAN_BOXED(0x7ee52afa128947962,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e436cc0118347968,32,FLEN)
NAN_BOXED(0x7d499654101974612,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e46d91a118572314,32,FLEN)
NAN_BOXED(0x7ec45459126795865,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e471615118587925,32,FLEN)
NAN_BOXED(0x7df234e1113025249,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e479e53118622803,32,FLEN)
NAN_BOXED(0x7e2998cc116655308,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e54b690119480976,32,FLEN)
NAN_BOXED(0x7ed6577b127976315,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e587392119725970,32,FLEN)
NAN_BOXED(0x7f111d49131828041,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e5d1719120029977,32,FLEN)
NAN_BOXED(0x7e89eee9122968809,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e5e5c14120113172,32,FLEN)
NAN_BOXED(0x7e9799a1123864481,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e5ef919120153369,32,FLEN)
NAN_BOXED(0x7e1173d9115072985,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e5f88a0120190112,32,FLEN)
NAN_BOXED(0x7ea13294124493460,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e60bdc9120269257,32,FLEN)
NAN_BOXED(0x7f33eda8134109608,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e615629120308265,32,FLEN)
NAN_BOXED(0x7eb793aa125960106,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e6a7ab2120907442,32,FLEN)
NAN_BOXED(0x7dae4058108571736,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e729ac7121439943,32,FLEN)
NAN_BOXED(0x7e3a8006117763078,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e72d2f3121454323,32,FLEN)
NAN_BOXED(0x7e23fca7116287655,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e76467b121680507,32,FLEN)
NAN_BOXED(0x7e1caa1e115807774,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e80fdf0122382832,32,FLEN)
NAN_BOXED(0x7d0c612e097963310,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e83f653122577491,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e8444c5122597573,32,FLEN)
NAN_BOXED(0x7f382932134386994,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e8595c5122683845,32,FLEN)
NAN_BOXED(0x7bf4e195079646101,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e86834b122744651,32,FLEN)
NAN_BOXED(0x7e0a7bf0114616304,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e892570122917232,32,FLEN)
NAN_BOXED(0x7f20d4b8132858040,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e8d7074123198580,32,FLEN)
NAN_BOXED(0x7f3dc8bc134755516,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e8dbef7123218679,32,FLEN)
NAN_BOXED(0x7c97731e090300190,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e8dcb58123221848,32,FLEN)
NAN_BOXED(0x7f3631e6134258150,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e90382a123380778,32,FLEN)
NAN_BOXED(0x7f3b1d98134580632,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e933b22123578146,32,FLEN)
NAN_BOXED(0x7f151296132087446,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e94ffa5123693989,32,FLEN)
NAN_BOXED(0x7e9f22f1124358385,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e9a7876124052598,32,FLEN)
NAN_BOXED(0x7f06c054131148884,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e9ce997124212631,32,FLEN)
NAN_BOXED(0x7ea036ee124429038,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e9de0b9124275897,32,FLEN)
NAN_BOXED(0x7eeaeb85129324933,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e9f40ca124366026,32,FLEN)
NAN_BOXED(0x7d98adcd107157965,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7e9f9b30124389168,32,FLEN)
NAN_BOXED(0x7d986358107138904,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7ea3ca20124663328,32,FLEN)
NAN_BOXED(0x7e67dc90120735888,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7eac0532125202738,32,FLEN)
NAN_BOXED(0x7d772129104959273,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7eae1fa7125340583,32,FLEN)
NAN_BOXED(0x7f33ec90134109328,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7eb1933e125566782,32,FLEN)
NAN_BOXED(0x7ef4b97b129967483,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7eb3495f125678943,32,FLEN)
NAN_BOXED(0x7f1b5638132497976,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7eb4d220125779488,32,FLEN)
NAN_BOXED(0x7f367396134274966,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7eb54d84125811076,32,FLEN)
NAN_BOXED(0x7d9aad53107288915,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7eb6048d125857933,32,FLEN)
NAN_BOXED(0x7f217160132898144,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7eb72bf7125933559,32,FLEN)
NAN_BOXED(0x7f2623b6133205942,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x7f2d0175133655925,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7ebacb68126170984,32,FLEN)
NAN_BOXED(0x7ef1fa00129787392,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7ebb1c27126191655,32,FLEN)
NAN_BOXED(0x7ed79458128057432,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x7f25c228133180968,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7ebf7af3126478067,32,FLEN)
NAN_BOXED(0x7f00a730130749232,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7ec1eb7c126637948,32,FLEN)
NAN_BOXED(0x7f2d0265133656165,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7ec30c98126711960,32,FLEN)
NAN_BOXED(0x7f331aa5134055589,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7ec74c23126990371,32,FLEN)
NAN_BOXED(0x7eac3db2125217202,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7ec80329127037225,32,FLEN)
NAN_BOXED(0x7ef9e697130306711,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7ed1d071127679601,32,FLEN)
NAN_BOXED(0x7de87317112385815,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7ed3afc5127802309,32,FLEN)
NAN_BOXED(0x7f07a8e7131208423,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7ed7453d128037181,32,FLEN)
NAN_BOXED(0x7c18d146082001222,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7ed95956128173398,32,FLEN)
NAN_BOXED(0x7f31316c133930348,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7eda8a0e128251406,32,FLEN)
NAN_BOXED(0x7ec34d6c126728556,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7edc5df5128371189,32,FLEN)
NAN_BOXED(0x7f024923130856227,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7edd2a79128423545,32,FLEN)
NAN_BOXED(0x7e963972123774322,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7ee004c9128610505,32,FLEN)
NAN_BOXED(0x7f2e5b90133744528,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7ee098e5128648421,32,FLEN)
NAN_BOXED(0x7f026d14130865428,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7ee4f961128935265,32,FLEN)
NAN_BOXED(0x7e93cd52123615570,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7ee5de2c128993836,32,FLEN)
NAN_BOXED(0x7f1e88a3132707491,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7ee79f8e129108878,32,FLEN)
NAN_BOXED(0x7ee1a51b128717083,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7eea26e3129274595,32,FLEN)
NAN_BOXED(0x7e28048a116551818,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7eea94a1129302689,32,FLEN)
NAN_BOXED(0x7f2f4c51133806161,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7eeb4e0d129350157,32,FLEN)
NAN_BOXED(0x7efc283d130454589,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7eed982c129500204,32,FLEN)
NAN_BOXED(0x7bbf1e72076122738,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7ef2cedb129841883,32,FLEN)
NAN_BOXED(0x7e81bd84122431876,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7ef31b27129861415,32,FLEN)
NAN_BOXED(0x7d803494105554068,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7ef35bf2129878002,32,FLEN)
NAN_BOXED(0x7eee7e55129559125,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7ef4310e129932558,32,FLEN)
NAN_BOXED(0x7e0d58d3114803923,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7ef4984e129958990,32,FLEN)
NAN_BOXED(0x7d81e0a6105663654,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7ef5d070130038896,32,FLEN)
NAN_BOXED(0x7e8f0540123302208,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7efba8b0130421936,32,FLEN)
NAN_BOXED(0x7f08c5cd131281357,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7efd88c2130544834,32,FLEN)
NAN_BOXED(0x7f3f4810134853648,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7efe4880130593920,32,FLEN)
NAN_BOXED(0x7d0fb50a098181386,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7efff0b5130702517,32,FLEN)
NAN_BOXED(0x7edb91e9128318953,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f004910130725136,32,FLEN)
NAN_BOXED(0x7a60affa053156858,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f0125a0130781600,32,FLEN)
NAN_BOXED(0x7f3993cf134479823,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f015206130792966,32,FLEN)
NAN_BOXED(0x7de88296112389782,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f01d4ab130826411,32,FLEN)
NAN_BOXED(0x7f22524e132955726,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f0235d7130851287,32,FLEN)
NAN_BOXED(0x7f11efef131881967,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f028be4130873316,32,FLEN)
NAN_BOXED(0x7f288293133361299,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x7eeedcc4129583300,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f03cad2130954962,32,FLEN)
NAN_BOXED(0x7cb9250d092508429,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f05f3e7131096551,32,FLEN)
NAN_BOXED(0x7d0af584097870212,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f076a16131192342,32,FLEN)
NAN_BOXED(0x7e53afdf119413727,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f09e19b131354011,32,FLEN)
NAN_BOXED(0x7f1af462132472930,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f09f3ae131358638,32,FLEN)
NAN_BOXED(0x7e81e3e9122441705,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f0a2eec131373804,32,FLEN)
NAN_BOXED(0x7e9925f2123965938,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f0c20b0131501232,32,FLEN)
NAN_BOXED(0x7f2c93b2133627826,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f0cfb4b131557195,32,FLEN)
NAN_BOXED(0x7cbca040092736576,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f0e3fac131640236,32,FLEN)
NAN_BOXED(0x7dda8c22111474722,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f114532131838258,32,FLEN)
NAN_BOXED(0x7eaee68b125391499,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f1181a9131853737,32,FLEN)
NAN_BOXED(0x7f3e2ea7134781607,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f124d93131905939,32,FLEN)
NAN_BOXED(0x7e571b9d119637917,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f136313131976979,32,FLEN)
NAN_BOXED(0x7ea5c774124793716,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f1393e8131989480,32,FLEN)
NAN_BOXED(0x7ef18162129756514,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f153406132096006,32,FLEN)
NAN_BOXED(0x7ea596bf124781247,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f15a4db132124891,32,FLEN)
NAN_BOXED(0x7f061cca131107018,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f167d44132180292,32,FLEN)
NAN_BOXED(0x7e68f1b4120806836,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f168f5a132184922,32,FLEN)
NAN_BOXED(0x7f21ba5d132916829,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f17e134132271412,32,FLEN)
NAN_BOXED(0x7e9535df123707871,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f18212b132287787,32,FLEN)
NAN_BOXED(0x7f25618f133156239,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f185183132300163,32,FLEN)
NAN_BOXED(0x7d7d0cc0105347264,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f18c423132329507,32,FLEN)
NAN_BOXED(0x7eab53bd125157309,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f1a90b9132447417,32,FLEN)
NAN_BOXED(0x7ed2b355127737685,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f1b86f6132510454,32,FLEN)
NAN_BOXED(0x7d3f4247101297735,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f1b8fcb132512715,32,FLEN)
NAN_BOXED(0x7f2d3742133669698,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f1b9172132513138,32,FLEN)
NAN_BOXED(0x7ec74c7e126990462,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f1bfbd1132540369,32,FLEN)
NAN_BOXED(0x7e10628e115003022,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f1c60ac132566188,32,FLEN)
NAN_BOXED(0x7ecf7809127525897,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f1ca7c2132584386,32,FLEN)
NAN_BOXED(0x7d9a887c107279484,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f1d3fd0132623312,32,FLEN)
NAN_BOXED(0x7d58a14d102960461,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f20f56c132866412,32,FLEN)
NAN_BOXED(0x7f30593a133875002,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f220a0f132937231,32,FLEN)
NAN_BOXED(0x7e7de57e122179966,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f222105132943109,32,FLEN)
NAN_BOXED(0x7f1186f9131855097,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f2319ee133006830,32,FLEN)
NAN_BOXED(0x7f2bd8f4133580020,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f2373e9133029865,32,FLEN)
NAN_BOXED(0x7f193a37132359735,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f24f632133128754,32,FLEN)
NAN_BOXED(0x7e0f9c10114952208,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f269468133234792,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f272166133270886,32,FLEN)
NAN_BOXED(0x7e12bd51115157329,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f2765d9133288409,32,FLEN)
NAN_BOXED(0x7e55d198119553432,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f27bdd4133310932,32,FLEN)
NAN_BOXED(0x7e5706d8119632600,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f2814cf133333199,32,FLEN)
NAN_BOXED(0x7eda2b8e128227214,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f293481133406849,32,FLEN)
NAN_BOXED(0x7eea4935129283381,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f29b43a133439546,32,FLEN)
NAN_BOXED(0x7ebdeb73126375795,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f2bb989133571977,32,FLEN)
NAN_BOXED(0x7f30948b133890187,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f2c5a89133613193,32,FLEN)
NAN_BOXED(0x7f3591fb134217211,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f2d60c7133680327,32,FLEN)
NAN_BOXED(0x7ead6b3e125294398,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f2de8ee133715182,32,FLEN)
NAN_BOXED(0x7e1e49db115914203,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f2eb91a133768474,32,FLEN)
NAN_BOXED(0x7ecd21cb127372747,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f300ad9133854937,32,FLEN)
NAN_BOXED(0x7f2786d3133296851,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f3012ad133856941,32,FLEN)
NAN_BOXED(0x7e77a646121770566,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f313b58133932888,32,FLEN)
NAN_BOXED(0x7ecf9722127533858,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f314a05133936645,32,FLEN)
NAN_BOXED(0x7f21c09a132918426,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f342577134123895,32,FLEN)
NAN_BOXED(0x7dbd3789109552521,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f350bba134182842,32,FLEN)
NAN_BOXED(0x7e688ddb120781275,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f35ba7d134227581,32,FLEN)
NAN_BOXED(0x7f342e24134126116,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f365ad7134268631,32,FLEN)
NAN_BOXED(0x7ede9a56128517718,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f38849b134410395,32,FLEN)
NAN_BOXED(0x7e0e0ef6114850550,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f38c024134425636,32,FLEN)
NAN_BOXED(0x7f0aba6b131409515,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f38d010134429712,32,FLEN)
NAN_BOXED(0x7f2c9c0a133629962,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f39925a134479450,32,FLEN)
NAN_BOXED(0x7e8b19a0123045280,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f3c425a134655578,32,FLEN)
NAN_BOXED(0x7cdf97b9095028153,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f3cbbe2134686690,32,FLEN)
NAN_BOXED(0x7de3f20b112090635,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7f3d783f134734911,32,FLEN)
NAN_BOXED(0x7e9a4c33124041267,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x793d4a9b034059931,32,FLEN)
NAN_BOXED(0x7e0bc08b114699403,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7a95d64c056640076,32,FLEN)
NAN_BOXED(0x7e13b197115219863,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7ae7c20e062008846,32,FLEN)
NAN_BOXED(0x7f1df6e4132670180,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7ca4066c091124332,32,FLEN)
NAN_BOXED(0x7ef3d707129909511,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7cc777c1093447105,32,FLEN)
NAN_BOXED(0x7eed14ed129466605,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7cd9eac0094656192,32,FLEN)
NAN_BOXED(0x7de3e43a112087098,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7cf1f159096230745,32,FLEN)
NAN_BOXED(0x7d9b03d8107311064,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7cf9d5cb096747979,32,FLEN)
NAN_BOXED(0x7f02c05a130886746,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7cfd26a2096965282,32,FLEN)
NAN_BOXED(0x7dfbb095113646741,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7d0109b4097220020,32,FLEN)
NAN_BOXED(0x7f0fd579131744121,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
NAN_BOXED(0x7d0155e8097239528,32,FLEN)
NAN_BOXED(0x7f360231134245937,32,FLEN)
NAN_BOXED(0xff7fffff286578687,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 166*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
