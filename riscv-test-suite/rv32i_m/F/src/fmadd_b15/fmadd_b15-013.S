
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_9216:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x648000ff; valaddr_reg:x3; val_offset:27648*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27648*0 + 3*0*FLEN/8, x4, x1, x2)

inst_9217:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x648001ff; valaddr_reg:x3; val_offset:27651*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27651*0 + 3*1*FLEN/8, x4, x1, x2)

inst_9218:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x648003ff; valaddr_reg:x3; val_offset:27654*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27654*0 + 3*2*FLEN/8, x4, x1, x2)

inst_9219:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x648007ff; valaddr_reg:x3; val_offset:27657*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27657*0 + 3*3*FLEN/8, x4, x1, x2)

inst_9220:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x64800fff; valaddr_reg:x3; val_offset:27660*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27660*0 + 3*4*FLEN/8, x4, x1, x2)

inst_9221:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x64801fff; valaddr_reg:x3; val_offset:27663*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27663*0 + 3*5*FLEN/8, x4, x1, x2)

inst_9222:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x64803fff; valaddr_reg:x3; val_offset:27666*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27666*0 + 3*6*FLEN/8, x4, x1, x2)

inst_9223:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x64807fff; valaddr_reg:x3; val_offset:27669*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27669*0 + 3*7*FLEN/8, x4, x1, x2)

inst_9224:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x6480ffff; valaddr_reg:x3; val_offset:27672*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27672*0 + 3*8*FLEN/8, x4, x1, x2)

inst_9225:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x6481ffff; valaddr_reg:x3; val_offset:27675*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27675*0 + 3*9*FLEN/8, x4, x1, x2)

inst_9226:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x6483ffff; valaddr_reg:x3; val_offset:27678*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27678*0 + 3*10*FLEN/8, x4, x1, x2)

inst_9227:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x6487ffff; valaddr_reg:x3; val_offset:27681*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27681*0 + 3*11*FLEN/8, x4, x1, x2)

inst_9228:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x648fffff; valaddr_reg:x3; val_offset:27684*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27684*0 + 3*12*FLEN/8, x4, x1, x2)

inst_9229:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x649fffff; valaddr_reg:x3; val_offset:27687*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27687*0 + 3*13*FLEN/8, x4, x1, x2)

inst_9230:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x64bfffff; valaddr_reg:x3; val_offset:27690*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27690*0 + 3*14*FLEN/8, x4, x1, x2)

inst_9231:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x64c00000; valaddr_reg:x3; val_offset:27693*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27693*0 + 3*15*FLEN/8, x4, x1, x2)

inst_9232:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x64e00000; valaddr_reg:x3; val_offset:27696*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27696*0 + 3*16*FLEN/8, x4, x1, x2)

inst_9233:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x64f00000; valaddr_reg:x3; val_offset:27699*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27699*0 + 3*17*FLEN/8, x4, x1, x2)

inst_9234:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x64f80000; valaddr_reg:x3; val_offset:27702*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27702*0 + 3*18*FLEN/8, x4, x1, x2)

inst_9235:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x64fc0000; valaddr_reg:x3; val_offset:27705*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27705*0 + 3*19*FLEN/8, x4, x1, x2)

inst_9236:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x64fe0000; valaddr_reg:x3; val_offset:27708*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27708*0 + 3*20*FLEN/8, x4, x1, x2)

inst_9237:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x64ff0000; valaddr_reg:x3; val_offset:27711*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27711*0 + 3*21*FLEN/8, x4, x1, x2)

inst_9238:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x64ff8000; valaddr_reg:x3; val_offset:27714*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27714*0 + 3*22*FLEN/8, x4, x1, x2)

inst_9239:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x64ffc000; valaddr_reg:x3; val_offset:27717*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27717*0 + 3*23*FLEN/8, x4, x1, x2)

inst_9240:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x64ffe000; valaddr_reg:x3; val_offset:27720*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27720*0 + 3*24*FLEN/8, x4, x1, x2)

inst_9241:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x64fff000; valaddr_reg:x3; val_offset:27723*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27723*0 + 3*25*FLEN/8, x4, x1, x2)

inst_9242:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x64fff800; valaddr_reg:x3; val_offset:27726*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27726*0 + 3*26*FLEN/8, x4, x1, x2)

inst_9243:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x64fffc00; valaddr_reg:x3; val_offset:27729*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27729*0 + 3*27*FLEN/8, x4, x1, x2)

inst_9244:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x64fffe00; valaddr_reg:x3; val_offset:27732*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27732*0 + 3*28*FLEN/8, x4, x1, x2)

inst_9245:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x64ffff00; valaddr_reg:x3; val_offset:27735*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27735*0 + 3*29*FLEN/8, x4, x1, x2)

inst_9246:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x64ffff80; valaddr_reg:x3; val_offset:27738*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27738*0 + 3*30*FLEN/8, x4, x1, x2)

inst_9247:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x64ffffc0; valaddr_reg:x3; val_offset:27741*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27741*0 + 3*31*FLEN/8, x4, x1, x2)

inst_9248:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x64ffffe0; valaddr_reg:x3; val_offset:27744*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27744*0 + 3*32*FLEN/8, x4, x1, x2)

inst_9249:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x64fffff0; valaddr_reg:x3; val_offset:27747*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27747*0 + 3*33*FLEN/8, x4, x1, x2)

inst_9250:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x64fffff8; valaddr_reg:x3; val_offset:27750*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27750*0 + 3*34*FLEN/8, x4, x1, x2)

inst_9251:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x64fffffc; valaddr_reg:x3; val_offset:27753*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27753*0 + 3*35*FLEN/8, x4, x1, x2)

inst_9252:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x64fffffe; valaddr_reg:x3; val_offset:27756*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27756*0 + 3*36*FLEN/8, x4, x1, x2)

inst_9253:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xc9 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x64ffffff; valaddr_reg:x3; val_offset:27759*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27759*0 + 3*37*FLEN/8, x4, x1, x2)

inst_9254:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x7f000001; valaddr_reg:x3; val_offset:27762*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27762*0 + 3*38*FLEN/8, x4, x1, x2)

inst_9255:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x7f000003; valaddr_reg:x3; val_offset:27765*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27765*0 + 3*39*FLEN/8, x4, x1, x2)

inst_9256:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x7f000007; valaddr_reg:x3; val_offset:27768*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27768*0 + 3*40*FLEN/8, x4, x1, x2)

inst_9257:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x7f199999; valaddr_reg:x3; val_offset:27771*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27771*0 + 3*41*FLEN/8, x4, x1, x2)

inst_9258:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x7f249249; valaddr_reg:x3; val_offset:27774*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27774*0 + 3*42*FLEN/8, x4, x1, x2)

inst_9259:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x7f333333; valaddr_reg:x3; val_offset:27777*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27777*0 + 3*43*FLEN/8, x4, x1, x2)

inst_9260:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:27780*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27780*0 + 3*44*FLEN/8, x4, x1, x2)

inst_9261:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:27783*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27783*0 + 3*45*FLEN/8, x4, x1, x2)

inst_9262:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x7f444444; valaddr_reg:x3; val_offset:27786*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27786*0 + 3*46*FLEN/8, x4, x1, x2)

inst_9263:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:27789*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27789*0 + 3*47*FLEN/8, x4, x1, x2)

inst_9264:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:27792*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27792*0 + 3*48*FLEN/8, x4, x1, x2)

inst_9265:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x7f666666; valaddr_reg:x3; val_offset:27795*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27795*0 + 3*49*FLEN/8, x4, x1, x2)

inst_9266:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:27798*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27798*0 + 3*50*FLEN/8, x4, x1, x2)

inst_9267:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:27801*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27801*0 + 3*51*FLEN/8, x4, x1, x2)

inst_9268:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:27804*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27804*0 + 3*52*FLEN/8, x4, x1, x2)

inst_9269:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3104df and fs2 == 0 and fe2 == 0x81 and fm2 == 0x391c2b and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3104df; op2val:0x40b91c2b;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:27807*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27807*0 + 3*53*FLEN/8, x4, x1, x2)

inst_9270:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf0800000; valaddr_reg:x3; val_offset:27810*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27810*0 + 3*54*FLEN/8, x4, x1, x2)

inst_9271:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf0800001; valaddr_reg:x3; val_offset:27813*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27813*0 + 3*55*FLEN/8, x4, x1, x2)

inst_9272:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf0800003; valaddr_reg:x3; val_offset:27816*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27816*0 + 3*56*FLEN/8, x4, x1, x2)

inst_9273:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf0800007; valaddr_reg:x3; val_offset:27819*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27819*0 + 3*57*FLEN/8, x4, x1, x2)

inst_9274:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf080000f; valaddr_reg:x3; val_offset:27822*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27822*0 + 3*58*FLEN/8, x4, x1, x2)

inst_9275:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf080001f; valaddr_reg:x3; val_offset:27825*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27825*0 + 3*59*FLEN/8, x4, x1, x2)

inst_9276:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf080003f; valaddr_reg:x3; val_offset:27828*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27828*0 + 3*60*FLEN/8, x4, x1, x2)

inst_9277:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf080007f; valaddr_reg:x3; val_offset:27831*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27831*0 + 3*61*FLEN/8, x4, x1, x2)

inst_9278:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf08000ff; valaddr_reg:x3; val_offset:27834*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27834*0 + 3*62*FLEN/8, x4, x1, x2)

inst_9279:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf08001ff; valaddr_reg:x3; val_offset:27837*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27837*0 + 3*63*FLEN/8, x4, x1, x2)

inst_9280:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf08003ff; valaddr_reg:x3; val_offset:27840*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27840*0 + 3*64*FLEN/8, x4, x1, x2)

inst_9281:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf08007ff; valaddr_reg:x3; val_offset:27843*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27843*0 + 3*65*FLEN/8, x4, x1, x2)

inst_9282:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf0800fff; valaddr_reg:x3; val_offset:27846*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27846*0 + 3*66*FLEN/8, x4, x1, x2)

inst_9283:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf0801fff; valaddr_reg:x3; val_offset:27849*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27849*0 + 3*67*FLEN/8, x4, x1, x2)

inst_9284:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf0803fff; valaddr_reg:x3; val_offset:27852*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27852*0 + 3*68*FLEN/8, x4, x1, x2)

inst_9285:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf0807fff; valaddr_reg:x3; val_offset:27855*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27855*0 + 3*69*FLEN/8, x4, x1, x2)

inst_9286:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf080ffff; valaddr_reg:x3; val_offset:27858*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27858*0 + 3*70*FLEN/8, x4, x1, x2)

inst_9287:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf081ffff; valaddr_reg:x3; val_offset:27861*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27861*0 + 3*71*FLEN/8, x4, x1, x2)

inst_9288:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf083ffff; valaddr_reg:x3; val_offset:27864*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27864*0 + 3*72*FLEN/8, x4, x1, x2)

inst_9289:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf087ffff; valaddr_reg:x3; val_offset:27867*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27867*0 + 3*73*FLEN/8, x4, x1, x2)

inst_9290:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf08fffff; valaddr_reg:x3; val_offset:27870*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27870*0 + 3*74*FLEN/8, x4, x1, x2)

inst_9291:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf09fffff; valaddr_reg:x3; val_offset:27873*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27873*0 + 3*75*FLEN/8, x4, x1, x2)

inst_9292:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf0bfffff; valaddr_reg:x3; val_offset:27876*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27876*0 + 3*76*FLEN/8, x4, x1, x2)

inst_9293:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf0c00000; valaddr_reg:x3; val_offset:27879*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27879*0 + 3*77*FLEN/8, x4, x1, x2)

inst_9294:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf0e00000; valaddr_reg:x3; val_offset:27882*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27882*0 + 3*78*FLEN/8, x4, x1, x2)

inst_9295:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf0f00000; valaddr_reg:x3; val_offset:27885*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27885*0 + 3*79*FLEN/8, x4, x1, x2)

inst_9296:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf0f80000; valaddr_reg:x3; val_offset:27888*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27888*0 + 3*80*FLEN/8, x4, x1, x2)

inst_9297:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf0fc0000; valaddr_reg:x3; val_offset:27891*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27891*0 + 3*81*FLEN/8, x4, x1, x2)

inst_9298:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf0fe0000; valaddr_reg:x3; val_offset:27894*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27894*0 + 3*82*FLEN/8, x4, x1, x2)

inst_9299:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf0ff0000; valaddr_reg:x3; val_offset:27897*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27897*0 + 3*83*FLEN/8, x4, x1, x2)

inst_9300:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf0ff8000; valaddr_reg:x3; val_offset:27900*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27900*0 + 3*84*FLEN/8, x4, x1, x2)

inst_9301:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf0ffc000; valaddr_reg:x3; val_offset:27903*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27903*0 + 3*85*FLEN/8, x4, x1, x2)

inst_9302:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf0ffe000; valaddr_reg:x3; val_offset:27906*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27906*0 + 3*86*FLEN/8, x4, x1, x2)

inst_9303:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf0fff000; valaddr_reg:x3; val_offset:27909*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27909*0 + 3*87*FLEN/8, x4, x1, x2)

inst_9304:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf0fff800; valaddr_reg:x3; val_offset:27912*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27912*0 + 3*88*FLEN/8, x4, x1, x2)

inst_9305:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf0fffc00; valaddr_reg:x3; val_offset:27915*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27915*0 + 3*89*FLEN/8, x4, x1, x2)

inst_9306:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf0fffe00; valaddr_reg:x3; val_offset:27918*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27918*0 + 3*90*FLEN/8, x4, x1, x2)

inst_9307:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf0ffff00; valaddr_reg:x3; val_offset:27921*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27921*0 + 3*91*FLEN/8, x4, x1, x2)

inst_9308:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf0ffff80; valaddr_reg:x3; val_offset:27924*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27924*0 + 3*92*FLEN/8, x4, x1, x2)

inst_9309:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf0ffffc0; valaddr_reg:x3; val_offset:27927*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27927*0 + 3*93*FLEN/8, x4, x1, x2)

inst_9310:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf0ffffe0; valaddr_reg:x3; val_offset:27930*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27930*0 + 3*94*FLEN/8, x4, x1, x2)

inst_9311:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf0fffff0; valaddr_reg:x3; val_offset:27933*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27933*0 + 3*95*FLEN/8, x4, x1, x2)

inst_9312:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf0fffff8; valaddr_reg:x3; val_offset:27936*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27936*0 + 3*96*FLEN/8, x4, x1, x2)

inst_9313:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf0fffffc; valaddr_reg:x3; val_offset:27939*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27939*0 + 3*97*FLEN/8, x4, x1, x2)

inst_9314:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf0fffffe; valaddr_reg:x3; val_offset:27942*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27942*0 + 3*98*FLEN/8, x4, x1, x2)

inst_9315:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xe1 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xf0ffffff; valaddr_reg:x3; val_offset:27945*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27945*0 + 3*99*FLEN/8, x4, x1, x2)

inst_9316:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xff000001; valaddr_reg:x3; val_offset:27948*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27948*0 + 3*100*FLEN/8, x4, x1, x2)

inst_9317:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xff000003; valaddr_reg:x3; val_offset:27951*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27951*0 + 3*101*FLEN/8, x4, x1, x2)

inst_9318:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xff000007; valaddr_reg:x3; val_offset:27954*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27954*0 + 3*102*FLEN/8, x4, x1, x2)

inst_9319:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xff199999; valaddr_reg:x3; val_offset:27957*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27957*0 + 3*103*FLEN/8, x4, x1, x2)

inst_9320:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xff249249; valaddr_reg:x3; val_offset:27960*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27960*0 + 3*104*FLEN/8, x4, x1, x2)

inst_9321:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xff333333; valaddr_reg:x3; val_offset:27963*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27963*0 + 3*105*FLEN/8, x4, x1, x2)

inst_9322:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:27966*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27966*0 + 3*106*FLEN/8, x4, x1, x2)

inst_9323:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:27969*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27969*0 + 3*107*FLEN/8, x4, x1, x2)

inst_9324:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xff444444; valaddr_reg:x3; val_offset:27972*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27972*0 + 3*108*FLEN/8, x4, x1, x2)

inst_9325:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:27975*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27975*0 + 3*109*FLEN/8, x4, x1, x2)

inst_9326:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:27978*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27978*0 + 3*110*FLEN/8, x4, x1, x2)

inst_9327:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xff666666; valaddr_reg:x3; val_offset:27981*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27981*0 + 3*111*FLEN/8, x4, x1, x2)

inst_9328:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:27984*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27984*0 + 3*112*FLEN/8, x4, x1, x2)

inst_9329:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:27987*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27987*0 + 3*113*FLEN/8, x4, x1, x2)

inst_9330:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:27990*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27990*0 + 3*114*FLEN/8, x4, x1, x2)

inst_9331:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32745e and fs2 == 1 and fe2 == 0x81 and fm2 == 0x379ef7 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32745e; op2val:0xc0b79ef7;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:27993*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27993*0 + 3*115*FLEN/8, x4, x1, x2)

inst_9332:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6a800000; valaddr_reg:x3; val_offset:27996*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27996*0 + 3*116*FLEN/8, x4, x1, x2)

inst_9333:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6a800001; valaddr_reg:x3; val_offset:27999*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 27999*0 + 3*117*FLEN/8, x4, x1, x2)

inst_9334:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6a800003; valaddr_reg:x3; val_offset:28002*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28002*0 + 3*118*FLEN/8, x4, x1, x2)

inst_9335:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6a800007; valaddr_reg:x3; val_offset:28005*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28005*0 + 3*119*FLEN/8, x4, x1, x2)

inst_9336:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6a80000f; valaddr_reg:x3; val_offset:28008*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28008*0 + 3*120*FLEN/8, x4, x1, x2)

inst_9337:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6a80001f; valaddr_reg:x3; val_offset:28011*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28011*0 + 3*121*FLEN/8, x4, x1, x2)

inst_9338:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6a80003f; valaddr_reg:x3; val_offset:28014*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28014*0 + 3*122*FLEN/8, x4, x1, x2)

inst_9339:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6a80007f; valaddr_reg:x3; val_offset:28017*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28017*0 + 3*123*FLEN/8, x4, x1, x2)

inst_9340:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6a8000ff; valaddr_reg:x3; val_offset:28020*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28020*0 + 3*124*FLEN/8, x4, x1, x2)

inst_9341:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6a8001ff; valaddr_reg:x3; val_offset:28023*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28023*0 + 3*125*FLEN/8, x4, x1, x2)

inst_9342:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6a8003ff; valaddr_reg:x3; val_offset:28026*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28026*0 + 3*126*FLEN/8, x4, x1, x2)

inst_9343:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6a8007ff; valaddr_reg:x3; val_offset:28029*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28029*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_9344:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6a800fff; valaddr_reg:x3; val_offset:28032*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28032*0 + 3*128*FLEN/8, x4, x1, x2)

inst_9345:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6a801fff; valaddr_reg:x3; val_offset:28035*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28035*0 + 3*129*FLEN/8, x4, x1, x2)

inst_9346:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6a803fff; valaddr_reg:x3; val_offset:28038*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28038*0 + 3*130*FLEN/8, x4, x1, x2)

inst_9347:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6a807fff; valaddr_reg:x3; val_offset:28041*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28041*0 + 3*131*FLEN/8, x4, x1, x2)

inst_9348:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6a80ffff; valaddr_reg:x3; val_offset:28044*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28044*0 + 3*132*FLEN/8, x4, x1, x2)

inst_9349:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6a81ffff; valaddr_reg:x3; val_offset:28047*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28047*0 + 3*133*FLEN/8, x4, x1, x2)

inst_9350:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6a83ffff; valaddr_reg:x3; val_offset:28050*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28050*0 + 3*134*FLEN/8, x4, x1, x2)

inst_9351:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6a87ffff; valaddr_reg:x3; val_offset:28053*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28053*0 + 3*135*FLEN/8, x4, x1, x2)

inst_9352:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6a8fffff; valaddr_reg:x3; val_offset:28056*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28056*0 + 3*136*FLEN/8, x4, x1, x2)

inst_9353:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6a9fffff; valaddr_reg:x3; val_offset:28059*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28059*0 + 3*137*FLEN/8, x4, x1, x2)

inst_9354:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6abfffff; valaddr_reg:x3; val_offset:28062*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28062*0 + 3*138*FLEN/8, x4, x1, x2)

inst_9355:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6ac00000; valaddr_reg:x3; val_offset:28065*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28065*0 + 3*139*FLEN/8, x4, x1, x2)

inst_9356:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6ae00000; valaddr_reg:x3; val_offset:28068*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28068*0 + 3*140*FLEN/8, x4, x1, x2)

inst_9357:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6af00000; valaddr_reg:x3; val_offset:28071*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28071*0 + 3*141*FLEN/8, x4, x1, x2)

inst_9358:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6af80000; valaddr_reg:x3; val_offset:28074*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28074*0 + 3*142*FLEN/8, x4, x1, x2)

inst_9359:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6afc0000; valaddr_reg:x3; val_offset:28077*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28077*0 + 3*143*FLEN/8, x4, x1, x2)

inst_9360:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6afe0000; valaddr_reg:x3; val_offset:28080*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28080*0 + 3*144*FLEN/8, x4, x1, x2)

inst_9361:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6aff0000; valaddr_reg:x3; val_offset:28083*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28083*0 + 3*145*FLEN/8, x4, x1, x2)

inst_9362:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6aff8000; valaddr_reg:x3; val_offset:28086*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28086*0 + 3*146*FLEN/8, x4, x1, x2)

inst_9363:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6affc000; valaddr_reg:x3; val_offset:28089*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28089*0 + 3*147*FLEN/8, x4, x1, x2)

inst_9364:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6affe000; valaddr_reg:x3; val_offset:28092*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28092*0 + 3*148*FLEN/8, x4, x1, x2)

inst_9365:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6afff000; valaddr_reg:x3; val_offset:28095*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28095*0 + 3*149*FLEN/8, x4, x1, x2)

inst_9366:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6afff800; valaddr_reg:x3; val_offset:28098*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28098*0 + 3*150*FLEN/8, x4, x1, x2)

inst_9367:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6afffc00; valaddr_reg:x3; val_offset:28101*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28101*0 + 3*151*FLEN/8, x4, x1, x2)

inst_9368:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6afffe00; valaddr_reg:x3; val_offset:28104*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28104*0 + 3*152*FLEN/8, x4, x1, x2)

inst_9369:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6affff00; valaddr_reg:x3; val_offset:28107*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28107*0 + 3*153*FLEN/8, x4, x1, x2)

inst_9370:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6affff80; valaddr_reg:x3; val_offset:28110*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28110*0 + 3*154*FLEN/8, x4, x1, x2)

inst_9371:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6affffc0; valaddr_reg:x3; val_offset:28113*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28113*0 + 3*155*FLEN/8, x4, x1, x2)

inst_9372:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6affffe0; valaddr_reg:x3; val_offset:28116*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28116*0 + 3*156*FLEN/8, x4, x1, x2)

inst_9373:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6afffff0; valaddr_reg:x3; val_offset:28119*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28119*0 + 3*157*FLEN/8, x4, x1, x2)

inst_9374:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6afffff8; valaddr_reg:x3; val_offset:28122*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28122*0 + 3*158*FLEN/8, x4, x1, x2)

inst_9375:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6afffffc; valaddr_reg:x3; val_offset:28125*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28125*0 + 3*159*FLEN/8, x4, x1, x2)

inst_9376:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6afffffe; valaddr_reg:x3; val_offset:28128*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28128*0 + 3*160*FLEN/8, x4, x1, x2)

inst_9377:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xd5 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x6affffff; valaddr_reg:x3; val_offset:28131*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28131*0 + 3*161*FLEN/8, x4, x1, x2)

inst_9378:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x7f000001; valaddr_reg:x3; val_offset:28134*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28134*0 + 3*162*FLEN/8, x4, x1, x2)

inst_9379:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x7f000003; valaddr_reg:x3; val_offset:28137*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28137*0 + 3*163*FLEN/8, x4, x1, x2)

inst_9380:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x7f000007; valaddr_reg:x3; val_offset:28140*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28140*0 + 3*164*FLEN/8, x4, x1, x2)

inst_9381:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x7f199999; valaddr_reg:x3; val_offset:28143*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28143*0 + 3*165*FLEN/8, x4, x1, x2)

inst_9382:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x7f249249; valaddr_reg:x3; val_offset:28146*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28146*0 + 3*166*FLEN/8, x4, x1, x2)

inst_9383:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x7f333333; valaddr_reg:x3; val_offset:28149*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28149*0 + 3*167*FLEN/8, x4, x1, x2)

inst_9384:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:28152*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28152*0 + 3*168*FLEN/8, x4, x1, x2)

inst_9385:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:28155*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28155*0 + 3*169*FLEN/8, x4, x1, x2)

inst_9386:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x7f444444; valaddr_reg:x3; val_offset:28158*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28158*0 + 3*170*FLEN/8, x4, x1, x2)

inst_9387:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:28161*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28161*0 + 3*171*FLEN/8, x4, x1, x2)

inst_9388:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:28164*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28164*0 + 3*172*FLEN/8, x4, x1, x2)

inst_9389:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x7f666666; valaddr_reg:x3; val_offset:28167*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28167*0 + 3*173*FLEN/8, x4, x1, x2)

inst_9390:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:28170*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28170*0 + 3*174*FLEN/8, x4, x1, x2)

inst_9391:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:28173*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28173*0 + 3*175*FLEN/8, x4, x1, x2)

inst_9392:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:28176*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28176*0 + 3*176*FLEN/8, x4, x1, x2)

inst_9393:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x32d6bf and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3739f4 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e32d6bf; op2val:0x40b739f4;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:28179*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28179*0 + 3*177*FLEN/8, x4, x1, x2)

inst_9394:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:28182*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28182*0 + 3*178*FLEN/8, x4, x1, x2)

inst_9395:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:28185*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28185*0 + 3*179*FLEN/8, x4, x1, x2)

inst_9396:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:28188*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28188*0 + 3*180*FLEN/8, x4, x1, x2)

inst_9397:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:28191*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28191*0 + 3*181*FLEN/8, x4, x1, x2)

inst_9398:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:28194*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28194*0 + 3*182*FLEN/8, x4, x1, x2)

inst_9399:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:28197*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28197*0 + 3*183*FLEN/8, x4, x1, x2)

inst_9400:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:28200*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28200*0 + 3*184*FLEN/8, x4, x1, x2)

inst_9401:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:28203*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28203*0 + 3*185*FLEN/8, x4, x1, x2)

inst_9402:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:28206*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28206*0 + 3*186*FLEN/8, x4, x1, x2)

inst_9403:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:28209*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28209*0 + 3*187*FLEN/8, x4, x1, x2)

inst_9404:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:28212*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28212*0 + 3*188*FLEN/8, x4, x1, x2)

inst_9405:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:28215*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28215*0 + 3*189*FLEN/8, x4, x1, x2)

inst_9406:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:28218*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28218*0 + 3*190*FLEN/8, x4, x1, x2)

inst_9407:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:28221*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28221*0 + 3*191*FLEN/8, x4, x1, x2)

inst_9408:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:28224*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28224*0 + 3*192*FLEN/8, x4, x1, x2)

inst_9409:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:28227*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28227*0 + 3*193*FLEN/8, x4, x1, x2)

inst_9410:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x88000000; valaddr_reg:x3; val_offset:28230*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28230*0 + 3*194*FLEN/8, x4, x1, x2)

inst_9411:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x88000001; valaddr_reg:x3; val_offset:28233*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28233*0 + 3*195*FLEN/8, x4, x1, x2)

inst_9412:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x88000003; valaddr_reg:x3; val_offset:28236*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28236*0 + 3*196*FLEN/8, x4, x1, x2)

inst_9413:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x88000007; valaddr_reg:x3; val_offset:28239*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28239*0 + 3*197*FLEN/8, x4, x1, x2)

inst_9414:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x8800000f; valaddr_reg:x3; val_offset:28242*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28242*0 + 3*198*FLEN/8, x4, x1, x2)

inst_9415:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x8800001f; valaddr_reg:x3; val_offset:28245*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28245*0 + 3*199*FLEN/8, x4, x1, x2)

inst_9416:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x8800003f; valaddr_reg:x3; val_offset:28248*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28248*0 + 3*200*FLEN/8, x4, x1, x2)

inst_9417:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x8800007f; valaddr_reg:x3; val_offset:28251*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28251*0 + 3*201*FLEN/8, x4, x1, x2)

inst_9418:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x880000ff; valaddr_reg:x3; val_offset:28254*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28254*0 + 3*202*FLEN/8, x4, x1, x2)

inst_9419:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x880001ff; valaddr_reg:x3; val_offset:28257*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28257*0 + 3*203*FLEN/8, x4, x1, x2)

inst_9420:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x880003ff; valaddr_reg:x3; val_offset:28260*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28260*0 + 3*204*FLEN/8, x4, x1, x2)

inst_9421:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x880007ff; valaddr_reg:x3; val_offset:28263*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28263*0 + 3*205*FLEN/8, x4, x1, x2)

inst_9422:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x88000fff; valaddr_reg:x3; val_offset:28266*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28266*0 + 3*206*FLEN/8, x4, x1, x2)

inst_9423:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x88001fff; valaddr_reg:x3; val_offset:28269*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28269*0 + 3*207*FLEN/8, x4, x1, x2)

inst_9424:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x88003fff; valaddr_reg:x3; val_offset:28272*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28272*0 + 3*208*FLEN/8, x4, x1, x2)

inst_9425:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x88007fff; valaddr_reg:x3; val_offset:28275*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28275*0 + 3*209*FLEN/8, x4, x1, x2)

inst_9426:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x8800ffff; valaddr_reg:x3; val_offset:28278*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28278*0 + 3*210*FLEN/8, x4, x1, x2)

inst_9427:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x8801ffff; valaddr_reg:x3; val_offset:28281*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28281*0 + 3*211*FLEN/8, x4, x1, x2)

inst_9428:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x8803ffff; valaddr_reg:x3; val_offset:28284*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28284*0 + 3*212*FLEN/8, x4, x1, x2)

inst_9429:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x8807ffff; valaddr_reg:x3; val_offset:28287*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28287*0 + 3*213*FLEN/8, x4, x1, x2)

inst_9430:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x880fffff; valaddr_reg:x3; val_offset:28290*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28290*0 + 3*214*FLEN/8, x4, x1, x2)

inst_9431:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x881fffff; valaddr_reg:x3; val_offset:28293*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28293*0 + 3*215*FLEN/8, x4, x1, x2)

inst_9432:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x883fffff; valaddr_reg:x3; val_offset:28296*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28296*0 + 3*216*FLEN/8, x4, x1, x2)

inst_9433:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x88400000; valaddr_reg:x3; val_offset:28299*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28299*0 + 3*217*FLEN/8, x4, x1, x2)

inst_9434:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x88600000; valaddr_reg:x3; val_offset:28302*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28302*0 + 3*218*FLEN/8, x4, x1, x2)

inst_9435:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x88700000; valaddr_reg:x3; val_offset:28305*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28305*0 + 3*219*FLEN/8, x4, x1, x2)

inst_9436:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x88780000; valaddr_reg:x3; val_offset:28308*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28308*0 + 3*220*FLEN/8, x4, x1, x2)

inst_9437:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887c0000; valaddr_reg:x3; val_offset:28311*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28311*0 + 3*221*FLEN/8, x4, x1, x2)

inst_9438:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887e0000; valaddr_reg:x3; val_offset:28314*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28314*0 + 3*222*FLEN/8, x4, x1, x2)

inst_9439:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887f0000; valaddr_reg:x3; val_offset:28317*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28317*0 + 3*223*FLEN/8, x4, x1, x2)

inst_9440:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887f8000; valaddr_reg:x3; val_offset:28320*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28320*0 + 3*224*FLEN/8, x4, x1, x2)

inst_9441:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887fc000; valaddr_reg:x3; val_offset:28323*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28323*0 + 3*225*FLEN/8, x4, x1, x2)

inst_9442:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887fe000; valaddr_reg:x3; val_offset:28326*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28326*0 + 3*226*FLEN/8, x4, x1, x2)

inst_9443:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887ff000; valaddr_reg:x3; val_offset:28329*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28329*0 + 3*227*FLEN/8, x4, x1, x2)

inst_9444:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887ff800; valaddr_reg:x3; val_offset:28332*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28332*0 + 3*228*FLEN/8, x4, x1, x2)

inst_9445:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887ffc00; valaddr_reg:x3; val_offset:28335*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28335*0 + 3*229*FLEN/8, x4, x1, x2)

inst_9446:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887ffe00; valaddr_reg:x3; val_offset:28338*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28338*0 + 3*230*FLEN/8, x4, x1, x2)

inst_9447:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887fff00; valaddr_reg:x3; val_offset:28341*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28341*0 + 3*231*FLEN/8, x4, x1, x2)

inst_9448:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887fff80; valaddr_reg:x3; val_offset:28344*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28344*0 + 3*232*FLEN/8, x4, x1, x2)

inst_9449:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887fffc0; valaddr_reg:x3; val_offset:28347*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28347*0 + 3*233*FLEN/8, x4, x1, x2)

inst_9450:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887fffe0; valaddr_reg:x3; val_offset:28350*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28350*0 + 3*234*FLEN/8, x4, x1, x2)

inst_9451:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887ffff0; valaddr_reg:x3; val_offset:28353*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28353*0 + 3*235*FLEN/8, x4, x1, x2)

inst_9452:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887ffff8; valaddr_reg:x3; val_offset:28356*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28356*0 + 3*236*FLEN/8, x4, x1, x2)

inst_9453:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887ffffc; valaddr_reg:x3; val_offset:28359*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28359*0 + 3*237*FLEN/8, x4, x1, x2)

inst_9454:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887ffffe; valaddr_reg:x3; val_offset:28362*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28362*0 + 3*238*FLEN/8, x4, x1, x2)

inst_9455:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3361f1 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x10 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3361f1; op2val:0x80000000;
op3val:0x887fffff; valaddr_reg:x3; val_offset:28365*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28365*0 + 3*239*FLEN/8, x4, x1, x2)

inst_9456:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x25000000; valaddr_reg:x3; val_offset:28368*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28368*0 + 3*240*FLEN/8, x4, x1, x2)

inst_9457:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x25000001; valaddr_reg:x3; val_offset:28371*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28371*0 + 3*241*FLEN/8, x4, x1, x2)

inst_9458:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x25000003; valaddr_reg:x3; val_offset:28374*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28374*0 + 3*242*FLEN/8, x4, x1, x2)

inst_9459:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x25000007; valaddr_reg:x3; val_offset:28377*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28377*0 + 3*243*FLEN/8, x4, x1, x2)

inst_9460:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x2500000f; valaddr_reg:x3; val_offset:28380*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28380*0 + 3*244*FLEN/8, x4, x1, x2)

inst_9461:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x2500001f; valaddr_reg:x3; val_offset:28383*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28383*0 + 3*245*FLEN/8, x4, x1, x2)

inst_9462:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x2500003f; valaddr_reg:x3; val_offset:28386*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28386*0 + 3*246*FLEN/8, x4, x1, x2)

inst_9463:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x2500007f; valaddr_reg:x3; val_offset:28389*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28389*0 + 3*247*FLEN/8, x4, x1, x2)

inst_9464:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x250000ff; valaddr_reg:x3; val_offset:28392*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28392*0 + 3*248*FLEN/8, x4, x1, x2)

inst_9465:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x250001ff; valaddr_reg:x3; val_offset:28395*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28395*0 + 3*249*FLEN/8, x4, x1, x2)

inst_9466:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x250003ff; valaddr_reg:x3; val_offset:28398*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28398*0 + 3*250*FLEN/8, x4, x1, x2)

inst_9467:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x250007ff; valaddr_reg:x3; val_offset:28401*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28401*0 + 3*251*FLEN/8, x4, x1, x2)

inst_9468:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x25000fff; valaddr_reg:x3; val_offset:28404*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28404*0 + 3*252*FLEN/8, x4, x1, x2)

inst_9469:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x25001fff; valaddr_reg:x3; val_offset:28407*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28407*0 + 3*253*FLEN/8, x4, x1, x2)

inst_9470:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x25003fff; valaddr_reg:x3; val_offset:28410*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28410*0 + 3*254*FLEN/8, x4, x1, x2)

inst_9471:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x25007fff; valaddr_reg:x3; val_offset:28413*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28413*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_9472:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x2500ffff; valaddr_reg:x3; val_offset:28416*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28416*0 + 3*256*FLEN/8, x4, x1, x2)

inst_9473:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x2501ffff; valaddr_reg:x3; val_offset:28419*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28419*0 + 3*257*FLEN/8, x4, x1, x2)

inst_9474:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x2503ffff; valaddr_reg:x3; val_offset:28422*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28422*0 + 3*258*FLEN/8, x4, x1, x2)

inst_9475:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x2507ffff; valaddr_reg:x3; val_offset:28425*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28425*0 + 3*259*FLEN/8, x4, x1, x2)

inst_9476:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x250fffff; valaddr_reg:x3; val_offset:28428*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28428*0 + 3*260*FLEN/8, x4, x1, x2)

inst_9477:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x251fffff; valaddr_reg:x3; val_offset:28431*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28431*0 + 3*261*FLEN/8, x4, x1, x2)

inst_9478:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x253fffff; valaddr_reg:x3; val_offset:28434*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28434*0 + 3*262*FLEN/8, x4, x1, x2)

inst_9479:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x25400000; valaddr_reg:x3; val_offset:28437*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28437*0 + 3*263*FLEN/8, x4, x1, x2)

inst_9480:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x25600000; valaddr_reg:x3; val_offset:28440*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28440*0 + 3*264*FLEN/8, x4, x1, x2)

inst_9481:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x25700000; valaddr_reg:x3; val_offset:28443*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28443*0 + 3*265*FLEN/8, x4, x1, x2)

inst_9482:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x25780000; valaddr_reg:x3; val_offset:28446*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28446*0 + 3*266*FLEN/8, x4, x1, x2)

inst_9483:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x257c0000; valaddr_reg:x3; val_offset:28449*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28449*0 + 3*267*FLEN/8, x4, x1, x2)

inst_9484:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x257e0000; valaddr_reg:x3; val_offset:28452*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28452*0 + 3*268*FLEN/8, x4, x1, x2)

inst_9485:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x257f0000; valaddr_reg:x3; val_offset:28455*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28455*0 + 3*269*FLEN/8, x4, x1, x2)

inst_9486:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x257f8000; valaddr_reg:x3; val_offset:28458*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28458*0 + 3*270*FLEN/8, x4, x1, x2)

inst_9487:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x257fc000; valaddr_reg:x3; val_offset:28461*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28461*0 + 3*271*FLEN/8, x4, x1, x2)

inst_9488:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x257fe000; valaddr_reg:x3; val_offset:28464*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28464*0 + 3*272*FLEN/8, x4, x1, x2)

inst_9489:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x257ff000; valaddr_reg:x3; val_offset:28467*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28467*0 + 3*273*FLEN/8, x4, x1, x2)

inst_9490:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x257ff800; valaddr_reg:x3; val_offset:28470*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28470*0 + 3*274*FLEN/8, x4, x1, x2)

inst_9491:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x257ffc00; valaddr_reg:x3; val_offset:28473*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28473*0 + 3*275*FLEN/8, x4, x1, x2)

inst_9492:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x257ffe00; valaddr_reg:x3; val_offset:28476*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28476*0 + 3*276*FLEN/8, x4, x1, x2)

inst_9493:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x257fff00; valaddr_reg:x3; val_offset:28479*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28479*0 + 3*277*FLEN/8, x4, x1, x2)

inst_9494:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x257fff80; valaddr_reg:x3; val_offset:28482*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28482*0 + 3*278*FLEN/8, x4, x1, x2)

inst_9495:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x257fffc0; valaddr_reg:x3; val_offset:28485*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28485*0 + 3*279*FLEN/8, x4, x1, x2)

inst_9496:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x257fffe0; valaddr_reg:x3; val_offset:28488*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28488*0 + 3*280*FLEN/8, x4, x1, x2)

inst_9497:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x257ffff0; valaddr_reg:x3; val_offset:28491*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28491*0 + 3*281*FLEN/8, x4, x1, x2)

inst_9498:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x257ffff8; valaddr_reg:x3; val_offset:28494*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28494*0 + 3*282*FLEN/8, x4, x1, x2)

inst_9499:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x257ffffc; valaddr_reg:x3; val_offset:28497*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28497*0 + 3*283*FLEN/8, x4, x1, x2)

inst_9500:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x257ffffe; valaddr_reg:x3; val_offset:28500*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28500*0 + 3*284*FLEN/8, x4, x1, x2)

inst_9501:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x4a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x257fffff; valaddr_reg:x3; val_offset:28503*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28503*0 + 3*285*FLEN/8, x4, x1, x2)

inst_9502:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x3f800001; valaddr_reg:x3; val_offset:28506*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28506*0 + 3*286*FLEN/8, x4, x1, x2)

inst_9503:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x3f800003; valaddr_reg:x3; val_offset:28509*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28509*0 + 3*287*FLEN/8, x4, x1, x2)

inst_9504:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x3f800007; valaddr_reg:x3; val_offset:28512*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28512*0 + 3*288*FLEN/8, x4, x1, x2)

inst_9505:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x3f999999; valaddr_reg:x3; val_offset:28515*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28515*0 + 3*289*FLEN/8, x4, x1, x2)

inst_9506:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:28518*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28518*0 + 3*290*FLEN/8, x4, x1, x2)

inst_9507:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:28521*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28521*0 + 3*291*FLEN/8, x4, x1, x2)

inst_9508:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:28524*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28524*0 + 3*292*FLEN/8, x4, x1, x2)

inst_9509:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:28527*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28527*0 + 3*293*FLEN/8, x4, x1, x2)

inst_9510:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:28530*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28530*0 + 3*294*FLEN/8, x4, x1, x2)

inst_9511:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:28533*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28533*0 + 3*295*FLEN/8, x4, x1, x2)

inst_9512:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:28536*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28536*0 + 3*296*FLEN/8, x4, x1, x2)

inst_9513:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:28539*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28539*0 + 3*297*FLEN/8, x4, x1, x2)

inst_9514:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:28542*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28542*0 + 3*298*FLEN/8, x4, x1, x2)

inst_9515:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:28545*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28545*0 + 3*299*FLEN/8, x4, x1, x2)

inst_9516:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:28548*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28548*0 + 3*300*FLEN/8, x4, x1, x2)

inst_9517:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x34dd85 and fs2 == 0 and fe2 == 0x01 and fm2 == 0x352c69 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e34dd85; op2val:0xb52c69;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:28551*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28551*0 + 3*301*FLEN/8, x4, x1, x2)

inst_9518:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x76000000; valaddr_reg:x3; val_offset:28554*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28554*0 + 3*302*FLEN/8, x4, x1, x2)

inst_9519:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x76000001; valaddr_reg:x3; val_offset:28557*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28557*0 + 3*303*FLEN/8, x4, x1, x2)

inst_9520:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x76000003; valaddr_reg:x3; val_offset:28560*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28560*0 + 3*304*FLEN/8, x4, x1, x2)

inst_9521:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x76000007; valaddr_reg:x3; val_offset:28563*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28563*0 + 3*305*FLEN/8, x4, x1, x2)

inst_9522:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x7600000f; valaddr_reg:x3; val_offset:28566*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28566*0 + 3*306*FLEN/8, x4, x1, x2)

inst_9523:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x7600001f; valaddr_reg:x3; val_offset:28569*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28569*0 + 3*307*FLEN/8, x4, x1, x2)

inst_9524:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x7600003f; valaddr_reg:x3; val_offset:28572*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28572*0 + 3*308*FLEN/8, x4, x1, x2)

inst_9525:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x7600007f; valaddr_reg:x3; val_offset:28575*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28575*0 + 3*309*FLEN/8, x4, x1, x2)

inst_9526:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x760000ff; valaddr_reg:x3; val_offset:28578*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28578*0 + 3*310*FLEN/8, x4, x1, x2)

inst_9527:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x760001ff; valaddr_reg:x3; val_offset:28581*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28581*0 + 3*311*FLEN/8, x4, x1, x2)

inst_9528:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x760003ff; valaddr_reg:x3; val_offset:28584*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28584*0 + 3*312*FLEN/8, x4, x1, x2)

inst_9529:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x760007ff; valaddr_reg:x3; val_offset:28587*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28587*0 + 3*313*FLEN/8, x4, x1, x2)

inst_9530:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x76000fff; valaddr_reg:x3; val_offset:28590*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28590*0 + 3*314*FLEN/8, x4, x1, x2)

inst_9531:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x76001fff; valaddr_reg:x3; val_offset:28593*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28593*0 + 3*315*FLEN/8, x4, x1, x2)

inst_9532:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x76003fff; valaddr_reg:x3; val_offset:28596*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28596*0 + 3*316*FLEN/8, x4, x1, x2)

inst_9533:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x76007fff; valaddr_reg:x3; val_offset:28599*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28599*0 + 3*317*FLEN/8, x4, x1, x2)

inst_9534:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x7600ffff; valaddr_reg:x3; val_offset:28602*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28602*0 + 3*318*FLEN/8, x4, x1, x2)

inst_9535:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x7601ffff; valaddr_reg:x3; val_offset:28605*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28605*0 + 3*319*FLEN/8, x4, x1, x2)

inst_9536:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x7603ffff; valaddr_reg:x3; val_offset:28608*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28608*0 + 3*320*FLEN/8, x4, x1, x2)

inst_9537:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x7607ffff; valaddr_reg:x3; val_offset:28611*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28611*0 + 3*321*FLEN/8, x4, x1, x2)

inst_9538:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x760fffff; valaddr_reg:x3; val_offset:28614*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28614*0 + 3*322*FLEN/8, x4, x1, x2)

inst_9539:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x761fffff; valaddr_reg:x3; val_offset:28617*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28617*0 + 3*323*FLEN/8, x4, x1, x2)

inst_9540:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x763fffff; valaddr_reg:x3; val_offset:28620*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28620*0 + 3*324*FLEN/8, x4, x1, x2)

inst_9541:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x76400000; valaddr_reg:x3; val_offset:28623*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28623*0 + 3*325*FLEN/8, x4, x1, x2)

inst_9542:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x76600000; valaddr_reg:x3; val_offset:28626*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28626*0 + 3*326*FLEN/8, x4, x1, x2)

inst_9543:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x76700000; valaddr_reg:x3; val_offset:28629*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28629*0 + 3*327*FLEN/8, x4, x1, x2)

inst_9544:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x76780000; valaddr_reg:x3; val_offset:28632*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28632*0 + 3*328*FLEN/8, x4, x1, x2)

inst_9545:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x767c0000; valaddr_reg:x3; val_offset:28635*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28635*0 + 3*329*FLEN/8, x4, x1, x2)

inst_9546:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x767e0000; valaddr_reg:x3; val_offset:28638*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28638*0 + 3*330*FLEN/8, x4, x1, x2)

inst_9547:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x767f0000; valaddr_reg:x3; val_offset:28641*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28641*0 + 3*331*FLEN/8, x4, x1, x2)

inst_9548:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x767f8000; valaddr_reg:x3; val_offset:28644*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28644*0 + 3*332*FLEN/8, x4, x1, x2)

inst_9549:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x767fc000; valaddr_reg:x3; val_offset:28647*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28647*0 + 3*333*FLEN/8, x4, x1, x2)

inst_9550:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x767fe000; valaddr_reg:x3; val_offset:28650*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28650*0 + 3*334*FLEN/8, x4, x1, x2)

inst_9551:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x767ff000; valaddr_reg:x3; val_offset:28653*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28653*0 + 3*335*FLEN/8, x4, x1, x2)

inst_9552:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x767ff800; valaddr_reg:x3; val_offset:28656*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28656*0 + 3*336*FLEN/8, x4, x1, x2)

inst_9553:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x767ffc00; valaddr_reg:x3; val_offset:28659*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28659*0 + 3*337*FLEN/8, x4, x1, x2)

inst_9554:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x767ffe00; valaddr_reg:x3; val_offset:28662*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28662*0 + 3*338*FLEN/8, x4, x1, x2)

inst_9555:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x767fff00; valaddr_reg:x3; val_offset:28665*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28665*0 + 3*339*FLEN/8, x4, x1, x2)

inst_9556:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x767fff80; valaddr_reg:x3; val_offset:28668*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28668*0 + 3*340*FLEN/8, x4, x1, x2)

inst_9557:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x767fffc0; valaddr_reg:x3; val_offset:28671*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28671*0 + 3*341*FLEN/8, x4, x1, x2)

inst_9558:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x767fffe0; valaddr_reg:x3; val_offset:28674*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28674*0 + 3*342*FLEN/8, x4, x1, x2)

inst_9559:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x767ffff0; valaddr_reg:x3; val_offset:28677*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28677*0 + 3*343*FLEN/8, x4, x1, x2)

inst_9560:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x767ffff8; valaddr_reg:x3; val_offset:28680*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28680*0 + 3*344*FLEN/8, x4, x1, x2)

inst_9561:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x767ffffc; valaddr_reg:x3; val_offset:28683*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28683*0 + 3*345*FLEN/8, x4, x1, x2)

inst_9562:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x767ffffe; valaddr_reg:x3; val_offset:28686*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28686*0 + 3*346*FLEN/8, x4, x1, x2)

inst_9563:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xec and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x767fffff; valaddr_reg:x3; val_offset:28689*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28689*0 + 3*347*FLEN/8, x4, x1, x2)

inst_9564:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x7f000001; valaddr_reg:x3; val_offset:28692*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28692*0 + 3*348*FLEN/8, x4, x1, x2)

inst_9565:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x7f000003; valaddr_reg:x3; val_offset:28695*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28695*0 + 3*349*FLEN/8, x4, x1, x2)

inst_9566:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x7f000007; valaddr_reg:x3; val_offset:28698*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28698*0 + 3*350*FLEN/8, x4, x1, x2)

inst_9567:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x7f199999; valaddr_reg:x3; val_offset:28701*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28701*0 + 3*351*FLEN/8, x4, x1, x2)

inst_9568:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x7f249249; valaddr_reg:x3; val_offset:28704*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28704*0 + 3*352*FLEN/8, x4, x1, x2)

inst_9569:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x7f333333; valaddr_reg:x3; val_offset:28707*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28707*0 + 3*353*FLEN/8, x4, x1, x2)

inst_9570:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:28710*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28710*0 + 3*354*FLEN/8, x4, x1, x2)

inst_9571:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:28713*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28713*0 + 3*355*FLEN/8, x4, x1, x2)

inst_9572:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x7f444444; valaddr_reg:x3; val_offset:28716*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28716*0 + 3*356*FLEN/8, x4, x1, x2)

inst_9573:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:28719*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28719*0 + 3*357*FLEN/8, x4, x1, x2)

inst_9574:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:28722*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28722*0 + 3*358*FLEN/8, x4, x1, x2)

inst_9575:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x7f666666; valaddr_reg:x3; val_offset:28725*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28725*0 + 3*359*FLEN/8, x4, x1, x2)

inst_9576:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:28728*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28728*0 + 3*360*FLEN/8, x4, x1, x2)

inst_9577:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:28731*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28731*0 + 3*361*FLEN/8, x4, x1, x2)

inst_9578:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:28734*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28734*0 + 3*362*FLEN/8, x4, x1, x2)

inst_9579:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x35c0b2 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x3449f5 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e35c0b2; op2val:0x40b449f5;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:28737*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28737*0 + 3*363*FLEN/8, x4, x1, x2)

inst_9580:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:28740*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28740*0 + 3*364*FLEN/8, x4, x1, x2)

inst_9581:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:28743*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28743*0 + 3*365*FLEN/8, x4, x1, x2)

inst_9582:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:28746*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28746*0 + 3*366*FLEN/8, x4, x1, x2)

inst_9583:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:28749*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28749*0 + 3*367*FLEN/8, x4, x1, x2)

inst_9584:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:28752*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28752*0 + 3*368*FLEN/8, x4, x1, x2)

inst_9585:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:28755*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28755*0 + 3*369*FLEN/8, x4, x1, x2)

inst_9586:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:28758*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28758*0 + 3*370*FLEN/8, x4, x1, x2)

inst_9587:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:28761*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28761*0 + 3*371*FLEN/8, x4, x1, x2)

inst_9588:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:28764*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28764*0 + 3*372*FLEN/8, x4, x1, x2)

inst_9589:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:28767*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28767*0 + 3*373*FLEN/8, x4, x1, x2)

inst_9590:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:28770*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28770*0 + 3*374*FLEN/8, x4, x1, x2)

inst_9591:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:28773*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28773*0 + 3*375*FLEN/8, x4, x1, x2)

inst_9592:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:28776*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28776*0 + 3*376*FLEN/8, x4, x1, x2)

inst_9593:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:28779*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28779*0 + 3*377*FLEN/8, x4, x1, x2)

inst_9594:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:28782*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28782*0 + 3*378*FLEN/8, x4, x1, x2)

inst_9595:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:28785*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28785*0 + 3*379*FLEN/8, x4, x1, x2)

inst_9596:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x85000000; valaddr_reg:x3; val_offset:28788*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28788*0 + 3*380*FLEN/8, x4, x1, x2)

inst_9597:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x85000001; valaddr_reg:x3; val_offset:28791*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28791*0 + 3*381*FLEN/8, x4, x1, x2)

inst_9598:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x85000003; valaddr_reg:x3; val_offset:28794*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28794*0 + 3*382*FLEN/8, x4, x1, x2)

inst_9599:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x85000007; valaddr_reg:x3; val_offset:28797*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28797*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_9600:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x8500000f; valaddr_reg:x3; val_offset:28800*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28800*0 + 3*384*FLEN/8, x4, x1, x2)

inst_9601:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x8500001f; valaddr_reg:x3; val_offset:28803*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28803*0 + 3*385*FLEN/8, x4, x1, x2)

inst_9602:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x8500003f; valaddr_reg:x3; val_offset:28806*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28806*0 + 3*386*FLEN/8, x4, x1, x2)

inst_9603:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x8500007f; valaddr_reg:x3; val_offset:28809*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28809*0 + 3*387*FLEN/8, x4, x1, x2)

inst_9604:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x850000ff; valaddr_reg:x3; val_offset:28812*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28812*0 + 3*388*FLEN/8, x4, x1, x2)

inst_9605:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x850001ff; valaddr_reg:x3; val_offset:28815*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28815*0 + 3*389*FLEN/8, x4, x1, x2)

inst_9606:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x850003ff; valaddr_reg:x3; val_offset:28818*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28818*0 + 3*390*FLEN/8, x4, x1, x2)

inst_9607:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x850007ff; valaddr_reg:x3; val_offset:28821*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28821*0 + 3*391*FLEN/8, x4, x1, x2)

inst_9608:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x85000fff; valaddr_reg:x3; val_offset:28824*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28824*0 + 3*392*FLEN/8, x4, x1, x2)

inst_9609:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x85001fff; valaddr_reg:x3; val_offset:28827*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28827*0 + 3*393*FLEN/8, x4, x1, x2)

inst_9610:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x85003fff; valaddr_reg:x3; val_offset:28830*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28830*0 + 3*394*FLEN/8, x4, x1, x2)

inst_9611:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x85007fff; valaddr_reg:x3; val_offset:28833*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28833*0 + 3*395*FLEN/8, x4, x1, x2)

inst_9612:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x8500ffff; valaddr_reg:x3; val_offset:28836*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28836*0 + 3*396*FLEN/8, x4, x1, x2)

inst_9613:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x8501ffff; valaddr_reg:x3; val_offset:28839*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28839*0 + 3*397*FLEN/8, x4, x1, x2)

inst_9614:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x8503ffff; valaddr_reg:x3; val_offset:28842*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28842*0 + 3*398*FLEN/8, x4, x1, x2)

inst_9615:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x8507ffff; valaddr_reg:x3; val_offset:28845*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28845*0 + 3*399*FLEN/8, x4, x1, x2)

inst_9616:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x850fffff; valaddr_reg:x3; val_offset:28848*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28848*0 + 3*400*FLEN/8, x4, x1, x2)

inst_9617:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x851fffff; valaddr_reg:x3; val_offset:28851*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28851*0 + 3*401*FLEN/8, x4, x1, x2)

inst_9618:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x853fffff; valaddr_reg:x3; val_offset:28854*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28854*0 + 3*402*FLEN/8, x4, x1, x2)

inst_9619:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x85400000; valaddr_reg:x3; val_offset:28857*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28857*0 + 3*403*FLEN/8, x4, x1, x2)

inst_9620:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x85600000; valaddr_reg:x3; val_offset:28860*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28860*0 + 3*404*FLEN/8, x4, x1, x2)

inst_9621:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x85700000; valaddr_reg:x3; val_offset:28863*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28863*0 + 3*405*FLEN/8, x4, x1, x2)

inst_9622:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x85780000; valaddr_reg:x3; val_offset:28866*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28866*0 + 3*406*FLEN/8, x4, x1, x2)

inst_9623:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x857c0000; valaddr_reg:x3; val_offset:28869*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28869*0 + 3*407*FLEN/8, x4, x1, x2)

inst_9624:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x857e0000; valaddr_reg:x3; val_offset:28872*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28872*0 + 3*408*FLEN/8, x4, x1, x2)

inst_9625:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x857f0000; valaddr_reg:x3; val_offset:28875*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28875*0 + 3*409*FLEN/8, x4, x1, x2)

inst_9626:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x857f8000; valaddr_reg:x3; val_offset:28878*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28878*0 + 3*410*FLEN/8, x4, x1, x2)

inst_9627:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x857fc000; valaddr_reg:x3; val_offset:28881*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28881*0 + 3*411*FLEN/8, x4, x1, x2)

inst_9628:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x857fe000; valaddr_reg:x3; val_offset:28884*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28884*0 + 3*412*FLEN/8, x4, x1, x2)

inst_9629:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x857ff000; valaddr_reg:x3; val_offset:28887*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28887*0 + 3*413*FLEN/8, x4, x1, x2)

inst_9630:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x857ff800; valaddr_reg:x3; val_offset:28890*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28890*0 + 3*414*FLEN/8, x4, x1, x2)

inst_9631:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x857ffc00; valaddr_reg:x3; val_offset:28893*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28893*0 + 3*415*FLEN/8, x4, x1, x2)

inst_9632:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x857ffe00; valaddr_reg:x3; val_offset:28896*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28896*0 + 3*416*FLEN/8, x4, x1, x2)

inst_9633:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x857fff00; valaddr_reg:x3; val_offset:28899*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28899*0 + 3*417*FLEN/8, x4, x1, x2)

inst_9634:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x857fff80; valaddr_reg:x3; val_offset:28902*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28902*0 + 3*418*FLEN/8, x4, x1, x2)

inst_9635:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x857fffc0; valaddr_reg:x3; val_offset:28905*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28905*0 + 3*419*FLEN/8, x4, x1, x2)

inst_9636:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x857fffe0; valaddr_reg:x3; val_offset:28908*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28908*0 + 3*420*FLEN/8, x4, x1, x2)

inst_9637:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x857ffff0; valaddr_reg:x3; val_offset:28911*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28911*0 + 3*421*FLEN/8, x4, x1, x2)

inst_9638:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x857ffff8; valaddr_reg:x3; val_offset:28914*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28914*0 + 3*422*FLEN/8, x4, x1, x2)

inst_9639:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x857ffffc; valaddr_reg:x3; val_offset:28917*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28917*0 + 3*423*FLEN/8, x4, x1, x2)

inst_9640:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x857ffffe; valaddr_reg:x3; val_offset:28920*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28920*0 + 3*424*FLEN/8, x4, x1, x2)

inst_9641:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3741cc and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0a and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3741cc; op2val:0x80000000;
op3val:0x857fffff; valaddr_reg:x3; val_offset:28923*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28923*0 + 3*425*FLEN/8, x4, x1, x2)

inst_9642:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:28926*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28926*0 + 3*426*FLEN/8, x4, x1, x2)

inst_9643:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:28929*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28929*0 + 3*427*FLEN/8, x4, x1, x2)

inst_9644:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:28932*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28932*0 + 3*428*FLEN/8, x4, x1, x2)

inst_9645:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:28935*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28935*0 + 3*429*FLEN/8, x4, x1, x2)

inst_9646:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:28938*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28938*0 + 3*430*FLEN/8, x4, x1, x2)

inst_9647:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:28941*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28941*0 + 3*431*FLEN/8, x4, x1, x2)

inst_9648:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:28944*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28944*0 + 3*432*FLEN/8, x4, x1, x2)

inst_9649:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:28947*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28947*0 + 3*433*FLEN/8, x4, x1, x2)

inst_9650:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:28950*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28950*0 + 3*434*FLEN/8, x4, x1, x2)

inst_9651:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:28953*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28953*0 + 3*435*FLEN/8, x4, x1, x2)

inst_9652:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:28956*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28956*0 + 3*436*FLEN/8, x4, x1, x2)

inst_9653:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:28959*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28959*0 + 3*437*FLEN/8, x4, x1, x2)

inst_9654:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:28962*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28962*0 + 3*438*FLEN/8, x4, x1, x2)

inst_9655:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:28965*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28965*0 + 3*439*FLEN/8, x4, x1, x2)

inst_9656:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:28968*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28968*0 + 3*440*FLEN/8, x4, x1, x2)

inst_9657:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:28971*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28971*0 + 3*441*FLEN/8, x4, x1, x2)

inst_9658:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x90000000; valaddr_reg:x3; val_offset:28974*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28974*0 + 3*442*FLEN/8, x4, x1, x2)

inst_9659:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x90000001; valaddr_reg:x3; val_offset:28977*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28977*0 + 3*443*FLEN/8, x4, x1, x2)

inst_9660:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x90000003; valaddr_reg:x3; val_offset:28980*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28980*0 + 3*444*FLEN/8, x4, x1, x2)

inst_9661:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x90000007; valaddr_reg:x3; val_offset:28983*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28983*0 + 3*445*FLEN/8, x4, x1, x2)

inst_9662:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x9000000f; valaddr_reg:x3; val_offset:28986*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28986*0 + 3*446*FLEN/8, x4, x1, x2)

inst_9663:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x9000001f; valaddr_reg:x3; val_offset:28989*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28989*0 + 3*447*FLEN/8, x4, x1, x2)

inst_9664:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x9000003f; valaddr_reg:x3; val_offset:28992*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28992*0 + 3*448*FLEN/8, x4, x1, x2)

inst_9665:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x9000007f; valaddr_reg:x3; val_offset:28995*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28995*0 + 3*449*FLEN/8, x4, x1, x2)

inst_9666:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x900000ff; valaddr_reg:x3; val_offset:28998*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 28998*0 + 3*450*FLEN/8, x4, x1, x2)

inst_9667:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x900001ff; valaddr_reg:x3; val_offset:29001*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29001*0 + 3*451*FLEN/8, x4, x1, x2)

inst_9668:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x900003ff; valaddr_reg:x3; val_offset:29004*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29004*0 + 3*452*FLEN/8, x4, x1, x2)

inst_9669:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x900007ff; valaddr_reg:x3; val_offset:29007*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29007*0 + 3*453*FLEN/8, x4, x1, x2)

inst_9670:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x90000fff; valaddr_reg:x3; val_offset:29010*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29010*0 + 3*454*FLEN/8, x4, x1, x2)

inst_9671:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x90001fff; valaddr_reg:x3; val_offset:29013*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29013*0 + 3*455*FLEN/8, x4, x1, x2)

inst_9672:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x90003fff; valaddr_reg:x3; val_offset:29016*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29016*0 + 3*456*FLEN/8, x4, x1, x2)

inst_9673:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x90007fff; valaddr_reg:x3; val_offset:29019*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29019*0 + 3*457*FLEN/8, x4, x1, x2)

inst_9674:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x9000ffff; valaddr_reg:x3; val_offset:29022*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29022*0 + 3*458*FLEN/8, x4, x1, x2)

inst_9675:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x9001ffff; valaddr_reg:x3; val_offset:29025*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29025*0 + 3*459*FLEN/8, x4, x1, x2)

inst_9676:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x9003ffff; valaddr_reg:x3; val_offset:29028*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29028*0 + 3*460*FLEN/8, x4, x1, x2)

inst_9677:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x9007ffff; valaddr_reg:x3; val_offset:29031*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29031*0 + 3*461*FLEN/8, x4, x1, x2)

inst_9678:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x900fffff; valaddr_reg:x3; val_offset:29034*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29034*0 + 3*462*FLEN/8, x4, x1, x2)

inst_9679:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x901fffff; valaddr_reg:x3; val_offset:29037*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29037*0 + 3*463*FLEN/8, x4, x1, x2)

inst_9680:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x903fffff; valaddr_reg:x3; val_offset:29040*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29040*0 + 3*464*FLEN/8, x4, x1, x2)

inst_9681:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x90400000; valaddr_reg:x3; val_offset:29043*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29043*0 + 3*465*FLEN/8, x4, x1, x2)

inst_9682:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x90600000; valaddr_reg:x3; val_offset:29046*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29046*0 + 3*466*FLEN/8, x4, x1, x2)

inst_9683:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x90700000; valaddr_reg:x3; val_offset:29049*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29049*0 + 3*467*FLEN/8, x4, x1, x2)

inst_9684:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x90780000; valaddr_reg:x3; val_offset:29052*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29052*0 + 3*468*FLEN/8, x4, x1, x2)

inst_9685:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x907c0000; valaddr_reg:x3; val_offset:29055*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29055*0 + 3*469*FLEN/8, x4, x1, x2)

inst_9686:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x907e0000; valaddr_reg:x3; val_offset:29058*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29058*0 + 3*470*FLEN/8, x4, x1, x2)

inst_9687:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x907f0000; valaddr_reg:x3; val_offset:29061*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29061*0 + 3*471*FLEN/8, x4, x1, x2)

inst_9688:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x907f8000; valaddr_reg:x3; val_offset:29064*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29064*0 + 3*472*FLEN/8, x4, x1, x2)

inst_9689:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x907fc000; valaddr_reg:x3; val_offset:29067*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29067*0 + 3*473*FLEN/8, x4, x1, x2)

inst_9690:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x907fe000; valaddr_reg:x3; val_offset:29070*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29070*0 + 3*474*FLEN/8, x4, x1, x2)

inst_9691:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x907ff000; valaddr_reg:x3; val_offset:29073*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29073*0 + 3*475*FLEN/8, x4, x1, x2)

inst_9692:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x907ff800; valaddr_reg:x3; val_offset:29076*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29076*0 + 3*476*FLEN/8, x4, x1, x2)

inst_9693:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x907ffc00; valaddr_reg:x3; val_offset:29079*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29079*0 + 3*477*FLEN/8, x4, x1, x2)

inst_9694:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x907ffe00; valaddr_reg:x3; val_offset:29082*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29082*0 + 3*478*FLEN/8, x4, x1, x2)

inst_9695:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x907fff00; valaddr_reg:x3; val_offset:29085*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29085*0 + 3*479*FLEN/8, x4, x1, x2)

inst_9696:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x907fff80; valaddr_reg:x3; val_offset:29088*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29088*0 + 3*480*FLEN/8, x4, x1, x2)

inst_9697:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x907fffc0; valaddr_reg:x3; val_offset:29091*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29091*0 + 3*481*FLEN/8, x4, x1, x2)

inst_9698:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x907fffe0; valaddr_reg:x3; val_offset:29094*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29094*0 + 3*482*FLEN/8, x4, x1, x2)

inst_9699:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x907ffff0; valaddr_reg:x3; val_offset:29097*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29097*0 + 3*483*FLEN/8, x4, x1, x2)

inst_9700:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x907ffff8; valaddr_reg:x3; val_offset:29100*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29100*0 + 3*484*FLEN/8, x4, x1, x2)

inst_9701:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x907ffffc; valaddr_reg:x3; val_offset:29103*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29103*0 + 3*485*FLEN/8, x4, x1, x2)

inst_9702:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x907ffffe; valaddr_reg:x3; val_offset:29106*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29106*0 + 3*486*FLEN/8, x4, x1, x2)

inst_9703:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3783d0 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x20 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3783d0; op2val:0x80000000;
op3val:0x907fffff; valaddr_reg:x3; val_offset:29109*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29109*0 + 3*487*FLEN/8, x4, x1, x2)

inst_9704:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:29112*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29112*0 + 3*488*FLEN/8, x4, x1, x2)

inst_9705:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:29115*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29115*0 + 3*489*FLEN/8, x4, x1, x2)

inst_9706:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:29118*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29118*0 + 3*490*FLEN/8, x4, x1, x2)

inst_9707:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:29121*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29121*0 + 3*491*FLEN/8, x4, x1, x2)

inst_9708:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:29124*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29124*0 + 3*492*FLEN/8, x4, x1, x2)

inst_9709:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:29127*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29127*0 + 3*493*FLEN/8, x4, x1, x2)

inst_9710:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:29130*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29130*0 + 3*494*FLEN/8, x4, x1, x2)

inst_9711:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:29133*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29133*0 + 3*495*FLEN/8, x4, x1, x2)

inst_9712:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:29136*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29136*0 + 3*496*FLEN/8, x4, x1, x2)

inst_9713:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:29139*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29139*0 + 3*497*FLEN/8, x4, x1, x2)

inst_9714:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:29142*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29142*0 + 3*498*FLEN/8, x4, x1, x2)

inst_9715:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:29145*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29145*0 + 3*499*FLEN/8, x4, x1, x2)

inst_9716:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:29148*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29148*0 + 3*500*FLEN/8, x4, x1, x2)

inst_9717:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:29151*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29151*0 + 3*501*FLEN/8, x4, x1, x2)

inst_9718:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:29154*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29154*0 + 3*502*FLEN/8, x4, x1, x2)

inst_9719:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:29157*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29157*0 + 3*503*FLEN/8, x4, x1, x2)

inst_9720:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2800000; valaddr_reg:x3; val_offset:29160*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29160*0 + 3*504*FLEN/8, x4, x1, x2)

inst_9721:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2800001; valaddr_reg:x3; val_offset:29163*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29163*0 + 3*505*FLEN/8, x4, x1, x2)

inst_9722:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2800003; valaddr_reg:x3; val_offset:29166*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29166*0 + 3*506*FLEN/8, x4, x1, x2)

inst_9723:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2800007; valaddr_reg:x3; val_offset:29169*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29169*0 + 3*507*FLEN/8, x4, x1, x2)

inst_9724:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x280000f; valaddr_reg:x3; val_offset:29172*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29172*0 + 3*508*FLEN/8, x4, x1, x2)

inst_9725:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x280001f; valaddr_reg:x3; val_offset:29175*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29175*0 + 3*509*FLEN/8, x4, x1, x2)

inst_9726:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x280003f; valaddr_reg:x3; val_offset:29178*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29178*0 + 3*510*FLEN/8, x4, x1, x2)

inst_9727:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x280007f; valaddr_reg:x3; val_offset:29181*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29181*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_9728:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x28000ff; valaddr_reg:x3; val_offset:29184*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29184*0 + 3*512*FLEN/8, x4, x1, x2)

inst_9729:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x28001ff; valaddr_reg:x3; val_offset:29187*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29187*0 + 3*513*FLEN/8, x4, x1, x2)

inst_9730:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x28003ff; valaddr_reg:x3; val_offset:29190*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29190*0 + 3*514*FLEN/8, x4, x1, x2)

inst_9731:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x28007ff; valaddr_reg:x3; val_offset:29193*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29193*0 + 3*515*FLEN/8, x4, x1, x2)

inst_9732:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2800fff; valaddr_reg:x3; val_offset:29196*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29196*0 + 3*516*FLEN/8, x4, x1, x2)

inst_9733:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2801fff; valaddr_reg:x3; val_offset:29199*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29199*0 + 3*517*FLEN/8, x4, x1, x2)

inst_9734:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2803fff; valaddr_reg:x3; val_offset:29202*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29202*0 + 3*518*FLEN/8, x4, x1, x2)

inst_9735:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2807fff; valaddr_reg:x3; val_offset:29205*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29205*0 + 3*519*FLEN/8, x4, x1, x2)

inst_9736:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x280ffff; valaddr_reg:x3; val_offset:29208*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29208*0 + 3*520*FLEN/8, x4, x1, x2)

inst_9737:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x281ffff; valaddr_reg:x3; val_offset:29211*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29211*0 + 3*521*FLEN/8, x4, x1, x2)

inst_9738:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x283ffff; valaddr_reg:x3; val_offset:29214*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29214*0 + 3*522*FLEN/8, x4, x1, x2)

inst_9739:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x287ffff; valaddr_reg:x3; val_offset:29217*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29217*0 + 3*523*FLEN/8, x4, x1, x2)

inst_9740:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x28fffff; valaddr_reg:x3; val_offset:29220*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29220*0 + 3*524*FLEN/8, x4, x1, x2)

inst_9741:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x29fffff; valaddr_reg:x3; val_offset:29223*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29223*0 + 3*525*FLEN/8, x4, x1, x2)

inst_9742:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2bfffff; valaddr_reg:x3; val_offset:29226*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29226*0 + 3*526*FLEN/8, x4, x1, x2)

inst_9743:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2c00000; valaddr_reg:x3; val_offset:29229*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29229*0 + 3*527*FLEN/8, x4, x1, x2)

inst_9744:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2e00000; valaddr_reg:x3; val_offset:29232*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29232*0 + 3*528*FLEN/8, x4, x1, x2)

inst_9745:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2f00000; valaddr_reg:x3; val_offset:29235*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29235*0 + 3*529*FLEN/8, x4, x1, x2)

inst_9746:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2f80000; valaddr_reg:x3; val_offset:29238*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29238*0 + 3*530*FLEN/8, x4, x1, x2)

inst_9747:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2fc0000; valaddr_reg:x3; val_offset:29241*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29241*0 + 3*531*FLEN/8, x4, x1, x2)

inst_9748:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2fe0000; valaddr_reg:x3; val_offset:29244*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29244*0 + 3*532*FLEN/8, x4, x1, x2)

inst_9749:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2ff0000; valaddr_reg:x3; val_offset:29247*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29247*0 + 3*533*FLEN/8, x4, x1, x2)

inst_9750:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2ff8000; valaddr_reg:x3; val_offset:29250*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29250*0 + 3*534*FLEN/8, x4, x1, x2)

inst_9751:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2ffc000; valaddr_reg:x3; val_offset:29253*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29253*0 + 3*535*FLEN/8, x4, x1, x2)

inst_9752:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2ffe000; valaddr_reg:x3; val_offset:29256*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29256*0 + 3*536*FLEN/8, x4, x1, x2)

inst_9753:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2fff000; valaddr_reg:x3; val_offset:29259*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29259*0 + 3*537*FLEN/8, x4, x1, x2)

inst_9754:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2fff800; valaddr_reg:x3; val_offset:29262*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29262*0 + 3*538*FLEN/8, x4, x1, x2)

inst_9755:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2fffc00; valaddr_reg:x3; val_offset:29265*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29265*0 + 3*539*FLEN/8, x4, x1, x2)

inst_9756:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2fffe00; valaddr_reg:x3; val_offset:29268*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29268*0 + 3*540*FLEN/8, x4, x1, x2)

inst_9757:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2ffff00; valaddr_reg:x3; val_offset:29271*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29271*0 + 3*541*FLEN/8, x4, x1, x2)

inst_9758:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2ffff80; valaddr_reg:x3; val_offset:29274*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29274*0 + 3*542*FLEN/8, x4, x1, x2)

inst_9759:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2ffffc0; valaddr_reg:x3; val_offset:29277*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29277*0 + 3*543*FLEN/8, x4, x1, x2)

inst_9760:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2ffffe0; valaddr_reg:x3; val_offset:29280*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29280*0 + 3*544*FLEN/8, x4, x1, x2)

inst_9761:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2fffff0; valaddr_reg:x3; val_offset:29283*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29283*0 + 3*545*FLEN/8, x4, x1, x2)

inst_9762:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2fffff8; valaddr_reg:x3; val_offset:29286*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29286*0 + 3*546*FLEN/8, x4, x1, x2)

inst_9763:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2fffffc; valaddr_reg:x3; val_offset:29289*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29289*0 + 3*547*FLEN/8, x4, x1, x2)

inst_9764:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2fffffe; valaddr_reg:x3; val_offset:29292*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29292*0 + 3*548*FLEN/8, x4, x1, x2)

inst_9765:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x381821 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x05 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e381821; op2val:0x0;
op3val:0x2ffffff; valaddr_reg:x3; val_offset:29295*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29295*0 + 3*549*FLEN/8, x4, x1, x2)

inst_9766:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:29298*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29298*0 + 3*550*FLEN/8, x4, x1, x2)

inst_9767:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:29301*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29301*0 + 3*551*FLEN/8, x4, x1, x2)

inst_9768:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:29304*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29304*0 + 3*552*FLEN/8, x4, x1, x2)

inst_9769:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:29307*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29307*0 + 3*553*FLEN/8, x4, x1, x2)

inst_9770:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:29310*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29310*0 + 3*554*FLEN/8, x4, x1, x2)

inst_9771:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:29313*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29313*0 + 3*555*FLEN/8, x4, x1, x2)

inst_9772:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:29316*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29316*0 + 3*556*FLEN/8, x4, x1, x2)

inst_9773:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:29319*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29319*0 + 3*557*FLEN/8, x4, x1, x2)

inst_9774:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:29322*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29322*0 + 3*558*FLEN/8, x4, x1, x2)

inst_9775:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:29325*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29325*0 + 3*559*FLEN/8, x4, x1, x2)

inst_9776:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:29328*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29328*0 + 3*560*FLEN/8, x4, x1, x2)

inst_9777:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:29331*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29331*0 + 3*561*FLEN/8, x4, x1, x2)

inst_9778:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:29334*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29334*0 + 3*562*FLEN/8, x4, x1, x2)

inst_9779:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:29337*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29337*0 + 3*563*FLEN/8, x4, x1, x2)

inst_9780:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:29340*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29340*0 + 3*564*FLEN/8, x4, x1, x2)

inst_9781:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:29343*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29343*0 + 3*565*FLEN/8, x4, x1, x2)

inst_9782:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82800000; valaddr_reg:x3; val_offset:29346*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29346*0 + 3*566*FLEN/8, x4, x1, x2)

inst_9783:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82800001; valaddr_reg:x3; val_offset:29349*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29349*0 + 3*567*FLEN/8, x4, x1, x2)

inst_9784:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82800003; valaddr_reg:x3; val_offset:29352*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29352*0 + 3*568*FLEN/8, x4, x1, x2)

inst_9785:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82800007; valaddr_reg:x3; val_offset:29355*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29355*0 + 3*569*FLEN/8, x4, x1, x2)

inst_9786:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x8280000f; valaddr_reg:x3; val_offset:29358*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29358*0 + 3*570*FLEN/8, x4, x1, x2)

inst_9787:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x8280001f; valaddr_reg:x3; val_offset:29361*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29361*0 + 3*571*FLEN/8, x4, x1, x2)

inst_9788:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x8280003f; valaddr_reg:x3; val_offset:29364*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29364*0 + 3*572*FLEN/8, x4, x1, x2)

inst_9789:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x8280007f; valaddr_reg:x3; val_offset:29367*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29367*0 + 3*573*FLEN/8, x4, x1, x2)

inst_9790:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x828000ff; valaddr_reg:x3; val_offset:29370*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29370*0 + 3*574*FLEN/8, x4, x1, x2)

inst_9791:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x828001ff; valaddr_reg:x3; val_offset:29373*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29373*0 + 3*575*FLEN/8, x4, x1, x2)

inst_9792:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x828003ff; valaddr_reg:x3; val_offset:29376*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29376*0 + 3*576*FLEN/8, x4, x1, x2)

inst_9793:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x828007ff; valaddr_reg:x3; val_offset:29379*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29379*0 + 3*577*FLEN/8, x4, x1, x2)

inst_9794:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82800fff; valaddr_reg:x3; val_offset:29382*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29382*0 + 3*578*FLEN/8, x4, x1, x2)

inst_9795:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82801fff; valaddr_reg:x3; val_offset:29385*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29385*0 + 3*579*FLEN/8, x4, x1, x2)

inst_9796:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82803fff; valaddr_reg:x3; val_offset:29388*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29388*0 + 3*580*FLEN/8, x4, x1, x2)

inst_9797:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82807fff; valaddr_reg:x3; val_offset:29391*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29391*0 + 3*581*FLEN/8, x4, x1, x2)

inst_9798:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x8280ffff; valaddr_reg:x3; val_offset:29394*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29394*0 + 3*582*FLEN/8, x4, x1, x2)

inst_9799:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x8281ffff; valaddr_reg:x3; val_offset:29397*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29397*0 + 3*583*FLEN/8, x4, x1, x2)

inst_9800:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x8283ffff; valaddr_reg:x3; val_offset:29400*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29400*0 + 3*584*FLEN/8, x4, x1, x2)

inst_9801:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x8287ffff; valaddr_reg:x3; val_offset:29403*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29403*0 + 3*585*FLEN/8, x4, x1, x2)

inst_9802:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x828fffff; valaddr_reg:x3; val_offset:29406*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29406*0 + 3*586*FLEN/8, x4, x1, x2)

inst_9803:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x829fffff; valaddr_reg:x3; val_offset:29409*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29409*0 + 3*587*FLEN/8, x4, x1, x2)

inst_9804:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82bfffff; valaddr_reg:x3; val_offset:29412*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29412*0 + 3*588*FLEN/8, x4, x1, x2)

inst_9805:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82c00000; valaddr_reg:x3; val_offset:29415*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29415*0 + 3*589*FLEN/8, x4, x1, x2)

inst_9806:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82e00000; valaddr_reg:x3; val_offset:29418*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29418*0 + 3*590*FLEN/8, x4, x1, x2)

inst_9807:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82f00000; valaddr_reg:x3; val_offset:29421*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29421*0 + 3*591*FLEN/8, x4, x1, x2)

inst_9808:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82f80000; valaddr_reg:x3; val_offset:29424*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29424*0 + 3*592*FLEN/8, x4, x1, x2)

inst_9809:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82fc0000; valaddr_reg:x3; val_offset:29427*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29427*0 + 3*593*FLEN/8, x4, x1, x2)

inst_9810:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82fe0000; valaddr_reg:x3; val_offset:29430*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29430*0 + 3*594*FLEN/8, x4, x1, x2)

inst_9811:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82ff0000; valaddr_reg:x3; val_offset:29433*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29433*0 + 3*595*FLEN/8, x4, x1, x2)

inst_9812:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82ff8000; valaddr_reg:x3; val_offset:29436*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29436*0 + 3*596*FLEN/8, x4, x1, x2)

inst_9813:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82ffc000; valaddr_reg:x3; val_offset:29439*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29439*0 + 3*597*FLEN/8, x4, x1, x2)

inst_9814:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82ffe000; valaddr_reg:x3; val_offset:29442*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29442*0 + 3*598*FLEN/8, x4, x1, x2)

inst_9815:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82fff000; valaddr_reg:x3; val_offset:29445*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29445*0 + 3*599*FLEN/8, x4, x1, x2)

inst_9816:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82fff800; valaddr_reg:x3; val_offset:29448*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29448*0 + 3*600*FLEN/8, x4, x1, x2)

inst_9817:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82fffc00; valaddr_reg:x3; val_offset:29451*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29451*0 + 3*601*FLEN/8, x4, x1, x2)

inst_9818:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82fffe00; valaddr_reg:x3; val_offset:29454*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29454*0 + 3*602*FLEN/8, x4, x1, x2)

inst_9819:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82ffff00; valaddr_reg:x3; val_offset:29457*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29457*0 + 3*603*FLEN/8, x4, x1, x2)

inst_9820:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82ffff80; valaddr_reg:x3; val_offset:29460*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29460*0 + 3*604*FLEN/8, x4, x1, x2)

inst_9821:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82ffffc0; valaddr_reg:x3; val_offset:29463*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29463*0 + 3*605*FLEN/8, x4, x1, x2)

inst_9822:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82ffffe0; valaddr_reg:x3; val_offset:29466*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29466*0 + 3*606*FLEN/8, x4, x1, x2)

inst_9823:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82fffff0; valaddr_reg:x3; val_offset:29469*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29469*0 + 3*607*FLEN/8, x4, x1, x2)

inst_9824:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82fffff8; valaddr_reg:x3; val_offset:29472*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29472*0 + 3*608*FLEN/8, x4, x1, x2)

inst_9825:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82fffffc; valaddr_reg:x3; val_offset:29475*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29475*0 + 3*609*FLEN/8, x4, x1, x2)

inst_9826:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82fffffe; valaddr_reg:x3; val_offset:29478*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29478*0 + 3*610*FLEN/8, x4, x1, x2)

inst_9827:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3b52d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x05 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3b52d3; op2val:0x80000000;
op3val:0x82ffffff; valaddr_reg:x3; val_offset:29481*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29481*0 + 3*611*FLEN/8, x4, x1, x2)

inst_9828:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe6000000; valaddr_reg:x3; val_offset:29484*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29484*0 + 3*612*FLEN/8, x4, x1, x2)

inst_9829:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe6000001; valaddr_reg:x3; val_offset:29487*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29487*0 + 3*613*FLEN/8, x4, x1, x2)

inst_9830:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe6000003; valaddr_reg:x3; val_offset:29490*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29490*0 + 3*614*FLEN/8, x4, x1, x2)

inst_9831:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe6000007; valaddr_reg:x3; val_offset:29493*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29493*0 + 3*615*FLEN/8, x4, x1, x2)

inst_9832:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe600000f; valaddr_reg:x3; val_offset:29496*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29496*0 + 3*616*FLEN/8, x4, x1, x2)

inst_9833:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe600001f; valaddr_reg:x3; val_offset:29499*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29499*0 + 3*617*FLEN/8, x4, x1, x2)

inst_9834:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe600003f; valaddr_reg:x3; val_offset:29502*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29502*0 + 3*618*FLEN/8, x4, x1, x2)

inst_9835:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe600007f; valaddr_reg:x3; val_offset:29505*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29505*0 + 3*619*FLEN/8, x4, x1, x2)

inst_9836:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe60000ff; valaddr_reg:x3; val_offset:29508*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29508*0 + 3*620*FLEN/8, x4, x1, x2)

inst_9837:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe60001ff; valaddr_reg:x3; val_offset:29511*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29511*0 + 3*621*FLEN/8, x4, x1, x2)

inst_9838:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe60003ff; valaddr_reg:x3; val_offset:29514*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29514*0 + 3*622*FLEN/8, x4, x1, x2)

inst_9839:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe60007ff; valaddr_reg:x3; val_offset:29517*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29517*0 + 3*623*FLEN/8, x4, x1, x2)

inst_9840:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe6000fff; valaddr_reg:x3; val_offset:29520*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29520*0 + 3*624*FLEN/8, x4, x1, x2)

inst_9841:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe6001fff; valaddr_reg:x3; val_offset:29523*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29523*0 + 3*625*FLEN/8, x4, x1, x2)

inst_9842:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe6003fff; valaddr_reg:x3; val_offset:29526*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29526*0 + 3*626*FLEN/8, x4, x1, x2)

inst_9843:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe6007fff; valaddr_reg:x3; val_offset:29529*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29529*0 + 3*627*FLEN/8, x4, x1, x2)

inst_9844:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe600ffff; valaddr_reg:x3; val_offset:29532*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29532*0 + 3*628*FLEN/8, x4, x1, x2)

inst_9845:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe601ffff; valaddr_reg:x3; val_offset:29535*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29535*0 + 3*629*FLEN/8, x4, x1, x2)

inst_9846:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe603ffff; valaddr_reg:x3; val_offset:29538*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29538*0 + 3*630*FLEN/8, x4, x1, x2)

inst_9847:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe607ffff; valaddr_reg:x3; val_offset:29541*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29541*0 + 3*631*FLEN/8, x4, x1, x2)

inst_9848:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe60fffff; valaddr_reg:x3; val_offset:29544*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29544*0 + 3*632*FLEN/8, x4, x1, x2)

inst_9849:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe61fffff; valaddr_reg:x3; val_offset:29547*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29547*0 + 3*633*FLEN/8, x4, x1, x2)

inst_9850:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe63fffff; valaddr_reg:x3; val_offset:29550*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29550*0 + 3*634*FLEN/8, x4, x1, x2)

inst_9851:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe6400000; valaddr_reg:x3; val_offset:29553*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29553*0 + 3*635*FLEN/8, x4, x1, x2)

inst_9852:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe6600000; valaddr_reg:x3; val_offset:29556*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29556*0 + 3*636*FLEN/8, x4, x1, x2)

inst_9853:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe6700000; valaddr_reg:x3; val_offset:29559*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29559*0 + 3*637*FLEN/8, x4, x1, x2)

inst_9854:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe6780000; valaddr_reg:x3; val_offset:29562*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29562*0 + 3*638*FLEN/8, x4, x1, x2)

inst_9855:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe67c0000; valaddr_reg:x3; val_offset:29565*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29565*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_9856:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe67e0000; valaddr_reg:x3; val_offset:29568*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29568*0 + 3*640*FLEN/8, x4, x1, x2)

inst_9857:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe67f0000; valaddr_reg:x3; val_offset:29571*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29571*0 + 3*641*FLEN/8, x4, x1, x2)

inst_9858:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe67f8000; valaddr_reg:x3; val_offset:29574*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29574*0 + 3*642*FLEN/8, x4, x1, x2)

inst_9859:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe67fc000; valaddr_reg:x3; val_offset:29577*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29577*0 + 3*643*FLEN/8, x4, x1, x2)

inst_9860:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe67fe000; valaddr_reg:x3; val_offset:29580*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29580*0 + 3*644*FLEN/8, x4, x1, x2)

inst_9861:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe67ff000; valaddr_reg:x3; val_offset:29583*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29583*0 + 3*645*FLEN/8, x4, x1, x2)

inst_9862:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe67ff800; valaddr_reg:x3; val_offset:29586*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29586*0 + 3*646*FLEN/8, x4, x1, x2)

inst_9863:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe67ffc00; valaddr_reg:x3; val_offset:29589*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29589*0 + 3*647*FLEN/8, x4, x1, x2)

inst_9864:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe67ffe00; valaddr_reg:x3; val_offset:29592*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29592*0 + 3*648*FLEN/8, x4, x1, x2)

inst_9865:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe67fff00; valaddr_reg:x3; val_offset:29595*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29595*0 + 3*649*FLEN/8, x4, x1, x2)

inst_9866:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe67fff80; valaddr_reg:x3; val_offset:29598*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29598*0 + 3*650*FLEN/8, x4, x1, x2)

inst_9867:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe67fffc0; valaddr_reg:x3; val_offset:29601*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29601*0 + 3*651*FLEN/8, x4, x1, x2)

inst_9868:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe67fffe0; valaddr_reg:x3; val_offset:29604*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29604*0 + 3*652*FLEN/8, x4, x1, x2)

inst_9869:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe67ffff0; valaddr_reg:x3; val_offset:29607*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29607*0 + 3*653*FLEN/8, x4, x1, x2)

inst_9870:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe67ffff8; valaddr_reg:x3; val_offset:29610*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29610*0 + 3*654*FLEN/8, x4, x1, x2)

inst_9871:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe67ffffc; valaddr_reg:x3; val_offset:29613*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29613*0 + 3*655*FLEN/8, x4, x1, x2)

inst_9872:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe67ffffe; valaddr_reg:x3; val_offset:29616*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29616*0 + 3*656*FLEN/8, x4, x1, x2)

inst_9873:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xcc and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xe67fffff; valaddr_reg:x3; val_offset:29619*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29619*0 + 3*657*FLEN/8, x4, x1, x2)

inst_9874:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xff000001; valaddr_reg:x3; val_offset:29622*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29622*0 + 3*658*FLEN/8, x4, x1, x2)

inst_9875:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xff000003; valaddr_reg:x3; val_offset:29625*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29625*0 + 3*659*FLEN/8, x4, x1, x2)

inst_9876:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xff000007; valaddr_reg:x3; val_offset:29628*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29628*0 + 3*660*FLEN/8, x4, x1, x2)

inst_9877:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xff199999; valaddr_reg:x3; val_offset:29631*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29631*0 + 3*661*FLEN/8, x4, x1, x2)

inst_9878:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xff249249; valaddr_reg:x3; val_offset:29634*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29634*0 + 3*662*FLEN/8, x4, x1, x2)

inst_9879:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xff333333; valaddr_reg:x3; val_offset:29637*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29637*0 + 3*663*FLEN/8, x4, x1, x2)

inst_9880:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:29640*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29640*0 + 3*664*FLEN/8, x4, x1, x2)

inst_9881:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:29643*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29643*0 + 3*665*FLEN/8, x4, x1, x2)

inst_9882:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xff444444; valaddr_reg:x3; val_offset:29646*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29646*0 + 3*666*FLEN/8, x4, x1, x2)

inst_9883:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:29649*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29649*0 + 3*667*FLEN/8, x4, x1, x2)

inst_9884:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:29652*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29652*0 + 3*668*FLEN/8, x4, x1, x2)

inst_9885:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xff666666; valaddr_reg:x3; val_offset:29655*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29655*0 + 3*669*FLEN/8, x4, x1, x2)

inst_9886:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:29658*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29658*0 + 3*670*FLEN/8, x4, x1, x2)

inst_9887:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:29661*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29661*0 + 3*671*FLEN/8, x4, x1, x2)

inst_9888:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:29664*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29664*0 + 3*672*FLEN/8, x4, x1, x2)

inst_9889:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e6e75 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2c1287 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e6e75; op2val:0xc0ac1287;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:29667*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29667*0 + 3*673*FLEN/8, x4, x1, x2)

inst_9890:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7d800000; valaddr_reg:x3; val_offset:29670*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29670*0 + 3*674*FLEN/8, x4, x1, x2)

inst_9891:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7d800001; valaddr_reg:x3; val_offset:29673*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29673*0 + 3*675*FLEN/8, x4, x1, x2)

inst_9892:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7d800003; valaddr_reg:x3; val_offset:29676*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29676*0 + 3*676*FLEN/8, x4, x1, x2)

inst_9893:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7d800007; valaddr_reg:x3; val_offset:29679*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29679*0 + 3*677*FLEN/8, x4, x1, x2)

inst_9894:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7d80000f; valaddr_reg:x3; val_offset:29682*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29682*0 + 3*678*FLEN/8, x4, x1, x2)

inst_9895:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7d80001f; valaddr_reg:x3; val_offset:29685*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29685*0 + 3*679*FLEN/8, x4, x1, x2)

inst_9896:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7d80003f; valaddr_reg:x3; val_offset:29688*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29688*0 + 3*680*FLEN/8, x4, x1, x2)

inst_9897:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7d80007f; valaddr_reg:x3; val_offset:29691*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29691*0 + 3*681*FLEN/8, x4, x1, x2)

inst_9898:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7d8000ff; valaddr_reg:x3; val_offset:29694*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29694*0 + 3*682*FLEN/8, x4, x1, x2)

inst_9899:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7d8001ff; valaddr_reg:x3; val_offset:29697*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29697*0 + 3*683*FLEN/8, x4, x1, x2)

inst_9900:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7d8003ff; valaddr_reg:x3; val_offset:29700*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29700*0 + 3*684*FLEN/8, x4, x1, x2)

inst_9901:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7d8007ff; valaddr_reg:x3; val_offset:29703*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29703*0 + 3*685*FLEN/8, x4, x1, x2)

inst_9902:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7d800fff; valaddr_reg:x3; val_offset:29706*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29706*0 + 3*686*FLEN/8, x4, x1, x2)

inst_9903:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7d801fff; valaddr_reg:x3; val_offset:29709*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29709*0 + 3*687*FLEN/8, x4, x1, x2)

inst_9904:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7d803fff; valaddr_reg:x3; val_offset:29712*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29712*0 + 3*688*FLEN/8, x4, x1, x2)

inst_9905:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7d807fff; valaddr_reg:x3; val_offset:29715*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29715*0 + 3*689*FLEN/8, x4, x1, x2)

inst_9906:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7d80ffff; valaddr_reg:x3; val_offset:29718*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29718*0 + 3*690*FLEN/8, x4, x1, x2)

inst_9907:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7d81ffff; valaddr_reg:x3; val_offset:29721*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29721*0 + 3*691*FLEN/8, x4, x1, x2)

inst_9908:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7d83ffff; valaddr_reg:x3; val_offset:29724*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29724*0 + 3*692*FLEN/8, x4, x1, x2)

inst_9909:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7d87ffff; valaddr_reg:x3; val_offset:29727*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29727*0 + 3*693*FLEN/8, x4, x1, x2)

inst_9910:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7d8fffff; valaddr_reg:x3; val_offset:29730*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29730*0 + 3*694*FLEN/8, x4, x1, x2)

inst_9911:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7d9fffff; valaddr_reg:x3; val_offset:29733*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29733*0 + 3*695*FLEN/8, x4, x1, x2)

inst_9912:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7dbfffff; valaddr_reg:x3; val_offset:29736*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29736*0 + 3*696*FLEN/8, x4, x1, x2)

inst_9913:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7dc00000; valaddr_reg:x3; val_offset:29739*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29739*0 + 3*697*FLEN/8, x4, x1, x2)

inst_9914:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7de00000; valaddr_reg:x3; val_offset:29742*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29742*0 + 3*698*FLEN/8, x4, x1, x2)

inst_9915:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7df00000; valaddr_reg:x3; val_offset:29745*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29745*0 + 3*699*FLEN/8, x4, x1, x2)

inst_9916:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7df80000; valaddr_reg:x3; val_offset:29748*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29748*0 + 3*700*FLEN/8, x4, x1, x2)

inst_9917:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7dfc0000; valaddr_reg:x3; val_offset:29751*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29751*0 + 3*701*FLEN/8, x4, x1, x2)

inst_9918:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7dfe0000; valaddr_reg:x3; val_offset:29754*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29754*0 + 3*702*FLEN/8, x4, x1, x2)

inst_9919:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7dff0000; valaddr_reg:x3; val_offset:29757*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29757*0 + 3*703*FLEN/8, x4, x1, x2)

inst_9920:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7dff8000; valaddr_reg:x3; val_offset:29760*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29760*0 + 3*704*FLEN/8, x4, x1, x2)

inst_9921:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7dffc000; valaddr_reg:x3; val_offset:29763*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29763*0 + 3*705*FLEN/8, x4, x1, x2)

inst_9922:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7dffe000; valaddr_reg:x3; val_offset:29766*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29766*0 + 3*706*FLEN/8, x4, x1, x2)

inst_9923:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7dfff000; valaddr_reg:x3; val_offset:29769*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29769*0 + 3*707*FLEN/8, x4, x1, x2)

inst_9924:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7dfff800; valaddr_reg:x3; val_offset:29772*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29772*0 + 3*708*FLEN/8, x4, x1, x2)

inst_9925:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7dfffc00; valaddr_reg:x3; val_offset:29775*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29775*0 + 3*709*FLEN/8, x4, x1, x2)

inst_9926:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7dfffe00; valaddr_reg:x3; val_offset:29778*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29778*0 + 3*710*FLEN/8, x4, x1, x2)

inst_9927:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7dffff00; valaddr_reg:x3; val_offset:29781*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29781*0 + 3*711*FLEN/8, x4, x1, x2)

inst_9928:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7dffff80; valaddr_reg:x3; val_offset:29784*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29784*0 + 3*712*FLEN/8, x4, x1, x2)

inst_9929:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7dffffc0; valaddr_reg:x3; val_offset:29787*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29787*0 + 3*713*FLEN/8, x4, x1, x2)

inst_9930:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7dffffe0; valaddr_reg:x3; val_offset:29790*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29790*0 + 3*714*FLEN/8, x4, x1, x2)

inst_9931:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7dfffff0; valaddr_reg:x3; val_offset:29793*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29793*0 + 3*715*FLEN/8, x4, x1, x2)

inst_9932:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7dfffff8; valaddr_reg:x3; val_offset:29796*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29796*0 + 3*716*FLEN/8, x4, x1, x2)

inst_9933:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7dfffffc; valaddr_reg:x3; val_offset:29799*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29799*0 + 3*717*FLEN/8, x4, x1, x2)

inst_9934:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7dfffffe; valaddr_reg:x3; val_offset:29802*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29802*0 + 3*718*FLEN/8, x4, x1, x2)

inst_9935:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfb and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7dffffff; valaddr_reg:x3; val_offset:29805*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29805*0 + 3*719*FLEN/8, x4, x1, x2)

inst_9936:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7f000001; valaddr_reg:x3; val_offset:29808*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29808*0 + 3*720*FLEN/8, x4, x1, x2)

inst_9937:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7f000003; valaddr_reg:x3; val_offset:29811*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29811*0 + 3*721*FLEN/8, x4, x1, x2)

inst_9938:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7f000007; valaddr_reg:x3; val_offset:29814*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29814*0 + 3*722*FLEN/8, x4, x1, x2)

inst_9939:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7f199999; valaddr_reg:x3; val_offset:29817*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29817*0 + 3*723*FLEN/8, x4, x1, x2)

inst_9940:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7f249249; valaddr_reg:x3; val_offset:29820*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29820*0 + 3*724*FLEN/8, x4, x1, x2)

inst_9941:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7f333333; valaddr_reg:x3; val_offset:29823*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29823*0 + 3*725*FLEN/8, x4, x1, x2)

inst_9942:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:29826*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29826*0 + 3*726*FLEN/8, x4, x1, x2)

inst_9943:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:29829*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29829*0 + 3*727*FLEN/8, x4, x1, x2)

inst_9944:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7f444444; valaddr_reg:x3; val_offset:29832*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29832*0 + 3*728*FLEN/8, x4, x1, x2)

inst_9945:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:29835*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29835*0 + 3*729*FLEN/8, x4, x1, x2)

inst_9946:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:29838*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29838*0 + 3*730*FLEN/8, x4, x1, x2)

inst_9947:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7f666666; valaddr_reg:x3; val_offset:29841*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29841*0 + 3*731*FLEN/8, x4, x1, x2)

inst_9948:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:29844*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29844*0 + 3*732*FLEN/8, x4, x1, x2)

inst_9949:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:29847*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29847*0 + 3*733*FLEN/8, x4, x1, x2)

inst_9950:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:29850*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29850*0 + 3*734*FLEN/8, x4, x1, x2)

inst_9951:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3e8248 and fs2 == 0 and fe2 == 0x81 and fm2 == 0x2c009f and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3e8248; op2val:0x40ac009f;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:29853*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29853*0 + 3*735*FLEN/8, x4, x1, x2)

inst_9952:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfb800000; valaddr_reg:x3; val_offset:29856*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29856*0 + 3*736*FLEN/8, x4, x1, x2)

inst_9953:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfb800001; valaddr_reg:x3; val_offset:29859*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29859*0 + 3*737*FLEN/8, x4, x1, x2)

inst_9954:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfb800003; valaddr_reg:x3; val_offset:29862*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29862*0 + 3*738*FLEN/8, x4, x1, x2)

inst_9955:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfb800007; valaddr_reg:x3; val_offset:29865*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29865*0 + 3*739*FLEN/8, x4, x1, x2)

inst_9956:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfb80000f; valaddr_reg:x3; val_offset:29868*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29868*0 + 3*740*FLEN/8, x4, x1, x2)

inst_9957:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfb80001f; valaddr_reg:x3; val_offset:29871*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29871*0 + 3*741*FLEN/8, x4, x1, x2)

inst_9958:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfb80003f; valaddr_reg:x3; val_offset:29874*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29874*0 + 3*742*FLEN/8, x4, x1, x2)

inst_9959:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfb80007f; valaddr_reg:x3; val_offset:29877*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29877*0 + 3*743*FLEN/8, x4, x1, x2)

inst_9960:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfb8000ff; valaddr_reg:x3; val_offset:29880*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29880*0 + 3*744*FLEN/8, x4, x1, x2)

inst_9961:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfb8001ff; valaddr_reg:x3; val_offset:29883*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29883*0 + 3*745*FLEN/8, x4, x1, x2)

inst_9962:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfb8003ff; valaddr_reg:x3; val_offset:29886*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29886*0 + 3*746*FLEN/8, x4, x1, x2)

inst_9963:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfb8007ff; valaddr_reg:x3; val_offset:29889*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29889*0 + 3*747*FLEN/8, x4, x1, x2)

inst_9964:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfb800fff; valaddr_reg:x3; val_offset:29892*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29892*0 + 3*748*FLEN/8, x4, x1, x2)

inst_9965:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfb801fff; valaddr_reg:x3; val_offset:29895*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29895*0 + 3*749*FLEN/8, x4, x1, x2)

inst_9966:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfb803fff; valaddr_reg:x3; val_offset:29898*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29898*0 + 3*750*FLEN/8, x4, x1, x2)

inst_9967:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfb807fff; valaddr_reg:x3; val_offset:29901*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29901*0 + 3*751*FLEN/8, x4, x1, x2)

inst_9968:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfb80ffff; valaddr_reg:x3; val_offset:29904*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29904*0 + 3*752*FLEN/8, x4, x1, x2)

inst_9969:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfb81ffff; valaddr_reg:x3; val_offset:29907*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29907*0 + 3*753*FLEN/8, x4, x1, x2)

inst_9970:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfb83ffff; valaddr_reg:x3; val_offset:29910*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29910*0 + 3*754*FLEN/8, x4, x1, x2)

inst_9971:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfb87ffff; valaddr_reg:x3; val_offset:29913*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29913*0 + 3*755*FLEN/8, x4, x1, x2)

inst_9972:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfb8fffff; valaddr_reg:x3; val_offset:29916*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29916*0 + 3*756*FLEN/8, x4, x1, x2)

inst_9973:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfb9fffff; valaddr_reg:x3; val_offset:29919*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29919*0 + 3*757*FLEN/8, x4, x1, x2)

inst_9974:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfbbfffff; valaddr_reg:x3; val_offset:29922*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29922*0 + 3*758*FLEN/8, x4, x1, x2)

inst_9975:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfbc00000; valaddr_reg:x3; val_offset:29925*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29925*0 + 3*759*FLEN/8, x4, x1, x2)

inst_9976:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfbe00000; valaddr_reg:x3; val_offset:29928*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29928*0 + 3*760*FLEN/8, x4, x1, x2)

inst_9977:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfbf00000; valaddr_reg:x3; val_offset:29931*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29931*0 + 3*761*FLEN/8, x4, x1, x2)

inst_9978:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfbf80000; valaddr_reg:x3; val_offset:29934*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29934*0 + 3*762*FLEN/8, x4, x1, x2)

inst_9979:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfbfc0000; valaddr_reg:x3; val_offset:29937*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29937*0 + 3*763*FLEN/8, x4, x1, x2)

inst_9980:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfbfe0000; valaddr_reg:x3; val_offset:29940*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29940*0 + 3*764*FLEN/8, x4, x1, x2)

inst_9981:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfbff0000; valaddr_reg:x3; val_offset:29943*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29943*0 + 3*765*FLEN/8, x4, x1, x2)

inst_9982:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfbff8000; valaddr_reg:x3; val_offset:29946*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29946*0 + 3*766*FLEN/8, x4, x1, x2)

inst_9983:
// fs1 == 0 and fe1 == 0xfc and fm1 == 0x3f44a3 and fs2 == 1 and fe2 == 0x81 and fm2 == 0x2b51d7 and fs3 == 1 and fe3 == 0xf7 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7e3f44a3; op2val:0xc0ab51d7;
op3val:0xfbffc000; valaddr_reg:x3; val_offset:29949*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 29949*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x648000ff686110463,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x648001ff686110719,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x648003ff686111231,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x648007ff686112255,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x64800fff686114303,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x64801fff686118399,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x64803fff686126591,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x64807fff686142975,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x6480ffff686175743,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x6481ffff686241279,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x6483ffff686372351,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x6487ffff686634495,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x648fffff687158783,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x649fffff688207359,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x64bfffff690304511,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x64c00000690304512,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x64e00000692401664,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x64f00000693450240,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x64f80000693974528,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x64fc0000694236672,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x64fe0000694367744,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x64ff0000694433280,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x64ff8000694466048,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x64ffc000694482432,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x64ffe000694490624,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x64fff000694494720,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x64fff800694496768,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x64fffc00694497792,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x64fffe00694498304,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x64ffff00694498560,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x64ffff80694498688,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x64ffffc0694498752,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x64ffffe0694498784,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x64fffff0694498800,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x64fffff8694498808,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x64fffffc694498812,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x64fffffe694498814,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x64ffffff694498815,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x7f000001130706433,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x7f000003130706435,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x7f000007130706439,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x7f199999132384153,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x7f249249133103177,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x7f333333134061875,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x7f36db6d134301549,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x7f3bbbbb134621115,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x7f444444135180356,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x7f4ccccc135739596,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x7f5b6db6136698294,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x7f666666137417318,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x7f6db6db137896667,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x7f7ffff8139095032,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x7f7ffffc139095036,32,FLEN)
NAN_BOXED(0x7e3104df117141727,32,FLEN)
NAN_BOXED(0x40b91c2b085873195,32,FLEN)
NAN_BOXED(0x7f7ffffe139095038,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf0800000034920448,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf0800001034920449,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf0800003034920451,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf0800007034920455,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf080000f034920463,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf080001f034920479,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf080003f034920511,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf080007f034920575,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf08000ff034920703,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf08001ff034920959,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf08003ff034921471,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf08007ff034922495,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf0800fff034924543,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf0801fff034928639,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf0803fff034936831,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf0807fff034953215,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf080ffff034985983,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf081ffff035051519,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf083ffff035182591,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf087ffff035444735,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf08fffff035969023,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf09fffff037017599,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf0bfffff039114751,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf0c00000039114752,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf0e00000041211904,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf0f00000042260480,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf0f80000042784768,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf0fc0000043046912,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf0fe0000043177984,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf0ff0000043243520,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf0ff8000043276288,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf0ffc000043292672,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf0ffe000043300864,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf0fff000043304960,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf0fff800043307008,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf0fffc00043308032,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf0fffe00043308544,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf0ffff00043308800,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf0ffff80043308928,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf0ffffc0043308992,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf0ffffe0043309024,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf0fffff0043309040,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf0fffff8043309048,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf0fffffc043309052,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf0fffffe043309054,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xf0ffffff043309055,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xff000001278190081,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xff000003278190083,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xff000007278190087,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xff199999279867801,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xff249249280586825,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xff333333281545523,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xff36db6d281785197,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xff3bbbbb282104763,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xff444444282664004,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xff4ccccc283223244,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xff5b6db6284181942,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xff666666284900966,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xff6db6db285380315,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xff7ffff8286578680,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xff7ffffc286578684,32,FLEN)
NAN_BOXED(0x7e32745e117235806,32,FLEN)
NAN_BOXED(0xc0b79ef7233259255,32,FLEN)
NAN_BOXED(0xff7ffffe286578686,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6a800000786773504,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6a800001786773505,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6a800003786773507,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6a800007786773511,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6a80000f786773519,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6a80001f786773535,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6a80003f786773567,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6a80007f786773631,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6a8000ff786773759,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6a8001ff786774015,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6a8003ff786774527,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6a8007ff786775551,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6a800fff786777599,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6a801fff786781695,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6a803fff786789887,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6a807fff786806271,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6a80ffff786839039,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6a81ffff786904575,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6a83ffff787035647,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6a87ffff787297791,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6a8fffff787822079,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6a9fffff788870655,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6abfffff790967807,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6ac00000790967808,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6ae00000793064960,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6af00000794113536,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6af80000794637824,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6afc0000794899968,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6afe0000795031040,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6aff0000795096576,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6aff8000795129344,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6affc000795145728,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6affe000795153920,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6afff000795158016,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6afff800795160064,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6afffc00795161088,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6afffe00795161600,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6affff00795161856,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6affff80795161984,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6affffc0795162048,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6affffe0795162080,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6afffff0795162096,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6afffff8795162104,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6afffffc795162108,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6afffffe795162110,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x6affffff795162111,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x7f000001130706433,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x7f000003130706435,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x7f000007130706439,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x7f199999132384153,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x7f249249133103177,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x7f333333134061875,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x7f36db6d134301549,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x7f3bbbbb134621115,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x7f444444135180356,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x7f4ccccc135739596,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x7f5b6db6136698294,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x7f666666137417318,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x7f6db6db137896667,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x7f7ffff8139095032,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x7f7ffffc139095036,32,FLEN)
NAN_BOXED(0x7e32d6bf117260991,32,FLEN)
NAN_BOXED(0x40b739f4085749748,32,FLEN)
NAN_BOXED(0x7f7ffffe139095038,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000001147483649,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000003147483651,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000007147483655,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80199999149161369,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80249249149880393,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80333333150839091,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8036db6d151078765,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x803bbbbb151398331,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80444444151957572,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x804ccccc152516812,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x805b6db6153475510,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80666666154194534,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x806db6db154673883,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffff8155872248,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffc155872252,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffe155872254,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x88000000281701376,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x88000001281701377,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x88000003281701379,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x88000007281701383,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8800000f281701391,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8800001f281701407,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8800003f281701439,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8800007f281701503,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x880000ff281701631,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x880001ff281701887,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x880003ff281702399,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x880007ff281703423,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x88000fff281705471,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x88001fff281709567,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x88003fff281717759,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x88007fff281734143,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8800ffff281766911,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8801ffff281832447,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8803ffff281963519,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8807ffff282225663,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x880fffff282749951,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x881fffff283798527,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x883fffff285895679,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x88400000285895680,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x88600000287992832,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x88700000289041408,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x88780000289565696,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887c0000289827840,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887e0000289958912,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887f0000290024448,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887f8000290057216,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887fc000290073600,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887fe000290081792,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887ff000290085888,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887ff800290087936,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887ffc00290088960,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887ffe00290089472,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887fff00290089728,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887fff80290089856,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887fffc0290089920,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887fffe0290089952,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887ffff0290089968,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887ffff8290089976,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887ffffc290089980,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887ffffe290089982,32,FLEN)
NAN_BOXED(0x7e3361f1117296625,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x887fffff290089983,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x2500000020756992,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x2500000120756993,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x2500000320756995,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x2500000720756999,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x2500000f20757007,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x2500001f20757023,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x2500003f20757055,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x2500007f20757119,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x250000ff20757247,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x250001ff20757503,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x250003ff20758015,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x250007ff20759039,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x25000fff20761087,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x25001fff20765183,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x25003fff20773375,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x25007fff20789759,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x2500ffff20822527,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x2501ffff20888063,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x2503ffff21019135,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x2507ffff21281279,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x250fffff21805567,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x251fffff22854143,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x253fffff24951295,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x2540000024951296,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x2560000027048448,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x2570000028097024,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x2578000028621312,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x257c000028883456,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x257e000029014528,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x257f000029080064,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x257f800029112832,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x257fc00029129216,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x257fe00029137408,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x257ff00029141504,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x257ff80029143552,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x257ffc0029144576,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x257ffe0029145088,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x257fff0029145344,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x257fff8029145472,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x257fffc029145536,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x257fffe029145568,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x257ffff029145584,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x257ffff829145592,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x257ffffc29145596,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x257ffffe29145598,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x257fffff29145599,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x3f800001065353217,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x3f800003065353219,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x3f800007065353223,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x3f999999067030937,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x3fa49249067749961,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x3fb33333068708659,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x3fb6db6d068948333,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x3fbbbbbb069267899,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x3fc44444069827140,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x3fcccccc070386380,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x3fdb6db6071345078,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x3fe66666072064102,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x3fedb6db072543451,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x3ffffff8073741816,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x3ffffffc073741820,32,FLEN)
NAN_BOXED(0x7e34dd85117393797,32,FLEN)
NAN_BOXED(0xb52c691873385,32,FLEN)
NAN_BOXED(0x3ffffffe073741822,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x76000000979711488,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x76000001979711489,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x76000003979711491,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x76000007979711495,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x7600000f979711503,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x7600001f979711519,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x7600003f979711551,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x7600007f979711615,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x760000ff979711743,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x760001ff979711999,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x760003ff979712511,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x760007ff979713535,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x76000fff979715583,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x76001fff979719679,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x76003fff979727871,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x76007fff979744255,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x7600ffff979777023,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x7601ffff979842559,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x7603ffff979973631,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x7607ffff980235775,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x760fffff980760063,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x761fffff981808639,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x763fffff983905791,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x76400000983905792,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x76600000986002944,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x76700000987051520,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x76780000987575808,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x767c0000987837952,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x767e0000987969024,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x767f0000988034560,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x767f8000988067328,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x767fc000988083712,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x767fe000988091904,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x767ff000988096000,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x767ff800988098048,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x767ffc00988099072,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x767ffe00988099584,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x767fff00988099840,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x767fff80988099968,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x767fffc0988100032,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x767fffe0988100064,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x767ffff0988100080,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x767ffff8988100088,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x767ffffc988100092,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x767ffffe988100094,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x767fffff988100095,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x7f000001130706433,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x7f000003130706435,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x7f000007130706439,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x7f199999132384153,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x7f249249133103177,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x7f333333134061875,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x7f36db6d134301549,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x7f3bbbbb134621115,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x7f444444135180356,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x7f4ccccc135739596,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x7f5b6db6136698294,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x7f666666137417318,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x7f6db6db137896667,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x7f7ffff8139095032,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x7f7ffffc139095036,32,FLEN)
NAN_BOXED(0x7e35c0b2117451954,32,FLEN)
NAN_BOXED(0x40b449f5085557237,32,FLEN)
NAN_BOXED(0x7f7ffffe139095038,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000001147483649,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000003147483651,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000007147483655,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80199999149161369,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80249249149880393,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80333333150839091,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8036db6d151078765,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x803bbbbb151398331,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80444444151957572,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x804ccccc152516812,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x805b6db6153475510,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80666666154194534,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x806db6db154673883,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffff8155872248,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffc155872252,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffe155872254,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x85000000231369728,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x85000001231369729,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x85000003231369731,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x85000007231369735,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8500000f231369743,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8500001f231369759,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8500003f231369791,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8500007f231369855,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x850000ff231369983,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x850001ff231370239,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x850003ff231370751,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x850007ff231371775,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x85000fff231373823,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x85001fff231377919,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x85003fff231386111,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x85007fff231402495,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8500ffff231435263,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8501ffff231500799,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8503ffff231631871,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8507ffff231894015,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x850fffff232418303,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x851fffff233466879,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x853fffff235564031,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x85400000235564032,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x85600000237661184,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x85700000238709760,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x85780000239234048,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x857c0000239496192,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x857e0000239627264,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x857f0000239692800,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x857f8000239725568,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x857fc000239741952,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x857fe000239750144,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x857ff000239754240,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x857ff800239756288,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x857ffc00239757312,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x857ffe00239757824,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x857fff00239758080,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x857fff80239758208,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x857fffc0239758272,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x857fffe0239758304,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x857ffff0239758320,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x857ffff8239758328,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x857ffffc239758332,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x857ffffe239758334,32,FLEN)
NAN_BOXED(0x7e3741cc117550540,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x857fffff239758335,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000001147483649,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000003147483651,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000007147483655,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80199999149161369,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80249249149880393,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80333333150839091,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8036db6d151078765,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x803bbbbb151398331,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80444444151957572,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x804ccccc152516812,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x805b6db6153475510,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80666666154194534,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x806db6db154673883,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffff8155872248,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffc155872252,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffe155872254,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x90000000415919104,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x90000001415919105,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x90000003415919107,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x90000007415919111,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x9000000f415919119,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x9000001f415919135,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x9000003f415919167,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x9000007f415919231,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x900000ff415919359,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x900001ff415919615,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x900003ff415920127,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x900007ff415921151,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x90000fff415923199,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x90001fff415927295,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x90003fff415935487,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x90007fff415951871,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x9000ffff415984639,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x9001ffff416050175,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x9003ffff416181247,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x9007ffff416443391,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x900fffff416967679,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x901fffff418016255,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x903fffff420113407,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x90400000420113408,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x90600000422210560,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x90700000423259136,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x90780000423783424,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x907c0000424045568,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x907e0000424176640,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x907f0000424242176,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x907f8000424274944,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x907fc000424291328,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x907fe000424299520,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x907ff000424303616,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x907ff800424305664,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x907ffc00424306688,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x907ffe00424307200,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x907fff00424307456,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x907fff80424307584,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x907fffc0424307648,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x907fffe0424307680,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x907ffff0424307696,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x907ffff8424307704,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x907ffffc424307708,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x907ffffe424307710,32,FLEN)
NAN_BOXED(0x7e3783d0117567440,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x907fffff424307711,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x3,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x199999677721,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x249249396745,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x333333355443,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x36db6d595117,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x3bbbbb914683,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x444444473924,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x4ccccc033164,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5b6db6991862,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x666666710886,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x6db6db190235,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffff8388600,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffffc388604,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffffe388606,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x28000001943040,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x28000011943041,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x28000031943043,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x28000071943047,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x280000f1943055,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x280001f1943071,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x280003f1943103,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x280007f1943167,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x28000ff1943295,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x28001ff1943551,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x28003ff1944063,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x28007ff1945087,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x2800fff1947135,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x2801fff1951231,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x2803fff1959423,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x2807fff1975807,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x280ffff2008575,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x281ffff2074111,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x283ffff2205183,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x287ffff2467327,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x28fffff2991615,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x29fffff4040191,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x2bfffff6137343,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x2c000006137344,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x2e000008234496,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x2f000009283072,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x2f800009807360,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x2fc00000069504,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x2fe00000200576,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x2ff00000266112,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x2ff80000298880,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x2ffc0000315264,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x2ffe0000323456,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x2fff0000327552,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x2fff8000329600,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x2fffc000330624,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x2fffe000331136,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x2ffff000331392,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x2ffff800331520,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x2ffffc00331584,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x2ffffe00331616,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x2fffff00331632,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x2fffff80331640,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x2fffffc0331644,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x2fffffe0331646,32,FLEN)
NAN_BOXED(0x7e381821117605409,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x2ffffff0331647,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000001147483649,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000003147483651,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000007147483655,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80199999149161369,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80249249149880393,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80333333150839091,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8036db6d151078765,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x803bbbbb151398331,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80444444151957572,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x804ccccc152516812,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x805b6db6153475510,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80666666154194534,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x806db6db154673883,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffff8155872248,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffc155872252,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffe155872254,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x82800000189426688,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x82800001189426689,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x82800003189426691,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x82800007189426695,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8280000f189426703,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8280001f189426719,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8280003f189426751,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8280007f189426815,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x828000ff189426943,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x828001ff189427199,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x828003ff189427711,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x828007ff189428735,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x82800fff189430783,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x82801fff189434879,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x82803fff189443071,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x82807fff189459455,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8280ffff189492223,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8281ffff189557759,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8283ffff189688831,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8287ffff189950975,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x828fffff190475263,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x829fffff191523839,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x82bfffff193620991,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x82c00000193620992,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x82e00000195718144,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x82f00000196766720,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x82f80000197291008,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x82fc0000197553152,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x82fe0000197684224,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x82ff0000197749760,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x82ff8000197782528,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x82ffc000197798912,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x82ffe000197807104,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x82fff000197811200,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x82fff800197813248,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x82fffc00197814272,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x82fffe00197814784,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x82ffff00197815040,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x82ffff80197815168,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x82ffffc0197815232,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x82ffffe0197815264,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x82fffff0197815280,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x82fffff8197815288,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x82fffffc197815292,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x82fffffe197815294,32,FLEN)
NAN_BOXED(0x7e3b52d3117817043,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x82ffffff197815295,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe6000000858759680,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe6000001858759681,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe6000003858759683,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe6000007858759687,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe600000f858759695,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe600001f858759711,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe600003f858759743,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe600007f858759807,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe60000ff858759935,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe60001ff858760191,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe60003ff858760703,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe60007ff858761727,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe6000fff858763775,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe6001fff858767871,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe6003fff858776063,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe6007fff858792447,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe600ffff858825215,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe601ffff858890751,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe603ffff859021823,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe607ffff859283967,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe60fffff859808255,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe61fffff860856831,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe63fffff862953983,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe6400000862953984,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe6600000865051136,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe6700000866099712,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe6780000866624000,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe67c0000866886144,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe67e0000867017216,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe67f0000867082752,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe67f8000867115520,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe67fc000867131904,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe67fe000867140096,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe67ff000867144192,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe67ff800867146240,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe67ffc00867147264,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe67ffe00867147776,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe67fff00867148032,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe67fff80867148160,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe67fffc0867148224,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe67fffe0867148256,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe67ffff0867148272,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe67ffff8867148280,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe67ffffc867148284,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe67ffffe867148286,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xe67fffff867148287,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xff000001278190081,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xff000003278190083,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xff000007278190087,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xff199999279867801,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xff249249280586825,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xff333333281545523,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xff36db6d281785197,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xff3bbbbb282104763,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xff444444282664004,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xff4ccccc283223244,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xff5b6db6284181942,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xff666666284900966,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xff6db6db285380315,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xff7ffff8286578680,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xff7ffffc286578684,32,FLEN)
NAN_BOXED(0x7e3e6e75118020725,32,FLEN)
NAN_BOXED(0xc0ac1287232502407,32,FLEN)
NAN_BOXED(0xff7ffffe286578686,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7d800000105540608,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7d800001105540609,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7d800003105540611,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7d800007105540615,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7d80000f105540623,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7d80001f105540639,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7d80003f105540671,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7d80007f105540735,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7d8000ff105540863,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7d8001ff105541119,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7d8003ff105541631,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7d8007ff105542655,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7d800fff105544703,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7d801fff105548799,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7d803fff105556991,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7d807fff105573375,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7d80ffff105606143,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7d81ffff105671679,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7d83ffff105802751,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7d87ffff106064895,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7d8fffff106589183,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7d9fffff107637759,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7dbfffff109734911,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7dc00000109734912,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7de00000111832064,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7df00000112880640,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7df80000113404928,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7dfc0000113667072,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7dfe0000113798144,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7dff0000113863680,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7dff8000113896448,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7dffc000113912832,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7dffe000113921024,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7dfff000113925120,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7dfff800113927168,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7dfffc00113928192,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7dfffe00113928704,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7dffff00113928960,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7dffff80113929088,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7dffffc0113929152,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7dffffe0113929184,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7dfffff0113929200,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7dfffff8113929208,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7dfffffc113929212,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7dfffffe113929214,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7dffffff113929215,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7f000001130706433,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7f000003130706435,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7f000007130706439,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7f199999132384153,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7f249249133103177,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7f333333134061875,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7f36db6d134301549,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7f3bbbbb134621115,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7f444444135180356,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7f4ccccc135739596,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7f5b6db6136698294,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7f666666137417318,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7f6db6db137896667,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7f7ffff8139095032,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7f7ffffc139095036,32,FLEN)
NAN_BOXED(0x7e3e8248118025800,32,FLEN)
NAN_BOXED(0x40ac009f085014175,32,FLEN)
NAN_BOXED(0x7f7ffffe139095038,32,FLEN)
NAN_BOXED(0x7e3f44a3118075555,32,FLEN)
NAN_BOXED(0xc0ab51d7232453079,32,FLEN)
NAN_BOXED(0xfb800000219469824,32,FLEN)
NAN_BOXED(0x7e3f44a3118075555,32,FLEN)
NAN_BOXED(0xc0ab51d7232453079,32,FLEN)
NAN_BOXED(0xfb800001219469825,32,FLEN)
NAN_BOXED(0x7e3f44a3118075555,32,FLEN)
NAN_BOXED(0xc0ab51d7232453079,32,FLEN)
NAN_BOXED(0xfb800003219469827,32,FLEN)
NAN_BOXED(0x7e3f44a3118075555,32,FLEN)
NAN_BOXED(0xc0ab51d7232453079,32,FLEN)
NAN_BOXED(0xfb800007219469831,32,FLEN)
NAN_BOXED(0x7e3f44a3118075555,32,FLEN)
NAN_BOXED(0xc0ab51d7232453079,32,FLEN)
NAN_BOXED(0xfb80000f219469839,32,FLEN)
NAN_BOXED(0x7e3f44a3118075555,32,FLEN)
NAN_BOXED(0xc0ab51d7232453079,32,FLEN)
NAN_BOXED(0xfb80001f219469855,32,FLEN)
NAN_BOXED(0x7e3f44a3118075555,32,FLEN)
NAN_BOXED(0xc0ab51d7232453079,32,FLEN)
NAN_BOXED(0xfb80003f219469887,32,FLEN)
NAN_BOXED(0x7e3f44a3118075555,32,FLEN)
NAN_BOXED(0xc0ab51d7232453079,32,FLEN)
NAN_BOXED(0xfb80007f219469951,32,FLEN)
NAN_BOXED(0x7e3f44a3118075555,32,FLEN)
NAN_BOXED(0xc0ab51d7232453079,32,FLEN)
NAN_BOXED(0xfb8000ff219470079,32,FLEN)
NAN_BOXED(0x7e3f44a3118075555,32,FLEN)
NAN_BOXED(0xc0ab51d7232453079,32,FLEN)
NAN_BOXED(0xfb8001ff219470335,32,FLEN)
NAN_BOXED(0x7e3f44a3118075555,32,FLEN)
NAN_BOXED(0xc0ab51d7232453079,32,FLEN)
NAN_BOXED(0xfb8003ff219470847,32,FLEN)
NAN_BOXED(0x7e3f44a3118075555,32,FLEN)
NAN_BOXED(0xc0ab51d7232453079,32,FLEN)
NAN_BOXED(0xfb8007ff219471871,32,FLEN)
NAN_BOXED(0x7e3f44a3118075555,32,FLEN)
NAN_BOXED(0xc0ab51d7232453079,32,FLEN)
NAN_BOXED(0xfb800fff219473919,32,FLEN)
NAN_BOXED(0x7e3f44a3118075555,32,FLEN)
NAN_BOXED(0xc0ab51d7232453079,32,FLEN)
NAN_BOXED(0xfb801fff219478015,32,FLEN)
NAN_BOXED(0x7e3f44a3118075555,32,FLEN)
NAN_BOXED(0xc0ab51d7232453079,32,FLEN)
NAN_BOXED(0xfb803fff219486207,32,FLEN)
NAN_BOXED(0x7e3f44a3118075555,32,FLEN)
NAN_BOXED(0xc0ab51d7232453079,32,FLEN)
NAN_BOXED(0xfb807fff219502591,32,FLEN)
NAN_BOXED(0x7e3f44a3118075555,32,FLEN)
NAN_BOXED(0xc0ab51d7232453079,32,FLEN)
NAN_BOXED(0xfb80ffff219535359,32,FLEN)
NAN_BOXED(0x7e3f44a3118075555,32,FLEN)
NAN_BOXED(0xc0ab51d7232453079,32,FLEN)
NAN_BOXED(0xfb81ffff219600895,32,FLEN)
NAN_BOXED(0x7e3f44a3118075555,32,FLEN)
NAN_BOXED(0xc0ab51d7232453079,32,FLEN)
NAN_BOXED(0xfb83ffff219731967,32,FLEN)
NAN_BOXED(0x7e3f44a3118075555,32,FLEN)
NAN_BOXED(0xc0ab51d7232453079,32,FLEN)
NAN_BOXED(0xfb87ffff219994111,32,FLEN)
NAN_BOXED(0x7e3f44a3118075555,32,FLEN)
NAN_BOXED(0xc0ab51d7232453079,32,FLEN)
NAN_BOXED(0xfb8fffff220518399,32,FLEN)
NAN_BOXED(0x7e3f44a3118075555,32,FLEN)
NAN_BOXED(0xc0ab51d7232453079,32,FLEN)
NAN_BOXED(0xfb9fffff221566975,32,FLEN)
NAN_BOXED(0x7e3f44a3118075555,32,FLEN)
NAN_BOXED(0xc0ab51d7232453079,32,FLEN)
NAN_BOXED(0xfbbfffff223664127,32,FLEN)
NAN_BOXED(0x7e3f44a3118075555,32,FLEN)
NAN_BOXED(0xc0ab51d7232453079,32,FLEN)
NAN_BOXED(0xfbc00000223664128,32,FLEN)
NAN_BOXED(0x7e3f44a3118075555,32,FLEN)
NAN_BOXED(0xc0ab51d7232453079,32,FLEN)
NAN_BOXED(0xfbe00000225761280,32,FLEN)
NAN_BOXED(0x7e3f44a3118075555,32,FLEN)
NAN_BOXED(0xc0ab51d7232453079,32,FLEN)
NAN_BOXED(0xfbf00000226809856,32,FLEN)
NAN_BOXED(0x7e3f44a3118075555,32,FLEN)
NAN_BOXED(0xc0ab51d7232453079,32,FLEN)
NAN_BOXED(0xfbf80000227334144,32,FLEN)
NAN_BOXED(0x7e3f44a3118075555,32,FLEN)
NAN_BOXED(0xc0ab51d7232453079,32,FLEN)
NAN_BOXED(0xfbfc0000227596288,32,FLEN)
NAN_BOXED(0x7e3f44a3118075555,32,FLEN)
NAN_BOXED(0xc0ab51d7232453079,32,FLEN)
NAN_BOXED(0xfbfe0000227727360,32,FLEN)
NAN_BOXED(0x7e3f44a3118075555,32,FLEN)
NAN_BOXED(0xc0ab51d7232453079,32,FLEN)
NAN_BOXED(0xfbff0000227792896,32,FLEN)
NAN_BOXED(0x7e3f44a3118075555,32,FLEN)
NAN_BOXED(0xc0ab51d7232453079,32,FLEN)
NAN_BOXED(0xfbff8000227825664,32,FLEN)
NAN_BOXED(0x7e3f44a3118075555,32,FLEN)
NAN_BOXED(0xc0ab51d7232453079,32,FLEN)
NAN_BOXED(0xfbffc000227842048,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
