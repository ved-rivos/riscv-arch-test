
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_18432:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3793aa and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb793aa; op2val:0x0;
op3val:0x27ff000; valaddr_reg:x3; val_offset:55296*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55296*0 + 3*0*FLEN/8, x4, x1, x2)

inst_18433:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3793aa and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb793aa; op2val:0x0;
op3val:0x27ff800; valaddr_reg:x3; val_offset:55299*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55299*0 + 3*1*FLEN/8, x4, x1, x2)

inst_18434:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3793aa and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb793aa; op2val:0x0;
op3val:0x27ffc00; valaddr_reg:x3; val_offset:55302*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55302*0 + 3*2*FLEN/8, x4, x1, x2)

inst_18435:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3793aa and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb793aa; op2val:0x0;
op3val:0x27ffe00; valaddr_reg:x3; val_offset:55305*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55305*0 + 3*3*FLEN/8, x4, x1, x2)

inst_18436:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3793aa and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb793aa; op2val:0x0;
op3val:0x27fff00; valaddr_reg:x3; val_offset:55308*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55308*0 + 3*4*FLEN/8, x4, x1, x2)

inst_18437:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3793aa and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb793aa; op2val:0x0;
op3val:0x27fff80; valaddr_reg:x3; val_offset:55311*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55311*0 + 3*5*FLEN/8, x4, x1, x2)

inst_18438:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3793aa and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb793aa; op2val:0x0;
op3val:0x27fffc0; valaddr_reg:x3; val_offset:55314*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55314*0 + 3*6*FLEN/8, x4, x1, x2)

inst_18439:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3793aa and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb793aa; op2val:0x0;
op3val:0x27fffe0; valaddr_reg:x3; val_offset:55317*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55317*0 + 3*7*FLEN/8, x4, x1, x2)

inst_18440:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3793aa and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb793aa; op2val:0x0;
op3val:0x27ffff0; valaddr_reg:x3; val_offset:55320*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55320*0 + 3*8*FLEN/8, x4, x1, x2)

inst_18441:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3793aa and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb793aa; op2val:0x0;
op3val:0x27ffff8; valaddr_reg:x3; val_offset:55323*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55323*0 + 3*9*FLEN/8, x4, x1, x2)

inst_18442:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3793aa and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb793aa; op2val:0x0;
op3val:0x27ffffc; valaddr_reg:x3; val_offset:55326*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55326*0 + 3*10*FLEN/8, x4, x1, x2)

inst_18443:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3793aa and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb793aa; op2val:0x0;
op3val:0x27ffffe; valaddr_reg:x3; val_offset:55329*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55329*0 + 3*11*FLEN/8, x4, x1, x2)

inst_18444:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3793aa and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x04 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb793aa; op2val:0x0;
op3val:0x27fffff; valaddr_reg:x3; val_offset:55332*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55332*0 + 3*12*FLEN/8, x4, x1, x2)

inst_18445:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:55335*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55335*0 + 3*13*FLEN/8, x4, x1, x2)

inst_18446:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:55338*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55338*0 + 3*14*FLEN/8, x4, x1, x2)

inst_18447:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:55341*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55341*0 + 3*15*FLEN/8, x4, x1, x2)

inst_18448:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:55344*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55344*0 + 3*16*FLEN/8, x4, x1, x2)

inst_18449:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:55347*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55347*0 + 3*17*FLEN/8, x4, x1, x2)

inst_18450:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:55350*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55350*0 + 3*18*FLEN/8, x4, x1, x2)

inst_18451:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:55353*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55353*0 + 3*19*FLEN/8, x4, x1, x2)

inst_18452:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:55356*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55356*0 + 3*20*FLEN/8, x4, x1, x2)

inst_18453:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:55359*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55359*0 + 3*21*FLEN/8, x4, x1, x2)

inst_18454:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:55362*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55362*0 + 3*22*FLEN/8, x4, x1, x2)

inst_18455:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:55365*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55365*0 + 3*23*FLEN/8, x4, x1, x2)

inst_18456:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:55368*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55368*0 + 3*24*FLEN/8, x4, x1, x2)

inst_18457:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:55371*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55371*0 + 3*25*FLEN/8, x4, x1, x2)

inst_18458:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:55374*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55374*0 + 3*26*FLEN/8, x4, x1, x2)

inst_18459:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:55377*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55377*0 + 3*27*FLEN/8, x4, x1, x2)

inst_18460:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:55380*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55380*0 + 3*28*FLEN/8, x4, x1, x2)

inst_18461:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x9800000; valaddr_reg:x3; val_offset:55383*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55383*0 + 3*29*FLEN/8, x4, x1, x2)

inst_18462:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x9800001; valaddr_reg:x3; val_offset:55386*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55386*0 + 3*30*FLEN/8, x4, x1, x2)

inst_18463:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x9800003; valaddr_reg:x3; val_offset:55389*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55389*0 + 3*31*FLEN/8, x4, x1, x2)

inst_18464:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x9800007; valaddr_reg:x3; val_offset:55392*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55392*0 + 3*32*FLEN/8, x4, x1, x2)

inst_18465:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x980000f; valaddr_reg:x3; val_offset:55395*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55395*0 + 3*33*FLEN/8, x4, x1, x2)

inst_18466:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x980001f; valaddr_reg:x3; val_offset:55398*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55398*0 + 3*34*FLEN/8, x4, x1, x2)

inst_18467:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x980003f; valaddr_reg:x3; val_offset:55401*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55401*0 + 3*35*FLEN/8, x4, x1, x2)

inst_18468:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x980007f; valaddr_reg:x3; val_offset:55404*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55404*0 + 3*36*FLEN/8, x4, x1, x2)

inst_18469:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x98000ff; valaddr_reg:x3; val_offset:55407*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55407*0 + 3*37*FLEN/8, x4, x1, x2)

inst_18470:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x98001ff; valaddr_reg:x3; val_offset:55410*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55410*0 + 3*38*FLEN/8, x4, x1, x2)

inst_18471:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x98003ff; valaddr_reg:x3; val_offset:55413*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55413*0 + 3*39*FLEN/8, x4, x1, x2)

inst_18472:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x98007ff; valaddr_reg:x3; val_offset:55416*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55416*0 + 3*40*FLEN/8, x4, x1, x2)

inst_18473:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x9800fff; valaddr_reg:x3; val_offset:55419*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55419*0 + 3*41*FLEN/8, x4, x1, x2)

inst_18474:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x9801fff; valaddr_reg:x3; val_offset:55422*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55422*0 + 3*42*FLEN/8, x4, x1, x2)

inst_18475:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x9803fff; valaddr_reg:x3; val_offset:55425*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55425*0 + 3*43*FLEN/8, x4, x1, x2)

inst_18476:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x9807fff; valaddr_reg:x3; val_offset:55428*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55428*0 + 3*44*FLEN/8, x4, x1, x2)

inst_18477:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x980ffff; valaddr_reg:x3; val_offset:55431*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55431*0 + 3*45*FLEN/8, x4, x1, x2)

inst_18478:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x981ffff; valaddr_reg:x3; val_offset:55434*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55434*0 + 3*46*FLEN/8, x4, x1, x2)

inst_18479:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x983ffff; valaddr_reg:x3; val_offset:55437*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55437*0 + 3*47*FLEN/8, x4, x1, x2)

inst_18480:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x987ffff; valaddr_reg:x3; val_offset:55440*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55440*0 + 3*48*FLEN/8, x4, x1, x2)

inst_18481:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x98fffff; valaddr_reg:x3; val_offset:55443*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55443*0 + 3*49*FLEN/8, x4, x1, x2)

inst_18482:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x99fffff; valaddr_reg:x3; val_offset:55446*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55446*0 + 3*50*FLEN/8, x4, x1, x2)

inst_18483:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x9bfffff; valaddr_reg:x3; val_offset:55449*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55449*0 + 3*51*FLEN/8, x4, x1, x2)

inst_18484:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x9c00000; valaddr_reg:x3; val_offset:55452*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55452*0 + 3*52*FLEN/8, x4, x1, x2)

inst_18485:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x9e00000; valaddr_reg:x3; val_offset:55455*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55455*0 + 3*53*FLEN/8, x4, x1, x2)

inst_18486:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x9f00000; valaddr_reg:x3; val_offset:55458*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55458*0 + 3*54*FLEN/8, x4, x1, x2)

inst_18487:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x9f80000; valaddr_reg:x3; val_offset:55461*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55461*0 + 3*55*FLEN/8, x4, x1, x2)

inst_18488:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x9fc0000; valaddr_reg:x3; val_offset:55464*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55464*0 + 3*56*FLEN/8, x4, x1, x2)

inst_18489:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x9fe0000; valaddr_reg:x3; val_offset:55467*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55467*0 + 3*57*FLEN/8, x4, x1, x2)

inst_18490:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x9ff0000; valaddr_reg:x3; val_offset:55470*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55470*0 + 3*58*FLEN/8, x4, x1, x2)

inst_18491:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x9ff8000; valaddr_reg:x3; val_offset:55473*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55473*0 + 3*59*FLEN/8, x4, x1, x2)

inst_18492:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x9ffc000; valaddr_reg:x3; val_offset:55476*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55476*0 + 3*60*FLEN/8, x4, x1, x2)

inst_18493:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x9ffe000; valaddr_reg:x3; val_offset:55479*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55479*0 + 3*61*FLEN/8, x4, x1, x2)

inst_18494:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x9fff000; valaddr_reg:x3; val_offset:55482*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55482*0 + 3*62*FLEN/8, x4, x1, x2)

inst_18495:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x9fff800; valaddr_reg:x3; val_offset:55485*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55485*0 + 3*63*FLEN/8, x4, x1, x2)

inst_18496:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x9fffc00; valaddr_reg:x3; val_offset:55488*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55488*0 + 3*64*FLEN/8, x4, x1, x2)

inst_18497:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x9fffe00; valaddr_reg:x3; val_offset:55491*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55491*0 + 3*65*FLEN/8, x4, x1, x2)

inst_18498:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x9ffff00; valaddr_reg:x3; val_offset:55494*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55494*0 + 3*66*FLEN/8, x4, x1, x2)

inst_18499:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x9ffff80; valaddr_reg:x3; val_offset:55497*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55497*0 + 3*67*FLEN/8, x4, x1, x2)

inst_18500:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x9ffffc0; valaddr_reg:x3; val_offset:55500*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55500*0 + 3*68*FLEN/8, x4, x1, x2)

inst_18501:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x9ffffe0; valaddr_reg:x3; val_offset:55503*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55503*0 + 3*69*FLEN/8, x4, x1, x2)

inst_18502:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x9fffff0; valaddr_reg:x3; val_offset:55506*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55506*0 + 3*70*FLEN/8, x4, x1, x2)

inst_18503:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x9fffff8; valaddr_reg:x3; val_offset:55509*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55509*0 + 3*71*FLEN/8, x4, x1, x2)

inst_18504:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x9fffffc; valaddr_reg:x3; val_offset:55512*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55512*0 + 3*72*FLEN/8, x4, x1, x2)

inst_18505:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x9fffffe; valaddr_reg:x3; val_offset:55515*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55515*0 + 3*73*FLEN/8, x4, x1, x2)

inst_18506:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x37f81e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x13 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb7f81e; op2val:0x0;
op3val:0x9ffffff; valaddr_reg:x3; val_offset:55518*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55518*0 + 3*74*FLEN/8, x4, x1, x2)

inst_18507:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a000000; valaddr_reg:x3; val_offset:55521*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55521*0 + 3*75*FLEN/8, x4, x1, x2)

inst_18508:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a000001; valaddr_reg:x3; val_offset:55524*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55524*0 + 3*76*FLEN/8, x4, x1, x2)

inst_18509:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a000003; valaddr_reg:x3; val_offset:55527*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55527*0 + 3*77*FLEN/8, x4, x1, x2)

inst_18510:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a000007; valaddr_reg:x3; val_offset:55530*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55530*0 + 3*78*FLEN/8, x4, x1, x2)

inst_18511:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a00000f; valaddr_reg:x3; val_offset:55533*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55533*0 + 3*79*FLEN/8, x4, x1, x2)

inst_18512:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a00001f; valaddr_reg:x3; val_offset:55536*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55536*0 + 3*80*FLEN/8, x4, x1, x2)

inst_18513:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a00003f; valaddr_reg:x3; val_offset:55539*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55539*0 + 3*81*FLEN/8, x4, x1, x2)

inst_18514:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a00007f; valaddr_reg:x3; val_offset:55542*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55542*0 + 3*82*FLEN/8, x4, x1, x2)

inst_18515:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a0000ff; valaddr_reg:x3; val_offset:55545*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55545*0 + 3*83*FLEN/8, x4, x1, x2)

inst_18516:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a0001ff; valaddr_reg:x3; val_offset:55548*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55548*0 + 3*84*FLEN/8, x4, x1, x2)

inst_18517:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a0003ff; valaddr_reg:x3; val_offset:55551*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55551*0 + 3*85*FLEN/8, x4, x1, x2)

inst_18518:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a0007ff; valaddr_reg:x3; val_offset:55554*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55554*0 + 3*86*FLEN/8, x4, x1, x2)

inst_18519:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a000fff; valaddr_reg:x3; val_offset:55557*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55557*0 + 3*87*FLEN/8, x4, x1, x2)

inst_18520:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a001fff; valaddr_reg:x3; val_offset:55560*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55560*0 + 3*88*FLEN/8, x4, x1, x2)

inst_18521:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a003fff; valaddr_reg:x3; val_offset:55563*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55563*0 + 3*89*FLEN/8, x4, x1, x2)

inst_18522:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a007fff; valaddr_reg:x3; val_offset:55566*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55566*0 + 3*90*FLEN/8, x4, x1, x2)

inst_18523:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a00ffff; valaddr_reg:x3; val_offset:55569*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55569*0 + 3*91*FLEN/8, x4, x1, x2)

inst_18524:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a01ffff; valaddr_reg:x3; val_offset:55572*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55572*0 + 3*92*FLEN/8, x4, x1, x2)

inst_18525:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a03ffff; valaddr_reg:x3; val_offset:55575*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55575*0 + 3*93*FLEN/8, x4, x1, x2)

inst_18526:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a07ffff; valaddr_reg:x3; val_offset:55578*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55578*0 + 3*94*FLEN/8, x4, x1, x2)

inst_18527:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a0fffff; valaddr_reg:x3; val_offset:55581*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55581*0 + 3*95*FLEN/8, x4, x1, x2)

inst_18528:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a1fffff; valaddr_reg:x3; val_offset:55584*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55584*0 + 3*96*FLEN/8, x4, x1, x2)

inst_18529:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a3fffff; valaddr_reg:x3; val_offset:55587*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55587*0 + 3*97*FLEN/8, x4, x1, x2)

inst_18530:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a400000; valaddr_reg:x3; val_offset:55590*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55590*0 + 3*98*FLEN/8, x4, x1, x2)

inst_18531:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a600000; valaddr_reg:x3; val_offset:55593*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55593*0 + 3*99*FLEN/8, x4, x1, x2)

inst_18532:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a700000; valaddr_reg:x3; val_offset:55596*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55596*0 + 3*100*FLEN/8, x4, x1, x2)

inst_18533:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a780000; valaddr_reg:x3; val_offset:55599*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55599*0 + 3*101*FLEN/8, x4, x1, x2)

inst_18534:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a7c0000; valaddr_reg:x3; val_offset:55602*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55602*0 + 3*102*FLEN/8, x4, x1, x2)

inst_18535:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a7e0000; valaddr_reg:x3; val_offset:55605*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55605*0 + 3*103*FLEN/8, x4, x1, x2)

inst_18536:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a7f0000; valaddr_reg:x3; val_offset:55608*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55608*0 + 3*104*FLEN/8, x4, x1, x2)

inst_18537:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a7f8000; valaddr_reg:x3; val_offset:55611*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55611*0 + 3*105*FLEN/8, x4, x1, x2)

inst_18538:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a7fc000; valaddr_reg:x3; val_offset:55614*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55614*0 + 3*106*FLEN/8, x4, x1, x2)

inst_18539:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a7fe000; valaddr_reg:x3; val_offset:55617*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55617*0 + 3*107*FLEN/8, x4, x1, x2)

inst_18540:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a7ff000; valaddr_reg:x3; val_offset:55620*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55620*0 + 3*108*FLEN/8, x4, x1, x2)

inst_18541:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a7ff800; valaddr_reg:x3; val_offset:55623*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55623*0 + 3*109*FLEN/8, x4, x1, x2)

inst_18542:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a7ffc00; valaddr_reg:x3; val_offset:55626*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55626*0 + 3*110*FLEN/8, x4, x1, x2)

inst_18543:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a7ffe00; valaddr_reg:x3; val_offset:55629*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55629*0 + 3*111*FLEN/8, x4, x1, x2)

inst_18544:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a7fff00; valaddr_reg:x3; val_offset:55632*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55632*0 + 3*112*FLEN/8, x4, x1, x2)

inst_18545:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a7fff80; valaddr_reg:x3; val_offset:55635*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55635*0 + 3*113*FLEN/8, x4, x1, x2)

inst_18546:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a7fffc0; valaddr_reg:x3; val_offset:55638*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55638*0 + 3*114*FLEN/8, x4, x1, x2)

inst_18547:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a7fffe0; valaddr_reg:x3; val_offset:55641*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55641*0 + 3*115*FLEN/8, x4, x1, x2)

inst_18548:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a7ffff0; valaddr_reg:x3; val_offset:55644*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55644*0 + 3*116*FLEN/8, x4, x1, x2)

inst_18549:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a7ffff8; valaddr_reg:x3; val_offset:55647*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55647*0 + 3*117*FLEN/8, x4, x1, x2)

inst_18550:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a7ffffc; valaddr_reg:x3; val_offset:55650*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55650*0 + 3*118*FLEN/8, x4, x1, x2)

inst_18551:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a7ffffe; valaddr_reg:x3; val_offset:55653*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55653*0 + 3*119*FLEN/8, x4, x1, x2)

inst_18552:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x74 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3a7fffff; valaddr_reg:x3; val_offset:55656*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55656*0 + 3*120*FLEN/8, x4, x1, x2)

inst_18553:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3f800001; valaddr_reg:x3; val_offset:55659*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55659*0 + 3*121*FLEN/8, x4, x1, x2)

inst_18554:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3f800003; valaddr_reg:x3; val_offset:55662*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55662*0 + 3*122*FLEN/8, x4, x1, x2)

inst_18555:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3f800007; valaddr_reg:x3; val_offset:55665*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55665*0 + 3*123*FLEN/8, x4, x1, x2)

inst_18556:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3f999999; valaddr_reg:x3; val_offset:55668*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55668*0 + 3*124*FLEN/8, x4, x1, x2)

inst_18557:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:55671*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55671*0 + 3*125*FLEN/8, x4, x1, x2)

inst_18558:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:55674*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55674*0 + 3*126*FLEN/8, x4, x1, x2)

inst_18559:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:55677*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55677*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_18560:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:55680*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55680*0 + 3*128*FLEN/8, x4, x1, x2)

inst_18561:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:55683*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55683*0 + 3*129*FLEN/8, x4, x1, x2)

inst_18562:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:55686*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55686*0 + 3*130*FLEN/8, x4, x1, x2)

inst_18563:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:55689*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55689*0 + 3*131*FLEN/8, x4, x1, x2)

inst_18564:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:55692*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55692*0 + 3*132*FLEN/8, x4, x1, x2)

inst_18565:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:55695*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55695*0 + 3*133*FLEN/8, x4, x1, x2)

inst_18566:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:55698*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55698*0 + 3*134*FLEN/8, x4, x1, x2)

inst_18567:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:55701*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55701*0 + 3*135*FLEN/8, x4, x1, x2)

inst_18568:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x380695 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x5907f1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb80695; op2val:0x5907f1;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:55704*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55704*0 + 3*136*FLEN/8, x4, x1, x2)

inst_18569:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f000000; valaddr_reg:x3; val_offset:55707*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55707*0 + 3*137*FLEN/8, x4, x1, x2)

inst_18570:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f000001; valaddr_reg:x3; val_offset:55710*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55710*0 + 3*138*FLEN/8, x4, x1, x2)

inst_18571:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f000003; valaddr_reg:x3; val_offset:55713*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55713*0 + 3*139*FLEN/8, x4, x1, x2)

inst_18572:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f000007; valaddr_reg:x3; val_offset:55716*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55716*0 + 3*140*FLEN/8, x4, x1, x2)

inst_18573:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f00000f; valaddr_reg:x3; val_offset:55719*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55719*0 + 3*141*FLEN/8, x4, x1, x2)

inst_18574:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f00001f; valaddr_reg:x3; val_offset:55722*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55722*0 + 3*142*FLEN/8, x4, x1, x2)

inst_18575:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f00003f; valaddr_reg:x3; val_offset:55725*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55725*0 + 3*143*FLEN/8, x4, x1, x2)

inst_18576:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f00007f; valaddr_reg:x3; val_offset:55728*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55728*0 + 3*144*FLEN/8, x4, x1, x2)

inst_18577:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f0000ff; valaddr_reg:x3; val_offset:55731*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55731*0 + 3*145*FLEN/8, x4, x1, x2)

inst_18578:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f0001ff; valaddr_reg:x3; val_offset:55734*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55734*0 + 3*146*FLEN/8, x4, x1, x2)

inst_18579:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f0003ff; valaddr_reg:x3; val_offset:55737*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55737*0 + 3*147*FLEN/8, x4, x1, x2)

inst_18580:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f0007ff; valaddr_reg:x3; val_offset:55740*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55740*0 + 3*148*FLEN/8, x4, x1, x2)

inst_18581:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f000fff; valaddr_reg:x3; val_offset:55743*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55743*0 + 3*149*FLEN/8, x4, x1, x2)

inst_18582:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f001fff; valaddr_reg:x3; val_offset:55746*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55746*0 + 3*150*FLEN/8, x4, x1, x2)

inst_18583:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f003fff; valaddr_reg:x3; val_offset:55749*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55749*0 + 3*151*FLEN/8, x4, x1, x2)

inst_18584:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f007fff; valaddr_reg:x3; val_offset:55752*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55752*0 + 3*152*FLEN/8, x4, x1, x2)

inst_18585:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f00ffff; valaddr_reg:x3; val_offset:55755*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55755*0 + 3*153*FLEN/8, x4, x1, x2)

inst_18586:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f01ffff; valaddr_reg:x3; val_offset:55758*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55758*0 + 3*154*FLEN/8, x4, x1, x2)

inst_18587:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f03ffff; valaddr_reg:x3; val_offset:55761*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55761*0 + 3*155*FLEN/8, x4, x1, x2)

inst_18588:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f07ffff; valaddr_reg:x3; val_offset:55764*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55764*0 + 3*156*FLEN/8, x4, x1, x2)

inst_18589:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f0fffff; valaddr_reg:x3; val_offset:55767*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55767*0 + 3*157*FLEN/8, x4, x1, x2)

inst_18590:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f1fffff; valaddr_reg:x3; val_offset:55770*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55770*0 + 3*158*FLEN/8, x4, x1, x2)

inst_18591:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f3fffff; valaddr_reg:x3; val_offset:55773*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55773*0 + 3*159*FLEN/8, x4, x1, x2)

inst_18592:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f400000; valaddr_reg:x3; val_offset:55776*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55776*0 + 3*160*FLEN/8, x4, x1, x2)

inst_18593:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f600000; valaddr_reg:x3; val_offset:55779*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55779*0 + 3*161*FLEN/8, x4, x1, x2)

inst_18594:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f700000; valaddr_reg:x3; val_offset:55782*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55782*0 + 3*162*FLEN/8, x4, x1, x2)

inst_18595:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f780000; valaddr_reg:x3; val_offset:55785*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55785*0 + 3*163*FLEN/8, x4, x1, x2)

inst_18596:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f7c0000; valaddr_reg:x3; val_offset:55788*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55788*0 + 3*164*FLEN/8, x4, x1, x2)

inst_18597:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f7e0000; valaddr_reg:x3; val_offset:55791*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55791*0 + 3*165*FLEN/8, x4, x1, x2)

inst_18598:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f7f0000; valaddr_reg:x3; val_offset:55794*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55794*0 + 3*166*FLEN/8, x4, x1, x2)

inst_18599:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f7f8000; valaddr_reg:x3; val_offset:55797*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55797*0 + 3*167*FLEN/8, x4, x1, x2)

inst_18600:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f7fc000; valaddr_reg:x3; val_offset:55800*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55800*0 + 3*168*FLEN/8, x4, x1, x2)

inst_18601:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f7fe000; valaddr_reg:x3; val_offset:55803*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55803*0 + 3*169*FLEN/8, x4, x1, x2)

inst_18602:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f7ff000; valaddr_reg:x3; val_offset:55806*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55806*0 + 3*170*FLEN/8, x4, x1, x2)

inst_18603:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f7ff800; valaddr_reg:x3; val_offset:55809*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55809*0 + 3*171*FLEN/8, x4, x1, x2)

inst_18604:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f7ffc00; valaddr_reg:x3; val_offset:55812*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55812*0 + 3*172*FLEN/8, x4, x1, x2)

inst_18605:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f7ffe00; valaddr_reg:x3; val_offset:55815*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55815*0 + 3*173*FLEN/8, x4, x1, x2)

inst_18606:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f7fff00; valaddr_reg:x3; val_offset:55818*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55818*0 + 3*174*FLEN/8, x4, x1, x2)

inst_18607:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f7fff80; valaddr_reg:x3; val_offset:55821*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55821*0 + 3*175*FLEN/8, x4, x1, x2)

inst_18608:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f7fffc0; valaddr_reg:x3; val_offset:55824*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55824*0 + 3*176*FLEN/8, x4, x1, x2)

inst_18609:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f7fffe0; valaddr_reg:x3; val_offset:55827*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55827*0 + 3*177*FLEN/8, x4, x1, x2)

inst_18610:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f7ffff0; valaddr_reg:x3; val_offset:55830*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55830*0 + 3*178*FLEN/8, x4, x1, x2)

inst_18611:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f7ffff8; valaddr_reg:x3; val_offset:55833*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55833*0 + 3*179*FLEN/8, x4, x1, x2)

inst_18612:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f7ffffc; valaddr_reg:x3; val_offset:55836*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55836*0 + 3*180*FLEN/8, x4, x1, x2)

inst_18613:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f7ffffe; valaddr_reg:x3; val_offset:55839*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55839*0 + 3*181*FLEN/8, x4, x1, x2)

inst_18614:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x3e and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0x9f7fffff; valaddr_reg:x3; val_offset:55842*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55842*0 + 3*182*FLEN/8, x4, x1, x2)

inst_18615:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0xbf800001; valaddr_reg:x3; val_offset:55845*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55845*0 + 3*183*FLEN/8, x4, x1, x2)

inst_18616:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0xbf800003; valaddr_reg:x3; val_offset:55848*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55848*0 + 3*184*FLEN/8, x4, x1, x2)

inst_18617:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0xbf800007; valaddr_reg:x3; val_offset:55851*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55851*0 + 3*185*FLEN/8, x4, x1, x2)

inst_18618:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0xbf999999; valaddr_reg:x3; val_offset:55854*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55854*0 + 3*186*FLEN/8, x4, x1, x2)

inst_18619:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:55857*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55857*0 + 3*187*FLEN/8, x4, x1, x2)

inst_18620:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:55860*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55860*0 + 3*188*FLEN/8, x4, x1, x2)

inst_18621:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:55863*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55863*0 + 3*189*FLEN/8, x4, x1, x2)

inst_18622:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:55866*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55866*0 + 3*190*FLEN/8, x4, x1, x2)

inst_18623:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:55869*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55869*0 + 3*191*FLEN/8, x4, x1, x2)

inst_18624:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:55872*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55872*0 + 3*192*FLEN/8, x4, x1, x2)

inst_18625:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:55875*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55875*0 + 3*193*FLEN/8, x4, x1, x2)

inst_18626:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:55878*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55878*0 + 3*194*FLEN/8, x4, x1, x2)

inst_18627:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:55881*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55881*0 + 3*195*FLEN/8, x4, x1, x2)

inst_18628:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:55884*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55884*0 + 3*196*FLEN/8, x4, x1, x2)

inst_18629:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:55887*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55887*0 + 3*197*FLEN/8, x4, x1, x2)

inst_18630:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x390587 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x588d44 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb90587; op2val:0x80588d44;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:55890*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55890*0 + 3*198*FLEN/8, x4, x1, x2)

inst_18631:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe9000000; valaddr_reg:x3; val_offset:55893*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55893*0 + 3*199*FLEN/8, x4, x1, x2)

inst_18632:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe9000001; valaddr_reg:x3; val_offset:55896*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55896*0 + 3*200*FLEN/8, x4, x1, x2)

inst_18633:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe9000003; valaddr_reg:x3; val_offset:55899*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55899*0 + 3*201*FLEN/8, x4, x1, x2)

inst_18634:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe9000007; valaddr_reg:x3; val_offset:55902*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55902*0 + 3*202*FLEN/8, x4, x1, x2)

inst_18635:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe900000f; valaddr_reg:x3; val_offset:55905*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55905*0 + 3*203*FLEN/8, x4, x1, x2)

inst_18636:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe900001f; valaddr_reg:x3; val_offset:55908*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55908*0 + 3*204*FLEN/8, x4, x1, x2)

inst_18637:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe900003f; valaddr_reg:x3; val_offset:55911*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55911*0 + 3*205*FLEN/8, x4, x1, x2)

inst_18638:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe900007f; valaddr_reg:x3; val_offset:55914*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55914*0 + 3*206*FLEN/8, x4, x1, x2)

inst_18639:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe90000ff; valaddr_reg:x3; val_offset:55917*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55917*0 + 3*207*FLEN/8, x4, x1, x2)

inst_18640:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe90001ff; valaddr_reg:x3; val_offset:55920*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55920*0 + 3*208*FLEN/8, x4, x1, x2)

inst_18641:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe90003ff; valaddr_reg:x3; val_offset:55923*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55923*0 + 3*209*FLEN/8, x4, x1, x2)

inst_18642:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe90007ff; valaddr_reg:x3; val_offset:55926*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55926*0 + 3*210*FLEN/8, x4, x1, x2)

inst_18643:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe9000fff; valaddr_reg:x3; val_offset:55929*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55929*0 + 3*211*FLEN/8, x4, x1, x2)

inst_18644:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe9001fff; valaddr_reg:x3; val_offset:55932*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55932*0 + 3*212*FLEN/8, x4, x1, x2)

inst_18645:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe9003fff; valaddr_reg:x3; val_offset:55935*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55935*0 + 3*213*FLEN/8, x4, x1, x2)

inst_18646:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe9007fff; valaddr_reg:x3; val_offset:55938*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55938*0 + 3*214*FLEN/8, x4, x1, x2)

inst_18647:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe900ffff; valaddr_reg:x3; val_offset:55941*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55941*0 + 3*215*FLEN/8, x4, x1, x2)

inst_18648:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe901ffff; valaddr_reg:x3; val_offset:55944*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55944*0 + 3*216*FLEN/8, x4, x1, x2)

inst_18649:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe903ffff; valaddr_reg:x3; val_offset:55947*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55947*0 + 3*217*FLEN/8, x4, x1, x2)

inst_18650:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe907ffff; valaddr_reg:x3; val_offset:55950*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55950*0 + 3*218*FLEN/8, x4, x1, x2)

inst_18651:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe90fffff; valaddr_reg:x3; val_offset:55953*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55953*0 + 3*219*FLEN/8, x4, x1, x2)

inst_18652:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe91fffff; valaddr_reg:x3; val_offset:55956*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55956*0 + 3*220*FLEN/8, x4, x1, x2)

inst_18653:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe93fffff; valaddr_reg:x3; val_offset:55959*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55959*0 + 3*221*FLEN/8, x4, x1, x2)

inst_18654:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe9400000; valaddr_reg:x3; val_offset:55962*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55962*0 + 3*222*FLEN/8, x4, x1, x2)

inst_18655:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe9600000; valaddr_reg:x3; val_offset:55965*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55965*0 + 3*223*FLEN/8, x4, x1, x2)

inst_18656:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe9700000; valaddr_reg:x3; val_offset:55968*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55968*0 + 3*224*FLEN/8, x4, x1, x2)

inst_18657:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe9780000; valaddr_reg:x3; val_offset:55971*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55971*0 + 3*225*FLEN/8, x4, x1, x2)

inst_18658:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe97c0000; valaddr_reg:x3; val_offset:55974*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55974*0 + 3*226*FLEN/8, x4, x1, x2)

inst_18659:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe97e0000; valaddr_reg:x3; val_offset:55977*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55977*0 + 3*227*FLEN/8, x4, x1, x2)

inst_18660:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe97f0000; valaddr_reg:x3; val_offset:55980*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55980*0 + 3*228*FLEN/8, x4, x1, x2)

inst_18661:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe97f8000; valaddr_reg:x3; val_offset:55983*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55983*0 + 3*229*FLEN/8, x4, x1, x2)

inst_18662:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe97fc000; valaddr_reg:x3; val_offset:55986*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55986*0 + 3*230*FLEN/8, x4, x1, x2)

inst_18663:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe97fe000; valaddr_reg:x3; val_offset:55989*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55989*0 + 3*231*FLEN/8, x4, x1, x2)

inst_18664:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe97ff000; valaddr_reg:x3; val_offset:55992*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55992*0 + 3*232*FLEN/8, x4, x1, x2)

inst_18665:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe97ff800; valaddr_reg:x3; val_offset:55995*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55995*0 + 3*233*FLEN/8, x4, x1, x2)

inst_18666:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe97ffc00; valaddr_reg:x3; val_offset:55998*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 55998*0 + 3*234*FLEN/8, x4, x1, x2)

inst_18667:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe97ffe00; valaddr_reg:x3; val_offset:56001*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56001*0 + 3*235*FLEN/8, x4, x1, x2)

inst_18668:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe97fff00; valaddr_reg:x3; val_offset:56004*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56004*0 + 3*236*FLEN/8, x4, x1, x2)

inst_18669:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe97fff80; valaddr_reg:x3; val_offset:56007*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56007*0 + 3*237*FLEN/8, x4, x1, x2)

inst_18670:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe97fffc0; valaddr_reg:x3; val_offset:56010*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56010*0 + 3*238*FLEN/8, x4, x1, x2)

inst_18671:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe97fffe0; valaddr_reg:x3; val_offset:56013*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56013*0 + 3*239*FLEN/8, x4, x1, x2)

inst_18672:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe97ffff0; valaddr_reg:x3; val_offset:56016*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56016*0 + 3*240*FLEN/8, x4, x1, x2)

inst_18673:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe97ffff8; valaddr_reg:x3; val_offset:56019*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56019*0 + 3*241*FLEN/8, x4, x1, x2)

inst_18674:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe97ffffc; valaddr_reg:x3; val_offset:56022*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56022*0 + 3*242*FLEN/8, x4, x1, x2)

inst_18675:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe97ffffe; valaddr_reg:x3; val_offset:56025*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56025*0 + 3*243*FLEN/8, x4, x1, x2)

inst_18676:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xd2 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xe97fffff; valaddr_reg:x3; val_offset:56028*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56028*0 + 3*244*FLEN/8, x4, x1, x2)

inst_18677:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xff000001; valaddr_reg:x3; val_offset:56031*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56031*0 + 3*245*FLEN/8, x4, x1, x2)

inst_18678:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xff000003; valaddr_reg:x3; val_offset:56034*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56034*0 + 3*246*FLEN/8, x4, x1, x2)

inst_18679:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xff000007; valaddr_reg:x3; val_offset:56037*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56037*0 + 3*247*FLEN/8, x4, x1, x2)

inst_18680:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xff199999; valaddr_reg:x3; val_offset:56040*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56040*0 + 3*248*FLEN/8, x4, x1, x2)

inst_18681:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xff249249; valaddr_reg:x3; val_offset:56043*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56043*0 + 3*249*FLEN/8, x4, x1, x2)

inst_18682:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xff333333; valaddr_reg:x3; val_offset:56046*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56046*0 + 3*250*FLEN/8, x4, x1, x2)

inst_18683:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:56049*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56049*0 + 3*251*FLEN/8, x4, x1, x2)

inst_18684:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:56052*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56052*0 + 3*252*FLEN/8, x4, x1, x2)

inst_18685:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xff444444; valaddr_reg:x3; val_offset:56055*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56055*0 + 3*253*FLEN/8, x4, x1, x2)

inst_18686:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:56058*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56058*0 + 3*254*FLEN/8, x4, x1, x2)

inst_18687:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:56061*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56061*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_18688:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xff666666; valaddr_reg:x3; val_offset:56064*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56064*0 + 3*256*FLEN/8, x4, x1, x2)

inst_18689:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:56067*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56067*0 + 3*257*FLEN/8, x4, x1, x2)

inst_18690:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:56070*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56070*0 + 3*258*FLEN/8, x4, x1, x2)

inst_18691:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:56073*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56073*0 + 3*259*FLEN/8, x4, x1, x2)

inst_18692:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x399523 and fs2 == 1 and fe2 == 0x80 and fm2 == 0x30917b and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eb99523; op2val:0xc030917b;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:56076*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56076*0 + 3*260*FLEN/8, x4, x1, x2)

inst_18693:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x1; valaddr_reg:x3; val_offset:56079*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56079*0 + 3*261*FLEN/8, x4, x1, x2)

inst_18694:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x3; valaddr_reg:x3; val_offset:56082*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56082*0 + 3*262*FLEN/8, x4, x1, x2)

inst_18695:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x7; valaddr_reg:x3; val_offset:56085*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56085*0 + 3*263*FLEN/8, x4, x1, x2)

inst_18696:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x199999; valaddr_reg:x3; val_offset:56088*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56088*0 + 3*264*FLEN/8, x4, x1, x2)

inst_18697:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x249249; valaddr_reg:x3; val_offset:56091*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56091*0 + 3*265*FLEN/8, x4, x1, x2)

inst_18698:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x333333; valaddr_reg:x3; val_offset:56094*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56094*0 + 3*266*FLEN/8, x4, x1, x2)

inst_18699:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x36db6d; valaddr_reg:x3; val_offset:56097*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56097*0 + 3*267*FLEN/8, x4, x1, x2)

inst_18700:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x3bbbbb; valaddr_reg:x3; val_offset:56100*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56100*0 + 3*268*FLEN/8, x4, x1, x2)

inst_18701:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x444444; valaddr_reg:x3; val_offset:56103*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56103*0 + 3*269*FLEN/8, x4, x1, x2)

inst_18702:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x4ccccc; valaddr_reg:x3; val_offset:56106*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56106*0 + 3*270*FLEN/8, x4, x1, x2)

inst_18703:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x5b6db6; valaddr_reg:x3; val_offset:56109*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56109*0 + 3*271*FLEN/8, x4, x1, x2)

inst_18704:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x666666; valaddr_reg:x3; val_offset:56112*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56112*0 + 3*272*FLEN/8, x4, x1, x2)

inst_18705:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x6db6db; valaddr_reg:x3; val_offset:56115*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56115*0 + 3*273*FLEN/8, x4, x1, x2)

inst_18706:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x7ffff8; valaddr_reg:x3; val_offset:56118*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56118*0 + 3*274*FLEN/8, x4, x1, x2)

inst_18707:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x7ffffc; valaddr_reg:x3; val_offset:56121*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56121*0 + 3*275*FLEN/8, x4, x1, x2)

inst_18708:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x7ffffe; valaddr_reg:x3; val_offset:56124*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56124*0 + 3*276*FLEN/8, x4, x1, x2)

inst_18709:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x1000000; valaddr_reg:x3; val_offset:56127*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56127*0 + 3*277*FLEN/8, x4, x1, x2)

inst_18710:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x1000001; valaddr_reg:x3; val_offset:56130*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56130*0 + 3*278*FLEN/8, x4, x1, x2)

inst_18711:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x1000003; valaddr_reg:x3; val_offset:56133*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56133*0 + 3*279*FLEN/8, x4, x1, x2)

inst_18712:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x1000007; valaddr_reg:x3; val_offset:56136*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56136*0 + 3*280*FLEN/8, x4, x1, x2)

inst_18713:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x100000f; valaddr_reg:x3; val_offset:56139*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56139*0 + 3*281*FLEN/8, x4, x1, x2)

inst_18714:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x100001f; valaddr_reg:x3; val_offset:56142*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56142*0 + 3*282*FLEN/8, x4, x1, x2)

inst_18715:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x100003f; valaddr_reg:x3; val_offset:56145*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56145*0 + 3*283*FLEN/8, x4, x1, x2)

inst_18716:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x100007f; valaddr_reg:x3; val_offset:56148*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56148*0 + 3*284*FLEN/8, x4, x1, x2)

inst_18717:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x10000ff; valaddr_reg:x3; val_offset:56151*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56151*0 + 3*285*FLEN/8, x4, x1, x2)

inst_18718:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x10001ff; valaddr_reg:x3; val_offset:56154*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56154*0 + 3*286*FLEN/8, x4, x1, x2)

inst_18719:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x10003ff; valaddr_reg:x3; val_offset:56157*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56157*0 + 3*287*FLEN/8, x4, x1, x2)

inst_18720:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x10007ff; valaddr_reg:x3; val_offset:56160*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56160*0 + 3*288*FLEN/8, x4, x1, x2)

inst_18721:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x1000fff; valaddr_reg:x3; val_offset:56163*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56163*0 + 3*289*FLEN/8, x4, x1, x2)

inst_18722:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x1001fff; valaddr_reg:x3; val_offset:56166*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56166*0 + 3*290*FLEN/8, x4, x1, x2)

inst_18723:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x1003fff; valaddr_reg:x3; val_offset:56169*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56169*0 + 3*291*FLEN/8, x4, x1, x2)

inst_18724:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x1007fff; valaddr_reg:x3; val_offset:56172*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56172*0 + 3*292*FLEN/8, x4, x1, x2)

inst_18725:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x100ffff; valaddr_reg:x3; val_offset:56175*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56175*0 + 3*293*FLEN/8, x4, x1, x2)

inst_18726:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x101ffff; valaddr_reg:x3; val_offset:56178*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56178*0 + 3*294*FLEN/8, x4, x1, x2)

inst_18727:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x103ffff; valaddr_reg:x3; val_offset:56181*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56181*0 + 3*295*FLEN/8, x4, x1, x2)

inst_18728:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x107ffff; valaddr_reg:x3; val_offset:56184*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56184*0 + 3*296*FLEN/8, x4, x1, x2)

inst_18729:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x10fffff; valaddr_reg:x3; val_offset:56187*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56187*0 + 3*297*FLEN/8, x4, x1, x2)

inst_18730:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x11fffff; valaddr_reg:x3; val_offset:56190*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56190*0 + 3*298*FLEN/8, x4, x1, x2)

inst_18731:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x13fffff; valaddr_reg:x3; val_offset:56193*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56193*0 + 3*299*FLEN/8, x4, x1, x2)

inst_18732:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x1400000; valaddr_reg:x3; val_offset:56196*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56196*0 + 3*300*FLEN/8, x4, x1, x2)

inst_18733:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x1600000; valaddr_reg:x3; val_offset:56199*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56199*0 + 3*301*FLEN/8, x4, x1, x2)

inst_18734:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x1700000; valaddr_reg:x3; val_offset:56202*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56202*0 + 3*302*FLEN/8, x4, x1, x2)

inst_18735:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x1780000; valaddr_reg:x3; val_offset:56205*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56205*0 + 3*303*FLEN/8, x4, x1, x2)

inst_18736:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x17c0000; valaddr_reg:x3; val_offset:56208*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56208*0 + 3*304*FLEN/8, x4, x1, x2)

inst_18737:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x17e0000; valaddr_reg:x3; val_offset:56211*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56211*0 + 3*305*FLEN/8, x4, x1, x2)

inst_18738:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x17f0000; valaddr_reg:x3; val_offset:56214*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56214*0 + 3*306*FLEN/8, x4, x1, x2)

inst_18739:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x17f8000; valaddr_reg:x3; val_offset:56217*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56217*0 + 3*307*FLEN/8, x4, x1, x2)

inst_18740:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x17fc000; valaddr_reg:x3; val_offset:56220*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56220*0 + 3*308*FLEN/8, x4, x1, x2)

inst_18741:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x17fe000; valaddr_reg:x3; val_offset:56223*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56223*0 + 3*309*FLEN/8, x4, x1, x2)

inst_18742:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x17ff000; valaddr_reg:x3; val_offset:56226*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56226*0 + 3*310*FLEN/8, x4, x1, x2)

inst_18743:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x17ff800; valaddr_reg:x3; val_offset:56229*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56229*0 + 3*311*FLEN/8, x4, x1, x2)

inst_18744:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x17ffc00; valaddr_reg:x3; val_offset:56232*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56232*0 + 3*312*FLEN/8, x4, x1, x2)

inst_18745:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x17ffe00; valaddr_reg:x3; val_offset:56235*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56235*0 + 3*313*FLEN/8, x4, x1, x2)

inst_18746:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x17fff00; valaddr_reg:x3; val_offset:56238*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56238*0 + 3*314*FLEN/8, x4, x1, x2)

inst_18747:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x17fff80; valaddr_reg:x3; val_offset:56241*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56241*0 + 3*315*FLEN/8, x4, x1, x2)

inst_18748:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x17fffc0; valaddr_reg:x3; val_offset:56244*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56244*0 + 3*316*FLEN/8, x4, x1, x2)

inst_18749:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x17fffe0; valaddr_reg:x3; val_offset:56247*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56247*0 + 3*317*FLEN/8, x4, x1, x2)

inst_18750:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x17ffff0; valaddr_reg:x3; val_offset:56250*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56250*0 + 3*318*FLEN/8, x4, x1, x2)

inst_18751:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x17ffff8; valaddr_reg:x3; val_offset:56253*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56253*0 + 3*319*FLEN/8, x4, x1, x2)

inst_18752:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x17ffffc; valaddr_reg:x3; val_offset:56256*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56256*0 + 3*320*FLEN/8, x4, x1, x2)

inst_18753:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x17ffffe; valaddr_reg:x3; val_offset:56259*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56259*0 + 3*321*FLEN/8, x4, x1, x2)

inst_18754:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3a98a2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7eba98a2; op2val:0x0;
op3val:0x17fffff; valaddr_reg:x3; val_offset:56262*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56262*0 + 3*322*FLEN/8, x4, x1, x2)

inst_18755:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:56265*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56265*0 + 3*323*FLEN/8, x4, x1, x2)

inst_18756:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:56268*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56268*0 + 3*324*FLEN/8, x4, x1, x2)

inst_18757:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:56271*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56271*0 + 3*325*FLEN/8, x4, x1, x2)

inst_18758:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:56274*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56274*0 + 3*326*FLEN/8, x4, x1, x2)

inst_18759:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:56277*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56277*0 + 3*327*FLEN/8, x4, x1, x2)

inst_18760:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:56280*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56280*0 + 3*328*FLEN/8, x4, x1, x2)

inst_18761:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:56283*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56283*0 + 3*329*FLEN/8, x4, x1, x2)

inst_18762:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:56286*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56286*0 + 3*330*FLEN/8, x4, x1, x2)

inst_18763:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:56289*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56289*0 + 3*331*FLEN/8, x4, x1, x2)

inst_18764:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:56292*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56292*0 + 3*332*FLEN/8, x4, x1, x2)

inst_18765:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:56295*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56295*0 + 3*333*FLEN/8, x4, x1, x2)

inst_18766:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:56298*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56298*0 + 3*334*FLEN/8, x4, x1, x2)

inst_18767:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:56301*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56301*0 + 3*335*FLEN/8, x4, x1, x2)

inst_18768:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:56304*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56304*0 + 3*336*FLEN/8, x4, x1, x2)

inst_18769:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:56307*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56307*0 + 3*337*FLEN/8, x4, x1, x2)

inst_18770:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:56310*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56310*0 + 3*338*FLEN/8, x4, x1, x2)

inst_18771:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x86800000; valaddr_reg:x3; val_offset:56313*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56313*0 + 3*339*FLEN/8, x4, x1, x2)

inst_18772:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x86800001; valaddr_reg:x3; val_offset:56316*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56316*0 + 3*340*FLEN/8, x4, x1, x2)

inst_18773:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x86800003; valaddr_reg:x3; val_offset:56319*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56319*0 + 3*341*FLEN/8, x4, x1, x2)

inst_18774:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x86800007; valaddr_reg:x3; val_offset:56322*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56322*0 + 3*342*FLEN/8, x4, x1, x2)

inst_18775:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x8680000f; valaddr_reg:x3; val_offset:56325*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56325*0 + 3*343*FLEN/8, x4, x1, x2)

inst_18776:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x8680001f; valaddr_reg:x3; val_offset:56328*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56328*0 + 3*344*FLEN/8, x4, x1, x2)

inst_18777:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x8680003f; valaddr_reg:x3; val_offset:56331*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56331*0 + 3*345*FLEN/8, x4, x1, x2)

inst_18778:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x8680007f; valaddr_reg:x3; val_offset:56334*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56334*0 + 3*346*FLEN/8, x4, x1, x2)

inst_18779:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x868000ff; valaddr_reg:x3; val_offset:56337*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56337*0 + 3*347*FLEN/8, x4, x1, x2)

inst_18780:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x868001ff; valaddr_reg:x3; val_offset:56340*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56340*0 + 3*348*FLEN/8, x4, x1, x2)

inst_18781:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x868003ff; valaddr_reg:x3; val_offset:56343*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56343*0 + 3*349*FLEN/8, x4, x1, x2)

inst_18782:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x868007ff; valaddr_reg:x3; val_offset:56346*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56346*0 + 3*350*FLEN/8, x4, x1, x2)

inst_18783:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x86800fff; valaddr_reg:x3; val_offset:56349*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56349*0 + 3*351*FLEN/8, x4, x1, x2)

inst_18784:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x86801fff; valaddr_reg:x3; val_offset:56352*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56352*0 + 3*352*FLEN/8, x4, x1, x2)

inst_18785:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x86803fff; valaddr_reg:x3; val_offset:56355*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56355*0 + 3*353*FLEN/8, x4, x1, x2)

inst_18786:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x86807fff; valaddr_reg:x3; val_offset:56358*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56358*0 + 3*354*FLEN/8, x4, x1, x2)

inst_18787:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x8680ffff; valaddr_reg:x3; val_offset:56361*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56361*0 + 3*355*FLEN/8, x4, x1, x2)

inst_18788:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x8681ffff; valaddr_reg:x3; val_offset:56364*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56364*0 + 3*356*FLEN/8, x4, x1, x2)

inst_18789:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x8683ffff; valaddr_reg:x3; val_offset:56367*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56367*0 + 3*357*FLEN/8, x4, x1, x2)

inst_18790:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x8687ffff; valaddr_reg:x3; val_offset:56370*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56370*0 + 3*358*FLEN/8, x4, x1, x2)

inst_18791:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x868fffff; valaddr_reg:x3; val_offset:56373*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56373*0 + 3*359*FLEN/8, x4, x1, x2)

inst_18792:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x869fffff; valaddr_reg:x3; val_offset:56376*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56376*0 + 3*360*FLEN/8, x4, x1, x2)

inst_18793:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x86bfffff; valaddr_reg:x3; val_offset:56379*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56379*0 + 3*361*FLEN/8, x4, x1, x2)

inst_18794:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x86c00000; valaddr_reg:x3; val_offset:56382*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56382*0 + 3*362*FLEN/8, x4, x1, x2)

inst_18795:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x86e00000; valaddr_reg:x3; val_offset:56385*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56385*0 + 3*363*FLEN/8, x4, x1, x2)

inst_18796:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x86f00000; valaddr_reg:x3; val_offset:56388*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56388*0 + 3*364*FLEN/8, x4, x1, x2)

inst_18797:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x86f80000; valaddr_reg:x3; val_offset:56391*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56391*0 + 3*365*FLEN/8, x4, x1, x2)

inst_18798:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x86fc0000; valaddr_reg:x3; val_offset:56394*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56394*0 + 3*366*FLEN/8, x4, x1, x2)

inst_18799:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x86fe0000; valaddr_reg:x3; val_offset:56397*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56397*0 + 3*367*FLEN/8, x4, x1, x2)

inst_18800:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x86ff0000; valaddr_reg:x3; val_offset:56400*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56400*0 + 3*368*FLEN/8, x4, x1, x2)

inst_18801:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x86ff8000; valaddr_reg:x3; val_offset:56403*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56403*0 + 3*369*FLEN/8, x4, x1, x2)

inst_18802:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x86ffc000; valaddr_reg:x3; val_offset:56406*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56406*0 + 3*370*FLEN/8, x4, x1, x2)

inst_18803:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x86ffe000; valaddr_reg:x3; val_offset:56409*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56409*0 + 3*371*FLEN/8, x4, x1, x2)

inst_18804:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x86fff000; valaddr_reg:x3; val_offset:56412*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56412*0 + 3*372*FLEN/8, x4, x1, x2)

inst_18805:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x86fff800; valaddr_reg:x3; val_offset:56415*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56415*0 + 3*373*FLEN/8, x4, x1, x2)

inst_18806:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x86fffc00; valaddr_reg:x3; val_offset:56418*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56418*0 + 3*374*FLEN/8, x4, x1, x2)

inst_18807:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x86fffe00; valaddr_reg:x3; val_offset:56421*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56421*0 + 3*375*FLEN/8, x4, x1, x2)

inst_18808:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x86ffff00; valaddr_reg:x3; val_offset:56424*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56424*0 + 3*376*FLEN/8, x4, x1, x2)

inst_18809:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x86ffff80; valaddr_reg:x3; val_offset:56427*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56427*0 + 3*377*FLEN/8, x4, x1, x2)

inst_18810:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x86ffffc0; valaddr_reg:x3; val_offset:56430*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56430*0 + 3*378*FLEN/8, x4, x1, x2)

inst_18811:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x86ffffe0; valaddr_reg:x3; val_offset:56433*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56433*0 + 3*379*FLEN/8, x4, x1, x2)

inst_18812:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x86fffff0; valaddr_reg:x3; val_offset:56436*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56436*0 + 3*380*FLEN/8, x4, x1, x2)

inst_18813:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x86fffff8; valaddr_reg:x3; val_offset:56439*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56439*0 + 3*381*FLEN/8, x4, x1, x2)

inst_18814:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x86fffffc; valaddr_reg:x3; val_offset:56442*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56442*0 + 3*382*FLEN/8, x4, x1, x2)

inst_18815:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x86fffffe; valaddr_reg:x3; val_offset:56445*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56445*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_18816:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3aaff8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x0d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebaaff8; op2val:0x80000000;
op3val:0x86ffffff; valaddr_reg:x3; val_offset:56448*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56448*0 + 3*384*FLEN/8, x4, x1, x2)

inst_18817:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:56451*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56451*0 + 3*385*FLEN/8, x4, x1, x2)

inst_18818:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:56454*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56454*0 + 3*386*FLEN/8, x4, x1, x2)

inst_18819:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:56457*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56457*0 + 3*387*FLEN/8, x4, x1, x2)

inst_18820:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:56460*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56460*0 + 3*388*FLEN/8, x4, x1, x2)

inst_18821:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:56463*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56463*0 + 3*389*FLEN/8, x4, x1, x2)

inst_18822:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:56466*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56466*0 + 3*390*FLEN/8, x4, x1, x2)

inst_18823:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:56469*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56469*0 + 3*391*FLEN/8, x4, x1, x2)

inst_18824:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:56472*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56472*0 + 3*392*FLEN/8, x4, x1, x2)

inst_18825:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:56475*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56475*0 + 3*393*FLEN/8, x4, x1, x2)

inst_18826:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:56478*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56478*0 + 3*394*FLEN/8, x4, x1, x2)

inst_18827:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:56481*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56481*0 + 3*395*FLEN/8, x4, x1, x2)

inst_18828:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:56484*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56484*0 + 3*396*FLEN/8, x4, x1, x2)

inst_18829:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:56487*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56487*0 + 3*397*FLEN/8, x4, x1, x2)

inst_18830:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:56490*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56490*0 + 3*398*FLEN/8, x4, x1, x2)

inst_18831:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:56493*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56493*0 + 3*399*FLEN/8, x4, x1, x2)

inst_18832:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:56496*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56496*0 + 3*400*FLEN/8, x4, x1, x2)

inst_18833:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8f800000; valaddr_reg:x3; val_offset:56499*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56499*0 + 3*401*FLEN/8, x4, x1, x2)

inst_18834:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8f800001; valaddr_reg:x3; val_offset:56502*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56502*0 + 3*402*FLEN/8, x4, x1, x2)

inst_18835:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8f800003; valaddr_reg:x3; val_offset:56505*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56505*0 + 3*403*FLEN/8, x4, x1, x2)

inst_18836:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8f800007; valaddr_reg:x3; val_offset:56508*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56508*0 + 3*404*FLEN/8, x4, x1, x2)

inst_18837:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8f80000f; valaddr_reg:x3; val_offset:56511*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56511*0 + 3*405*FLEN/8, x4, x1, x2)

inst_18838:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8f80001f; valaddr_reg:x3; val_offset:56514*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56514*0 + 3*406*FLEN/8, x4, x1, x2)

inst_18839:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8f80003f; valaddr_reg:x3; val_offset:56517*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56517*0 + 3*407*FLEN/8, x4, x1, x2)

inst_18840:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8f80007f; valaddr_reg:x3; val_offset:56520*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56520*0 + 3*408*FLEN/8, x4, x1, x2)

inst_18841:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8f8000ff; valaddr_reg:x3; val_offset:56523*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56523*0 + 3*409*FLEN/8, x4, x1, x2)

inst_18842:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8f8001ff; valaddr_reg:x3; val_offset:56526*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56526*0 + 3*410*FLEN/8, x4, x1, x2)

inst_18843:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8f8003ff; valaddr_reg:x3; val_offset:56529*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56529*0 + 3*411*FLEN/8, x4, x1, x2)

inst_18844:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8f8007ff; valaddr_reg:x3; val_offset:56532*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56532*0 + 3*412*FLEN/8, x4, x1, x2)

inst_18845:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8f800fff; valaddr_reg:x3; val_offset:56535*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56535*0 + 3*413*FLEN/8, x4, x1, x2)

inst_18846:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8f801fff; valaddr_reg:x3; val_offset:56538*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56538*0 + 3*414*FLEN/8, x4, x1, x2)

inst_18847:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8f803fff; valaddr_reg:x3; val_offset:56541*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56541*0 + 3*415*FLEN/8, x4, x1, x2)

inst_18848:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8f807fff; valaddr_reg:x3; val_offset:56544*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56544*0 + 3*416*FLEN/8, x4, x1, x2)

inst_18849:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8f80ffff; valaddr_reg:x3; val_offset:56547*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56547*0 + 3*417*FLEN/8, x4, x1, x2)

inst_18850:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8f81ffff; valaddr_reg:x3; val_offset:56550*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56550*0 + 3*418*FLEN/8, x4, x1, x2)

inst_18851:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8f83ffff; valaddr_reg:x3; val_offset:56553*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56553*0 + 3*419*FLEN/8, x4, x1, x2)

inst_18852:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8f87ffff; valaddr_reg:x3; val_offset:56556*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56556*0 + 3*420*FLEN/8, x4, x1, x2)

inst_18853:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8f8fffff; valaddr_reg:x3; val_offset:56559*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56559*0 + 3*421*FLEN/8, x4, x1, x2)

inst_18854:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8f9fffff; valaddr_reg:x3; val_offset:56562*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56562*0 + 3*422*FLEN/8, x4, x1, x2)

inst_18855:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8fbfffff; valaddr_reg:x3; val_offset:56565*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56565*0 + 3*423*FLEN/8, x4, x1, x2)

inst_18856:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8fc00000; valaddr_reg:x3; val_offset:56568*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56568*0 + 3*424*FLEN/8, x4, x1, x2)

inst_18857:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8fe00000; valaddr_reg:x3; val_offset:56571*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56571*0 + 3*425*FLEN/8, x4, x1, x2)

inst_18858:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8ff00000; valaddr_reg:x3; val_offset:56574*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56574*0 + 3*426*FLEN/8, x4, x1, x2)

inst_18859:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8ff80000; valaddr_reg:x3; val_offset:56577*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56577*0 + 3*427*FLEN/8, x4, x1, x2)

inst_18860:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8ffc0000; valaddr_reg:x3; val_offset:56580*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56580*0 + 3*428*FLEN/8, x4, x1, x2)

inst_18861:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8ffe0000; valaddr_reg:x3; val_offset:56583*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56583*0 + 3*429*FLEN/8, x4, x1, x2)

inst_18862:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8fff0000; valaddr_reg:x3; val_offset:56586*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56586*0 + 3*430*FLEN/8, x4, x1, x2)

inst_18863:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8fff8000; valaddr_reg:x3; val_offset:56589*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56589*0 + 3*431*FLEN/8, x4, x1, x2)

inst_18864:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8fffc000; valaddr_reg:x3; val_offset:56592*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56592*0 + 3*432*FLEN/8, x4, x1, x2)

inst_18865:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8fffe000; valaddr_reg:x3; val_offset:56595*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56595*0 + 3*433*FLEN/8, x4, x1, x2)

inst_18866:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8ffff000; valaddr_reg:x3; val_offset:56598*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56598*0 + 3*434*FLEN/8, x4, x1, x2)

inst_18867:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8ffff800; valaddr_reg:x3; val_offset:56601*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56601*0 + 3*435*FLEN/8, x4, x1, x2)

inst_18868:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8ffffc00; valaddr_reg:x3; val_offset:56604*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56604*0 + 3*436*FLEN/8, x4, x1, x2)

inst_18869:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8ffffe00; valaddr_reg:x3; val_offset:56607*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56607*0 + 3*437*FLEN/8, x4, x1, x2)

inst_18870:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8fffff00; valaddr_reg:x3; val_offset:56610*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56610*0 + 3*438*FLEN/8, x4, x1, x2)

inst_18871:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8fffff80; valaddr_reg:x3; val_offset:56613*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56613*0 + 3*439*FLEN/8, x4, x1, x2)

inst_18872:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8fffffc0; valaddr_reg:x3; val_offset:56616*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56616*0 + 3*440*FLEN/8, x4, x1, x2)

inst_18873:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8fffffe0; valaddr_reg:x3; val_offset:56619*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56619*0 + 3*441*FLEN/8, x4, x1, x2)

inst_18874:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8ffffff0; valaddr_reg:x3; val_offset:56622*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56622*0 + 3*442*FLEN/8, x4, x1, x2)

inst_18875:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8ffffff8; valaddr_reg:x3; val_offset:56625*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56625*0 + 3*443*FLEN/8, x4, x1, x2)

inst_18876:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8ffffffc; valaddr_reg:x3; val_offset:56628*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56628*0 + 3*444*FLEN/8, x4, x1, x2)

inst_18877:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8ffffffe; valaddr_reg:x3; val_offset:56631*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56631*0 + 3*445*FLEN/8, x4, x1, x2)

inst_18878:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3b5aa8 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x1f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebb5aa8; op2val:0x80000000;
op3val:0x8fffffff; valaddr_reg:x3; val_offset:56634*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56634*0 + 3*446*FLEN/8, x4, x1, x2)

inst_18879:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:56637*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56637*0 + 3*447*FLEN/8, x4, x1, x2)

inst_18880:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:56640*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56640*0 + 3*448*FLEN/8, x4, x1, x2)

inst_18881:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:56643*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56643*0 + 3*449*FLEN/8, x4, x1, x2)

inst_18882:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:56646*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56646*0 + 3*450*FLEN/8, x4, x1, x2)

inst_18883:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:56649*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56649*0 + 3*451*FLEN/8, x4, x1, x2)

inst_18884:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:56652*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56652*0 + 3*452*FLEN/8, x4, x1, x2)

inst_18885:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:56655*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56655*0 + 3*453*FLEN/8, x4, x1, x2)

inst_18886:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:56658*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56658*0 + 3*454*FLEN/8, x4, x1, x2)

inst_18887:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:56661*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56661*0 + 3*455*FLEN/8, x4, x1, x2)

inst_18888:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:56664*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56664*0 + 3*456*FLEN/8, x4, x1, x2)

inst_18889:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:56667*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56667*0 + 3*457*FLEN/8, x4, x1, x2)

inst_18890:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:56670*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56670*0 + 3*458*FLEN/8, x4, x1, x2)

inst_18891:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:56673*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56673*0 + 3*459*FLEN/8, x4, x1, x2)

inst_18892:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:56676*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56676*0 + 3*460*FLEN/8, x4, x1, x2)

inst_18893:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:56679*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56679*0 + 3*461*FLEN/8, x4, x1, x2)

inst_18894:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:56682*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56682*0 + 3*462*FLEN/8, x4, x1, x2)

inst_18895:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb000000; valaddr_reg:x3; val_offset:56685*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56685*0 + 3*463*FLEN/8, x4, x1, x2)

inst_18896:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb000001; valaddr_reg:x3; val_offset:56688*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56688*0 + 3*464*FLEN/8, x4, x1, x2)

inst_18897:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb000003; valaddr_reg:x3; val_offset:56691*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56691*0 + 3*465*FLEN/8, x4, x1, x2)

inst_18898:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb000007; valaddr_reg:x3; val_offset:56694*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56694*0 + 3*466*FLEN/8, x4, x1, x2)

inst_18899:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb00000f; valaddr_reg:x3; val_offset:56697*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56697*0 + 3*467*FLEN/8, x4, x1, x2)

inst_18900:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb00001f; valaddr_reg:x3; val_offset:56700*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56700*0 + 3*468*FLEN/8, x4, x1, x2)

inst_18901:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb00003f; valaddr_reg:x3; val_offset:56703*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56703*0 + 3*469*FLEN/8, x4, x1, x2)

inst_18902:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb00007f; valaddr_reg:x3; val_offset:56706*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56706*0 + 3*470*FLEN/8, x4, x1, x2)

inst_18903:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb0000ff; valaddr_reg:x3; val_offset:56709*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56709*0 + 3*471*FLEN/8, x4, x1, x2)

inst_18904:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb0001ff; valaddr_reg:x3; val_offset:56712*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56712*0 + 3*472*FLEN/8, x4, x1, x2)

inst_18905:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb0003ff; valaddr_reg:x3; val_offset:56715*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56715*0 + 3*473*FLEN/8, x4, x1, x2)

inst_18906:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb0007ff; valaddr_reg:x3; val_offset:56718*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56718*0 + 3*474*FLEN/8, x4, x1, x2)

inst_18907:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb000fff; valaddr_reg:x3; val_offset:56721*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56721*0 + 3*475*FLEN/8, x4, x1, x2)

inst_18908:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb001fff; valaddr_reg:x3; val_offset:56724*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56724*0 + 3*476*FLEN/8, x4, x1, x2)

inst_18909:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb003fff; valaddr_reg:x3; val_offset:56727*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56727*0 + 3*477*FLEN/8, x4, x1, x2)

inst_18910:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb007fff; valaddr_reg:x3; val_offset:56730*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56730*0 + 3*478*FLEN/8, x4, x1, x2)

inst_18911:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb00ffff; valaddr_reg:x3; val_offset:56733*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56733*0 + 3*479*FLEN/8, x4, x1, x2)

inst_18912:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb01ffff; valaddr_reg:x3; val_offset:56736*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56736*0 + 3*480*FLEN/8, x4, x1, x2)

inst_18913:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb03ffff; valaddr_reg:x3; val_offset:56739*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56739*0 + 3*481*FLEN/8, x4, x1, x2)

inst_18914:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb07ffff; valaddr_reg:x3; val_offset:56742*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56742*0 + 3*482*FLEN/8, x4, x1, x2)

inst_18915:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb0fffff; valaddr_reg:x3; val_offset:56745*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56745*0 + 3*483*FLEN/8, x4, x1, x2)

inst_18916:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb1fffff; valaddr_reg:x3; val_offset:56748*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56748*0 + 3*484*FLEN/8, x4, x1, x2)

inst_18917:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb3fffff; valaddr_reg:x3; val_offset:56751*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56751*0 + 3*485*FLEN/8, x4, x1, x2)

inst_18918:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb400000; valaddr_reg:x3; val_offset:56754*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56754*0 + 3*486*FLEN/8, x4, x1, x2)

inst_18919:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb600000; valaddr_reg:x3; val_offset:56757*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56757*0 + 3*487*FLEN/8, x4, x1, x2)

inst_18920:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb700000; valaddr_reg:x3; val_offset:56760*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56760*0 + 3*488*FLEN/8, x4, x1, x2)

inst_18921:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb780000; valaddr_reg:x3; val_offset:56763*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56763*0 + 3*489*FLEN/8, x4, x1, x2)

inst_18922:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb7c0000; valaddr_reg:x3; val_offset:56766*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56766*0 + 3*490*FLEN/8, x4, x1, x2)

inst_18923:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb7e0000; valaddr_reg:x3; val_offset:56769*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56769*0 + 3*491*FLEN/8, x4, x1, x2)

inst_18924:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb7f0000; valaddr_reg:x3; val_offset:56772*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56772*0 + 3*492*FLEN/8, x4, x1, x2)

inst_18925:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb7f8000; valaddr_reg:x3; val_offset:56775*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56775*0 + 3*493*FLEN/8, x4, x1, x2)

inst_18926:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb7fc000; valaddr_reg:x3; val_offset:56778*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56778*0 + 3*494*FLEN/8, x4, x1, x2)

inst_18927:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb7fe000; valaddr_reg:x3; val_offset:56781*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56781*0 + 3*495*FLEN/8, x4, x1, x2)

inst_18928:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb7ff000; valaddr_reg:x3; val_offset:56784*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56784*0 + 3*496*FLEN/8, x4, x1, x2)

inst_18929:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb7ff800; valaddr_reg:x3; val_offset:56787*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56787*0 + 3*497*FLEN/8, x4, x1, x2)

inst_18930:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb7ffc00; valaddr_reg:x3; val_offset:56790*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56790*0 + 3*498*FLEN/8, x4, x1, x2)

inst_18931:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb7ffe00; valaddr_reg:x3; val_offset:56793*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56793*0 + 3*499*FLEN/8, x4, x1, x2)

inst_18932:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb7fff00; valaddr_reg:x3; val_offset:56796*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56796*0 + 3*500*FLEN/8, x4, x1, x2)

inst_18933:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb7fff80; valaddr_reg:x3; val_offset:56799*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56799*0 + 3*501*FLEN/8, x4, x1, x2)

inst_18934:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb7fffc0; valaddr_reg:x3; val_offset:56802*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56802*0 + 3*502*FLEN/8, x4, x1, x2)

inst_18935:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb7fffe0; valaddr_reg:x3; val_offset:56805*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56805*0 + 3*503*FLEN/8, x4, x1, x2)

inst_18936:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb7ffff0; valaddr_reg:x3; val_offset:56808*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56808*0 + 3*504*FLEN/8, x4, x1, x2)

inst_18937:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb7ffff8; valaddr_reg:x3; val_offset:56811*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56811*0 + 3*505*FLEN/8, x4, x1, x2)

inst_18938:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb7ffffc; valaddr_reg:x3; val_offset:56814*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56814*0 + 3*506*FLEN/8, x4, x1, x2)

inst_18939:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb7ffffe; valaddr_reg:x3; val_offset:56817*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56817*0 + 3*507*FLEN/8, x4, x1, x2)

inst_18940:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3c4862 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x16 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebc4862; op2val:0x0;
op3val:0xb7fffff; valaddr_reg:x3; val_offset:56820*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56820*0 + 3*508*FLEN/8, x4, x1, x2)

inst_18941:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:56823*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56823*0 + 3*509*FLEN/8, x4, x1, x2)

inst_18942:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:56826*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56826*0 + 3*510*FLEN/8, x4, x1, x2)

inst_18943:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:56829*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56829*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_18944:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:56832*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56832*0 + 3*512*FLEN/8, x4, x1, x2)

inst_18945:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:56835*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56835*0 + 3*513*FLEN/8, x4, x1, x2)

inst_18946:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:56838*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56838*0 + 3*514*FLEN/8, x4, x1, x2)

inst_18947:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:56841*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56841*0 + 3*515*FLEN/8, x4, x1, x2)

inst_18948:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:56844*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56844*0 + 3*516*FLEN/8, x4, x1, x2)

inst_18949:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:56847*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56847*0 + 3*517*FLEN/8, x4, x1, x2)

inst_18950:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:56850*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56850*0 + 3*518*FLEN/8, x4, x1, x2)

inst_18951:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:56853*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56853*0 + 3*519*FLEN/8, x4, x1, x2)

inst_18952:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:56856*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56856*0 + 3*520*FLEN/8, x4, x1, x2)

inst_18953:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:56859*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56859*0 + 3*521*FLEN/8, x4, x1, x2)

inst_18954:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:56862*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56862*0 + 3*522*FLEN/8, x4, x1, x2)

inst_18955:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:56865*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56865*0 + 3*523*FLEN/8, x4, x1, x2)

inst_18956:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:56868*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56868*0 + 3*524*FLEN/8, x4, x1, x2)

inst_18957:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x1000000; valaddr_reg:x3; val_offset:56871*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56871*0 + 3*525*FLEN/8, x4, x1, x2)

inst_18958:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x1000001; valaddr_reg:x3; val_offset:56874*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56874*0 + 3*526*FLEN/8, x4, x1, x2)

inst_18959:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x1000003; valaddr_reg:x3; val_offset:56877*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56877*0 + 3*527*FLEN/8, x4, x1, x2)

inst_18960:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x1000007; valaddr_reg:x3; val_offset:56880*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56880*0 + 3*528*FLEN/8, x4, x1, x2)

inst_18961:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x100000f; valaddr_reg:x3; val_offset:56883*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56883*0 + 3*529*FLEN/8, x4, x1, x2)

inst_18962:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x100001f; valaddr_reg:x3; val_offset:56886*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56886*0 + 3*530*FLEN/8, x4, x1, x2)

inst_18963:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x100003f; valaddr_reg:x3; val_offset:56889*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56889*0 + 3*531*FLEN/8, x4, x1, x2)

inst_18964:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x100007f; valaddr_reg:x3; val_offset:56892*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56892*0 + 3*532*FLEN/8, x4, x1, x2)

inst_18965:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x10000ff; valaddr_reg:x3; val_offset:56895*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56895*0 + 3*533*FLEN/8, x4, x1, x2)

inst_18966:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x10001ff; valaddr_reg:x3; val_offset:56898*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56898*0 + 3*534*FLEN/8, x4, x1, x2)

inst_18967:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x10003ff; valaddr_reg:x3; val_offset:56901*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56901*0 + 3*535*FLEN/8, x4, x1, x2)

inst_18968:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x10007ff; valaddr_reg:x3; val_offset:56904*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56904*0 + 3*536*FLEN/8, x4, x1, x2)

inst_18969:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x1000fff; valaddr_reg:x3; val_offset:56907*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56907*0 + 3*537*FLEN/8, x4, x1, x2)

inst_18970:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x1001fff; valaddr_reg:x3; val_offset:56910*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56910*0 + 3*538*FLEN/8, x4, x1, x2)

inst_18971:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x1003fff; valaddr_reg:x3; val_offset:56913*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56913*0 + 3*539*FLEN/8, x4, x1, x2)

inst_18972:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x1007fff; valaddr_reg:x3; val_offset:56916*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56916*0 + 3*540*FLEN/8, x4, x1, x2)

inst_18973:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x100ffff; valaddr_reg:x3; val_offset:56919*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56919*0 + 3*541*FLEN/8, x4, x1, x2)

inst_18974:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x101ffff; valaddr_reg:x3; val_offset:56922*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56922*0 + 3*542*FLEN/8, x4, x1, x2)

inst_18975:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x103ffff; valaddr_reg:x3; val_offset:56925*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56925*0 + 3*543*FLEN/8, x4, x1, x2)

inst_18976:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x107ffff; valaddr_reg:x3; val_offset:56928*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56928*0 + 3*544*FLEN/8, x4, x1, x2)

inst_18977:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x10fffff; valaddr_reg:x3; val_offset:56931*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56931*0 + 3*545*FLEN/8, x4, x1, x2)

inst_18978:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x11fffff; valaddr_reg:x3; val_offset:56934*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56934*0 + 3*546*FLEN/8, x4, x1, x2)

inst_18979:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x13fffff; valaddr_reg:x3; val_offset:56937*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56937*0 + 3*547*FLEN/8, x4, x1, x2)

inst_18980:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x1400000; valaddr_reg:x3; val_offset:56940*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56940*0 + 3*548*FLEN/8, x4, x1, x2)

inst_18981:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x1600000; valaddr_reg:x3; val_offset:56943*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56943*0 + 3*549*FLEN/8, x4, x1, x2)

inst_18982:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x1700000; valaddr_reg:x3; val_offset:56946*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56946*0 + 3*550*FLEN/8, x4, x1, x2)

inst_18983:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x1780000; valaddr_reg:x3; val_offset:56949*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56949*0 + 3*551*FLEN/8, x4, x1, x2)

inst_18984:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17c0000; valaddr_reg:x3; val_offset:56952*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56952*0 + 3*552*FLEN/8, x4, x1, x2)

inst_18985:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17e0000; valaddr_reg:x3; val_offset:56955*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56955*0 + 3*553*FLEN/8, x4, x1, x2)

inst_18986:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17f0000; valaddr_reg:x3; val_offset:56958*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56958*0 + 3*554*FLEN/8, x4, x1, x2)

inst_18987:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17f8000; valaddr_reg:x3; val_offset:56961*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56961*0 + 3*555*FLEN/8, x4, x1, x2)

inst_18988:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17fc000; valaddr_reg:x3; val_offset:56964*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56964*0 + 3*556*FLEN/8, x4, x1, x2)

inst_18989:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17fe000; valaddr_reg:x3; val_offset:56967*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56967*0 + 3*557*FLEN/8, x4, x1, x2)

inst_18990:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17ff000; valaddr_reg:x3; val_offset:56970*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56970*0 + 3*558*FLEN/8, x4, x1, x2)

inst_18991:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17ff800; valaddr_reg:x3; val_offset:56973*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56973*0 + 3*559*FLEN/8, x4, x1, x2)

inst_18992:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17ffc00; valaddr_reg:x3; val_offset:56976*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56976*0 + 3*560*FLEN/8, x4, x1, x2)

inst_18993:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17ffe00; valaddr_reg:x3; val_offset:56979*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56979*0 + 3*561*FLEN/8, x4, x1, x2)

inst_18994:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17fff00; valaddr_reg:x3; val_offset:56982*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56982*0 + 3*562*FLEN/8, x4, x1, x2)

inst_18995:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17fff80; valaddr_reg:x3; val_offset:56985*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56985*0 + 3*563*FLEN/8, x4, x1, x2)

inst_18996:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17fffc0; valaddr_reg:x3; val_offset:56988*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56988*0 + 3*564*FLEN/8, x4, x1, x2)

inst_18997:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17fffe0; valaddr_reg:x3; val_offset:56991*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56991*0 + 3*565*FLEN/8, x4, x1, x2)

inst_18998:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17ffff0; valaddr_reg:x3; val_offset:56994*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56994*0 + 3*566*FLEN/8, x4, x1, x2)

inst_18999:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17ffff8; valaddr_reg:x3; val_offset:56997*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 56997*0 + 3*567*FLEN/8, x4, x1, x2)

inst_19000:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17ffffc; valaddr_reg:x3; val_offset:57000*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57000*0 + 3*568*FLEN/8, x4, x1, x2)

inst_19001:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17ffffe; valaddr_reg:x3; val_offset:57003*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57003*0 + 3*569*FLEN/8, x4, x1, x2)

inst_19002:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3cdcf2 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x02 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebcdcf2; op2val:0x0;
op3val:0x17fffff; valaddr_reg:x3; val_offset:57006*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57006*0 + 3*570*FLEN/8, x4, x1, x2)

inst_19003:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x28000000; valaddr_reg:x3; val_offset:57009*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57009*0 + 3*571*FLEN/8, x4, x1, x2)

inst_19004:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x28000001; valaddr_reg:x3; val_offset:57012*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57012*0 + 3*572*FLEN/8, x4, x1, x2)

inst_19005:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x28000003; valaddr_reg:x3; val_offset:57015*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57015*0 + 3*573*FLEN/8, x4, x1, x2)

inst_19006:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x28000007; valaddr_reg:x3; val_offset:57018*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57018*0 + 3*574*FLEN/8, x4, x1, x2)

inst_19007:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x2800000f; valaddr_reg:x3; val_offset:57021*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57021*0 + 3*575*FLEN/8, x4, x1, x2)

inst_19008:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x2800001f; valaddr_reg:x3; val_offset:57024*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57024*0 + 3*576*FLEN/8, x4, x1, x2)

inst_19009:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x2800003f; valaddr_reg:x3; val_offset:57027*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57027*0 + 3*577*FLEN/8, x4, x1, x2)

inst_19010:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x2800007f; valaddr_reg:x3; val_offset:57030*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57030*0 + 3*578*FLEN/8, x4, x1, x2)

inst_19011:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x280000ff; valaddr_reg:x3; val_offset:57033*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57033*0 + 3*579*FLEN/8, x4, x1, x2)

inst_19012:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x280001ff; valaddr_reg:x3; val_offset:57036*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57036*0 + 3*580*FLEN/8, x4, x1, x2)

inst_19013:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x280003ff; valaddr_reg:x3; val_offset:57039*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57039*0 + 3*581*FLEN/8, x4, x1, x2)

inst_19014:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x280007ff; valaddr_reg:x3; val_offset:57042*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57042*0 + 3*582*FLEN/8, x4, x1, x2)

inst_19015:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x28000fff; valaddr_reg:x3; val_offset:57045*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57045*0 + 3*583*FLEN/8, x4, x1, x2)

inst_19016:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x28001fff; valaddr_reg:x3; val_offset:57048*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57048*0 + 3*584*FLEN/8, x4, x1, x2)

inst_19017:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x28003fff; valaddr_reg:x3; val_offset:57051*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57051*0 + 3*585*FLEN/8, x4, x1, x2)

inst_19018:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x28007fff; valaddr_reg:x3; val_offset:57054*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57054*0 + 3*586*FLEN/8, x4, x1, x2)

inst_19019:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x2800ffff; valaddr_reg:x3; val_offset:57057*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57057*0 + 3*587*FLEN/8, x4, x1, x2)

inst_19020:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x2801ffff; valaddr_reg:x3; val_offset:57060*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57060*0 + 3*588*FLEN/8, x4, x1, x2)

inst_19021:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x2803ffff; valaddr_reg:x3; val_offset:57063*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57063*0 + 3*589*FLEN/8, x4, x1, x2)

inst_19022:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x2807ffff; valaddr_reg:x3; val_offset:57066*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57066*0 + 3*590*FLEN/8, x4, x1, x2)

inst_19023:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x280fffff; valaddr_reg:x3; val_offset:57069*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57069*0 + 3*591*FLEN/8, x4, x1, x2)

inst_19024:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x281fffff; valaddr_reg:x3; val_offset:57072*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57072*0 + 3*592*FLEN/8, x4, x1, x2)

inst_19025:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x283fffff; valaddr_reg:x3; val_offset:57075*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57075*0 + 3*593*FLEN/8, x4, x1, x2)

inst_19026:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x28400000; valaddr_reg:x3; val_offset:57078*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57078*0 + 3*594*FLEN/8, x4, x1, x2)

inst_19027:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x28600000; valaddr_reg:x3; val_offset:57081*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57081*0 + 3*595*FLEN/8, x4, x1, x2)

inst_19028:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x28700000; valaddr_reg:x3; val_offset:57084*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57084*0 + 3*596*FLEN/8, x4, x1, x2)

inst_19029:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x28780000; valaddr_reg:x3; val_offset:57087*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57087*0 + 3*597*FLEN/8, x4, x1, x2)

inst_19030:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287c0000; valaddr_reg:x3; val_offset:57090*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57090*0 + 3*598*FLEN/8, x4, x1, x2)

inst_19031:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287e0000; valaddr_reg:x3; val_offset:57093*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57093*0 + 3*599*FLEN/8, x4, x1, x2)

inst_19032:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287f0000; valaddr_reg:x3; val_offset:57096*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57096*0 + 3*600*FLEN/8, x4, x1, x2)

inst_19033:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287f8000; valaddr_reg:x3; val_offset:57099*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57099*0 + 3*601*FLEN/8, x4, x1, x2)

inst_19034:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287fc000; valaddr_reg:x3; val_offset:57102*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57102*0 + 3*602*FLEN/8, x4, x1, x2)

inst_19035:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287fe000; valaddr_reg:x3; val_offset:57105*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57105*0 + 3*603*FLEN/8, x4, x1, x2)

inst_19036:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287ff000; valaddr_reg:x3; val_offset:57108*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57108*0 + 3*604*FLEN/8, x4, x1, x2)

inst_19037:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287ff800; valaddr_reg:x3; val_offset:57111*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57111*0 + 3*605*FLEN/8, x4, x1, x2)

inst_19038:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287ffc00; valaddr_reg:x3; val_offset:57114*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57114*0 + 3*606*FLEN/8, x4, x1, x2)

inst_19039:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287ffe00; valaddr_reg:x3; val_offset:57117*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57117*0 + 3*607*FLEN/8, x4, x1, x2)

inst_19040:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287fff00; valaddr_reg:x3; val_offset:57120*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57120*0 + 3*608*FLEN/8, x4, x1, x2)

inst_19041:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287fff80; valaddr_reg:x3; val_offset:57123*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57123*0 + 3*609*FLEN/8, x4, x1, x2)

inst_19042:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287fffc0; valaddr_reg:x3; val_offset:57126*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57126*0 + 3*610*FLEN/8, x4, x1, x2)

inst_19043:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287fffe0; valaddr_reg:x3; val_offset:57129*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57129*0 + 3*611*FLEN/8, x4, x1, x2)

inst_19044:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287ffff0; valaddr_reg:x3; val_offset:57132*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57132*0 + 3*612*FLEN/8, x4, x1, x2)

inst_19045:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287ffff8; valaddr_reg:x3; val_offset:57135*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57135*0 + 3*613*FLEN/8, x4, x1, x2)

inst_19046:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287ffffc; valaddr_reg:x3; val_offset:57138*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57138*0 + 3*614*FLEN/8, x4, x1, x2)

inst_19047:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287ffffe; valaddr_reg:x3; val_offset:57141*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57141*0 + 3*615*FLEN/8, x4, x1, x2)

inst_19048:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x50 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x287fffff; valaddr_reg:x3; val_offset:57144*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57144*0 + 3*616*FLEN/8, x4, x1, x2)

inst_19049:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x3f800001; valaddr_reg:x3; val_offset:57147*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57147*0 + 3*617*FLEN/8, x4, x1, x2)

inst_19050:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x3f800003; valaddr_reg:x3; val_offset:57150*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57150*0 + 3*618*FLEN/8, x4, x1, x2)

inst_19051:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x3f800007; valaddr_reg:x3; val_offset:57153*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57153*0 + 3*619*FLEN/8, x4, x1, x2)

inst_19052:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x3f999999; valaddr_reg:x3; val_offset:57156*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57156*0 + 3*620*FLEN/8, x4, x1, x2)

inst_19053:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:57159*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57159*0 + 3*621*FLEN/8, x4, x1, x2)

inst_19054:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:57162*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57162*0 + 3*622*FLEN/8, x4, x1, x2)

inst_19055:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:57165*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57165*0 + 3*623*FLEN/8, x4, x1, x2)

inst_19056:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:57168*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57168*0 + 3*624*FLEN/8, x4, x1, x2)

inst_19057:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:57171*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57171*0 + 3*625*FLEN/8, x4, x1, x2)

inst_19058:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:57174*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57174*0 + 3*626*FLEN/8, x4, x1, x2)

inst_19059:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:57177*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57177*0 + 3*627*FLEN/8, x4, x1, x2)

inst_19060:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:57180*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57180*0 + 3*628*FLEN/8, x4, x1, x2)

inst_19061:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:57183*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57183*0 + 3*629*FLEN/8, x4, x1, x2)

inst_19062:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:57186*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57186*0 + 3*630*FLEN/8, x4, x1, x2)

inst_19063:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:57189*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57189*0 + 3*631*FLEN/8, x4, x1, x2)

inst_19064:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d2dfe and fs2 == 0 and fe2 == 0x00 and fm2 == 0x569b02 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd2dfe; op2val:0x569b02;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:57192*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57192*0 + 3*632*FLEN/8, x4, x1, x2)

inst_19065:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:57195*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57195*0 + 3*633*FLEN/8, x4, x1, x2)

inst_19066:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:57198*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57198*0 + 3*634*FLEN/8, x4, x1, x2)

inst_19067:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:57201*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57201*0 + 3*635*FLEN/8, x4, x1, x2)

inst_19068:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:57204*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57204*0 + 3*636*FLEN/8, x4, x1, x2)

inst_19069:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:57207*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57207*0 + 3*637*FLEN/8, x4, x1, x2)

inst_19070:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:57210*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57210*0 + 3*638*FLEN/8, x4, x1, x2)

inst_19071:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:57213*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57213*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_19072:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:57216*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57216*0 + 3*640*FLEN/8, x4, x1, x2)

inst_19073:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:57219*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57219*0 + 3*641*FLEN/8, x4, x1, x2)

inst_19074:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:57222*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57222*0 + 3*642*FLEN/8, x4, x1, x2)

inst_19075:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:57225*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57225*0 + 3*643*FLEN/8, x4, x1, x2)

inst_19076:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:57228*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57228*0 + 3*644*FLEN/8, x4, x1, x2)

inst_19077:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:57231*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57231*0 + 3*645*FLEN/8, x4, x1, x2)

inst_19078:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:57234*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57234*0 + 3*646*FLEN/8, x4, x1, x2)

inst_19079:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:57237*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57237*0 + 3*647*FLEN/8, x4, x1, x2)

inst_19080:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:57240*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57240*0 + 3*648*FLEN/8, x4, x1, x2)

inst_19081:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c000000; valaddr_reg:x3; val_offset:57243*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57243*0 + 3*649*FLEN/8, x4, x1, x2)

inst_19082:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c000001; valaddr_reg:x3; val_offset:57246*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57246*0 + 3*650*FLEN/8, x4, x1, x2)

inst_19083:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c000003; valaddr_reg:x3; val_offset:57249*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57249*0 + 3*651*FLEN/8, x4, x1, x2)

inst_19084:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c000007; valaddr_reg:x3; val_offset:57252*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57252*0 + 3*652*FLEN/8, x4, x1, x2)

inst_19085:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c00000f; valaddr_reg:x3; val_offset:57255*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57255*0 + 3*653*FLEN/8, x4, x1, x2)

inst_19086:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c00001f; valaddr_reg:x3; val_offset:57258*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57258*0 + 3*654*FLEN/8, x4, x1, x2)

inst_19087:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c00003f; valaddr_reg:x3; val_offset:57261*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57261*0 + 3*655*FLEN/8, x4, x1, x2)

inst_19088:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c00007f; valaddr_reg:x3; val_offset:57264*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57264*0 + 3*656*FLEN/8, x4, x1, x2)

inst_19089:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c0000ff; valaddr_reg:x3; val_offset:57267*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57267*0 + 3*657*FLEN/8, x4, x1, x2)

inst_19090:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c0001ff; valaddr_reg:x3; val_offset:57270*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57270*0 + 3*658*FLEN/8, x4, x1, x2)

inst_19091:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c0003ff; valaddr_reg:x3; val_offset:57273*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57273*0 + 3*659*FLEN/8, x4, x1, x2)

inst_19092:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c0007ff; valaddr_reg:x3; val_offset:57276*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57276*0 + 3*660*FLEN/8, x4, x1, x2)

inst_19093:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c000fff; valaddr_reg:x3; val_offset:57279*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57279*0 + 3*661*FLEN/8, x4, x1, x2)

inst_19094:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c001fff; valaddr_reg:x3; val_offset:57282*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57282*0 + 3*662*FLEN/8, x4, x1, x2)

inst_19095:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c003fff; valaddr_reg:x3; val_offset:57285*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57285*0 + 3*663*FLEN/8, x4, x1, x2)

inst_19096:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c007fff; valaddr_reg:x3; val_offset:57288*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57288*0 + 3*664*FLEN/8, x4, x1, x2)

inst_19097:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c00ffff; valaddr_reg:x3; val_offset:57291*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57291*0 + 3*665*FLEN/8, x4, x1, x2)

inst_19098:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c01ffff; valaddr_reg:x3; val_offset:57294*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57294*0 + 3*666*FLEN/8, x4, x1, x2)

inst_19099:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c03ffff; valaddr_reg:x3; val_offset:57297*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57297*0 + 3*667*FLEN/8, x4, x1, x2)

inst_19100:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c07ffff; valaddr_reg:x3; val_offset:57300*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57300*0 + 3*668*FLEN/8, x4, x1, x2)

inst_19101:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c0fffff; valaddr_reg:x3; val_offset:57303*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57303*0 + 3*669*FLEN/8, x4, x1, x2)

inst_19102:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c1fffff; valaddr_reg:x3; val_offset:57306*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57306*0 + 3*670*FLEN/8, x4, x1, x2)

inst_19103:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c3fffff; valaddr_reg:x3; val_offset:57309*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57309*0 + 3*671*FLEN/8, x4, x1, x2)

inst_19104:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c400000; valaddr_reg:x3; val_offset:57312*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57312*0 + 3*672*FLEN/8, x4, x1, x2)

inst_19105:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c600000; valaddr_reg:x3; val_offset:57315*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57315*0 + 3*673*FLEN/8, x4, x1, x2)

inst_19106:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c700000; valaddr_reg:x3; val_offset:57318*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57318*0 + 3*674*FLEN/8, x4, x1, x2)

inst_19107:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c780000; valaddr_reg:x3; val_offset:57321*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57321*0 + 3*675*FLEN/8, x4, x1, x2)

inst_19108:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7c0000; valaddr_reg:x3; val_offset:57324*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57324*0 + 3*676*FLEN/8, x4, x1, x2)

inst_19109:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7e0000; valaddr_reg:x3; val_offset:57327*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57327*0 + 3*677*FLEN/8, x4, x1, x2)

inst_19110:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7f0000; valaddr_reg:x3; val_offset:57330*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57330*0 + 3*678*FLEN/8, x4, x1, x2)

inst_19111:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7f8000; valaddr_reg:x3; val_offset:57333*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57333*0 + 3*679*FLEN/8, x4, x1, x2)

inst_19112:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7fc000; valaddr_reg:x3; val_offset:57336*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57336*0 + 3*680*FLEN/8, x4, x1, x2)

inst_19113:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7fe000; valaddr_reg:x3; val_offset:57339*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57339*0 + 3*681*FLEN/8, x4, x1, x2)

inst_19114:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7ff000; valaddr_reg:x3; val_offset:57342*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57342*0 + 3*682*FLEN/8, x4, x1, x2)

inst_19115:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7ff800; valaddr_reg:x3; val_offset:57345*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57345*0 + 3*683*FLEN/8, x4, x1, x2)

inst_19116:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7ffc00; valaddr_reg:x3; val_offset:57348*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57348*0 + 3*684*FLEN/8, x4, x1, x2)

inst_19117:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7ffe00; valaddr_reg:x3; val_offset:57351*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57351*0 + 3*685*FLEN/8, x4, x1, x2)

inst_19118:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7fff00; valaddr_reg:x3; val_offset:57354*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57354*0 + 3*686*FLEN/8, x4, x1, x2)

inst_19119:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7fff80; valaddr_reg:x3; val_offset:57357*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57357*0 + 3*687*FLEN/8, x4, x1, x2)

inst_19120:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7fffc0; valaddr_reg:x3; val_offset:57360*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57360*0 + 3*688*FLEN/8, x4, x1, x2)

inst_19121:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7fffe0; valaddr_reg:x3; val_offset:57363*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57363*0 + 3*689*FLEN/8, x4, x1, x2)

inst_19122:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7ffff0; valaddr_reg:x3; val_offset:57366*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57366*0 + 3*690*FLEN/8, x4, x1, x2)

inst_19123:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7ffff8; valaddr_reg:x3; val_offset:57369*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57369*0 + 3*691*FLEN/8, x4, x1, x2)

inst_19124:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7ffffc; valaddr_reg:x3; val_offset:57372*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57372*0 + 3*692*FLEN/8, x4, x1, x2)

inst_19125:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7ffffe; valaddr_reg:x3; val_offset:57375*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57375*0 + 3*693*FLEN/8, x4, x1, x2)

inst_19126:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d8201 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x18 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd8201; op2val:0x80000000;
op3val:0x8c7fffff; valaddr_reg:x3; val_offset:57378*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57378*0 + 3*694*FLEN/8, x4, x1, x2)

inst_19127:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:57381*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57381*0 + 3*695*FLEN/8, x4, x1, x2)

inst_19128:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:57384*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57384*0 + 3*696*FLEN/8, x4, x1, x2)

inst_19129:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:57387*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57387*0 + 3*697*FLEN/8, x4, x1, x2)

inst_19130:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x80199999; valaddr_reg:x3; val_offset:57390*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57390*0 + 3*698*FLEN/8, x4, x1, x2)

inst_19131:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x80249249; valaddr_reg:x3; val_offset:57393*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57393*0 + 3*699*FLEN/8, x4, x1, x2)

inst_19132:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x80333333; valaddr_reg:x3; val_offset:57396*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57396*0 + 3*700*FLEN/8, x4, x1, x2)

inst_19133:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x8036db6d; valaddr_reg:x3; val_offset:57399*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57399*0 + 3*701*FLEN/8, x4, x1, x2)

inst_19134:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x803bbbbb; valaddr_reg:x3; val_offset:57402*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57402*0 + 3*702*FLEN/8, x4, x1, x2)

inst_19135:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x80444444; valaddr_reg:x3; val_offset:57405*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57405*0 + 3*703*FLEN/8, x4, x1, x2)

inst_19136:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x804ccccc; valaddr_reg:x3; val_offset:57408*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57408*0 + 3*704*FLEN/8, x4, x1, x2)

inst_19137:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x805b6db6; valaddr_reg:x3; val_offset:57411*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57411*0 + 3*705*FLEN/8, x4, x1, x2)

inst_19138:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x80666666; valaddr_reg:x3; val_offset:57414*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57414*0 + 3*706*FLEN/8, x4, x1, x2)

inst_19139:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x806db6db; valaddr_reg:x3; val_offset:57417*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57417*0 + 3*707*FLEN/8, x4, x1, x2)

inst_19140:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:57420*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57420*0 + 3*708*FLEN/8, x4, x1, x2)

inst_19141:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:57423*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57423*0 + 3*709*FLEN/8, x4, x1, x2)

inst_19142:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:57426*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57426*0 + 3*710*FLEN/8, x4, x1, x2)

inst_19143:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81800000; valaddr_reg:x3; val_offset:57429*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57429*0 + 3*711*FLEN/8, x4, x1, x2)

inst_19144:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81800001; valaddr_reg:x3; val_offset:57432*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57432*0 + 3*712*FLEN/8, x4, x1, x2)

inst_19145:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81800003; valaddr_reg:x3; val_offset:57435*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57435*0 + 3*713*FLEN/8, x4, x1, x2)

inst_19146:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81800007; valaddr_reg:x3; val_offset:57438*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57438*0 + 3*714*FLEN/8, x4, x1, x2)

inst_19147:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x8180000f; valaddr_reg:x3; val_offset:57441*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57441*0 + 3*715*FLEN/8, x4, x1, x2)

inst_19148:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x8180001f; valaddr_reg:x3; val_offset:57444*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57444*0 + 3*716*FLEN/8, x4, x1, x2)

inst_19149:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x8180003f; valaddr_reg:x3; val_offset:57447*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57447*0 + 3*717*FLEN/8, x4, x1, x2)

inst_19150:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x8180007f; valaddr_reg:x3; val_offset:57450*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57450*0 + 3*718*FLEN/8, x4, x1, x2)

inst_19151:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x818000ff; valaddr_reg:x3; val_offset:57453*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57453*0 + 3*719*FLEN/8, x4, x1, x2)

inst_19152:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x818001ff; valaddr_reg:x3; val_offset:57456*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57456*0 + 3*720*FLEN/8, x4, x1, x2)

inst_19153:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x818003ff; valaddr_reg:x3; val_offset:57459*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57459*0 + 3*721*FLEN/8, x4, x1, x2)

inst_19154:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x818007ff; valaddr_reg:x3; val_offset:57462*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57462*0 + 3*722*FLEN/8, x4, x1, x2)

inst_19155:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81800fff; valaddr_reg:x3; val_offset:57465*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57465*0 + 3*723*FLEN/8, x4, x1, x2)

inst_19156:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81801fff; valaddr_reg:x3; val_offset:57468*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57468*0 + 3*724*FLEN/8, x4, x1, x2)

inst_19157:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81803fff; valaddr_reg:x3; val_offset:57471*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57471*0 + 3*725*FLEN/8, x4, x1, x2)

inst_19158:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81807fff; valaddr_reg:x3; val_offset:57474*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57474*0 + 3*726*FLEN/8, x4, x1, x2)

inst_19159:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x8180ffff; valaddr_reg:x3; val_offset:57477*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57477*0 + 3*727*FLEN/8, x4, x1, x2)

inst_19160:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x8181ffff; valaddr_reg:x3; val_offset:57480*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57480*0 + 3*728*FLEN/8, x4, x1, x2)

inst_19161:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x8183ffff; valaddr_reg:x3; val_offset:57483*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57483*0 + 3*729*FLEN/8, x4, x1, x2)

inst_19162:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x8187ffff; valaddr_reg:x3; val_offset:57486*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57486*0 + 3*730*FLEN/8, x4, x1, x2)

inst_19163:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x818fffff; valaddr_reg:x3; val_offset:57489*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57489*0 + 3*731*FLEN/8, x4, x1, x2)

inst_19164:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x819fffff; valaddr_reg:x3; val_offset:57492*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57492*0 + 3*732*FLEN/8, x4, x1, x2)

inst_19165:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81bfffff; valaddr_reg:x3; val_offset:57495*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57495*0 + 3*733*FLEN/8, x4, x1, x2)

inst_19166:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81c00000; valaddr_reg:x3; val_offset:57498*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57498*0 + 3*734*FLEN/8, x4, x1, x2)

inst_19167:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81e00000; valaddr_reg:x3; val_offset:57501*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57501*0 + 3*735*FLEN/8, x4, x1, x2)

inst_19168:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81f00000; valaddr_reg:x3; val_offset:57504*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57504*0 + 3*736*FLEN/8, x4, x1, x2)

inst_19169:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81f80000; valaddr_reg:x3; val_offset:57507*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57507*0 + 3*737*FLEN/8, x4, x1, x2)

inst_19170:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81fc0000; valaddr_reg:x3; val_offset:57510*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57510*0 + 3*738*FLEN/8, x4, x1, x2)

inst_19171:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81fe0000; valaddr_reg:x3; val_offset:57513*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57513*0 + 3*739*FLEN/8, x4, x1, x2)

inst_19172:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81ff0000; valaddr_reg:x3; val_offset:57516*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57516*0 + 3*740*FLEN/8, x4, x1, x2)

inst_19173:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81ff8000; valaddr_reg:x3; val_offset:57519*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57519*0 + 3*741*FLEN/8, x4, x1, x2)

inst_19174:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81ffc000; valaddr_reg:x3; val_offset:57522*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57522*0 + 3*742*FLEN/8, x4, x1, x2)

inst_19175:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81ffe000; valaddr_reg:x3; val_offset:57525*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57525*0 + 3*743*FLEN/8, x4, x1, x2)

inst_19176:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81fff000; valaddr_reg:x3; val_offset:57528*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57528*0 + 3*744*FLEN/8, x4, x1, x2)

inst_19177:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81fff800; valaddr_reg:x3; val_offset:57531*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57531*0 + 3*745*FLEN/8, x4, x1, x2)

inst_19178:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81fffc00; valaddr_reg:x3; val_offset:57534*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57534*0 + 3*746*FLEN/8, x4, x1, x2)

inst_19179:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81fffe00; valaddr_reg:x3; val_offset:57537*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57537*0 + 3*747*FLEN/8, x4, x1, x2)

inst_19180:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81ffff00; valaddr_reg:x3; val_offset:57540*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57540*0 + 3*748*FLEN/8, x4, x1, x2)

inst_19181:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81ffff80; valaddr_reg:x3; val_offset:57543*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57543*0 + 3*749*FLEN/8, x4, x1, x2)

inst_19182:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81ffffc0; valaddr_reg:x3; val_offset:57546*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57546*0 + 3*750*FLEN/8, x4, x1, x2)

inst_19183:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81ffffe0; valaddr_reg:x3; val_offset:57549*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57549*0 + 3*751*FLEN/8, x4, x1, x2)

inst_19184:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81fffff0; valaddr_reg:x3; val_offset:57552*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57552*0 + 3*752*FLEN/8, x4, x1, x2)

inst_19185:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81fffff8; valaddr_reg:x3; val_offset:57555*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57555*0 + 3*753*FLEN/8, x4, x1, x2)

inst_19186:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81fffffc; valaddr_reg:x3; val_offset:57558*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57558*0 + 3*754*FLEN/8, x4, x1, x2)

inst_19187:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81fffffe; valaddr_reg:x3; val_offset:57561*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57561*0 + 3*755*FLEN/8, x4, x1, x2)

inst_19188:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3d88ad and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x03 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebd88ad; op2val:0x80000000;
op3val:0x81ffffff; valaddr_reg:x3; val_offset:57564*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57564*0 + 3*756*FLEN/8, x4, x1, x2)

inst_19189:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3de1ea and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5648f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebde1ea; op2val:0x805648f2;
op3val:0xbf800001; valaddr_reg:x3; val_offset:57567*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57567*0 + 3*757*FLEN/8, x4, x1, x2)

inst_19190:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3de1ea and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5648f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebde1ea; op2val:0x805648f2;
op3val:0xbf800003; valaddr_reg:x3; val_offset:57570*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57570*0 + 3*758*FLEN/8, x4, x1, x2)

inst_19191:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3de1ea and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5648f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebde1ea; op2val:0x805648f2;
op3val:0xbf800007; valaddr_reg:x3; val_offset:57573*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57573*0 + 3*759*FLEN/8, x4, x1, x2)

inst_19192:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3de1ea and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5648f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebde1ea; op2val:0x805648f2;
op3val:0xbf999999; valaddr_reg:x3; val_offset:57576*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57576*0 + 3*760*FLEN/8, x4, x1, x2)

inst_19193:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3de1ea and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5648f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebde1ea; op2val:0x805648f2;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:57579*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57579*0 + 3*761*FLEN/8, x4, x1, x2)

inst_19194:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3de1ea and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5648f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebde1ea; op2val:0x805648f2;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:57582*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57582*0 + 3*762*FLEN/8, x4, x1, x2)

inst_19195:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3de1ea and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5648f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebde1ea; op2val:0x805648f2;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:57585*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57585*0 + 3*763*FLEN/8, x4, x1, x2)

inst_19196:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3de1ea and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5648f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebde1ea; op2val:0x805648f2;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:57588*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57588*0 + 3*764*FLEN/8, x4, x1, x2)

inst_19197:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3de1ea and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5648f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebde1ea; op2val:0x805648f2;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:57591*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57591*0 + 3*765*FLEN/8, x4, x1, x2)

inst_19198:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3de1ea and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5648f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebde1ea; op2val:0x805648f2;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:57594*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57594*0 + 3*766*FLEN/8, x4, x1, x2)

inst_19199:
// fs1 == 0 and fe1 == 0xfd and fm1 == 0x3de1ea and fs2 == 1 and fe2 == 0x00 and fm2 == 0x5648f2 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7ebde1ea; op2val:0x805648f2;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:57597*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 57597*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(0x7eb793aa125960106,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x27ff0001938944,32,FLEN)
NAN_BOXED(0x7eb793aa125960106,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x27ff8001940992,32,FLEN)
NAN_BOXED(0x7eb793aa125960106,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x27ffc001942016,32,FLEN)
NAN_BOXED(0x7eb793aa125960106,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x27ffe001942528,32,FLEN)
NAN_BOXED(0x7eb793aa125960106,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x27fff001942784,32,FLEN)
NAN_BOXED(0x7eb793aa125960106,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x27fff801942912,32,FLEN)
NAN_BOXED(0x7eb793aa125960106,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x27fffc01942976,32,FLEN)
NAN_BOXED(0x7eb793aa125960106,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x27fffe01943008,32,FLEN)
NAN_BOXED(0x7eb793aa125960106,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x27ffff01943024,32,FLEN)
NAN_BOXED(0x7eb793aa125960106,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x27ffff81943032,32,FLEN)
NAN_BOXED(0x7eb793aa125960106,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x27ffffc1943036,32,FLEN)
NAN_BOXED(0x7eb793aa125960106,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x27ffffe1943038,32,FLEN)
NAN_BOXED(0x7eb793aa125960106,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x27fffff1943039,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x3,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x199999677721,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x249249396745,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x333333355443,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x36db6d595117,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x3bbbbb914683,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x444444473924,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x4ccccc033164,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5b6db6991862,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x666666710886,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x6db6db190235,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffff8388600,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffffc388604,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffffe388606,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x980000059383552,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x980000159383553,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x980000359383555,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x980000759383559,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x980000f59383567,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x980001f59383583,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x980003f59383615,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x980007f59383679,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x98000ff59383807,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x98001ff59384063,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x98003ff59384575,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x98007ff59385599,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x9800fff59387647,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x9801fff59391743,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x9803fff59399935,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x9807fff59416319,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x980ffff59449087,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x981ffff59514623,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x983ffff59645695,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x987ffff59907839,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x98fffff60432127,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x99fffff61480703,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x9bfffff63577855,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x9c0000063577856,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x9e0000065675008,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x9f0000066723584,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x9f8000067247872,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x9fc000067510016,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x9fe000067641088,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x9ff000067706624,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x9ff800067739392,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x9ffc00067755776,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x9ffe00067763968,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x9fff00067768064,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x9fff80067770112,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x9fffc0067771136,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x9fffe0067771648,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x9ffff0067771904,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x9ffff8067772032,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x9ffffc067772096,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x9ffffe067772128,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x9fffff067772144,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x9fffff867772152,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x9fffffc67772156,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x9fffffe67772158,32,FLEN)
NAN_BOXED(0x7eb7f81e125985822,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x9ffffff67772159,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a00000073078528,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a00000173078529,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a00000373078531,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a00000773078535,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a00000f73078543,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a00001f73078559,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a00003f73078591,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a00007f73078655,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a0000ff73078783,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a0001ff73079039,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a0003ff73079551,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a0007ff73080575,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a000fff73082623,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a001fff73086719,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a003fff73094911,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a007fff73111295,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a00ffff73144063,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a01ffff73209599,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a03ffff73340671,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a07ffff73602815,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a0fffff74127103,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a1fffff75175679,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a3fffff77272831,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a40000077272832,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a60000079369984,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a70000080418560,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a78000080942848,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a7c000081204992,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a7e000081336064,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a7f000081401600,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a7f800081434368,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a7fc00081450752,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a7fe00081458944,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a7ff00081463040,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a7ff80081465088,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a7ffc0081466112,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a7ffe0081466624,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a7fff0081466880,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a7fff8081467008,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a7fffc081467072,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a7fffe081467104,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a7ffff081467120,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a7ffff881467128,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a7ffffc81467132,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a7ffffe81467134,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3a7fffff81467135,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3f800001065353217,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3f800003065353219,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3f800007065353223,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3f999999067030937,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3fa49249067749961,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3fb33333068708659,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3fb6db6d068948333,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3fbbbbbb069267899,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3fc44444069827140,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3fcccccc070386380,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3fdb6db6071345078,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3fe66666072064102,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3fedb6db072543451,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3ffffff8073741816,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3ffffffc073741820,32,FLEN)
NAN_BOXED(0x7eb80695125989525,32,FLEN)
NAN_BOXED(0x5907f1834737,32,FLEN)
NAN_BOXED(0x3ffffffe073741822,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f000000667577344,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f000001667577345,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f000003667577347,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f000007667577351,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f00000f667577359,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f00001f667577375,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f00003f667577407,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f00007f667577471,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f0000ff667577599,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f0001ff667577855,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f0003ff667578367,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f0007ff667579391,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f000fff667581439,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f001fff667585535,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f003fff667593727,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f007fff667610111,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f00ffff667642879,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f01ffff667708415,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f03ffff667839487,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f07ffff668101631,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f0fffff668625919,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f1fffff669674495,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f3fffff671771647,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f400000671771648,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f600000673868800,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f700000674917376,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f780000675441664,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f7c0000675703808,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f7e0000675834880,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f7f0000675900416,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f7f8000675933184,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f7fc000675949568,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f7fe000675957760,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f7ff000675961856,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f7ff800675963904,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f7ffc00675964928,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f7ffe00675965440,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f7fff00675965696,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f7fff80675965824,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f7fffc0675965888,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f7fffe0675965920,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f7ffff0675965936,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f7ffff8675965944,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f7ffffc675965948,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f7ffffe675965950,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0x9f7fffff675965951,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0xbf800001212836865,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0xbf800003212836867,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0xbf800007212836871,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0xbf999999214514585,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0xbfa49249215233609,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0xbfb33333216192307,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0xbfb6db6d216431981,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0xbfbbbbbb216751547,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0xbfc44444217310788,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0xbfcccccc217870028,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0xbfdb6db6218828726,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0xbfe66666219547750,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0xbfedb6db220027099,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0xbffffff8221225464,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0xbffffffc221225468,32,FLEN)
NAN_BOXED(0x7eb90587126054791,32,FLEN)
NAN_BOXED(0x80588d44153286980,32,FLEN)
NAN_BOXED(0xbffffffe221225470,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe9000000909091328,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe9000001909091329,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe9000003909091331,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe9000007909091335,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe900000f909091343,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe900001f909091359,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe900003f909091391,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe900007f909091455,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe90000ff909091583,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe90001ff909091839,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe90003ff909092351,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe90007ff909093375,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe9000fff909095423,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe9001fff909099519,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe9003fff909107711,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe9007fff909124095,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe900ffff909156863,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe901ffff909222399,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe903ffff909353471,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe907ffff909615615,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe90fffff910139903,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe91fffff911188479,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe93fffff913285631,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe9400000913285632,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe9600000915382784,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe9700000916431360,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe9780000916955648,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe97c0000917217792,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe97e0000917348864,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe97f0000917414400,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe97f8000917447168,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe97fc000917463552,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe97fe000917471744,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe97ff000917475840,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe97ff800917477888,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe97ffc00917478912,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe97ffe00917479424,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe97fff00917479680,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe97fff80917479808,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe97fffc0917479872,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe97fffe0917479904,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe97ffff0917479920,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe97ffff8917479928,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe97ffffc917479932,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe97ffffe917479934,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xe97fffff917479935,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xff000001278190081,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xff000003278190083,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xff000007278190087,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xff199999279867801,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xff249249280586825,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xff333333281545523,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xff36db6d281785197,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xff3bbbbb282104763,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xff444444282664004,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xff4ccccc283223244,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xff5b6db6284181942,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xff666666284900966,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xff6db6db285380315,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xff7ffff8286578680,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xff7ffffc286578684,32,FLEN)
NAN_BOXED(0x7eb99523126091555,32,FLEN)
NAN_BOXED(0xc030917b224408443,32,FLEN)
NAN_BOXED(0xff7ffffe286578686,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x3,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x199999677721,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x249249396745,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x333333355443,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x36db6d595117,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x3bbbbb914683,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x444444473924,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x4ccccc033164,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x5b6db6991862,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x666666710886,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x6db6db190235,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffff8388600,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffffc388604,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x7ffffe388606,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10000006777216,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10000016777217,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10000036777219,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10000076777223,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x100000f6777231,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x100001f6777247,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x100003f6777279,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x100007f6777343,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10000ff6777471,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10001ff6777727,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10003ff6778239,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10007ff6779263,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1000fff6781311,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1001fff6785407,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1003fff6793599,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1007fff6809983,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x100ffff6842751,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x101ffff6908287,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x103ffff7039359,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x107ffff7301503,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10fffff7825791,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x11fffff8874367,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x13fffff0971519,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x14000000971520,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x16000003068672,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17000004117248,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17800004641536,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17c00004903680,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17e00005034752,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17f00005100288,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17f80005133056,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17fc0005149440,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17fe0005157632,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17ff0005161728,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17ff8005163776,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17ffc005164800,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17ffe005165312,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17fff005165568,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17fff805165696,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17fffc05165760,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17fffe05165792,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17ffff05165808,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17ffff85165816,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17ffffc5165820,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17ffffe5165822,32,FLEN)
NAN_BOXED(0x7eba98a2126157986,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17fffff5165823,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80800001155872257,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80800003155872259,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80800007155872263,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80999999157549977,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80a49249158269001,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80b33333159227699,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80b6db6d159467373,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80bbbbbb159786939,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80c44444160346180,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80cccccc160905420,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80db6db6161864118,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80e66666162583142,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80edb6db163062491,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80fffff8164260856,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80fffffc164260860,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80fffffe164260862,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86800000256535552,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86800001256535553,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86800003256535555,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86800007256535559,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8680000f256535567,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8680001f256535583,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8680003f256535615,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8680007f256535679,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x868000ff256535807,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x868001ff256536063,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x868003ff256536575,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x868007ff256537599,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86800fff256539647,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86801fff256543743,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86803fff256551935,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86807fff256568319,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8680ffff256601087,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8681ffff256666623,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8683ffff256797695,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8687ffff257059839,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x868fffff257584127,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x869fffff258632703,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86bfffff260729855,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86c00000260729856,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86e00000262827008,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86f00000263875584,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86f80000264399872,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86fc0000264662016,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86fe0000264793088,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86ff0000264858624,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86ff8000264891392,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86ffc000264907776,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86ffe000264915968,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86fff000264920064,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86fff800264922112,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86fffc00264923136,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86fffe00264923648,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86ffff00264923904,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86ffff80264924032,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86ffffc0264924096,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86ffffe0264924128,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86fffff0264924144,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86fffff8264924152,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86fffffc264924156,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86fffffe264924158,32,FLEN)
NAN_BOXED(0x7ebaaff8126163960,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x86ffffff264924159,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000001147483649,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000003147483651,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000007147483655,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80199999149161369,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80249249149880393,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80333333150839091,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8036db6d151078765,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x803bbbbb151398331,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80444444151957572,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x804ccccc152516812,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x805b6db6153475510,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80666666154194534,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x806db6db154673883,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffff8155872248,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffc155872252,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffe155872254,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f800000407530496,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f800001407530497,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f800003407530499,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f800007407530503,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f80000f407530511,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f80001f407530527,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f80003f407530559,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f80007f407530623,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f8000ff407530751,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f8001ff407531007,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f8003ff407531519,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f8007ff407532543,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f800fff407534591,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f801fff407538687,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f803fff407546879,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f807fff407563263,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f80ffff407596031,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f81ffff407661567,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f83ffff407792639,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f87ffff408054783,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f8fffff408579071,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8f9fffff409627647,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8fbfffff411724799,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8fc00000411724800,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8fe00000413821952,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8ff00000414870528,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8ff80000415394816,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8ffc0000415656960,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8ffe0000415788032,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8fff0000415853568,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8fff8000415886336,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8fffc000415902720,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8fffe000415910912,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8ffff000415915008,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8ffff800415917056,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8ffffc00415918080,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8ffffe00415918592,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8fffff00415918848,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8fffff80415918976,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8fffffc0415919040,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8fffffe0415919072,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8ffffff0415919088,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8ffffff8415919096,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8ffffffc415919100,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8ffffffe415919102,32,FLEN)
NAN_BOXED(0x7ebb5aa8126207656,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8fffffff415919103,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x800001388609,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x800003388611,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x800007388615,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x9999990066329,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xa492490785353,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb333331744051,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb6db6d1983725,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xbbbbbb2303291,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc444442862532,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xcccccc3421772,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xdb6db64380470,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe666665099494,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xedb6db5578843,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xfffff86777208,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xfffffc6777212,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xfffffe6777214,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb00000084549376,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb00000184549377,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb00000384549379,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb00000784549383,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb00000f84549391,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb00001f84549407,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb00003f84549439,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb00007f84549503,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb0000ff84549631,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb0001ff84549887,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb0003ff84550399,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb0007ff84551423,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb000fff84553471,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb001fff84557567,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb003fff84565759,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb007fff84582143,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb00ffff84614911,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb01ffff84680447,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb03ffff84811519,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb07ffff85073663,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb0fffff85597951,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb1fffff86646527,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb3fffff88743679,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb40000088743680,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb60000090840832,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb70000091889408,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb78000092413696,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb7c000092675840,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb7e000092806912,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb7f000092872448,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb7f800092905216,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb7fc00092921600,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb7fe00092929792,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb7ff00092933888,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb7ff80092935936,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb7ffc0092936960,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb7ffe0092937472,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb7fff0092937728,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb7fff8092937856,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb7fffc092937920,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb7fffe092937952,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb7ffff092937968,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb7ffff892937976,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb7ffffc92937980,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb7ffffe92937982,32,FLEN)
NAN_BOXED(0x7ebc4862126268514,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb7fffff92937983,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x800001388609,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x800003388611,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x800007388615,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x9999990066329,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xa492490785353,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb333331744051,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb6db6d1983725,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xbbbbbb2303291,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc444442862532,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xcccccc3421772,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xdb6db64380470,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe666665099494,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xedb6db5578843,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xfffff86777208,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xfffffc6777212,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xfffffe6777214,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10000006777216,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10000016777217,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10000036777219,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10000076777223,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x100000f6777231,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x100001f6777247,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x100003f6777279,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x100007f6777343,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10000ff6777471,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10001ff6777727,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10003ff6778239,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10007ff6779263,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1000fff6781311,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1001fff6785407,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1003fff6793599,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x1007fff6809983,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x100ffff6842751,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x101ffff6908287,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x103ffff7039359,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x107ffff7301503,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x10fffff7825791,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x11fffff8874367,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x13fffff0971519,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x14000000971520,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x16000003068672,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17000004117248,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17800004641536,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17c00004903680,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17e00005034752,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17f00005100288,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17f80005133056,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17fc0005149440,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17fe0005157632,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17ff0005161728,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17ff8005163776,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17ffc005164800,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17ffe005165312,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17fff005165568,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17fff805165696,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17fffc05165760,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17fffe05165792,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17ffff05165808,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17ffff85165816,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17ffffc5165820,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17ffffe5165822,32,FLEN)
NAN_BOXED(0x7ebcdcf2126306546,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x17fffff5165823,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x2800000071088640,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x2800000171088641,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x2800000371088643,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x2800000771088647,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x2800000f71088655,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x2800001f71088671,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x2800003f71088703,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x2800007f71088767,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x280000ff71088895,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x280001ff71089151,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x280003ff71089663,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x280007ff71090687,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x28000fff71092735,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x28001fff71096831,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x28003fff71105023,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x28007fff71121407,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x2800ffff71154175,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x2801ffff71219711,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x2803ffff71350783,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x2807ffff71612927,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x280fffff72137215,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x281fffff73185791,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x283fffff75282943,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x2840000075282944,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x2860000077380096,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x2870000078428672,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x2878000078952960,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x287c000079215104,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x287e000079346176,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x287f000079411712,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x287f800079444480,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x287fc00079460864,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x287fe00079469056,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x287ff00079473152,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x287ff80079475200,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x287ffc0079476224,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x287ffe0079476736,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x287fff0079476992,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x287fff8079477120,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x287fffc079477184,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x287fffe079477216,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x287ffff079477232,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x287ffff879477240,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x287ffffc79477244,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x287ffffe79477246,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x287fffff79477247,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x3f800001065353217,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x3f800003065353219,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x3f800007065353223,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x3f999999067030937,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x3fa49249067749961,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x3fb33333068708659,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x3fb6db6d068948333,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x3fbbbbbb069267899,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x3fc44444069827140,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x3fcccccc070386380,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x3fdb6db6071345078,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x3fe66666072064102,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x3fedb6db072543451,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x3ffffff8073741816,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x3ffffffc073741820,32,FLEN)
NAN_BOXED(0x7ebd2dfe126327294,32,FLEN)
NAN_BOXED(0x569b02675778,32,FLEN)
NAN_BOXED(0x3ffffffe073741822,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000001147483649,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000003147483651,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000007147483655,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80199999149161369,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80249249149880393,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80333333150839091,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8036db6d151078765,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x803bbbbb151398331,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80444444151957572,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x804ccccc152516812,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x805b6db6153475510,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80666666154194534,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x806db6db154673883,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffff8155872248,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffc155872252,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffe155872254,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c000000348810240,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c000001348810241,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c000003348810243,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c000007348810247,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c00000f348810255,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c00001f348810271,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c00003f348810303,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c00007f348810367,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c0000ff348810495,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c0001ff348810751,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c0003ff348811263,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c0007ff348812287,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c000fff348814335,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c001fff348818431,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c003fff348826623,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c007fff348843007,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c00ffff348875775,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c01ffff348941311,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c03ffff349072383,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c07ffff349334527,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c0fffff349858815,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c1fffff350907391,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c3fffff353004543,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c400000353004544,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c600000355101696,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c700000356150272,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c780000356674560,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c7c0000356936704,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c7e0000357067776,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c7f0000357133312,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c7f8000357166080,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c7fc000357182464,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c7fe000357190656,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c7ff000357194752,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c7ff800357196800,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c7ffc00357197824,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c7ffe00357198336,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c7fff00357198592,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c7fff80357198720,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c7fffc0357198784,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c7fffe0357198816,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c7ffff0357198832,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c7ffff8357198840,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c7ffffc357198844,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c7ffffe357198846,32,FLEN)
NAN_BOXED(0x7ebd8201126348801,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8c7fffff357198847,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000001147483649,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000003147483651,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000007147483655,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80199999149161369,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80249249149880393,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80333333150839091,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8036db6d151078765,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x803bbbbb151398331,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80444444151957572,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x804ccccc152516812,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x805b6db6153475510,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80666666154194534,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x806db6db154673883,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffff8155872248,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffc155872252,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffe155872254,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81800000172649472,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81800001172649473,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81800003172649475,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81800007172649479,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8180000f172649487,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8180001f172649503,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8180003f172649535,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8180007f172649599,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x818000ff172649727,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x818001ff172649983,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x818003ff172650495,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x818007ff172651519,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81800fff172653567,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81801fff172657663,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81803fff172665855,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81807fff172682239,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8180ffff172715007,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8181ffff172780543,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8183ffff172911615,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8187ffff173173759,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x818fffff173698047,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x819fffff174746623,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81bfffff176843775,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81c00000176843776,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81e00000178940928,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81f00000179989504,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81f80000180513792,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81fc0000180775936,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81fe0000180907008,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81ff0000180972544,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81ff8000181005312,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81ffc000181021696,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81ffe000181029888,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81fff000181033984,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81fff800181036032,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81fffc00181037056,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81fffe00181037568,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81ffff00181037824,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81ffff80181037952,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81ffffc0181038016,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81ffffe0181038048,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81fffff0181038064,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81fffff8181038072,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81fffffc181038076,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81fffffe181038078,32,FLEN)
NAN_BOXED(0x7ebd88ad126350509,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x81ffffff181038079,32,FLEN)
NAN_BOXED(0x7ebde1ea126373354,32,FLEN)
NAN_BOXED(0x805648f2153138418,32,FLEN)
NAN_BOXED(0xbf800001212836865,32,FLEN)
NAN_BOXED(0x7ebde1ea126373354,32,FLEN)
NAN_BOXED(0x805648f2153138418,32,FLEN)
NAN_BOXED(0xbf800003212836867,32,FLEN)
NAN_BOXED(0x7ebde1ea126373354,32,FLEN)
NAN_BOXED(0x805648f2153138418,32,FLEN)
NAN_BOXED(0xbf800007212836871,32,FLEN)
NAN_BOXED(0x7ebde1ea126373354,32,FLEN)
NAN_BOXED(0x805648f2153138418,32,FLEN)
NAN_BOXED(0xbf999999214514585,32,FLEN)
NAN_BOXED(0x7ebde1ea126373354,32,FLEN)
NAN_BOXED(0x805648f2153138418,32,FLEN)
NAN_BOXED(0xbfa49249215233609,32,FLEN)
NAN_BOXED(0x7ebde1ea126373354,32,FLEN)
NAN_BOXED(0x805648f2153138418,32,FLEN)
NAN_BOXED(0xbfb33333216192307,32,FLEN)
NAN_BOXED(0x7ebde1ea126373354,32,FLEN)
NAN_BOXED(0x805648f2153138418,32,FLEN)
NAN_BOXED(0xbfb6db6d216431981,32,FLEN)
NAN_BOXED(0x7ebde1ea126373354,32,FLEN)
NAN_BOXED(0x805648f2153138418,32,FLEN)
NAN_BOXED(0xbfbbbbbb216751547,32,FLEN)
NAN_BOXED(0x7ebde1ea126373354,32,FLEN)
NAN_BOXED(0x805648f2153138418,32,FLEN)
NAN_BOXED(0xbfc44444217310788,32,FLEN)
NAN_BOXED(0x7ebde1ea126373354,32,FLEN)
NAN_BOXED(0x805648f2153138418,32,FLEN)
NAN_BOXED(0xbfcccccc217870028,32,FLEN)
NAN_BOXED(0x7ebde1ea126373354,32,FLEN)
NAN_BOXED(0x805648f2153138418,32,FLEN)
NAN_BOXED(0xbfdb6db6218828726,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
