
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 14:17:59 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32F/fmadd.s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fmadd.s instruction of the RISC-V RV32F_Zicsr,RV32FD_Zicsr,RV64F_Zicsr,RV64FD_Zicsr extension for the fmadd_b15 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IF_Zicsr,RV32IFD_Zicsr,RV64IF_Zicsr,RV64IFD_Zicsr,RV32EF_Zicsr,RV32EFD_Zicsr,RV64EF_Zicsr,RV64EFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_CASE(1,"//check ISA:=regex(.*E.*F.*);def TEST_CASE_1=True;",fmadd_b15)
RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_26112:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x1f807fff; valaddr_reg:x3; val_offset:78336*0 + 3*-1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78336*0 + 3*0*FLEN/8, x4, x1, x2)

inst_26113:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x1f80ffff; valaddr_reg:x3; val_offset:78339*0 + 3*0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78339*0 + 3*1*FLEN/8, x4, x1, x2)

inst_26114:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x1f81ffff; valaddr_reg:x3; val_offset:78342*0 + 3*1*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78342*0 + 3*2*FLEN/8, x4, x1, x2)

inst_26115:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x1f83ffff; valaddr_reg:x3; val_offset:78345*0 + 3*2*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78345*0 + 3*3*FLEN/8, x4, x1, x2)

inst_26116:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x1f87ffff; valaddr_reg:x3; val_offset:78348*0 + 3*3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78348*0 + 3*4*FLEN/8, x4, x1, x2)

inst_26117:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x1f8fffff; valaddr_reg:x3; val_offset:78351*0 + 3*4*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78351*0 + 3*5*FLEN/8, x4, x1, x2)

inst_26118:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x1f9fffff; valaddr_reg:x3; val_offset:78354*0 + 3*5*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78354*0 + 3*6*FLEN/8, x4, x1, x2)

inst_26119:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x1fbfffff; valaddr_reg:x3; val_offset:78357*0 + 3*6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78357*0 + 3*7*FLEN/8, x4, x1, x2)

inst_26120:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x1fc00000; valaddr_reg:x3; val_offset:78360*0 + 3*7*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78360*0 + 3*8*FLEN/8, x4, x1, x2)

inst_26121:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x1fe00000; valaddr_reg:x3; val_offset:78363*0 + 3*8*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78363*0 + 3*9*FLEN/8, x4, x1, x2)

inst_26122:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x1ff00000; valaddr_reg:x3; val_offset:78366*0 + 3*9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78366*0 + 3*10*FLEN/8, x4, x1, x2)

inst_26123:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x1ff80000; valaddr_reg:x3; val_offset:78369*0 + 3*10*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78369*0 + 3*11*FLEN/8, x4, x1, x2)

inst_26124:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x1ffc0000; valaddr_reg:x3; val_offset:78372*0 + 3*11*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78372*0 + 3*12*FLEN/8, x4, x1, x2)

inst_26125:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x1ffe0000; valaddr_reg:x3; val_offset:78375*0 + 3*12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78375*0 + 3*13*FLEN/8, x4, x1, x2)

inst_26126:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x1fff0000; valaddr_reg:x3; val_offset:78378*0 + 3*13*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78378*0 + 3*14*FLEN/8, x4, x1, x2)

inst_26127:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x1fff8000; valaddr_reg:x3; val_offset:78381*0 + 3*14*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78381*0 + 3*15*FLEN/8, x4, x1, x2)

inst_26128:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x1fffc000; valaddr_reg:x3; val_offset:78384*0 + 3*15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78384*0 + 3*16*FLEN/8, x4, x1, x2)

inst_26129:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x1fffe000; valaddr_reg:x3; val_offset:78387*0 + 3*16*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78387*0 + 3*17*FLEN/8, x4, x1, x2)

inst_26130:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x1ffff000; valaddr_reg:x3; val_offset:78390*0 + 3*17*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78390*0 + 3*18*FLEN/8, x4, x1, x2)

inst_26131:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x1ffff800; valaddr_reg:x3; val_offset:78393*0 + 3*18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78393*0 + 3*19*FLEN/8, x4, x1, x2)

inst_26132:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x1ffffc00; valaddr_reg:x3; val_offset:78396*0 + 3*19*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78396*0 + 3*20*FLEN/8, x4, x1, x2)

inst_26133:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x1ffffe00; valaddr_reg:x3; val_offset:78399*0 + 3*20*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78399*0 + 3*21*FLEN/8, x4, x1, x2)

inst_26134:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x1fffff00; valaddr_reg:x3; val_offset:78402*0 + 3*21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78402*0 + 3*22*FLEN/8, x4, x1, x2)

inst_26135:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x1fffff80; valaddr_reg:x3; val_offset:78405*0 + 3*22*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78405*0 + 3*23*FLEN/8, x4, x1, x2)

inst_26136:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x1fffffc0; valaddr_reg:x3; val_offset:78408*0 + 3*23*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78408*0 + 3*24*FLEN/8, x4, x1, x2)

inst_26137:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x1fffffe0; valaddr_reg:x3; val_offset:78411*0 + 3*24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78411*0 + 3*25*FLEN/8, x4, x1, x2)

inst_26138:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x1ffffff0; valaddr_reg:x3; val_offset:78414*0 + 3*25*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78414*0 + 3*26*FLEN/8, x4, x1, x2)

inst_26139:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x1ffffff8; valaddr_reg:x3; val_offset:78417*0 + 3*26*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78417*0 + 3*27*FLEN/8, x4, x1, x2)

inst_26140:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x1ffffffc; valaddr_reg:x3; val_offset:78420*0 + 3*27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78420*0 + 3*28*FLEN/8, x4, x1, x2)

inst_26141:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x1ffffffe; valaddr_reg:x3; val_offset:78423*0 + 3*28*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78423*0 + 3*29*FLEN/8, x4, x1, x2)

inst_26142:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x3f and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x1fffffff; valaddr_reg:x3; val_offset:78426*0 + 3*29*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78426*0 + 3*30*FLEN/8, x4, x1, x2)

inst_26143:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x3f800001; valaddr_reg:x3; val_offset:78429*0 + 3*30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78429*0 + 3*31*FLEN/8, x4, x1, x2)

inst_26144:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x3f800003; valaddr_reg:x3; val_offset:78432*0 + 3*31*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78432*0 + 3*32*FLEN/8, x4, x1, x2)

inst_26145:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x3f800007; valaddr_reg:x3; val_offset:78435*0 + 3*32*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78435*0 + 3*33*FLEN/8, x4, x1, x2)

inst_26146:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x3f999999; valaddr_reg:x3; val_offset:78438*0 + 3*33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78438*0 + 3*34*FLEN/8, x4, x1, x2)

inst_26147:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:78441*0 + 3*34*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78441*0 + 3*35*FLEN/8, x4, x1, x2)

inst_26148:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:78444*0 + 3*35*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78444*0 + 3*36*FLEN/8, x4, x1, x2)

inst_26149:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:78447*0 + 3*36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78447*0 + 3*37*FLEN/8, x4, x1, x2)

inst_26150:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:78450*0 + 3*37*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78450*0 + 3*38*FLEN/8, x4, x1, x2)

inst_26151:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:78453*0 + 3*38*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78453*0 + 3*39*FLEN/8, x4, x1, x2)

inst_26152:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:78456*0 + 3*39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78456*0 + 3*40*FLEN/8, x4, x1, x2)

inst_26153:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:78459*0 + 3*40*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78459*0 + 3*41*FLEN/8, x4, x1, x2)

inst_26154:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:78462*0 + 3*41*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78462*0 + 3*42*FLEN/8, x4, x1, x2)

inst_26155:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:78465*0 + 3*42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78465*0 + 3*43*FLEN/8, x4, x1, x2)

inst_26156:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:78468*0 + 3*43*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78468*0 + 3*44*FLEN/8, x4, x1, x2)

inst_26157:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:78471*0 + 3*44*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78471*0 + 3*45*FLEN/8, x4, x1, x2)

inst_26158:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0250a3 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3edcf1 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0250a3; op2val:0x3edcf1;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:78474*0 + 3*45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78474*0 + 3*46*FLEN/8, x4, x1, x2)

inst_26159:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3b800000; valaddr_reg:x3; val_offset:78477*0 + 3*46*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78477*0 + 3*47*FLEN/8, x4, x1, x2)

inst_26160:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3b800001; valaddr_reg:x3; val_offset:78480*0 + 3*47*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78480*0 + 3*48*FLEN/8, x4, x1, x2)

inst_26161:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3b800003; valaddr_reg:x3; val_offset:78483*0 + 3*48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78483*0 + 3*49*FLEN/8, x4, x1, x2)

inst_26162:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3b800007; valaddr_reg:x3; val_offset:78486*0 + 3*49*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78486*0 + 3*50*FLEN/8, x4, x1, x2)

inst_26163:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3b80000f; valaddr_reg:x3; val_offset:78489*0 + 3*50*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78489*0 + 3*51*FLEN/8, x4, x1, x2)

inst_26164:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3b80001f; valaddr_reg:x3; val_offset:78492*0 + 3*51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78492*0 + 3*52*FLEN/8, x4, x1, x2)

inst_26165:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3b80003f; valaddr_reg:x3; val_offset:78495*0 + 3*52*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78495*0 + 3*53*FLEN/8, x4, x1, x2)

inst_26166:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3b80007f; valaddr_reg:x3; val_offset:78498*0 + 3*53*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78498*0 + 3*54*FLEN/8, x4, x1, x2)

inst_26167:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3b8000ff; valaddr_reg:x3; val_offset:78501*0 + 3*54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78501*0 + 3*55*FLEN/8, x4, x1, x2)

inst_26168:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3b8001ff; valaddr_reg:x3; val_offset:78504*0 + 3*55*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78504*0 + 3*56*FLEN/8, x4, x1, x2)

inst_26169:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3b8003ff; valaddr_reg:x3; val_offset:78507*0 + 3*56*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78507*0 + 3*57*FLEN/8, x4, x1, x2)

inst_26170:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3b8007ff; valaddr_reg:x3; val_offset:78510*0 + 3*57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78510*0 + 3*58*FLEN/8, x4, x1, x2)

inst_26171:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3b800fff; valaddr_reg:x3; val_offset:78513*0 + 3*58*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78513*0 + 3*59*FLEN/8, x4, x1, x2)

inst_26172:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3b801fff; valaddr_reg:x3; val_offset:78516*0 + 3*59*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78516*0 + 3*60*FLEN/8, x4, x1, x2)

inst_26173:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3b803fff; valaddr_reg:x3; val_offset:78519*0 + 3*60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78519*0 + 3*61*FLEN/8, x4, x1, x2)

inst_26174:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3b807fff; valaddr_reg:x3; val_offset:78522*0 + 3*61*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78522*0 + 3*62*FLEN/8, x4, x1, x2)

inst_26175:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3b80ffff; valaddr_reg:x3; val_offset:78525*0 + 3*62*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78525*0 + 3*63*FLEN/8, x4, x1, x2)

inst_26176:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3b81ffff; valaddr_reg:x3; val_offset:78528*0 + 3*63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78528*0 + 3*64*FLEN/8, x4, x1, x2)

inst_26177:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3b83ffff; valaddr_reg:x3; val_offset:78531*0 + 3*64*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78531*0 + 3*65*FLEN/8, x4, x1, x2)

inst_26178:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3b87ffff; valaddr_reg:x3; val_offset:78534*0 + 3*65*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78534*0 + 3*66*FLEN/8, x4, x1, x2)

inst_26179:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3b8fffff; valaddr_reg:x3; val_offset:78537*0 + 3*66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78537*0 + 3*67*FLEN/8, x4, x1, x2)

inst_26180:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3b9fffff; valaddr_reg:x3; val_offset:78540*0 + 3*67*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78540*0 + 3*68*FLEN/8, x4, x1, x2)

inst_26181:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3bbfffff; valaddr_reg:x3; val_offset:78543*0 + 3*68*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78543*0 + 3*69*FLEN/8, x4, x1, x2)

inst_26182:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3bc00000; valaddr_reg:x3; val_offset:78546*0 + 3*69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78546*0 + 3*70*FLEN/8, x4, x1, x2)

inst_26183:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3be00000; valaddr_reg:x3; val_offset:78549*0 + 3*70*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78549*0 + 3*71*FLEN/8, x4, x1, x2)

inst_26184:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3bf00000; valaddr_reg:x3; val_offset:78552*0 + 3*71*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78552*0 + 3*72*FLEN/8, x4, x1, x2)

inst_26185:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3bf80000; valaddr_reg:x3; val_offset:78555*0 + 3*72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78555*0 + 3*73*FLEN/8, x4, x1, x2)

inst_26186:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3bfc0000; valaddr_reg:x3; val_offset:78558*0 + 3*73*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78558*0 + 3*74*FLEN/8, x4, x1, x2)

inst_26187:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3bfe0000; valaddr_reg:x3; val_offset:78561*0 + 3*74*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78561*0 + 3*75*FLEN/8, x4, x1, x2)

inst_26188:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3bff0000; valaddr_reg:x3; val_offset:78564*0 + 3*75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78564*0 + 3*76*FLEN/8, x4, x1, x2)

inst_26189:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3bff8000; valaddr_reg:x3; val_offset:78567*0 + 3*76*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78567*0 + 3*77*FLEN/8, x4, x1, x2)

inst_26190:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3bffc000; valaddr_reg:x3; val_offset:78570*0 + 3*77*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78570*0 + 3*78*FLEN/8, x4, x1, x2)

inst_26191:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3bffe000; valaddr_reg:x3; val_offset:78573*0 + 3*78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78573*0 + 3*79*FLEN/8, x4, x1, x2)

inst_26192:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3bfff000; valaddr_reg:x3; val_offset:78576*0 + 3*79*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78576*0 + 3*80*FLEN/8, x4, x1, x2)

inst_26193:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3bfff800; valaddr_reg:x3; val_offset:78579*0 + 3*80*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78579*0 + 3*81*FLEN/8, x4, x1, x2)

inst_26194:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3bfffc00; valaddr_reg:x3; val_offset:78582*0 + 3*81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78582*0 + 3*82*FLEN/8, x4, x1, x2)

inst_26195:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3bfffe00; valaddr_reg:x3; val_offset:78585*0 + 3*82*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78585*0 + 3*83*FLEN/8, x4, x1, x2)

inst_26196:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3bffff00; valaddr_reg:x3; val_offset:78588*0 + 3*83*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78588*0 + 3*84*FLEN/8, x4, x1, x2)

inst_26197:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3bffff80; valaddr_reg:x3; val_offset:78591*0 + 3*84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78591*0 + 3*85*FLEN/8, x4, x1, x2)

inst_26198:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3bffffc0; valaddr_reg:x3; val_offset:78594*0 + 3*85*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78594*0 + 3*86*FLEN/8, x4, x1, x2)

inst_26199:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3bffffe0; valaddr_reg:x3; val_offset:78597*0 + 3*86*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78597*0 + 3*87*FLEN/8, x4, x1, x2)

inst_26200:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3bfffff0; valaddr_reg:x3; val_offset:78600*0 + 3*87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78600*0 + 3*88*FLEN/8, x4, x1, x2)

inst_26201:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3bfffff8; valaddr_reg:x3; val_offset:78603*0 + 3*88*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78603*0 + 3*89*FLEN/8, x4, x1, x2)

inst_26202:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3bfffffc; valaddr_reg:x3; val_offset:78606*0 + 3*89*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78606*0 + 3*90*FLEN/8, x4, x1, x2)

inst_26203:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3bfffffe; valaddr_reg:x3; val_offset:78609*0 + 3*90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78609*0 + 3*91*FLEN/8, x4, x1, x2)

inst_26204:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x77 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3bffffff; valaddr_reg:x3; val_offset:78612*0 + 3*91*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78612*0 + 3*92*FLEN/8, x4, x1, x2)

inst_26205:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3f800001; valaddr_reg:x3; val_offset:78615*0 + 3*92*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78615*0 + 3*93*FLEN/8, x4, x1, x2)

inst_26206:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3f800003; valaddr_reg:x3; val_offset:78618*0 + 3*93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78618*0 + 3*94*FLEN/8, x4, x1, x2)

inst_26207:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3f800007; valaddr_reg:x3; val_offset:78621*0 + 3*94*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78621*0 + 3*95*FLEN/8, x4, x1, x2)

inst_26208:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3f999999; valaddr_reg:x3; val_offset:78624*0 + 3*95*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78624*0 + 3*96*FLEN/8, x4, x1, x2)

inst_26209:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:78627*0 + 3*96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78627*0 + 3*97*FLEN/8, x4, x1, x2)

inst_26210:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:78630*0 + 3*97*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78630*0 + 3*98*FLEN/8, x4, x1, x2)

inst_26211:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:78633*0 + 3*98*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78633*0 + 3*99*FLEN/8, x4, x1, x2)

inst_26212:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:78636*0 + 3*99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78636*0 + 3*100*FLEN/8, x4, x1, x2)

inst_26213:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:78639*0 + 3*100*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78639*0 + 3*101*FLEN/8, x4, x1, x2)

inst_26214:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:78642*0 + 3*101*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78642*0 + 3*102*FLEN/8, x4, x1, x2)

inst_26215:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:78645*0 + 3*102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78645*0 + 3*103*FLEN/8, x4, x1, x2)

inst_26216:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:78648*0 + 3*103*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78648*0 + 3*104*FLEN/8, x4, x1, x2)

inst_26217:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:78651*0 + 3*104*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78651*0 + 3*105*FLEN/8, x4, x1, x2)

inst_26218:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:78654*0 + 3*105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78654*0 + 3*106*FLEN/8, x4, x1, x2)

inst_26219:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:78657*0 + 3*106*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78657*0 + 3*107*FLEN/8, x4, x1, x2)

inst_26220:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x026f45 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ece2e and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f026f45; op2val:0x3ece2e;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:78660*0 + 3*107*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78660*0 + 3*108*FLEN/8, x4, x1, x2)

inst_26221:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x26000000; valaddr_reg:x3; val_offset:78663*0 + 3*108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78663*0 + 3*109*FLEN/8, x4, x1, x2)

inst_26222:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x26000001; valaddr_reg:x3; val_offset:78666*0 + 3*109*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78666*0 + 3*110*FLEN/8, x4, x1, x2)

inst_26223:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x26000003; valaddr_reg:x3; val_offset:78669*0 + 3*110*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78669*0 + 3*111*FLEN/8, x4, x1, x2)

inst_26224:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x26000007; valaddr_reg:x3; val_offset:78672*0 + 3*111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78672*0 + 3*112*FLEN/8, x4, x1, x2)

inst_26225:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x2600000f; valaddr_reg:x3; val_offset:78675*0 + 3*112*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78675*0 + 3*113*FLEN/8, x4, x1, x2)

inst_26226:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x2600001f; valaddr_reg:x3; val_offset:78678*0 + 3*113*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78678*0 + 3*114*FLEN/8, x4, x1, x2)

inst_26227:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x2600003f; valaddr_reg:x3; val_offset:78681*0 + 3*114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78681*0 + 3*115*FLEN/8, x4, x1, x2)

inst_26228:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x2600007f; valaddr_reg:x3; val_offset:78684*0 + 3*115*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78684*0 + 3*116*FLEN/8, x4, x1, x2)

inst_26229:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x260000ff; valaddr_reg:x3; val_offset:78687*0 + 3*116*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78687*0 + 3*117*FLEN/8, x4, x1, x2)

inst_26230:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x260001ff; valaddr_reg:x3; val_offset:78690*0 + 3*117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78690*0 + 3*118*FLEN/8, x4, x1, x2)

inst_26231:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x260003ff; valaddr_reg:x3; val_offset:78693*0 + 3*118*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78693*0 + 3*119*FLEN/8, x4, x1, x2)

inst_26232:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x260007ff; valaddr_reg:x3; val_offset:78696*0 + 3*119*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78696*0 + 3*120*FLEN/8, x4, x1, x2)

inst_26233:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x26000fff; valaddr_reg:x3; val_offset:78699*0 + 3*120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78699*0 + 3*121*FLEN/8, x4, x1, x2)

inst_26234:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x26001fff; valaddr_reg:x3; val_offset:78702*0 + 3*121*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78702*0 + 3*122*FLEN/8, x4, x1, x2)

inst_26235:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x26003fff; valaddr_reg:x3; val_offset:78705*0 + 3*122*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78705*0 + 3*123*FLEN/8, x4, x1, x2)

inst_26236:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x26007fff; valaddr_reg:x3; val_offset:78708*0 + 3*123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78708*0 + 3*124*FLEN/8, x4, x1, x2)

inst_26237:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x2600ffff; valaddr_reg:x3; val_offset:78711*0 + 3*124*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78711*0 + 3*125*FLEN/8, x4, x1, x2)

inst_26238:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x2601ffff; valaddr_reg:x3; val_offset:78714*0 + 3*125*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78714*0 + 3*126*FLEN/8, x4, x1, x2)

inst_26239:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x2603ffff; valaddr_reg:x3; val_offset:78717*0 + 3*126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78717*0 + 3*127*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_26240:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x2607ffff; valaddr_reg:x3; val_offset:78720*0 + 3*127*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78720*0 + 3*128*FLEN/8, x4, x1, x2)

inst_26241:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x260fffff; valaddr_reg:x3; val_offset:78723*0 + 3*128*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78723*0 + 3*129*FLEN/8, x4, x1, x2)

inst_26242:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x261fffff; valaddr_reg:x3; val_offset:78726*0 + 3*129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78726*0 + 3*130*FLEN/8, x4, x1, x2)

inst_26243:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x263fffff; valaddr_reg:x3; val_offset:78729*0 + 3*130*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78729*0 + 3*131*FLEN/8, x4, x1, x2)

inst_26244:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x26400000; valaddr_reg:x3; val_offset:78732*0 + 3*131*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78732*0 + 3*132*FLEN/8, x4, x1, x2)

inst_26245:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x26600000; valaddr_reg:x3; val_offset:78735*0 + 3*132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78735*0 + 3*133*FLEN/8, x4, x1, x2)

inst_26246:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x26700000; valaddr_reg:x3; val_offset:78738*0 + 3*133*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78738*0 + 3*134*FLEN/8, x4, x1, x2)

inst_26247:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x26780000; valaddr_reg:x3; val_offset:78741*0 + 3*134*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78741*0 + 3*135*FLEN/8, x4, x1, x2)

inst_26248:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x267c0000; valaddr_reg:x3; val_offset:78744*0 + 3*135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78744*0 + 3*136*FLEN/8, x4, x1, x2)

inst_26249:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x267e0000; valaddr_reg:x3; val_offset:78747*0 + 3*136*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78747*0 + 3*137*FLEN/8, x4, x1, x2)

inst_26250:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x267f0000; valaddr_reg:x3; val_offset:78750*0 + 3*137*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78750*0 + 3*138*FLEN/8, x4, x1, x2)

inst_26251:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x267f8000; valaddr_reg:x3; val_offset:78753*0 + 3*138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78753*0 + 3*139*FLEN/8, x4, x1, x2)

inst_26252:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x267fc000; valaddr_reg:x3; val_offset:78756*0 + 3*139*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78756*0 + 3*140*FLEN/8, x4, x1, x2)

inst_26253:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x267fe000; valaddr_reg:x3; val_offset:78759*0 + 3*140*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78759*0 + 3*141*FLEN/8, x4, x1, x2)

inst_26254:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x267ff000; valaddr_reg:x3; val_offset:78762*0 + 3*141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78762*0 + 3*142*FLEN/8, x4, x1, x2)

inst_26255:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x267ff800; valaddr_reg:x3; val_offset:78765*0 + 3*142*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78765*0 + 3*143*FLEN/8, x4, x1, x2)

inst_26256:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x267ffc00; valaddr_reg:x3; val_offset:78768*0 + 3*143*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78768*0 + 3*144*FLEN/8, x4, x1, x2)

inst_26257:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x267ffe00; valaddr_reg:x3; val_offset:78771*0 + 3*144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78771*0 + 3*145*FLEN/8, x4, x1, x2)

inst_26258:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x267fff00; valaddr_reg:x3; val_offset:78774*0 + 3*145*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78774*0 + 3*146*FLEN/8, x4, x1, x2)

inst_26259:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x267fff80; valaddr_reg:x3; val_offset:78777*0 + 3*146*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78777*0 + 3*147*FLEN/8, x4, x1, x2)

inst_26260:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x267fffc0; valaddr_reg:x3; val_offset:78780*0 + 3*147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78780*0 + 3*148*FLEN/8, x4, x1, x2)

inst_26261:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x267fffe0; valaddr_reg:x3; val_offset:78783*0 + 3*148*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78783*0 + 3*149*FLEN/8, x4, x1, x2)

inst_26262:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x267ffff0; valaddr_reg:x3; val_offset:78786*0 + 3*149*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78786*0 + 3*150*FLEN/8, x4, x1, x2)

inst_26263:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x267ffff8; valaddr_reg:x3; val_offset:78789*0 + 3*150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78789*0 + 3*151*FLEN/8, x4, x1, x2)

inst_26264:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x267ffffc; valaddr_reg:x3; val_offset:78792*0 + 3*151*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78792*0 + 3*152*FLEN/8, x4, x1, x2)

inst_26265:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x267ffffe; valaddr_reg:x3; val_offset:78795*0 + 3*152*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78795*0 + 3*153*FLEN/8, x4, x1, x2)

inst_26266:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x4c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x267fffff; valaddr_reg:x3; val_offset:78798*0 + 3*153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78798*0 + 3*154*FLEN/8, x4, x1, x2)

inst_26267:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x3f800001; valaddr_reg:x3; val_offset:78801*0 + 3*154*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78801*0 + 3*155*FLEN/8, x4, x1, x2)

inst_26268:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x3f800003; valaddr_reg:x3; val_offset:78804*0 + 3*155*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78804*0 + 3*156*FLEN/8, x4, x1, x2)

inst_26269:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x3f800007; valaddr_reg:x3; val_offset:78807*0 + 3*156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78807*0 + 3*157*FLEN/8, x4, x1, x2)

inst_26270:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x3f999999; valaddr_reg:x3; val_offset:78810*0 + 3*157*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78810*0 + 3*158*FLEN/8, x4, x1, x2)

inst_26271:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:78813*0 + 3*158*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78813*0 + 3*159*FLEN/8, x4, x1, x2)

inst_26272:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:78816*0 + 3*159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78816*0 + 3*160*FLEN/8, x4, x1, x2)

inst_26273:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:78819*0 + 3*160*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78819*0 + 3*161*FLEN/8, x4, x1, x2)

inst_26274:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:78822*0 + 3*161*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78822*0 + 3*162*FLEN/8, x4, x1, x2)

inst_26275:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:78825*0 + 3*162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78825*0 + 3*163*FLEN/8, x4, x1, x2)

inst_26276:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:78828*0 + 3*163*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78828*0 + 3*164*FLEN/8, x4, x1, x2)

inst_26277:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:78831*0 + 3*164*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78831*0 + 3*165*FLEN/8, x4, x1, x2)

inst_26278:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:78834*0 + 3*165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78834*0 + 3*166*FLEN/8, x4, x1, x2)

inst_26279:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:78837*0 + 3*166*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78837*0 + 3*167*FLEN/8, x4, x1, x2)

inst_26280:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:78840*0 + 3*167*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78840*0 + 3*168*FLEN/8, x4, x1, x2)

inst_26281:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:78843*0 + 3*168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78843*0 + 3*169*FLEN/8, x4, x1, x2)

inst_26282:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x027585 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ecb2c and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f027585; op2val:0x3ecb2c;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:78846*0 + 3*169*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78846*0 + 3*170*FLEN/8, x4, x1, x2)

inst_26283:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x80000000; valaddr_reg:x3; val_offset:78849*0 + 3*170*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78849*0 + 3*171*FLEN/8, x4, x1, x2)

inst_26284:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x80000001; valaddr_reg:x3; val_offset:78852*0 + 3*171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78852*0 + 3*172*FLEN/8, x4, x1, x2)

inst_26285:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x80000003; valaddr_reg:x3; val_offset:78855*0 + 3*172*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78855*0 + 3*173*FLEN/8, x4, x1, x2)

inst_26286:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x80000007; valaddr_reg:x3; val_offset:78858*0 + 3*173*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78858*0 + 3*174*FLEN/8, x4, x1, x2)

inst_26287:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x8000000f; valaddr_reg:x3; val_offset:78861*0 + 3*174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78861*0 + 3*175*FLEN/8, x4, x1, x2)

inst_26288:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x8000001f; valaddr_reg:x3; val_offset:78864*0 + 3*175*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78864*0 + 3*176*FLEN/8, x4, x1, x2)

inst_26289:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x8000003f; valaddr_reg:x3; val_offset:78867*0 + 3*176*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78867*0 + 3*177*FLEN/8, x4, x1, x2)

inst_26290:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x8000007f; valaddr_reg:x3; val_offset:78870*0 + 3*177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78870*0 + 3*178*FLEN/8, x4, x1, x2)

inst_26291:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x800000ff; valaddr_reg:x3; val_offset:78873*0 + 3*178*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78873*0 + 3*179*FLEN/8, x4, x1, x2)

inst_26292:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x800001ff; valaddr_reg:x3; val_offset:78876*0 + 3*179*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78876*0 + 3*180*FLEN/8, x4, x1, x2)

inst_26293:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x800003ff; valaddr_reg:x3; val_offset:78879*0 + 3*180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78879*0 + 3*181*FLEN/8, x4, x1, x2)

inst_26294:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x800007ff; valaddr_reg:x3; val_offset:78882*0 + 3*181*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78882*0 + 3*182*FLEN/8, x4, x1, x2)

inst_26295:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x80000fff; valaddr_reg:x3; val_offset:78885*0 + 3*182*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78885*0 + 3*183*FLEN/8, x4, x1, x2)

inst_26296:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x80001fff; valaddr_reg:x3; val_offset:78888*0 + 3*183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78888*0 + 3*184*FLEN/8, x4, x1, x2)

inst_26297:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x80003fff; valaddr_reg:x3; val_offset:78891*0 + 3*184*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78891*0 + 3*185*FLEN/8, x4, x1, x2)

inst_26298:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x80007fff; valaddr_reg:x3; val_offset:78894*0 + 3*185*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78894*0 + 3*186*FLEN/8, x4, x1, x2)

inst_26299:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x8000ffff; valaddr_reg:x3; val_offset:78897*0 + 3*186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78897*0 + 3*187*FLEN/8, x4, x1, x2)

inst_26300:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x8001ffff; valaddr_reg:x3; val_offset:78900*0 + 3*187*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78900*0 + 3*188*FLEN/8, x4, x1, x2)

inst_26301:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x8003ffff; valaddr_reg:x3; val_offset:78903*0 + 3*188*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78903*0 + 3*189*FLEN/8, x4, x1, x2)

inst_26302:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x8007ffff; valaddr_reg:x3; val_offset:78906*0 + 3*189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78906*0 + 3*190*FLEN/8, x4, x1, x2)

inst_26303:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x800fffff; valaddr_reg:x3; val_offset:78909*0 + 3*190*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78909*0 + 3*191*FLEN/8, x4, x1, x2)

inst_26304:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x801fffff; valaddr_reg:x3; val_offset:78912*0 + 3*191*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78912*0 + 3*192*FLEN/8, x4, x1, x2)

inst_26305:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x803fffff; valaddr_reg:x3; val_offset:78915*0 + 3*192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78915*0 + 3*193*FLEN/8, x4, x1, x2)

inst_26306:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x80400000; valaddr_reg:x3; val_offset:78918*0 + 3*193*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78918*0 + 3*194*FLEN/8, x4, x1, x2)

inst_26307:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x80600000; valaddr_reg:x3; val_offset:78921*0 + 3*194*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78921*0 + 3*195*FLEN/8, x4, x1, x2)

inst_26308:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x80700000; valaddr_reg:x3; val_offset:78924*0 + 3*195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78924*0 + 3*196*FLEN/8, x4, x1, x2)

inst_26309:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x80780000; valaddr_reg:x3; val_offset:78927*0 + 3*196*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78927*0 + 3*197*FLEN/8, x4, x1, x2)

inst_26310:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x807c0000; valaddr_reg:x3; val_offset:78930*0 + 3*197*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78930*0 + 3*198*FLEN/8, x4, x1, x2)

inst_26311:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x807e0000; valaddr_reg:x3; val_offset:78933*0 + 3*198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78933*0 + 3*199*FLEN/8, x4, x1, x2)

inst_26312:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x807f0000; valaddr_reg:x3; val_offset:78936*0 + 3*199*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78936*0 + 3*200*FLEN/8, x4, x1, x2)

inst_26313:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x807f8000; valaddr_reg:x3; val_offset:78939*0 + 3*200*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78939*0 + 3*201*FLEN/8, x4, x1, x2)

inst_26314:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x807fc000; valaddr_reg:x3; val_offset:78942*0 + 3*201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78942*0 + 3*202*FLEN/8, x4, x1, x2)

inst_26315:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x807fe000; valaddr_reg:x3; val_offset:78945*0 + 3*202*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78945*0 + 3*203*FLEN/8, x4, x1, x2)

inst_26316:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x807ff000; valaddr_reg:x3; val_offset:78948*0 + 3*203*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78948*0 + 3*204*FLEN/8, x4, x1, x2)

inst_26317:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x807ff800; valaddr_reg:x3; val_offset:78951*0 + 3*204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78951*0 + 3*205*FLEN/8, x4, x1, x2)

inst_26318:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x807ffc00; valaddr_reg:x3; val_offset:78954*0 + 3*205*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78954*0 + 3*206*FLEN/8, x4, x1, x2)

inst_26319:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x807ffe00; valaddr_reg:x3; val_offset:78957*0 + 3*206*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78957*0 + 3*207*FLEN/8, x4, x1, x2)

inst_26320:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x807fff00; valaddr_reg:x3; val_offset:78960*0 + 3*207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78960*0 + 3*208*FLEN/8, x4, x1, x2)

inst_26321:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x807fff80; valaddr_reg:x3; val_offset:78963*0 + 3*208*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78963*0 + 3*209*FLEN/8, x4, x1, x2)

inst_26322:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x807fffc0; valaddr_reg:x3; val_offset:78966*0 + 3*209*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78966*0 + 3*210*FLEN/8, x4, x1, x2)

inst_26323:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x807fffe0; valaddr_reg:x3; val_offset:78969*0 + 3*210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78969*0 + 3*211*FLEN/8, x4, x1, x2)

inst_26324:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x807ffff0; valaddr_reg:x3; val_offset:78972*0 + 3*211*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78972*0 + 3*212*FLEN/8, x4, x1, x2)

inst_26325:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x807ffff8; valaddr_reg:x3; val_offset:78975*0 + 3*212*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78975*0 + 3*213*FLEN/8, x4, x1, x2)

inst_26326:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x807ffffc; valaddr_reg:x3; val_offset:78978*0 + 3*213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78978*0 + 3*214*FLEN/8, x4, x1, x2)

inst_26327:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x807ffffe; valaddr_reg:x3; val_offset:78981*0 + 3*214*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78981*0 + 3*215*FLEN/8, x4, x1, x2)

inst_26328:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x00 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x807fffff; valaddr_reg:x3; val_offset:78984*0 + 3*215*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78984*0 + 3*216*FLEN/8, x4, x1, x2)

inst_26329:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x80800001; valaddr_reg:x3; val_offset:78987*0 + 3*216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78987*0 + 3*217*FLEN/8, x4, x1, x2)

inst_26330:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x80800003; valaddr_reg:x3; val_offset:78990*0 + 3*217*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78990*0 + 3*218*FLEN/8, x4, x1, x2)

inst_26331:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x80800007; valaddr_reg:x3; val_offset:78993*0 + 3*218*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78993*0 + 3*219*FLEN/8, x4, x1, x2)

inst_26332:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x80999999; valaddr_reg:x3; val_offset:78996*0 + 3*219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78996*0 + 3*220*FLEN/8, x4, x1, x2)

inst_26333:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x80a49249; valaddr_reg:x3; val_offset:78999*0 + 3*220*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 78999*0 + 3*221*FLEN/8, x4, x1, x2)

inst_26334:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x80b33333; valaddr_reg:x3; val_offset:79002*0 + 3*221*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79002*0 + 3*222*FLEN/8, x4, x1, x2)

inst_26335:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x80b6db6d; valaddr_reg:x3; val_offset:79005*0 + 3*222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79005*0 + 3*223*FLEN/8, x4, x1, x2)

inst_26336:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x80bbbbbb; valaddr_reg:x3; val_offset:79008*0 + 3*223*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79008*0 + 3*224*FLEN/8, x4, x1, x2)

inst_26337:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x80c44444; valaddr_reg:x3; val_offset:79011*0 + 3*224*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79011*0 + 3*225*FLEN/8, x4, x1, x2)

inst_26338:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x80cccccc; valaddr_reg:x3; val_offset:79014*0 + 3*225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79014*0 + 3*226*FLEN/8, x4, x1, x2)

inst_26339:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x80db6db6; valaddr_reg:x3; val_offset:79017*0 + 3*226*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79017*0 + 3*227*FLEN/8, x4, x1, x2)

inst_26340:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x80e66666; valaddr_reg:x3; val_offset:79020*0 + 3*227*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79020*0 + 3*228*FLEN/8, x4, x1, x2)

inst_26341:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x80edb6db; valaddr_reg:x3; val_offset:79023*0 + 3*228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79023*0 + 3*229*FLEN/8, x4, x1, x2)

inst_26342:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x80fffff8; valaddr_reg:x3; val_offset:79026*0 + 3*229*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79026*0 + 3*230*FLEN/8, x4, x1, x2)

inst_26343:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x80fffffc; valaddr_reg:x3; val_offset:79029*0 + 3*230*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79029*0 + 3*231*FLEN/8, x4, x1, x2)

inst_26344:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02c0d3 and fs2 == 1 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 1 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02c0d3; op2val:0x80000000;
op3val:0x80fffffe; valaddr_reg:x3; val_offset:79032*0 + 3*231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79032*0 + 3*232*FLEN/8, x4, x1, x2)

inst_26345:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x3f800001; valaddr_reg:x3; val_offset:79035*0 + 3*232*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79035*0 + 3*233*FLEN/8, x4, x1, x2)

inst_26346:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x3f800003; valaddr_reg:x3; val_offset:79038*0 + 3*233*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79038*0 + 3*234*FLEN/8, x4, x1, x2)

inst_26347:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x3f800007; valaddr_reg:x3; val_offset:79041*0 + 3*234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79041*0 + 3*235*FLEN/8, x4, x1, x2)

inst_26348:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x3f999999; valaddr_reg:x3; val_offset:79044*0 + 3*235*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79044*0 + 3*236*FLEN/8, x4, x1, x2)

inst_26349:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:79047*0 + 3*236*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79047*0 + 3*237*FLEN/8, x4, x1, x2)

inst_26350:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:79050*0 + 3*237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79050*0 + 3*238*FLEN/8, x4, x1, x2)

inst_26351:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:79053*0 + 3*238*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79053*0 + 3*239*FLEN/8, x4, x1, x2)

inst_26352:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:79056*0 + 3*239*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79056*0 + 3*240*FLEN/8, x4, x1, x2)

inst_26353:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:79059*0 + 3*240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79059*0 + 3*241*FLEN/8, x4, x1, x2)

inst_26354:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:79062*0 + 3*241*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79062*0 + 3*242*FLEN/8, x4, x1, x2)

inst_26355:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:79065*0 + 3*242*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79065*0 + 3*243*FLEN/8, x4, x1, x2)

inst_26356:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:79068*0 + 3*243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79068*0 + 3*244*FLEN/8, x4, x1, x2)

inst_26357:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:79071*0 + 3*244*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79071*0 + 3*245*FLEN/8, x4, x1, x2)

inst_26358:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:79074*0 + 3*245*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79074*0 + 3*246*FLEN/8, x4, x1, x2)

inst_26359:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:79077*0 + 3*246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79077*0 + 3*247*FLEN/8, x4, x1, x2)

inst_26360:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:79080*0 + 3*247*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79080*0 + 3*248*FLEN/8, x4, x1, x2)

inst_26361:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a000000; valaddr_reg:x3; val_offset:79083*0 + 3*248*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79083*0 + 3*249*FLEN/8, x4, x1, x2)

inst_26362:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a000001; valaddr_reg:x3; val_offset:79086*0 + 3*249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79086*0 + 3*250*FLEN/8, x4, x1, x2)

inst_26363:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a000003; valaddr_reg:x3; val_offset:79089*0 + 3*250*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79089*0 + 3*251*FLEN/8, x4, x1, x2)

inst_26364:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a000007; valaddr_reg:x3; val_offset:79092*0 + 3*251*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79092*0 + 3*252*FLEN/8, x4, x1, x2)

inst_26365:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a00000f; valaddr_reg:x3; val_offset:79095*0 + 3*252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79095*0 + 3*253*FLEN/8, x4, x1, x2)

inst_26366:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a00001f; valaddr_reg:x3; val_offset:79098*0 + 3*253*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79098*0 + 3*254*FLEN/8, x4, x1, x2)

inst_26367:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a00003f; valaddr_reg:x3; val_offset:79101*0 + 3*254*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79101*0 + 3*255*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_26368:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a00007f; valaddr_reg:x3; val_offset:79104*0 + 3*256*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79104*0 + 3*256*FLEN/8, x4, x1, x2)

inst_26369:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a0000ff; valaddr_reg:x3; val_offset:79107*0 + 3*257*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79107*0 + 3*257*FLEN/8, x4, x1, x2)

inst_26370:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a0001ff; valaddr_reg:x3; val_offset:79110*0 + 3*258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79110*0 + 3*258*FLEN/8, x4, x1, x2)

inst_26371:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a0003ff; valaddr_reg:x3; val_offset:79113*0 + 3*259*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79113*0 + 3*259*FLEN/8, x4, x1, x2)

inst_26372:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a0007ff; valaddr_reg:x3; val_offset:79116*0 + 3*260*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79116*0 + 3*260*FLEN/8, x4, x1, x2)

inst_26373:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a000fff; valaddr_reg:x3; val_offset:79119*0 + 3*261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79119*0 + 3*261*FLEN/8, x4, x1, x2)

inst_26374:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a001fff; valaddr_reg:x3; val_offset:79122*0 + 3*262*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79122*0 + 3*262*FLEN/8, x4, x1, x2)

inst_26375:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a003fff; valaddr_reg:x3; val_offset:79125*0 + 3*263*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79125*0 + 3*263*FLEN/8, x4, x1, x2)

inst_26376:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a007fff; valaddr_reg:x3; val_offset:79128*0 + 3*264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79128*0 + 3*264*FLEN/8, x4, x1, x2)

inst_26377:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a00ffff; valaddr_reg:x3; val_offset:79131*0 + 3*265*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79131*0 + 3*265*FLEN/8, x4, x1, x2)

inst_26378:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a01ffff; valaddr_reg:x3; val_offset:79134*0 + 3*266*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79134*0 + 3*266*FLEN/8, x4, x1, x2)

inst_26379:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a03ffff; valaddr_reg:x3; val_offset:79137*0 + 3*267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79137*0 + 3*267*FLEN/8, x4, x1, x2)

inst_26380:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a07ffff; valaddr_reg:x3; val_offset:79140*0 + 3*268*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79140*0 + 3*268*FLEN/8, x4, x1, x2)

inst_26381:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a0fffff; valaddr_reg:x3; val_offset:79143*0 + 3*269*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79143*0 + 3*269*FLEN/8, x4, x1, x2)

inst_26382:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a1fffff; valaddr_reg:x3; val_offset:79146*0 + 3*270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79146*0 + 3*270*FLEN/8, x4, x1, x2)

inst_26383:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a3fffff; valaddr_reg:x3; val_offset:79149*0 + 3*271*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79149*0 + 3*271*FLEN/8, x4, x1, x2)

inst_26384:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a400000; valaddr_reg:x3; val_offset:79152*0 + 3*272*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79152*0 + 3*272*FLEN/8, x4, x1, x2)

inst_26385:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a600000; valaddr_reg:x3; val_offset:79155*0 + 3*273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79155*0 + 3*273*FLEN/8, x4, x1, x2)

inst_26386:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a700000; valaddr_reg:x3; val_offset:79158*0 + 3*274*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79158*0 + 3*274*FLEN/8, x4, x1, x2)

inst_26387:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a780000; valaddr_reg:x3; val_offset:79161*0 + 3*275*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79161*0 + 3*275*FLEN/8, x4, x1, x2)

inst_26388:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7c0000; valaddr_reg:x3; val_offset:79164*0 + 3*276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79164*0 + 3*276*FLEN/8, x4, x1, x2)

inst_26389:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7e0000; valaddr_reg:x3; val_offset:79167*0 + 3*277*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79167*0 + 3*277*FLEN/8, x4, x1, x2)

inst_26390:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7f0000; valaddr_reg:x3; val_offset:79170*0 + 3*278*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79170*0 + 3*278*FLEN/8, x4, x1, x2)

inst_26391:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7f8000; valaddr_reg:x3; val_offset:79173*0 + 3*279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79173*0 + 3*279*FLEN/8, x4, x1, x2)

inst_26392:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7fc000; valaddr_reg:x3; val_offset:79176*0 + 3*280*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79176*0 + 3*280*FLEN/8, x4, x1, x2)

inst_26393:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7fe000; valaddr_reg:x3; val_offset:79179*0 + 3*281*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79179*0 + 3*281*FLEN/8, x4, x1, x2)

inst_26394:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7ff000; valaddr_reg:x3; val_offset:79182*0 + 3*282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79182*0 + 3*282*FLEN/8, x4, x1, x2)

inst_26395:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7ff800; valaddr_reg:x3; val_offset:79185*0 + 3*283*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79185*0 + 3*283*FLEN/8, x4, x1, x2)

inst_26396:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7ffc00; valaddr_reg:x3; val_offset:79188*0 + 3*284*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79188*0 + 3*284*FLEN/8, x4, x1, x2)

inst_26397:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7ffe00; valaddr_reg:x3; val_offset:79191*0 + 3*285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79191*0 + 3*285*FLEN/8, x4, x1, x2)

inst_26398:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7fff00; valaddr_reg:x3; val_offset:79194*0 + 3*286*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79194*0 + 3*286*FLEN/8, x4, x1, x2)

inst_26399:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7fff80; valaddr_reg:x3; val_offset:79197*0 + 3*287*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79197*0 + 3*287*FLEN/8, x4, x1, x2)

inst_26400:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7fffc0; valaddr_reg:x3; val_offset:79200*0 + 3*288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79200*0 + 3*288*FLEN/8, x4, x1, x2)

inst_26401:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7fffe0; valaddr_reg:x3; val_offset:79203*0 + 3*289*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79203*0 + 3*289*FLEN/8, x4, x1, x2)

inst_26402:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7ffff0; valaddr_reg:x3; val_offset:79206*0 + 3*290*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79206*0 + 3*290*FLEN/8, x4, x1, x2)

inst_26403:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7ffff8; valaddr_reg:x3; val_offset:79209*0 + 3*291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79209*0 + 3*291*FLEN/8, x4, x1, x2)

inst_26404:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7ffffc; valaddr_reg:x3; val_offset:79212*0 + 3*292*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79212*0 + 3*292*FLEN/8, x4, x1, x2)

inst_26405:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7ffffe; valaddr_reg:x3; val_offset:79215*0 + 3*293*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79215*0 + 3*293*FLEN/8, x4, x1, x2)

inst_26406:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x02ce4e and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3ea08d and fs3 == 0 and fe3 == 0x94 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f02ce4e; op2val:0x3ea08d;
op3val:0x4a7fffff; valaddr_reg:x3; val_offset:79218*0 + 3*294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79218*0 + 3*294*FLEN/8, x4, x1, x2)

inst_26407:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0x800001; valaddr_reg:x3; val_offset:79221*0 + 3*295*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79221*0 + 3*295*FLEN/8, x4, x1, x2)

inst_26408:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0x800003; valaddr_reg:x3; val_offset:79224*0 + 3*296*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79224*0 + 3*296*FLEN/8, x4, x1, x2)

inst_26409:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0x800007; valaddr_reg:x3; val_offset:79227*0 + 3*297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79227*0 + 3*297*FLEN/8, x4, x1, x2)

inst_26410:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0x999999; valaddr_reg:x3; val_offset:79230*0 + 3*298*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79230*0 + 3*298*FLEN/8, x4, x1, x2)

inst_26411:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xa49249; valaddr_reg:x3; val_offset:79233*0 + 3*299*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79233*0 + 3*299*FLEN/8, x4, x1, x2)

inst_26412:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xb33333; valaddr_reg:x3; val_offset:79236*0 + 3*300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79236*0 + 3*300*FLEN/8, x4, x1, x2)

inst_26413:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xb6db6d; valaddr_reg:x3; val_offset:79239*0 + 3*301*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79239*0 + 3*301*FLEN/8, x4, x1, x2)

inst_26414:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xbbbbbb; valaddr_reg:x3; val_offset:79242*0 + 3*302*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79242*0 + 3*302*FLEN/8, x4, x1, x2)

inst_26415:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xc44444; valaddr_reg:x3; val_offset:79245*0 + 3*303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79245*0 + 3*303*FLEN/8, x4, x1, x2)

inst_26416:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xcccccc; valaddr_reg:x3; val_offset:79248*0 + 3*304*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79248*0 + 3*304*FLEN/8, x4, x1, x2)

inst_26417:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xdb6db6; valaddr_reg:x3; val_offset:79251*0 + 3*305*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79251*0 + 3*305*FLEN/8, x4, x1, x2)

inst_26418:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe66666; valaddr_reg:x3; val_offset:79254*0 + 3*306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79254*0 + 3*306*FLEN/8, x4, x1, x2)

inst_26419:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xedb6db; valaddr_reg:x3; val_offset:79257*0 + 3*307*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79257*0 + 3*307*FLEN/8, x4, x1, x2)

inst_26420:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xfffff8; valaddr_reg:x3; val_offset:79260*0 + 3*308*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79260*0 + 3*308*FLEN/8, x4, x1, x2)

inst_26421:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xfffffc; valaddr_reg:x3; val_offset:79263*0 + 3*309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79263*0 + 3*309*FLEN/8, x4, x1, x2)

inst_26422:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x01 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xfffffe; valaddr_reg:x3; val_offset:79266*0 + 3*310*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79266*0 + 3*310*FLEN/8, x4, x1, x2)

inst_26423:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe800000; valaddr_reg:x3; val_offset:79269*0 + 3*311*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79269*0 + 3*311*FLEN/8, x4, x1, x2)

inst_26424:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe800001; valaddr_reg:x3; val_offset:79272*0 + 3*312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79272*0 + 3*312*FLEN/8, x4, x1, x2)

inst_26425:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe800003; valaddr_reg:x3; val_offset:79275*0 + 3*313*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79275*0 + 3*313*FLEN/8, x4, x1, x2)

inst_26426:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe800007; valaddr_reg:x3; val_offset:79278*0 + 3*314*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79278*0 + 3*314*FLEN/8, x4, x1, x2)

inst_26427:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe80000f; valaddr_reg:x3; val_offset:79281*0 + 3*315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79281*0 + 3*315*FLEN/8, x4, x1, x2)

inst_26428:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe80001f; valaddr_reg:x3; val_offset:79284*0 + 3*316*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79284*0 + 3*316*FLEN/8, x4, x1, x2)

inst_26429:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe80003f; valaddr_reg:x3; val_offset:79287*0 + 3*317*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79287*0 + 3*317*FLEN/8, x4, x1, x2)

inst_26430:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe80007f; valaddr_reg:x3; val_offset:79290*0 + 3*318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79290*0 + 3*318*FLEN/8, x4, x1, x2)

inst_26431:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe8000ff; valaddr_reg:x3; val_offset:79293*0 + 3*319*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79293*0 + 3*319*FLEN/8, x4, x1, x2)

inst_26432:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe8001ff; valaddr_reg:x3; val_offset:79296*0 + 3*320*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79296*0 + 3*320*FLEN/8, x4, x1, x2)

inst_26433:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe8003ff; valaddr_reg:x3; val_offset:79299*0 + 3*321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79299*0 + 3*321*FLEN/8, x4, x1, x2)

inst_26434:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe8007ff; valaddr_reg:x3; val_offset:79302*0 + 3*322*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79302*0 + 3*322*FLEN/8, x4, x1, x2)

inst_26435:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe800fff; valaddr_reg:x3; val_offset:79305*0 + 3*323*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79305*0 + 3*323*FLEN/8, x4, x1, x2)

inst_26436:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe801fff; valaddr_reg:x3; val_offset:79308*0 + 3*324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79308*0 + 3*324*FLEN/8, x4, x1, x2)

inst_26437:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe803fff; valaddr_reg:x3; val_offset:79311*0 + 3*325*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79311*0 + 3*325*FLEN/8, x4, x1, x2)

inst_26438:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe807fff; valaddr_reg:x3; val_offset:79314*0 + 3*326*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79314*0 + 3*326*FLEN/8, x4, x1, x2)

inst_26439:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe80ffff; valaddr_reg:x3; val_offset:79317*0 + 3*327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79317*0 + 3*327*FLEN/8, x4, x1, x2)

inst_26440:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe81ffff; valaddr_reg:x3; val_offset:79320*0 + 3*328*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79320*0 + 3*328*FLEN/8, x4, x1, x2)

inst_26441:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe83ffff; valaddr_reg:x3; val_offset:79323*0 + 3*329*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79323*0 + 3*329*FLEN/8, x4, x1, x2)

inst_26442:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe87ffff; valaddr_reg:x3; val_offset:79326*0 + 3*330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79326*0 + 3*330*FLEN/8, x4, x1, x2)

inst_26443:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe8fffff; valaddr_reg:x3; val_offset:79329*0 + 3*331*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79329*0 + 3*331*FLEN/8, x4, x1, x2)

inst_26444:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xe9fffff; valaddr_reg:x3; val_offset:79332*0 + 3*332*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79332*0 + 3*332*FLEN/8, x4, x1, x2)

inst_26445:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xebfffff; valaddr_reg:x3; val_offset:79335*0 + 3*333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79335*0 + 3*333*FLEN/8, x4, x1, x2)

inst_26446:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xec00000; valaddr_reg:x3; val_offset:79338*0 + 3*334*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79338*0 + 3*334*FLEN/8, x4, x1, x2)

inst_26447:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xee00000; valaddr_reg:x3; val_offset:79341*0 + 3*335*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79341*0 + 3*335*FLEN/8, x4, x1, x2)

inst_26448:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xef00000; valaddr_reg:x3; val_offset:79344*0 + 3*336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79344*0 + 3*336*FLEN/8, x4, x1, x2)

inst_26449:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xef80000; valaddr_reg:x3; val_offset:79347*0 + 3*337*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79347*0 + 3*337*FLEN/8, x4, x1, x2)

inst_26450:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xefc0000; valaddr_reg:x3; val_offset:79350*0 + 3*338*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79350*0 + 3*338*FLEN/8, x4, x1, x2)

inst_26451:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xefe0000; valaddr_reg:x3; val_offset:79353*0 + 3*339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79353*0 + 3*339*FLEN/8, x4, x1, x2)

inst_26452:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xeff0000; valaddr_reg:x3; val_offset:79356*0 + 3*340*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79356*0 + 3*340*FLEN/8, x4, x1, x2)

inst_26453:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xeff8000; valaddr_reg:x3; val_offset:79359*0 + 3*341*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79359*0 + 3*341*FLEN/8, x4, x1, x2)

inst_26454:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xeffc000; valaddr_reg:x3; val_offset:79362*0 + 3*342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79362*0 + 3*342*FLEN/8, x4, x1, x2)

inst_26455:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xeffe000; valaddr_reg:x3; val_offset:79365*0 + 3*343*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79365*0 + 3*343*FLEN/8, x4, x1, x2)

inst_26456:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xefff000; valaddr_reg:x3; val_offset:79368*0 + 3*344*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79368*0 + 3*344*FLEN/8, x4, x1, x2)

inst_26457:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xefff800; valaddr_reg:x3; val_offset:79371*0 + 3*345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79371*0 + 3*345*FLEN/8, x4, x1, x2)

inst_26458:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xefffc00; valaddr_reg:x3; val_offset:79374*0 + 3*346*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79374*0 + 3*346*FLEN/8, x4, x1, x2)

inst_26459:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xefffe00; valaddr_reg:x3; val_offset:79377*0 + 3*347*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79377*0 + 3*347*FLEN/8, x4, x1, x2)

inst_26460:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xeffff00; valaddr_reg:x3; val_offset:79380*0 + 3*348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79380*0 + 3*348*FLEN/8, x4, x1, x2)

inst_26461:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xeffff80; valaddr_reg:x3; val_offset:79383*0 + 3*349*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79383*0 + 3*349*FLEN/8, x4, x1, x2)

inst_26462:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xeffffc0; valaddr_reg:x3; val_offset:79386*0 + 3*350*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79386*0 + 3*350*FLEN/8, x4, x1, x2)

inst_26463:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xeffffe0; valaddr_reg:x3; val_offset:79389*0 + 3*351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79389*0 + 3*351*FLEN/8, x4, x1, x2)

inst_26464:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xefffff0; valaddr_reg:x3; val_offset:79392*0 + 3*352*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79392*0 + 3*352*FLEN/8, x4, x1, x2)

inst_26465:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xefffff8; valaddr_reg:x3; val_offset:79395*0 + 3*353*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79395*0 + 3*353*FLEN/8, x4, x1, x2)

inst_26466:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xefffffc; valaddr_reg:x3; val_offset:79398*0 + 3*354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79398*0 + 3*354*FLEN/8, x4, x1, x2)

inst_26467:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xefffffe; valaddr_reg:x3; val_offset:79401*0 + 3*355*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79401*0 + 3*355*FLEN/8, x4, x1, x2)

inst_26468:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x030bb1 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x000000 and fs3 == 0 and fe3 == 0x1d and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f030bb1; op2val:0x0;
op3val:0xeffffff; valaddr_reg:x3; val_offset:79404*0 + 3*356*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79404*0 + 3*356*FLEN/8, x4, x1, x2)

inst_26469:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x23000000; valaddr_reg:x3; val_offset:79407*0 + 3*357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79407*0 + 3*357*FLEN/8, x4, x1, x2)

inst_26470:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x23000001; valaddr_reg:x3; val_offset:79410*0 + 3*358*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79410*0 + 3*358*FLEN/8, x4, x1, x2)

inst_26471:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x23000003; valaddr_reg:x3; val_offset:79413*0 + 3*359*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79413*0 + 3*359*FLEN/8, x4, x1, x2)

inst_26472:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x23000007; valaddr_reg:x3; val_offset:79416*0 + 3*360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79416*0 + 3*360*FLEN/8, x4, x1, x2)

inst_26473:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x2300000f; valaddr_reg:x3; val_offset:79419*0 + 3*361*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79419*0 + 3*361*FLEN/8, x4, x1, x2)

inst_26474:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x2300001f; valaddr_reg:x3; val_offset:79422*0 + 3*362*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79422*0 + 3*362*FLEN/8, x4, x1, x2)

inst_26475:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x2300003f; valaddr_reg:x3; val_offset:79425*0 + 3*363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79425*0 + 3*363*FLEN/8, x4, x1, x2)

inst_26476:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x2300007f; valaddr_reg:x3; val_offset:79428*0 + 3*364*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79428*0 + 3*364*FLEN/8, x4, x1, x2)

inst_26477:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x230000ff; valaddr_reg:x3; val_offset:79431*0 + 3*365*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79431*0 + 3*365*FLEN/8, x4, x1, x2)

inst_26478:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x230001ff; valaddr_reg:x3; val_offset:79434*0 + 3*366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79434*0 + 3*366*FLEN/8, x4, x1, x2)

inst_26479:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x230003ff; valaddr_reg:x3; val_offset:79437*0 + 3*367*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79437*0 + 3*367*FLEN/8, x4, x1, x2)

inst_26480:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x230007ff; valaddr_reg:x3; val_offset:79440*0 + 3*368*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79440*0 + 3*368*FLEN/8, x4, x1, x2)

inst_26481:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x23000fff; valaddr_reg:x3; val_offset:79443*0 + 3*369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79443*0 + 3*369*FLEN/8, x4, x1, x2)

inst_26482:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x23001fff; valaddr_reg:x3; val_offset:79446*0 + 3*370*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79446*0 + 3*370*FLEN/8, x4, x1, x2)

inst_26483:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x23003fff; valaddr_reg:x3; val_offset:79449*0 + 3*371*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79449*0 + 3*371*FLEN/8, x4, x1, x2)

inst_26484:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x23007fff; valaddr_reg:x3; val_offset:79452*0 + 3*372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79452*0 + 3*372*FLEN/8, x4, x1, x2)

inst_26485:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x2300ffff; valaddr_reg:x3; val_offset:79455*0 + 3*373*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79455*0 + 3*373*FLEN/8, x4, x1, x2)

inst_26486:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x2301ffff; valaddr_reg:x3; val_offset:79458*0 + 3*374*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79458*0 + 3*374*FLEN/8, x4, x1, x2)

inst_26487:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x2303ffff; valaddr_reg:x3; val_offset:79461*0 + 3*375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79461*0 + 3*375*FLEN/8, x4, x1, x2)

inst_26488:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x2307ffff; valaddr_reg:x3; val_offset:79464*0 + 3*376*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79464*0 + 3*376*FLEN/8, x4, x1, x2)

inst_26489:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x230fffff; valaddr_reg:x3; val_offset:79467*0 + 3*377*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79467*0 + 3*377*FLEN/8, x4, x1, x2)

inst_26490:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x231fffff; valaddr_reg:x3; val_offset:79470*0 + 3*378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79470*0 + 3*378*FLEN/8, x4, x1, x2)

inst_26491:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x233fffff; valaddr_reg:x3; val_offset:79473*0 + 3*379*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79473*0 + 3*379*FLEN/8, x4, x1, x2)

inst_26492:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x23400000; valaddr_reg:x3; val_offset:79476*0 + 3*380*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79476*0 + 3*380*FLEN/8, x4, x1, x2)

inst_26493:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x23600000; valaddr_reg:x3; val_offset:79479*0 + 3*381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79479*0 + 3*381*FLEN/8, x4, x1, x2)

inst_26494:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x23700000; valaddr_reg:x3; val_offset:79482*0 + 3*382*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79482*0 + 3*382*FLEN/8, x4, x1, x2)

inst_26495:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x23780000; valaddr_reg:x3; val_offset:79485*0 + 3*383*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79485*0 + 3*383*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_4)

inst_26496:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x237c0000; valaddr_reg:x3; val_offset:79488*0 + 3*384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79488*0 + 3*384*FLEN/8, x4, x1, x2)

inst_26497:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x237e0000; valaddr_reg:x3; val_offset:79491*0 + 3*385*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79491*0 + 3*385*FLEN/8, x4, x1, x2)

inst_26498:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x237f0000; valaddr_reg:x3; val_offset:79494*0 + 3*386*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79494*0 + 3*386*FLEN/8, x4, x1, x2)

inst_26499:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x237f8000; valaddr_reg:x3; val_offset:79497*0 + 3*387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79497*0 + 3*387*FLEN/8, x4, x1, x2)

inst_26500:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x237fc000; valaddr_reg:x3; val_offset:79500*0 + 3*388*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79500*0 + 3*388*FLEN/8, x4, x1, x2)

inst_26501:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x237fe000; valaddr_reg:x3; val_offset:79503*0 + 3*389*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79503*0 + 3*389*FLEN/8, x4, x1, x2)

inst_26502:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x237ff000; valaddr_reg:x3; val_offset:79506*0 + 3*390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79506*0 + 3*390*FLEN/8, x4, x1, x2)

inst_26503:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x237ff800; valaddr_reg:x3; val_offset:79509*0 + 3*391*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79509*0 + 3*391*FLEN/8, x4, x1, x2)

inst_26504:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x237ffc00; valaddr_reg:x3; val_offset:79512*0 + 3*392*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79512*0 + 3*392*FLEN/8, x4, x1, x2)

inst_26505:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x237ffe00; valaddr_reg:x3; val_offset:79515*0 + 3*393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79515*0 + 3*393*FLEN/8, x4, x1, x2)

inst_26506:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x237fff00; valaddr_reg:x3; val_offset:79518*0 + 3*394*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79518*0 + 3*394*FLEN/8, x4, x1, x2)

inst_26507:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x237fff80; valaddr_reg:x3; val_offset:79521*0 + 3*395*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79521*0 + 3*395*FLEN/8, x4, x1, x2)

inst_26508:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x237fffc0; valaddr_reg:x3; val_offset:79524*0 + 3*396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79524*0 + 3*396*FLEN/8, x4, x1, x2)

inst_26509:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x237fffe0; valaddr_reg:x3; val_offset:79527*0 + 3*397*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79527*0 + 3*397*FLEN/8, x4, x1, x2)

inst_26510:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x237ffff0; valaddr_reg:x3; val_offset:79530*0 + 3*398*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79530*0 + 3*398*FLEN/8, x4, x1, x2)

inst_26511:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x237ffff8; valaddr_reg:x3; val_offset:79533*0 + 3*399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79533*0 + 3*399*FLEN/8, x4, x1, x2)

inst_26512:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x237ffffc; valaddr_reg:x3; val_offset:79536*0 + 3*400*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79536*0 + 3*400*FLEN/8, x4, x1, x2)

inst_26513:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x237ffffe; valaddr_reg:x3; val_offset:79539*0 + 3*401*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79539*0 + 3*401*FLEN/8, x4, x1, x2)

inst_26514:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x46 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x237fffff; valaddr_reg:x3; val_offset:79542*0 + 3*402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79542*0 + 3*402*FLEN/8, x4, x1, x2)

inst_26515:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x3f800001; valaddr_reg:x3; val_offset:79545*0 + 3*403*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79545*0 + 3*403*FLEN/8, x4, x1, x2)

inst_26516:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x3f800003; valaddr_reg:x3; val_offset:79548*0 + 3*404*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79548*0 + 3*404*FLEN/8, x4, x1, x2)

inst_26517:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x3f800007; valaddr_reg:x3; val_offset:79551*0 + 3*405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79551*0 + 3*405*FLEN/8, x4, x1, x2)

inst_26518:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x3f999999; valaddr_reg:x3; val_offset:79554*0 + 3*406*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79554*0 + 3*406*FLEN/8, x4, x1, x2)

inst_26519:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:79557*0 + 3*407*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79557*0 + 3*407*FLEN/8, x4, x1, x2)

inst_26520:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:79560*0 + 3*408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79560*0 + 3*408*FLEN/8, x4, x1, x2)

inst_26521:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:79563*0 + 3*409*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79563*0 + 3*409*FLEN/8, x4, x1, x2)

inst_26522:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:79566*0 + 3*410*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79566*0 + 3*410*FLEN/8, x4, x1, x2)

inst_26523:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:79569*0 + 3*411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79569*0 + 3*411*FLEN/8, x4, x1, x2)

inst_26524:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:79572*0 + 3*412*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79572*0 + 3*412*FLEN/8, x4, x1, x2)

inst_26525:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:79575*0 + 3*413*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79575*0 + 3*413*FLEN/8, x4, x1, x2)

inst_26526:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:79578*0 + 3*414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79578*0 + 3*414*FLEN/8, x4, x1, x2)

inst_26527:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:79581*0 + 3*415*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79581*0 + 3*415*FLEN/8, x4, x1, x2)

inst_26528:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:79584*0 + 3*416*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79584*0 + 3*416*FLEN/8, x4, x1, x2)

inst_26529:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:79587*0 + 3*417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79587*0 + 3*417*FLEN/8, x4, x1, x2)

inst_26530:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x033b4f and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3e6c87 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f033b4f; op2val:0x3e6c87;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:79590*0 + 3*418*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79590*0 + 3*418*FLEN/8, x4, x1, x2)

inst_26531:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe3000000; valaddr_reg:x3; val_offset:79593*0 + 3*419*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79593*0 + 3*419*FLEN/8, x4, x1, x2)

inst_26532:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe3000001; valaddr_reg:x3; val_offset:79596*0 + 3*420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79596*0 + 3*420*FLEN/8, x4, x1, x2)

inst_26533:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe3000003; valaddr_reg:x3; val_offset:79599*0 + 3*421*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79599*0 + 3*421*FLEN/8, x4, x1, x2)

inst_26534:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe3000007; valaddr_reg:x3; val_offset:79602*0 + 3*422*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79602*0 + 3*422*FLEN/8, x4, x1, x2)

inst_26535:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe300000f; valaddr_reg:x3; val_offset:79605*0 + 3*423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79605*0 + 3*423*FLEN/8, x4, x1, x2)

inst_26536:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe300001f; valaddr_reg:x3; val_offset:79608*0 + 3*424*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79608*0 + 3*424*FLEN/8, x4, x1, x2)

inst_26537:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe300003f; valaddr_reg:x3; val_offset:79611*0 + 3*425*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79611*0 + 3*425*FLEN/8, x4, x1, x2)

inst_26538:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe300007f; valaddr_reg:x3; val_offset:79614*0 + 3*426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79614*0 + 3*426*FLEN/8, x4, x1, x2)

inst_26539:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe30000ff; valaddr_reg:x3; val_offset:79617*0 + 3*427*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79617*0 + 3*427*FLEN/8, x4, x1, x2)

inst_26540:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe30001ff; valaddr_reg:x3; val_offset:79620*0 + 3*428*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79620*0 + 3*428*FLEN/8, x4, x1, x2)

inst_26541:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe30003ff; valaddr_reg:x3; val_offset:79623*0 + 3*429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79623*0 + 3*429*FLEN/8, x4, x1, x2)

inst_26542:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe30007ff; valaddr_reg:x3; val_offset:79626*0 + 3*430*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79626*0 + 3*430*FLEN/8, x4, x1, x2)

inst_26543:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe3000fff; valaddr_reg:x3; val_offset:79629*0 + 3*431*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79629*0 + 3*431*FLEN/8, x4, x1, x2)

inst_26544:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe3001fff; valaddr_reg:x3; val_offset:79632*0 + 3*432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79632*0 + 3*432*FLEN/8, x4, x1, x2)

inst_26545:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe3003fff; valaddr_reg:x3; val_offset:79635*0 + 3*433*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79635*0 + 3*433*FLEN/8, x4, x1, x2)

inst_26546:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe3007fff; valaddr_reg:x3; val_offset:79638*0 + 3*434*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79638*0 + 3*434*FLEN/8, x4, x1, x2)

inst_26547:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe300ffff; valaddr_reg:x3; val_offset:79641*0 + 3*435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79641*0 + 3*435*FLEN/8, x4, x1, x2)

inst_26548:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe301ffff; valaddr_reg:x3; val_offset:79644*0 + 3*436*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79644*0 + 3*436*FLEN/8, x4, x1, x2)

inst_26549:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe303ffff; valaddr_reg:x3; val_offset:79647*0 + 3*437*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79647*0 + 3*437*FLEN/8, x4, x1, x2)

inst_26550:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe307ffff; valaddr_reg:x3; val_offset:79650*0 + 3*438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79650*0 + 3*438*FLEN/8, x4, x1, x2)

inst_26551:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe30fffff; valaddr_reg:x3; val_offset:79653*0 + 3*439*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79653*0 + 3*439*FLEN/8, x4, x1, x2)

inst_26552:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe31fffff; valaddr_reg:x3; val_offset:79656*0 + 3*440*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79656*0 + 3*440*FLEN/8, x4, x1, x2)

inst_26553:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe33fffff; valaddr_reg:x3; val_offset:79659*0 + 3*441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79659*0 + 3*441*FLEN/8, x4, x1, x2)

inst_26554:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe3400000; valaddr_reg:x3; val_offset:79662*0 + 3*442*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79662*0 + 3*442*FLEN/8, x4, x1, x2)

inst_26555:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe3600000; valaddr_reg:x3; val_offset:79665*0 + 3*443*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79665*0 + 3*443*FLEN/8, x4, x1, x2)

inst_26556:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe3700000; valaddr_reg:x3; val_offset:79668*0 + 3*444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79668*0 + 3*444*FLEN/8, x4, x1, x2)

inst_26557:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe3780000; valaddr_reg:x3; val_offset:79671*0 + 3*445*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79671*0 + 3*445*FLEN/8, x4, x1, x2)

inst_26558:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe37c0000; valaddr_reg:x3; val_offset:79674*0 + 3*446*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79674*0 + 3*446*FLEN/8, x4, x1, x2)

inst_26559:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe37e0000; valaddr_reg:x3; val_offset:79677*0 + 3*447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79677*0 + 3*447*FLEN/8, x4, x1, x2)

inst_26560:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe37f0000; valaddr_reg:x3; val_offset:79680*0 + 3*448*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79680*0 + 3*448*FLEN/8, x4, x1, x2)

inst_26561:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe37f8000; valaddr_reg:x3; val_offset:79683*0 + 3*449*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79683*0 + 3*449*FLEN/8, x4, x1, x2)

inst_26562:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe37fc000; valaddr_reg:x3; val_offset:79686*0 + 3*450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79686*0 + 3*450*FLEN/8, x4, x1, x2)

inst_26563:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe37fe000; valaddr_reg:x3; val_offset:79689*0 + 3*451*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79689*0 + 3*451*FLEN/8, x4, x1, x2)

inst_26564:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe37ff000; valaddr_reg:x3; val_offset:79692*0 + 3*452*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79692*0 + 3*452*FLEN/8, x4, x1, x2)

inst_26565:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe37ff800; valaddr_reg:x3; val_offset:79695*0 + 3*453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79695*0 + 3*453*FLEN/8, x4, x1, x2)

inst_26566:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe37ffc00; valaddr_reg:x3; val_offset:79698*0 + 3*454*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79698*0 + 3*454*FLEN/8, x4, x1, x2)

inst_26567:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe37ffe00; valaddr_reg:x3; val_offset:79701*0 + 3*455*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79701*0 + 3*455*FLEN/8, x4, x1, x2)

inst_26568:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe37fff00; valaddr_reg:x3; val_offset:79704*0 + 3*456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79704*0 + 3*456*FLEN/8, x4, x1, x2)

inst_26569:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe37fff80; valaddr_reg:x3; val_offset:79707*0 + 3*457*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79707*0 + 3*457*FLEN/8, x4, x1, x2)

inst_26570:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe37fffc0; valaddr_reg:x3; val_offset:79710*0 + 3*458*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79710*0 + 3*458*FLEN/8, x4, x1, x2)

inst_26571:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe37fffe0; valaddr_reg:x3; val_offset:79713*0 + 3*459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79713*0 + 3*459*FLEN/8, x4, x1, x2)

inst_26572:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe37ffff0; valaddr_reg:x3; val_offset:79716*0 + 3*460*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79716*0 + 3*460*FLEN/8, x4, x1, x2)

inst_26573:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe37ffff8; valaddr_reg:x3; val_offset:79719*0 + 3*461*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79719*0 + 3*461*FLEN/8, x4, x1, x2)

inst_26574:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe37ffffc; valaddr_reg:x3; val_offset:79722*0 + 3*462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79722*0 + 3*462*FLEN/8, x4, x1, x2)

inst_26575:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe37ffffe; valaddr_reg:x3; val_offset:79725*0 + 3*463*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79725*0 + 3*463*FLEN/8, x4, x1, x2)

inst_26576:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xc6 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xe37fffff; valaddr_reg:x3; val_offset:79728*0 + 3*464*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79728*0 + 3*464*FLEN/8, x4, x1, x2)

inst_26577:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xff000001; valaddr_reg:x3; val_offset:79731*0 + 3*465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79731*0 + 3*465*FLEN/8, x4, x1, x2)

inst_26578:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xff000003; valaddr_reg:x3; val_offset:79734*0 + 3*466*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79734*0 + 3*466*FLEN/8, x4, x1, x2)

inst_26579:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xff000007; valaddr_reg:x3; val_offset:79737*0 + 3*467*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79737*0 + 3*467*FLEN/8, x4, x1, x2)

inst_26580:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xff199999; valaddr_reg:x3; val_offset:79740*0 + 3*468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79740*0 + 3*468*FLEN/8, x4, x1, x2)

inst_26581:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xff249249; valaddr_reg:x3; val_offset:79743*0 + 3*469*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79743*0 + 3*469*FLEN/8, x4, x1, x2)

inst_26582:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xff333333; valaddr_reg:x3; val_offset:79746*0 + 3*470*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79746*0 + 3*470*FLEN/8, x4, x1, x2)

inst_26583:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xff36db6d; valaddr_reg:x3; val_offset:79749*0 + 3*471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79749*0 + 3*471*FLEN/8, x4, x1, x2)

inst_26584:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xff3bbbbb; valaddr_reg:x3; val_offset:79752*0 + 3*472*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79752*0 + 3*472*FLEN/8, x4, x1, x2)

inst_26585:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xff444444; valaddr_reg:x3; val_offset:79755*0 + 3*473*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79755*0 + 3*473*FLEN/8, x4, x1, x2)

inst_26586:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xff4ccccc; valaddr_reg:x3; val_offset:79758*0 + 3*474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79758*0 + 3*474*FLEN/8, x4, x1, x2)

inst_26587:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xff5b6db6; valaddr_reg:x3; val_offset:79761*0 + 3*475*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79761*0 + 3*475*FLEN/8, x4, x1, x2)

inst_26588:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xff666666; valaddr_reg:x3; val_offset:79764*0 + 3*476*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79764*0 + 3*476*FLEN/8, x4, x1, x2)

inst_26589:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xff6db6db; valaddr_reg:x3; val_offset:79767*0 + 3*477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79767*0 + 3*477*FLEN/8, x4, x1, x2)

inst_26590:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xff7ffff8; valaddr_reg:x3; val_offset:79770*0 + 3*478*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79770*0 + 3*478*FLEN/8, x4, x1, x2)

inst_26591:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xff7ffffc; valaddr_reg:x3; val_offset:79773*0 + 3*479*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79773*0 + 3*479*FLEN/8, x4, x1, x2)

inst_26592:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04226b and fs2 == 1 and fe2 == 0x7f and fm2 == 0x77fd64 and fs3 == 1 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04226b; op2val:0xbff7fd64;
op3val:0xff7ffffe; valaddr_reg:x3; val_offset:79776*0 + 3*480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79776*0 + 3*480*FLEN/8, x4, x1, x2)

inst_26593:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbb800000; valaddr_reg:x3; val_offset:79779*0 + 3*481*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79779*0 + 3*481*FLEN/8, x4, x1, x2)

inst_26594:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbb800001; valaddr_reg:x3; val_offset:79782*0 + 3*482*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79782*0 + 3*482*FLEN/8, x4, x1, x2)

inst_26595:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbb800003; valaddr_reg:x3; val_offset:79785*0 + 3*483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79785*0 + 3*483*FLEN/8, x4, x1, x2)

inst_26596:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbb800007; valaddr_reg:x3; val_offset:79788*0 + 3*484*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79788*0 + 3*484*FLEN/8, x4, x1, x2)

inst_26597:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbb80000f; valaddr_reg:x3; val_offset:79791*0 + 3*485*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79791*0 + 3*485*FLEN/8, x4, x1, x2)

inst_26598:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbb80001f; valaddr_reg:x3; val_offset:79794*0 + 3*486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79794*0 + 3*486*FLEN/8, x4, x1, x2)

inst_26599:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbb80003f; valaddr_reg:x3; val_offset:79797*0 + 3*487*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79797*0 + 3*487*FLEN/8, x4, x1, x2)

inst_26600:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbb80007f; valaddr_reg:x3; val_offset:79800*0 + 3*488*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79800*0 + 3*488*FLEN/8, x4, x1, x2)

inst_26601:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbb8000ff; valaddr_reg:x3; val_offset:79803*0 + 3*489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79803*0 + 3*489*FLEN/8, x4, x1, x2)

inst_26602:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbb8001ff; valaddr_reg:x3; val_offset:79806*0 + 3*490*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79806*0 + 3*490*FLEN/8, x4, x1, x2)

inst_26603:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbb8003ff; valaddr_reg:x3; val_offset:79809*0 + 3*491*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79809*0 + 3*491*FLEN/8, x4, x1, x2)

inst_26604:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbb8007ff; valaddr_reg:x3; val_offset:79812*0 + 3*492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79812*0 + 3*492*FLEN/8, x4, x1, x2)

inst_26605:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbb800fff; valaddr_reg:x3; val_offset:79815*0 + 3*493*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79815*0 + 3*493*FLEN/8, x4, x1, x2)

inst_26606:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbb801fff; valaddr_reg:x3; val_offset:79818*0 + 3*494*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79818*0 + 3*494*FLEN/8, x4, x1, x2)

inst_26607:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbb803fff; valaddr_reg:x3; val_offset:79821*0 + 3*495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79821*0 + 3*495*FLEN/8, x4, x1, x2)

inst_26608:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbb807fff; valaddr_reg:x3; val_offset:79824*0 + 3*496*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79824*0 + 3*496*FLEN/8, x4, x1, x2)

inst_26609:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbb80ffff; valaddr_reg:x3; val_offset:79827*0 + 3*497*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79827*0 + 3*497*FLEN/8, x4, x1, x2)

inst_26610:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbb81ffff; valaddr_reg:x3; val_offset:79830*0 + 3*498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79830*0 + 3*498*FLEN/8, x4, x1, x2)

inst_26611:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbb83ffff; valaddr_reg:x3; val_offset:79833*0 + 3*499*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79833*0 + 3*499*FLEN/8, x4, x1, x2)

inst_26612:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbb87ffff; valaddr_reg:x3; val_offset:79836*0 + 3*500*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79836*0 + 3*500*FLEN/8, x4, x1, x2)

inst_26613:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbb8fffff; valaddr_reg:x3; val_offset:79839*0 + 3*501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79839*0 + 3*501*FLEN/8, x4, x1, x2)

inst_26614:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbb9fffff; valaddr_reg:x3; val_offset:79842*0 + 3*502*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79842*0 + 3*502*FLEN/8, x4, x1, x2)

inst_26615:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbbbfffff; valaddr_reg:x3; val_offset:79845*0 + 3*503*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79845*0 + 3*503*FLEN/8, x4, x1, x2)

inst_26616:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbbc00000; valaddr_reg:x3; val_offset:79848*0 + 3*504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79848*0 + 3*504*FLEN/8, x4, x1, x2)

inst_26617:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbbe00000; valaddr_reg:x3; val_offset:79851*0 + 3*505*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79851*0 + 3*505*FLEN/8, x4, x1, x2)

inst_26618:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbbf00000; valaddr_reg:x3; val_offset:79854*0 + 3*506*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79854*0 + 3*506*FLEN/8, x4, x1, x2)

inst_26619:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbbf80000; valaddr_reg:x3; val_offset:79857*0 + 3*507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79857*0 + 3*507*FLEN/8, x4, x1, x2)

inst_26620:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbbfc0000; valaddr_reg:x3; val_offset:79860*0 + 3*508*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79860*0 + 3*508*FLEN/8, x4, x1, x2)

inst_26621:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbbfe0000; valaddr_reg:x3; val_offset:79863*0 + 3*509*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79863*0 + 3*509*FLEN/8, x4, x1, x2)

inst_26622:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbbff0000; valaddr_reg:x3; val_offset:79866*0 + 3*510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79866*0 + 3*510*FLEN/8, x4, x1, x2)

inst_26623:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbbff8000; valaddr_reg:x3; val_offset:79869*0 + 3*511*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79869*0 + 3*511*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_5)

inst_26624:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbbffc000; valaddr_reg:x3; val_offset:79872*0 + 3*512*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79872*0 + 3*512*FLEN/8, x4, x1, x2)

inst_26625:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbbffe000; valaddr_reg:x3; val_offset:79875*0 + 3*513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79875*0 + 3*513*FLEN/8, x4, x1, x2)

inst_26626:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbbfff000; valaddr_reg:x3; val_offset:79878*0 + 3*514*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79878*0 + 3*514*FLEN/8, x4, x1, x2)

inst_26627:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbbfff800; valaddr_reg:x3; val_offset:79881*0 + 3*515*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79881*0 + 3*515*FLEN/8, x4, x1, x2)

inst_26628:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbbfffc00; valaddr_reg:x3; val_offset:79884*0 + 3*516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79884*0 + 3*516*FLEN/8, x4, x1, x2)

inst_26629:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbbfffe00; valaddr_reg:x3; val_offset:79887*0 + 3*517*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79887*0 + 3*517*FLEN/8, x4, x1, x2)

inst_26630:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbbffff00; valaddr_reg:x3; val_offset:79890*0 + 3*518*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79890*0 + 3*518*FLEN/8, x4, x1, x2)

inst_26631:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbbffff80; valaddr_reg:x3; val_offset:79893*0 + 3*519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79893*0 + 3*519*FLEN/8, x4, x1, x2)

inst_26632:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbbffffc0; valaddr_reg:x3; val_offset:79896*0 + 3*520*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79896*0 + 3*520*FLEN/8, x4, x1, x2)

inst_26633:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbbffffe0; valaddr_reg:x3; val_offset:79899*0 + 3*521*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79899*0 + 3*521*FLEN/8, x4, x1, x2)

inst_26634:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbbfffff0; valaddr_reg:x3; val_offset:79902*0 + 3*522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79902*0 + 3*522*FLEN/8, x4, x1, x2)

inst_26635:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbbfffff8; valaddr_reg:x3; val_offset:79905*0 + 3*523*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79905*0 + 3*523*FLEN/8, x4, x1, x2)

inst_26636:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbbfffffc; valaddr_reg:x3; val_offset:79908*0 + 3*524*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79908*0 + 3*524*FLEN/8, x4, x1, x2)

inst_26637:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbbfffffe; valaddr_reg:x3; val_offset:79911*0 + 3*525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79911*0 + 3*525*FLEN/8, x4, x1, x2)

inst_26638:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x77 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbbffffff; valaddr_reg:x3; val_offset:79914*0 + 3*526*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79914*0 + 3*526*FLEN/8, x4, x1, x2)

inst_26639:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbf800001; valaddr_reg:x3; val_offset:79917*0 + 3*527*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79917*0 + 3*527*FLEN/8, x4, x1, x2)

inst_26640:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbf800003; valaddr_reg:x3; val_offset:79920*0 + 3*528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79920*0 + 3*528*FLEN/8, x4, x1, x2)

inst_26641:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbf800007; valaddr_reg:x3; val_offset:79923*0 + 3*529*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79923*0 + 3*529*FLEN/8, x4, x1, x2)

inst_26642:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbf999999; valaddr_reg:x3; val_offset:79926*0 + 3*530*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79926*0 + 3*530*FLEN/8, x4, x1, x2)

inst_26643:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbfa49249; valaddr_reg:x3; val_offset:79929*0 + 3*531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79929*0 + 3*531*FLEN/8, x4, x1, x2)

inst_26644:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbfb33333; valaddr_reg:x3; val_offset:79932*0 + 3*532*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79932*0 + 3*532*FLEN/8, x4, x1, x2)

inst_26645:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbfb6db6d; valaddr_reg:x3; val_offset:79935*0 + 3*533*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79935*0 + 3*533*FLEN/8, x4, x1, x2)

inst_26646:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbfbbbbbb; valaddr_reg:x3; val_offset:79938*0 + 3*534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79938*0 + 3*534*FLEN/8, x4, x1, x2)

inst_26647:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbfc44444; valaddr_reg:x3; val_offset:79941*0 + 3*535*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79941*0 + 3*535*FLEN/8, x4, x1, x2)

inst_26648:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbfcccccc; valaddr_reg:x3; val_offset:79944*0 + 3*536*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79944*0 + 3*536*FLEN/8, x4, x1, x2)

inst_26649:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbfdb6db6; valaddr_reg:x3; val_offset:79947*0 + 3*537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79947*0 + 3*537*FLEN/8, x4, x1, x2)

inst_26650:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbfe66666; valaddr_reg:x3; val_offset:79950*0 + 3*538*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79950*0 + 3*538*FLEN/8, x4, x1, x2)

inst_26651:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbfedb6db; valaddr_reg:x3; val_offset:79953*0 + 3*539*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79953*0 + 3*539*FLEN/8, x4, x1, x2)

inst_26652:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbffffff8; valaddr_reg:x3; val_offset:79956*0 + 3*540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79956*0 + 3*540*FLEN/8, x4, x1, x2)

inst_26653:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbffffffc; valaddr_reg:x3; val_offset:79959*0 + 3*541*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79959*0 + 3*541*FLEN/8, x4, x1, x2)

inst_26654:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04331d and fs2 == 1 and fe2 == 0x00 and fm2 == 0x3df784 and fs3 == 1 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04331d; op2val:0x803df784;
op3val:0xbffffffe; valaddr_reg:x3; val_offset:79962*0 + 3*542*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79962*0 + 3*542*FLEN/8, x4, x1, x2)

inst_26655:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x69800000; valaddr_reg:x3; val_offset:79965*0 + 3*543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79965*0 + 3*543*FLEN/8, x4, x1, x2)

inst_26656:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x69800001; valaddr_reg:x3; val_offset:79968*0 + 3*544*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79968*0 + 3*544*FLEN/8, x4, x1, x2)

inst_26657:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x69800003; valaddr_reg:x3; val_offset:79971*0 + 3*545*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79971*0 + 3*545*FLEN/8, x4, x1, x2)

inst_26658:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x69800007; valaddr_reg:x3; val_offset:79974*0 + 3*546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79974*0 + 3*546*FLEN/8, x4, x1, x2)

inst_26659:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x6980000f; valaddr_reg:x3; val_offset:79977*0 + 3*547*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79977*0 + 3*547*FLEN/8, x4, x1, x2)

inst_26660:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x6980001f; valaddr_reg:x3; val_offset:79980*0 + 3*548*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79980*0 + 3*548*FLEN/8, x4, x1, x2)

inst_26661:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x6980003f; valaddr_reg:x3; val_offset:79983*0 + 3*549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79983*0 + 3*549*FLEN/8, x4, x1, x2)

inst_26662:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x6980007f; valaddr_reg:x3; val_offset:79986*0 + 3*550*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79986*0 + 3*550*FLEN/8, x4, x1, x2)

inst_26663:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x698000ff; valaddr_reg:x3; val_offset:79989*0 + 3*551*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79989*0 + 3*551*FLEN/8, x4, x1, x2)

inst_26664:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x698001ff; valaddr_reg:x3; val_offset:79992*0 + 3*552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79992*0 + 3*552*FLEN/8, x4, x1, x2)

inst_26665:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x698003ff; valaddr_reg:x3; val_offset:79995*0 + 3*553*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79995*0 + 3*553*FLEN/8, x4, x1, x2)

inst_26666:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x698007ff; valaddr_reg:x3; val_offset:79998*0 + 3*554*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 79998*0 + 3*554*FLEN/8, x4, x1, x2)

inst_26667:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x69800fff; valaddr_reg:x3; val_offset:80001*0 + 3*555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80001*0 + 3*555*FLEN/8, x4, x1, x2)

inst_26668:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x69801fff; valaddr_reg:x3; val_offset:80004*0 + 3*556*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80004*0 + 3*556*FLEN/8, x4, x1, x2)

inst_26669:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x69803fff; valaddr_reg:x3; val_offset:80007*0 + 3*557*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80007*0 + 3*557*FLEN/8, x4, x1, x2)

inst_26670:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x69807fff; valaddr_reg:x3; val_offset:80010*0 + 3*558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80010*0 + 3*558*FLEN/8, x4, x1, x2)

inst_26671:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x6980ffff; valaddr_reg:x3; val_offset:80013*0 + 3*559*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80013*0 + 3*559*FLEN/8, x4, x1, x2)

inst_26672:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x6981ffff; valaddr_reg:x3; val_offset:80016*0 + 3*560*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80016*0 + 3*560*FLEN/8, x4, x1, x2)

inst_26673:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x6983ffff; valaddr_reg:x3; val_offset:80019*0 + 3*561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80019*0 + 3*561*FLEN/8, x4, x1, x2)

inst_26674:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x6987ffff; valaddr_reg:x3; val_offset:80022*0 + 3*562*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80022*0 + 3*562*FLEN/8, x4, x1, x2)

inst_26675:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x698fffff; valaddr_reg:x3; val_offset:80025*0 + 3*563*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80025*0 + 3*563*FLEN/8, x4, x1, x2)

inst_26676:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x699fffff; valaddr_reg:x3; val_offset:80028*0 + 3*564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80028*0 + 3*564*FLEN/8, x4, x1, x2)

inst_26677:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x69bfffff; valaddr_reg:x3; val_offset:80031*0 + 3*565*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80031*0 + 3*565*FLEN/8, x4, x1, x2)

inst_26678:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x69c00000; valaddr_reg:x3; val_offset:80034*0 + 3*566*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80034*0 + 3*566*FLEN/8, x4, x1, x2)

inst_26679:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x69e00000; valaddr_reg:x3; val_offset:80037*0 + 3*567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80037*0 + 3*567*FLEN/8, x4, x1, x2)

inst_26680:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x69f00000; valaddr_reg:x3; val_offset:80040*0 + 3*568*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80040*0 + 3*568*FLEN/8, x4, x1, x2)

inst_26681:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x69f80000; valaddr_reg:x3; val_offset:80043*0 + 3*569*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80043*0 + 3*569*FLEN/8, x4, x1, x2)

inst_26682:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x69fc0000; valaddr_reg:x3; val_offset:80046*0 + 3*570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80046*0 + 3*570*FLEN/8, x4, x1, x2)

inst_26683:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x69fe0000; valaddr_reg:x3; val_offset:80049*0 + 3*571*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80049*0 + 3*571*FLEN/8, x4, x1, x2)

inst_26684:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x69ff0000; valaddr_reg:x3; val_offset:80052*0 + 3*572*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80052*0 + 3*572*FLEN/8, x4, x1, x2)

inst_26685:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x69ff8000; valaddr_reg:x3; val_offset:80055*0 + 3*573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80055*0 + 3*573*FLEN/8, x4, x1, x2)

inst_26686:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x69ffc000; valaddr_reg:x3; val_offset:80058*0 + 3*574*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80058*0 + 3*574*FLEN/8, x4, x1, x2)

inst_26687:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x69ffe000; valaddr_reg:x3; val_offset:80061*0 + 3*575*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80061*0 + 3*575*FLEN/8, x4, x1, x2)

inst_26688:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x69fff000; valaddr_reg:x3; val_offset:80064*0 + 3*576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80064*0 + 3*576*FLEN/8, x4, x1, x2)

inst_26689:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x69fff800; valaddr_reg:x3; val_offset:80067*0 + 3*577*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80067*0 + 3*577*FLEN/8, x4, x1, x2)

inst_26690:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x69fffc00; valaddr_reg:x3; val_offset:80070*0 + 3*578*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80070*0 + 3*578*FLEN/8, x4, x1, x2)

inst_26691:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x69fffe00; valaddr_reg:x3; val_offset:80073*0 + 3*579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80073*0 + 3*579*FLEN/8, x4, x1, x2)

inst_26692:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x69ffff00; valaddr_reg:x3; val_offset:80076*0 + 3*580*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80076*0 + 3*580*FLEN/8, x4, x1, x2)

inst_26693:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x69ffff80; valaddr_reg:x3; val_offset:80079*0 + 3*581*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80079*0 + 3*581*FLEN/8, x4, x1, x2)

inst_26694:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x69ffffc0; valaddr_reg:x3; val_offset:80082*0 + 3*582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80082*0 + 3*582*FLEN/8, x4, x1, x2)

inst_26695:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x69ffffe0; valaddr_reg:x3; val_offset:80085*0 + 3*583*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80085*0 + 3*583*FLEN/8, x4, x1, x2)

inst_26696:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x69fffff0; valaddr_reg:x3; val_offset:80088*0 + 3*584*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80088*0 + 3*584*FLEN/8, x4, x1, x2)

inst_26697:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x69fffff8; valaddr_reg:x3; val_offset:80091*0 + 3*585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80091*0 + 3*585*FLEN/8, x4, x1, x2)

inst_26698:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x69fffffc; valaddr_reg:x3; val_offset:80094*0 + 3*586*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80094*0 + 3*586*FLEN/8, x4, x1, x2)

inst_26699:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x69fffffe; valaddr_reg:x3; val_offset:80097*0 + 3*587*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80097*0 + 3*587*FLEN/8, x4, x1, x2)

inst_26700:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xd3 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x69ffffff; valaddr_reg:x3; val_offset:80100*0 + 3*588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80100*0 + 3*588*FLEN/8, x4, x1, x2)

inst_26701:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x7f000001; valaddr_reg:x3; val_offset:80103*0 + 3*589*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80103*0 + 3*589*FLEN/8, x4, x1, x2)

inst_26702:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x7f000003; valaddr_reg:x3; val_offset:80106*0 + 3*590*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80106*0 + 3*590*FLEN/8, x4, x1, x2)

inst_26703:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x7f000007; valaddr_reg:x3; val_offset:80109*0 + 3*591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80109*0 + 3*591*FLEN/8, x4, x1, x2)

inst_26704:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x7f199999; valaddr_reg:x3; val_offset:80112*0 + 3*592*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80112*0 + 3*592*FLEN/8, x4, x1, x2)

inst_26705:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x7f249249; valaddr_reg:x3; val_offset:80115*0 + 3*593*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80115*0 + 3*593*FLEN/8, x4, x1, x2)

inst_26706:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x7f333333; valaddr_reg:x3; val_offset:80118*0 + 3*594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80118*0 + 3*594*FLEN/8, x4, x1, x2)

inst_26707:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:80121*0 + 3*595*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80121*0 + 3*595*FLEN/8, x4, x1, x2)

inst_26708:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:80124*0 + 3*596*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80124*0 + 3*596*FLEN/8, x4, x1, x2)

inst_26709:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x7f444444; valaddr_reg:x3; val_offset:80127*0 + 3*597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80127*0 + 3*597*FLEN/8, x4, x1, x2)

inst_26710:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:80130*0 + 3*598*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80130*0 + 3*598*FLEN/8, x4, x1, x2)

inst_26711:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:80133*0 + 3*599*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80133*0 + 3*599*FLEN/8, x4, x1, x2)

inst_26712:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x7f666666; valaddr_reg:x3; val_offset:80136*0 + 3*600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80136*0 + 3*600*FLEN/8, x4, x1, x2)

inst_26713:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:80139*0 + 3*601*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80139*0 + 3*601*FLEN/8, x4, x1, x2)

inst_26714:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:80142*0 + 3*602*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80142*0 + 3*602*FLEN/8, x4, x1, x2)

inst_26715:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:80145*0 + 3*603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80145*0 + 3*603*FLEN/8, x4, x1, x2)

inst_26716:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x0460a7 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x7788cd and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f0460a7; op2val:0x3ff788cd;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:80148*0 + 3*604*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80148*0 + 3*604*FLEN/8, x4, x1, x2)

inst_26717:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x3f800001; valaddr_reg:x3; val_offset:80151*0 + 3*605*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80151*0 + 3*605*FLEN/8, x4, x1, x2)

inst_26718:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x3f800003; valaddr_reg:x3; val_offset:80154*0 + 3*606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80154*0 + 3*606*FLEN/8, x4, x1, x2)

inst_26719:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x3f800007; valaddr_reg:x3; val_offset:80157*0 + 3*607*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80157*0 + 3*607*FLEN/8, x4, x1, x2)

inst_26720:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x3f999999; valaddr_reg:x3; val_offset:80160*0 + 3*608*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80160*0 + 3*608*FLEN/8, x4, x1, x2)

inst_26721:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:80163*0 + 3*609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80163*0 + 3*609*FLEN/8, x4, x1, x2)

inst_26722:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:80166*0 + 3*610*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80166*0 + 3*610*FLEN/8, x4, x1, x2)

inst_26723:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:80169*0 + 3*611*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80169*0 + 3*611*FLEN/8, x4, x1, x2)

inst_26724:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:80172*0 + 3*612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80172*0 + 3*612*FLEN/8, x4, x1, x2)

inst_26725:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:80175*0 + 3*613*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80175*0 + 3*613*FLEN/8, x4, x1, x2)

inst_26726:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:80178*0 + 3*614*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80178*0 + 3*614*FLEN/8, x4, x1, x2)

inst_26727:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:80181*0 + 3*615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80181*0 + 3*615*FLEN/8, x4, x1, x2)

inst_26728:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:80184*0 + 3*616*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80184*0 + 3*616*FLEN/8, x4, x1, x2)

inst_26729:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:80187*0 + 3*617*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80187*0 + 3*617*FLEN/8, x4, x1, x2)

inst_26730:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:80190*0 + 3*618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80190*0 + 3*618*FLEN/8, x4, x1, x2)

inst_26731:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:80193*0 + 3*619*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80193*0 + 3*619*FLEN/8, x4, x1, x2)

inst_26732:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:80196*0 + 3*620*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80196*0 + 3*620*FLEN/8, x4, x1, x2)

inst_26733:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e000000; valaddr_reg:x3; val_offset:80199*0 + 3*621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80199*0 + 3*621*FLEN/8, x4, x1, x2)

inst_26734:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e000001; valaddr_reg:x3; val_offset:80202*0 + 3*622*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80202*0 + 3*622*FLEN/8, x4, x1, x2)

inst_26735:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e000003; valaddr_reg:x3; val_offset:80205*0 + 3*623*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80205*0 + 3*623*FLEN/8, x4, x1, x2)

inst_26736:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e000007; valaddr_reg:x3; val_offset:80208*0 + 3*624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80208*0 + 3*624*FLEN/8, x4, x1, x2)

inst_26737:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e00000f; valaddr_reg:x3; val_offset:80211*0 + 3*625*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80211*0 + 3*625*FLEN/8, x4, x1, x2)

inst_26738:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e00001f; valaddr_reg:x3; val_offset:80214*0 + 3*626*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80214*0 + 3*626*FLEN/8, x4, x1, x2)

inst_26739:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e00003f; valaddr_reg:x3; val_offset:80217*0 + 3*627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80217*0 + 3*627*FLEN/8, x4, x1, x2)

inst_26740:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e00007f; valaddr_reg:x3; val_offset:80220*0 + 3*628*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80220*0 + 3*628*FLEN/8, x4, x1, x2)

inst_26741:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e0000ff; valaddr_reg:x3; val_offset:80223*0 + 3*629*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80223*0 + 3*629*FLEN/8, x4, x1, x2)

inst_26742:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e0001ff; valaddr_reg:x3; val_offset:80226*0 + 3*630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80226*0 + 3*630*FLEN/8, x4, x1, x2)

inst_26743:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e0003ff; valaddr_reg:x3; val_offset:80229*0 + 3*631*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80229*0 + 3*631*FLEN/8, x4, x1, x2)

inst_26744:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e0007ff; valaddr_reg:x3; val_offset:80232*0 + 3*632*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80232*0 + 3*632*FLEN/8, x4, x1, x2)

inst_26745:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e000fff; valaddr_reg:x3; val_offset:80235*0 + 3*633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80235*0 + 3*633*FLEN/8, x4, x1, x2)

inst_26746:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e001fff; valaddr_reg:x3; val_offset:80238*0 + 3*634*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80238*0 + 3*634*FLEN/8, x4, x1, x2)

inst_26747:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e003fff; valaddr_reg:x3; val_offset:80241*0 + 3*635*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80241*0 + 3*635*FLEN/8, x4, x1, x2)

inst_26748:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e007fff; valaddr_reg:x3; val_offset:80244*0 + 3*636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80244*0 + 3*636*FLEN/8, x4, x1, x2)

inst_26749:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e00ffff; valaddr_reg:x3; val_offset:80247*0 + 3*637*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80247*0 + 3*637*FLEN/8, x4, x1, x2)

inst_26750:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e01ffff; valaddr_reg:x3; val_offset:80250*0 + 3*638*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80250*0 + 3*638*FLEN/8, x4, x1, x2)

inst_26751:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e03ffff; valaddr_reg:x3; val_offset:80253*0 + 3*639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80253*0 + 3*639*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_6)

inst_26752:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e07ffff; valaddr_reg:x3; val_offset:80256*0 + 3*640*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80256*0 + 3*640*FLEN/8, x4, x1, x2)

inst_26753:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e0fffff; valaddr_reg:x3; val_offset:80259*0 + 3*641*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80259*0 + 3*641*FLEN/8, x4, x1, x2)

inst_26754:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e1fffff; valaddr_reg:x3; val_offset:80262*0 + 3*642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80262*0 + 3*642*FLEN/8, x4, x1, x2)

inst_26755:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e3fffff; valaddr_reg:x3; val_offset:80265*0 + 3*643*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80265*0 + 3*643*FLEN/8, x4, x1, x2)

inst_26756:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e400000; valaddr_reg:x3; val_offset:80268*0 + 3*644*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80268*0 + 3*644*FLEN/8, x4, x1, x2)

inst_26757:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e600000; valaddr_reg:x3; val_offset:80271*0 + 3*645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80271*0 + 3*645*FLEN/8, x4, x1, x2)

inst_26758:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e700000; valaddr_reg:x3; val_offset:80274*0 + 3*646*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80274*0 + 3*646*FLEN/8, x4, x1, x2)

inst_26759:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e780000; valaddr_reg:x3; val_offset:80277*0 + 3*647*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80277*0 + 3*647*FLEN/8, x4, x1, x2)

inst_26760:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7c0000; valaddr_reg:x3; val_offset:80280*0 + 3*648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80280*0 + 3*648*FLEN/8, x4, x1, x2)

inst_26761:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7e0000; valaddr_reg:x3; val_offset:80283*0 + 3*649*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80283*0 + 3*649*FLEN/8, x4, x1, x2)

inst_26762:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7f0000; valaddr_reg:x3; val_offset:80286*0 + 3*650*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80286*0 + 3*650*FLEN/8, x4, x1, x2)

inst_26763:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7f8000; valaddr_reg:x3; val_offset:80289*0 + 3*651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80289*0 + 3*651*FLEN/8, x4, x1, x2)

inst_26764:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7fc000; valaddr_reg:x3; val_offset:80292*0 + 3*652*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80292*0 + 3*652*FLEN/8, x4, x1, x2)

inst_26765:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7fe000; valaddr_reg:x3; val_offset:80295*0 + 3*653*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80295*0 + 3*653*FLEN/8, x4, x1, x2)

inst_26766:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7ff000; valaddr_reg:x3; val_offset:80298*0 + 3*654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80298*0 + 3*654*FLEN/8, x4, x1, x2)

inst_26767:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7ff800; valaddr_reg:x3; val_offset:80301*0 + 3*655*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80301*0 + 3*655*FLEN/8, x4, x1, x2)

inst_26768:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7ffc00; valaddr_reg:x3; val_offset:80304*0 + 3*656*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80304*0 + 3*656*FLEN/8, x4, x1, x2)

inst_26769:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7ffe00; valaddr_reg:x3; val_offset:80307*0 + 3*657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80307*0 + 3*657*FLEN/8, x4, x1, x2)

inst_26770:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7fff00; valaddr_reg:x3; val_offset:80310*0 + 3*658*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80310*0 + 3*658*FLEN/8, x4, x1, x2)

inst_26771:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7fff80; valaddr_reg:x3; val_offset:80313*0 + 3*659*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80313*0 + 3*659*FLEN/8, x4, x1, x2)

inst_26772:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7fffc0; valaddr_reg:x3; val_offset:80316*0 + 3*660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80316*0 + 3*660*FLEN/8, x4, x1, x2)

inst_26773:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7fffe0; valaddr_reg:x3; val_offset:80319*0 + 3*661*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80319*0 + 3*661*FLEN/8, x4, x1, x2)

inst_26774:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7ffff0; valaddr_reg:x3; val_offset:80322*0 + 3*662*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80322*0 + 3*662*FLEN/8, x4, x1, x2)

inst_26775:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7ffff8; valaddr_reg:x3; val_offset:80325*0 + 3*663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80325*0 + 3*663*FLEN/8, x4, x1, x2)

inst_26776:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7ffffc; valaddr_reg:x3; val_offset:80328*0 + 3*664*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80328*0 + 3*664*FLEN/8, x4, x1, x2)

inst_26777:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7ffffe; valaddr_reg:x3; val_offset:80331*0 + 3*665*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80331*0 + 3*665*FLEN/8, x4, x1, x2)

inst_26778:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04a351 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3dc319 and fs3 == 0 and fe3 == 0x9c and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04a351; op2val:0x3dc319;
op3val:0x4e7fffff; valaddr_reg:x3; val_offset:80334*0 + 3*666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80334*0 + 3*666*FLEN/8, x4, x1, x2)

inst_26779:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62800000; valaddr_reg:x3; val_offset:80337*0 + 3*667*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80337*0 + 3*667*FLEN/8, x4, x1, x2)

inst_26780:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62800001; valaddr_reg:x3; val_offset:80340*0 + 3*668*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80340*0 + 3*668*FLEN/8, x4, x1, x2)

inst_26781:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62800003; valaddr_reg:x3; val_offset:80343*0 + 3*669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80343*0 + 3*669*FLEN/8, x4, x1, x2)

inst_26782:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62800007; valaddr_reg:x3; val_offset:80346*0 + 3*670*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80346*0 + 3*670*FLEN/8, x4, x1, x2)

inst_26783:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x6280000f; valaddr_reg:x3; val_offset:80349*0 + 3*671*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80349*0 + 3*671*FLEN/8, x4, x1, x2)

inst_26784:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x6280001f; valaddr_reg:x3; val_offset:80352*0 + 3*672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80352*0 + 3*672*FLEN/8, x4, x1, x2)

inst_26785:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x6280003f; valaddr_reg:x3; val_offset:80355*0 + 3*673*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80355*0 + 3*673*FLEN/8, x4, x1, x2)

inst_26786:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x6280007f; valaddr_reg:x3; val_offset:80358*0 + 3*674*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80358*0 + 3*674*FLEN/8, x4, x1, x2)

inst_26787:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x628000ff; valaddr_reg:x3; val_offset:80361*0 + 3*675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80361*0 + 3*675*FLEN/8, x4, x1, x2)

inst_26788:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x628001ff; valaddr_reg:x3; val_offset:80364*0 + 3*676*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80364*0 + 3*676*FLEN/8, x4, x1, x2)

inst_26789:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x628003ff; valaddr_reg:x3; val_offset:80367*0 + 3*677*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80367*0 + 3*677*FLEN/8, x4, x1, x2)

inst_26790:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x628007ff; valaddr_reg:x3; val_offset:80370*0 + 3*678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80370*0 + 3*678*FLEN/8, x4, x1, x2)

inst_26791:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62800fff; valaddr_reg:x3; val_offset:80373*0 + 3*679*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80373*0 + 3*679*FLEN/8, x4, x1, x2)

inst_26792:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62801fff; valaddr_reg:x3; val_offset:80376*0 + 3*680*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80376*0 + 3*680*FLEN/8, x4, x1, x2)

inst_26793:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62803fff; valaddr_reg:x3; val_offset:80379*0 + 3*681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80379*0 + 3*681*FLEN/8, x4, x1, x2)

inst_26794:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62807fff; valaddr_reg:x3; val_offset:80382*0 + 3*682*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80382*0 + 3*682*FLEN/8, x4, x1, x2)

inst_26795:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x6280ffff; valaddr_reg:x3; val_offset:80385*0 + 3*683*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80385*0 + 3*683*FLEN/8, x4, x1, x2)

inst_26796:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x6281ffff; valaddr_reg:x3; val_offset:80388*0 + 3*684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80388*0 + 3*684*FLEN/8, x4, x1, x2)

inst_26797:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x6283ffff; valaddr_reg:x3; val_offset:80391*0 + 3*685*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80391*0 + 3*685*FLEN/8, x4, x1, x2)

inst_26798:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x6287ffff; valaddr_reg:x3; val_offset:80394*0 + 3*686*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80394*0 + 3*686*FLEN/8, x4, x1, x2)

inst_26799:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x628fffff; valaddr_reg:x3; val_offset:80397*0 + 3*687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80397*0 + 3*687*FLEN/8, x4, x1, x2)

inst_26800:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x629fffff; valaddr_reg:x3; val_offset:80400*0 + 3*688*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80400*0 + 3*688*FLEN/8, x4, x1, x2)

inst_26801:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62bfffff; valaddr_reg:x3; val_offset:80403*0 + 3*689*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80403*0 + 3*689*FLEN/8, x4, x1, x2)

inst_26802:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x400000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62c00000; valaddr_reg:x3; val_offset:80406*0 + 3*690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80406*0 + 3*690*FLEN/8, x4, x1, x2)

inst_26803:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x600000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62e00000; valaddr_reg:x3; val_offset:80409*0 + 3*691*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80409*0 + 3*691*FLEN/8, x4, x1, x2)

inst_26804:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x700000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62f00000; valaddr_reg:x3; val_offset:80412*0 + 3*692*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80412*0 + 3*692*FLEN/8, x4, x1, x2)

inst_26805:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x780000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62f80000; valaddr_reg:x3; val_offset:80415*0 + 3*693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80415*0 + 3*693*FLEN/8, x4, x1, x2)

inst_26806:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7c0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62fc0000; valaddr_reg:x3; val_offset:80418*0 + 3*694*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80418*0 + 3*694*FLEN/8, x4, x1, x2)

inst_26807:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7e0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62fe0000; valaddr_reg:x3; val_offset:80421*0 + 3*695*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80421*0 + 3*695*FLEN/8, x4, x1, x2)

inst_26808:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7f0000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62ff0000; valaddr_reg:x3; val_offset:80424*0 + 3*696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80424*0 + 3*696*FLEN/8, x4, x1, x2)

inst_26809:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7f8000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62ff8000; valaddr_reg:x3; val_offset:80427*0 + 3*697*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80427*0 + 3*697*FLEN/8, x4, x1, x2)

inst_26810:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7fc000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62ffc000; valaddr_reg:x3; val_offset:80430*0 + 3*698*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80430*0 + 3*698*FLEN/8, x4, x1, x2)

inst_26811:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7fe000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62ffe000; valaddr_reg:x3; val_offset:80433*0 + 3*699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80433*0 + 3*699*FLEN/8, x4, x1, x2)

inst_26812:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7ff000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62fff000; valaddr_reg:x3; val_offset:80436*0 + 3*700*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80436*0 + 3*700*FLEN/8, x4, x1, x2)

inst_26813:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7ff800 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62fff800; valaddr_reg:x3; val_offset:80439*0 + 3*701*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80439*0 + 3*701*FLEN/8, x4, x1, x2)

inst_26814:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7ffc00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62fffc00; valaddr_reg:x3; val_offset:80442*0 + 3*702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80442*0 + 3*702*FLEN/8, x4, x1, x2)

inst_26815:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7ffe00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62fffe00; valaddr_reg:x3; val_offset:80445*0 + 3*703*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80445*0 + 3*703*FLEN/8, x4, x1, x2)

inst_26816:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7fff00 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62ffff00; valaddr_reg:x3; val_offset:80448*0 + 3*704*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80448*0 + 3*704*FLEN/8, x4, x1, x2)

inst_26817:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7fff80 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62ffff80; valaddr_reg:x3; val_offset:80451*0 + 3*705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80451*0 + 3*705*FLEN/8, x4, x1, x2)

inst_26818:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7fffc0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62ffffc0; valaddr_reg:x3; val_offset:80454*0 + 3*706*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80454*0 + 3*706*FLEN/8, x4, x1, x2)

inst_26819:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7fffe0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62ffffe0; valaddr_reg:x3; val_offset:80457*0 + 3*707*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80457*0 + 3*707*FLEN/8, x4, x1, x2)

inst_26820:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7ffff0 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62fffff0; valaddr_reg:x3; val_offset:80460*0 + 3*708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80460*0 + 3*708*FLEN/8, x4, x1, x2)

inst_26821:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62fffff8; valaddr_reg:x3; val_offset:80463*0 + 3*709*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80463*0 + 3*709*FLEN/8, x4, x1, x2)

inst_26822:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62fffffc; valaddr_reg:x3; val_offset:80466*0 + 3*710*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80466*0 + 3*710*FLEN/8, x4, x1, x2)

inst_26823:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62fffffe; valaddr_reg:x3; val_offset:80469*0 + 3*711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80469*0 + 3*711*FLEN/8, x4, x1, x2)

inst_26824:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xc5 and fm3 == 0x7fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x62ffffff; valaddr_reg:x3; val_offset:80472*0 + 3*712*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80472*0 + 3*712*FLEN/8, x4, x1, x2)

inst_26825:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x7f000001; valaddr_reg:x3; val_offset:80475*0 + 3*713*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80475*0 + 3*713*FLEN/8, x4, x1, x2)

inst_26826:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x7f000003; valaddr_reg:x3; val_offset:80478*0 + 3*714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80478*0 + 3*714*FLEN/8, x4, x1, x2)

inst_26827:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x7f000007; valaddr_reg:x3; val_offset:80481*0 + 3*715*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80481*0 + 3*715*FLEN/8, x4, x1, x2)

inst_26828:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x7f199999; valaddr_reg:x3; val_offset:80484*0 + 3*716*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80484*0 + 3*716*FLEN/8, x4, x1, x2)

inst_26829:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x7f249249; valaddr_reg:x3; val_offset:80487*0 + 3*717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80487*0 + 3*717*FLEN/8, x4, x1, x2)

inst_26830:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x7f333333; valaddr_reg:x3; val_offset:80490*0 + 3*718*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80490*0 + 3*718*FLEN/8, x4, x1, x2)

inst_26831:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x7f36db6d; valaddr_reg:x3; val_offset:80493*0 + 3*719*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80493*0 + 3*719*FLEN/8, x4, x1, x2)

inst_26832:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x7f3bbbbb; valaddr_reg:x3; val_offset:80496*0 + 3*720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80496*0 + 3*720*FLEN/8, x4, x1, x2)

inst_26833:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x7f444444; valaddr_reg:x3; val_offset:80499*0 + 3*721*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80499*0 + 3*721*FLEN/8, x4, x1, x2)

inst_26834:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x7f4ccccc; valaddr_reg:x3; val_offset:80502*0 + 3*722*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80502*0 + 3*722*FLEN/8, x4, x1, x2)

inst_26835:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x7f5b6db6; valaddr_reg:x3; val_offset:80505*0 + 3*723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80505*0 + 3*723*FLEN/8, x4, x1, x2)

inst_26836:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x7f666666; valaddr_reg:x3; val_offset:80508*0 + 3*724*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80508*0 + 3*724*FLEN/8, x4, x1, x2)

inst_26837:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x7f6db6db; valaddr_reg:x3; val_offset:80511*0 + 3*725*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80511*0 + 3*725*FLEN/8, x4, x1, x2)

inst_26838:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x7f7ffff8; valaddr_reg:x3; val_offset:80514*0 + 3*726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80514*0 + 3*726*FLEN/8, x4, x1, x2)

inst_26839:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x7f7ffffc; valaddr_reg:x3; val_offset:80517*0 + 3*727*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80517*0 + 3*727*FLEN/8, x4, x1, x2)

inst_26840:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x04d221 and fs2 == 0 and fe2 == 0x7f and fm2 == 0x76b552 and fs3 == 0 and fe3 == 0xfe and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f04d221; op2val:0x3ff6b552;
op3val:0x7f7ffffe; valaddr_reg:x3; val_offset:80520*0 + 3*728*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80520*0 + 3*728*FLEN/8, x4, x1, x2)

inst_26841:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x3f800001; valaddr_reg:x3; val_offset:80523*0 + 3*729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80523*0 + 3*729*FLEN/8, x4, x1, x2)

inst_26842:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x3f800003; valaddr_reg:x3; val_offset:80526*0 + 3*730*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80526*0 + 3*730*FLEN/8, x4, x1, x2)

inst_26843:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x3f800007; valaddr_reg:x3; val_offset:80529*0 + 3*731*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80529*0 + 3*731*FLEN/8, x4, x1, x2)

inst_26844:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x199999 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x3f999999; valaddr_reg:x3; val_offset:80532*0 + 3*732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80532*0 + 3*732*FLEN/8, x4, x1, x2)

inst_26845:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x249249 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x3fa49249; valaddr_reg:x3; val_offset:80535*0 + 3*733*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80535*0 + 3*733*FLEN/8, x4, x1, x2)

inst_26846:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x333333 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x3fb33333; valaddr_reg:x3; val_offset:80538*0 + 3*734*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80538*0 + 3*734*FLEN/8, x4, x1, x2)

inst_26847:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x36db6d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x3fb6db6d; valaddr_reg:x3; val_offset:80541*0 + 3*735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80541*0 + 3*735*FLEN/8, x4, x1, x2)

inst_26848:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x3bbbbb and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x3fbbbbbb; valaddr_reg:x3; val_offset:80544*0 + 3*736*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80544*0 + 3*736*FLEN/8, x4, x1, x2)

inst_26849:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x444444 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x3fc44444; valaddr_reg:x3; val_offset:80547*0 + 3*737*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80547*0 + 3*737*FLEN/8, x4, x1, x2)

inst_26850:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x4ccccc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x3fcccccc; valaddr_reg:x3; val_offset:80550*0 + 3*738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80550*0 + 3*738*FLEN/8, x4, x1, x2)

inst_26851:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x5b6db6 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x3fdb6db6; valaddr_reg:x3; val_offset:80553*0 + 3*739*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80553*0 + 3*739*FLEN/8, x4, x1, x2)

inst_26852:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x666666 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x3fe66666; valaddr_reg:x3; val_offset:80556*0 + 3*740*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80556*0 + 3*740*FLEN/8, x4, x1, x2)

inst_26853:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x6db6db and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x3fedb6db; valaddr_reg:x3; val_offset:80559*0 + 3*741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80559*0 + 3*741*FLEN/8, x4, x1, x2)

inst_26854:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffff8 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x3ffffff8; valaddr_reg:x3; val_offset:80562*0 + 3*742*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80562*0 + 3*742*FLEN/8, x4, x1, x2)

inst_26855:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffc and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x3ffffffc; valaddr_reg:x3; val_offset:80565*0 + 3*743*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80565*0 + 3*743*FLEN/8, x4, x1, x2)

inst_26856:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x7f and fm3 == 0x7ffffe and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x3ffffffe; valaddr_reg:x3; val_offset:80568*0 + 3*744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80568*0 + 3*744*FLEN/8, x4, x1, x2)

inst_26857:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x000000 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44800000; valaddr_reg:x3; val_offset:80571*0 + 3*745*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80571*0 + 3*745*FLEN/8, x4, x1, x2)

inst_26858:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44800001; valaddr_reg:x3; val_offset:80574*0 + 3*746*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80574*0 + 3*746*FLEN/8, x4, x1, x2)

inst_26859:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44800003; valaddr_reg:x3; val_offset:80577*0 + 3*747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80577*0 + 3*747*FLEN/8, x4, x1, x2)

inst_26860:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44800007; valaddr_reg:x3; val_offset:80580*0 + 3*748*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80580*0 + 3*748*FLEN/8, x4, x1, x2)

inst_26861:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x00000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x4480000f; valaddr_reg:x3; val_offset:80583*0 + 3*749*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80583*0 + 3*749*FLEN/8, x4, x1, x2)

inst_26862:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x00001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x4480001f; valaddr_reg:x3; val_offset:80586*0 + 3*750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80586*0 + 3*750*FLEN/8, x4, x1, x2)

inst_26863:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x00003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x4480003f; valaddr_reg:x3; val_offset:80589*0 + 3*751*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80589*0 + 3*751*FLEN/8, x4, x1, x2)

inst_26864:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x00007f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x4480007f; valaddr_reg:x3; val_offset:80592*0 + 3*752*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80592*0 + 3*752*FLEN/8, x4, x1, x2)

inst_26865:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x0000ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x448000ff; valaddr_reg:x3; val_offset:80595*0 + 3*753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80595*0 + 3*753*FLEN/8, x4, x1, x2)

inst_26866:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x0001ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x448001ff; valaddr_reg:x3; val_offset:80598*0 + 3*754*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80598*0 + 3*754*FLEN/8, x4, x1, x2)

inst_26867:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x0003ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x448003ff; valaddr_reg:x3; val_offset:80601*0 + 3*755*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80601*0 + 3*755*FLEN/8, x4, x1, x2)

inst_26868:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x0007ff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x448007ff; valaddr_reg:x3; val_offset:80604*0 + 3*756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80604*0 + 3*756*FLEN/8, x4, x1, x2)

inst_26869:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x000fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44800fff; valaddr_reg:x3; val_offset:80607*0 + 3*757*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80607*0 + 3*757*FLEN/8, x4, x1, x2)

inst_26870:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x001fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44801fff; valaddr_reg:x3; val_offset:80610*0 + 3*758*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80610*0 + 3*758*FLEN/8, x4, x1, x2)

inst_26871:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x003fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44803fff; valaddr_reg:x3; val_offset:80613*0 + 3*759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80613*0 + 3*759*FLEN/8, x4, x1, x2)

inst_26872:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x007fff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44807fff; valaddr_reg:x3; val_offset:80616*0 + 3*760*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80616*0 + 3*760*FLEN/8, x4, x1, x2)

inst_26873:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x00ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x4480ffff; valaddr_reg:x3; val_offset:80619*0 + 3*761*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80619*0 + 3*761*FLEN/8, x4, x1, x2)

inst_26874:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x01ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x4481ffff; valaddr_reg:x3; val_offset:80622*0 + 3*762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80622*0 + 3*762*FLEN/8, x4, x1, x2)

inst_26875:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x03ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x4483ffff; valaddr_reg:x3; val_offset:80625*0 + 3*763*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80625*0 + 3*763*FLEN/8, x4, x1, x2)

inst_26876:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x07ffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x4487ffff; valaddr_reg:x3; val_offset:80628*0 + 3*764*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80628*0 + 3*764*FLEN/8, x4, x1, x2)

inst_26877:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x0fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x448fffff; valaddr_reg:x3; val_offset:80631*0 + 3*765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80631*0 + 3*765*FLEN/8, x4, x1, x2)

inst_26878:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x1fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x449fffff; valaddr_reg:x3; val_offset:80634*0 + 3*766*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80634*0 + 3*766*FLEN/8, x4, x1, x2)

inst_26879:
// fs1 == 0 and fe1 == 0xfe and fm1 == 0x05f534 and fs2 == 0 and fe2 == 0x00 and fm2 == 0x3d2750 and fs3 == 0 and fe3 == 0x89 and fm3 == 0x3fffff and  fcsr == 0x0 and rm_val == 7   
/* opcode: fmadd.s ; op1:f30; op2:f29; op3:f28; dest:f31; op1val:0x7f05f534; op2val:0x3d2750;
op3val:0x44bfffff; valaddr_reg:x3; val_offset:80637*0 + 3*767*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fmadd.s, f31, f30, f29, f28, dyn, 0, 0, x3, 80637*0 + 3*767*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x1f807fff28515071,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x1f80ffff28547839,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x1f81ffff28613375,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x1f83ffff28744447,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x1f87ffff29006591,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x1f8fffff29530879,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x1f9fffff30579455,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x1fbfffff32676607,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x1fc0000032676608,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x1fe0000034773760,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x1ff0000035822336,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x1ff8000036346624,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x1ffc000036608768,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x1ffe000036739840,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x1fff000036805376,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x1fff800036838144,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x1fffc00036854528,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x1fffe00036862720,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x1ffff00036866816,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x1ffff80036868864,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x1ffffc0036869888,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x1ffffe0036870400,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x1fffff0036870656,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x1fffff8036870784,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x1fffffc036870848,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x1fffffe036870880,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x1ffffff036870896,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x1ffffff836870904,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x1ffffffc36870908,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x1ffffffe36870910,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x1fffffff36870911,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x3f800001065353217,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x3f800003065353219,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x3f800007065353223,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x3f999999067030937,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x3fa49249067749961,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x3fb33333068708659,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x3fb6db6d068948333,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x3fbbbbbb069267899,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x3fc44444069827140,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x3fcccccc070386380,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x3fdb6db6071345078,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x3fe66666072064102,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x3fedb6db072543451,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x3ffffff8073741816,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x3ffffffc073741820,32,FLEN)
NAN_BOXED(0x7f0250a3130858147,32,FLEN)
NAN_BOXED(0x3edcf1119793,32,FLEN)
NAN_BOXED(0x3ffffffe073741822,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3b80000098244352,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3b80000198244353,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3b80000398244355,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3b80000798244359,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3b80000f98244367,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3b80001f98244383,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3b80003f98244415,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3b80007f98244479,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3b8000ff98244607,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3b8001ff98244863,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3b8003ff98245375,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3b8007ff98246399,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3b800fff98248447,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3b801fff98252543,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3b803fff98260735,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3b807fff98277119,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3b80ffff98309887,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3b81ffff98375423,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3b83ffff98506495,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3b87ffff98768639,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3b8fffff99292927,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3b9fffff000341503,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3bbfffff002438655,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3bc00000002438656,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3be00000004535808,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3bf00000005584384,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3bf80000006108672,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3bfc0000006370816,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3bfe0000006501888,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3bff0000006567424,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3bff8000006600192,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3bffc000006616576,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3bffe000006624768,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3bfff000006628864,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3bfff800006630912,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3bfffc00006631936,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3bfffe00006632448,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3bffff00006632704,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3bffff80006632832,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3bffffc0006632896,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3bffffe0006632928,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3bfffff0006632944,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3bfffff8006632952,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3bfffffc006632956,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3bfffffe006632958,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3bffffff006632959,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3f800001065353217,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3f800003065353219,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3f800007065353223,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3f999999067030937,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3fa49249067749961,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3fb33333068708659,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3fb6db6d068948333,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3fbbbbbb069267899,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3fc44444069827140,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3fcccccc070386380,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3fdb6db6071345078,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3fe66666072064102,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3fedb6db072543451,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3ffffff8073741816,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3ffffffc073741820,32,FLEN)
NAN_BOXED(0x7f026f45130865989,32,FLEN)
NAN_BOXED(0x3ece2e116014,32,FLEN)
NAN_BOXED(0x3ffffffe073741822,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x2600000037534208,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x2600000137534209,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x2600000337534211,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x2600000737534215,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x2600000f37534223,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x2600001f37534239,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x2600003f37534271,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x2600007f37534335,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x260000ff37534463,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x260001ff37534719,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x260003ff37535231,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x260007ff37536255,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x26000fff37538303,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x26001fff37542399,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x26003fff37550591,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x26007fff37566975,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x2600ffff37599743,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x2601ffff37665279,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x2603ffff37796351,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x2607ffff38058495,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x260fffff38582783,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x261fffff39631359,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x263fffff41728511,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x2640000041728512,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x2660000043825664,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x2670000044874240,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x2678000045398528,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x267c000045660672,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x267e000045791744,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x267f000045857280,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x267f800045890048,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x267fc00045906432,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x267fe00045914624,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x267ff00045918720,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x267ff80045920768,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x267ffc0045921792,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x267ffe0045922304,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x267fff0045922560,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x267fff8045922688,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x267fffc045922752,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x267fffe045922784,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x267ffff045922800,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x267ffff845922808,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x267ffffc45922812,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x267ffffe45922814,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x267fffff45922815,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x3f800001065353217,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x3f800003065353219,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x3f800007065353223,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x3f999999067030937,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x3fa49249067749961,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x3fb33333068708659,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x3fb6db6d068948333,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x3fbbbbbb069267899,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x3fc44444069827140,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x3fcccccc070386380,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x3fdb6db6071345078,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x3fe66666072064102,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x3fedb6db072543451,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x3ffffff8073741816,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x3ffffffc073741820,32,FLEN)
NAN_BOXED(0x7f027585130867589,32,FLEN)
NAN_BOXED(0x3ecb2c115244,32,FLEN)
NAN_BOXED(0x3ffffffe073741822,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000001147483649,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000003147483651,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000007147483655,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8000000f147483663,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8000001f147483679,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8000003f147483711,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8000007f147483775,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x800000ff147483903,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x800001ff147484159,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x800003ff147484671,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x800007ff147485695,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80000fff147487743,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80001fff147491839,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80003fff147500031,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80007fff147516415,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8000ffff147549183,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8001ffff147614719,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8003ffff147745791,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x8007ffff148007935,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x800fffff148532223,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x801fffff149580799,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x803fffff151677951,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80400000151677952,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80600000153775104,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80700000154823680,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80780000155347968,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807c0000155610112,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807e0000155741184,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807f0000155806720,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807f8000155839488,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807fc000155855872,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807fe000155864064,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ff000155868160,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ff800155870208,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffc00155871232,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffe00155871744,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807fff00155872000,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807fff80155872128,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807fffc0155872192,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807fffe0155872224,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffff0155872240,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffff8155872248,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffc155872252,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807ffffe155872254,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x807fffff155872255,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80800001155872257,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80800003155872259,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80800007155872263,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80999999157549977,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80a49249158269001,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80b33333159227699,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80b6db6d159467373,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80bbbbbb159786939,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80c44444160346180,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80cccccc160905420,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80db6db6161864118,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80e66666162583142,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80edb6db163062491,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80fffff8164260856,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80fffffc164260860,32,FLEN)
NAN_BOXED(0x7f02c0d3130886867,32,FLEN)
NAN_BOXED(0x80000000147483648,32,FLEN)
NAN_BOXED(0x80fffffe164260862,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x3f800001065353217,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x3f800003065353219,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x3f800007065353223,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x3f999999067030937,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x3fa49249067749961,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x3fb33333068708659,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x3fb6db6d068948333,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x3fbbbbbb069267899,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x3fc44444069827140,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x3fcccccc070386380,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x3fdb6db6071345078,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x3fe66666072064102,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x3fedb6db072543451,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x3ffffff8073741816,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x3ffffffc073741820,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x3ffffffe073741822,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a000000241513984,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a000001241513985,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a000003241513987,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a000007241513991,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a00000f241513999,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a00001f241514015,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a00003f241514047,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a00007f241514111,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a0000ff241514239,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a0001ff241514495,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a0003ff241515007,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a0007ff241516031,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a000fff241518079,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a001fff241522175,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a003fff241530367,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a007fff241546751,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a00ffff241579519,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a01ffff241645055,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a03ffff241776127,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a07ffff242038271,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a0fffff242562559,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a1fffff243611135,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a3fffff245708287,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a400000245708288,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a600000247805440,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a700000248854016,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a780000249378304,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a7c0000249640448,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a7e0000249771520,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a7f0000249837056,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a7f8000249869824,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a7fc000249886208,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a7fe000249894400,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a7ff000249898496,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a7ff800249900544,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a7ffc00249901568,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a7ffe00249902080,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a7fff00249902336,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a7fff80249902464,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a7fffc0249902528,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a7fffe0249902560,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a7ffff0249902576,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a7ffff8249902584,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a7ffffc249902588,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a7ffffe249902590,32,FLEN)
NAN_BOXED(0x7f02ce4e130890318,32,FLEN)
NAN_BOXED(0x3ea08d104333,32,FLEN)
NAN_BOXED(0x4a7fffff249902591,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x800001388609,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x800003388611,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x800007388615,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0x9999990066329,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xa492490785353,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb333331744051,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xb6db6d1983725,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xbbbbbb2303291,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xc444442862532,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xcccccc3421772,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xdb6db64380470,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe666665099494,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xedb6db5578843,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xfffff86777208,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xfffffc6777212,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xfffffe6777214,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe80000043269632,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe80000143269633,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe80000343269635,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe80000743269639,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe80000f43269647,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe80001f43269663,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe80003f43269695,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe80007f43269759,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe8000ff43269887,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe8001ff43270143,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe8003ff43270655,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe8007ff43271679,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe800fff43273727,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe801fff43277823,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe803fff43286015,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe807fff43302399,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe80ffff43335167,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe81ffff43400703,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe83ffff43531775,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe87ffff43793919,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe8fffff44318207,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xe9fffff45366783,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xebfffff47463935,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xec0000047463936,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xee0000049561088,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xef0000050609664,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xef8000051133952,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xefc000051396096,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xefe000051527168,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xeff000051592704,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xeff800051625472,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xeffc00051641856,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xeffe00051650048,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xefff00051654144,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xefff80051656192,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xefffc0051657216,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xefffe0051657728,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xeffff0051657984,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xeffff8051658112,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xeffffc051658176,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xeffffe051658208,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xefffff051658224,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xefffff851658232,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xefffffc51658236,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xefffffe51658238,32,FLEN)
NAN_BOXED(0x7f030bb1130906033,32,FLEN)
NAN_BOXED(0x0,32,FLEN)
NAN_BOXED(0xeffffff51658239,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x2300000087202560,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x2300000187202561,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x2300000387202563,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x2300000787202567,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x2300000f87202575,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x2300001f87202591,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x2300003f87202623,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x2300007f87202687,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x230000ff87202815,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x230001ff87203071,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x230003ff87203583,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x230007ff87204607,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x23000fff87206655,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x23001fff87210751,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x23003fff87218943,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x23007fff87235327,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x2300ffff87268095,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x2301ffff87333631,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x2303ffff87464703,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x2307ffff87726847,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x230fffff88251135,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x231fffff89299711,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x233fffff91396863,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x2340000091396864,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x2360000093494016,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x2370000094542592,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x2378000095066880,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x237c000095329024,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x237e000095460096,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x237f000095525632,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x237f800095558400,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x237fc00095574784,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x237fe00095582976,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x237ff00095587072,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x237ff80095589120,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x237ffc0095590144,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x237ffe0095590656,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x237fff0095590912,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x237fff8095591040,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x237fffc095591104,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x237fffe095591136,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x237ffff095591152,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x237ffff895591160,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x237ffffc95591164,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x237ffffe95591166,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x237fffff95591167,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x3f800001065353217,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x3f800003065353219,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x3f800007065353223,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x3f999999067030937,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x3fa49249067749961,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x3fb33333068708659,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x3fb6db6d068948333,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x3fbbbbbb069267899,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x3fc44444069827140,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x3fcccccc070386380,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x3fdb6db6071345078,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x3fe66666072064102,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x3fedb6db072543451,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x3ffffff8073741816,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x3ffffffc073741820,32,FLEN)
NAN_BOXED(0x7f033b4f130918223,32,FLEN)
NAN_BOXED(0x3e6c87091015,32,FLEN)
NAN_BOXED(0x3ffffffe073741822,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe3000000808428032,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe3000001808428033,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe3000003808428035,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe3000007808428039,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe300000f808428047,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe300001f808428063,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe300003f808428095,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe300007f808428159,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe30000ff808428287,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe30001ff808428543,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe30003ff808429055,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe30007ff808430079,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe3000fff808432127,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe3001fff808436223,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe3003fff808444415,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe3007fff808460799,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe300ffff808493567,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe301ffff808559103,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe303ffff808690175,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe307ffff808952319,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe30fffff809476607,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe31fffff810525183,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe33fffff812622335,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe3400000812622336,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe3600000814719488,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe3700000815768064,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe3780000816292352,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe37c0000816554496,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe37e0000816685568,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe37f0000816751104,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe37f8000816783872,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe37fc000816800256,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe37fe000816808448,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe37ff000816812544,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe37ff800816814592,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe37ffc00816815616,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe37ffe00816816128,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe37fff00816816384,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe37fff80816816512,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe37fffc0816816576,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe37fffe0816816608,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe37ffff0816816624,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe37ffff8816816632,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe37ffffc816816636,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe37ffffe816816638,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xe37fffff816816639,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xff000001278190081,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xff000003278190083,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xff000007278190087,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xff199999279867801,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xff249249280586825,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xff333333281545523,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xff36db6d281785197,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xff3bbbbb282104763,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xff444444282664004,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xff4ccccc283223244,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xff5b6db6284181942,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xff666666284900966,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xff6db6db285380315,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xff7ffff8286578680,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xff7ffffc286578684,32,FLEN)
NAN_BOXED(0x7f04226b130977387,32,FLEN)
NAN_BOXED(0xbff7fd64220700516,32,FLEN)
NAN_BOXED(0xff7ffffe286578686,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbb800000145728000,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbb800001145728001,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbb800003145728003,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbb800007145728007,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbb80000f145728015,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbb80001f145728031,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbb80003f145728063,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbb80007f145728127,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbb8000ff145728255,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbb8001ff145728511,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbb8003ff145729023,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbb8007ff145730047,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbb800fff145732095,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbb801fff145736191,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbb803fff145744383,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbb807fff145760767,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbb80ffff145793535,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbb81ffff145859071,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbb83ffff145990143,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbb87ffff146252287,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbb8fffff146776575,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbb9fffff147825151,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbbbfffff149922303,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbbc00000149922304,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbbe00000152019456,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbbf00000153068032,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbbf80000153592320,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbbfc0000153854464,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbbfe0000153985536,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbbff0000154051072,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbbff8000154083840,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbbffc000154100224,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbbffe000154108416,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbbfff000154112512,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbbfff800154114560,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbbfffc00154115584,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbbfffe00154116096,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbbffff00154116352,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbbffff80154116480,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbbffffc0154116544,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbbffffe0154116576,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbbfffff0154116592,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbbfffff8154116600,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbbfffffc154116604,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbbfffffe154116606,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbbffffff154116607,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbf800001212836865,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbf800003212836867,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbf800007212836871,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbf999999214514585,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbfa49249215233609,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbfb33333216192307,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbfb6db6d216431981,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbfbbbbbb216751547,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbfc44444217310788,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbfcccccc217870028,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbfdb6db6218828726,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbfe66666219547750,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbfedb6db220027099,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbffffff8221225464,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbffffffc221225468,32,FLEN)
NAN_BOXED(0x7f04331d130981661,32,FLEN)
NAN_BOXED(0x803df784151544708,32,FLEN)
NAN_BOXED(0xbffffffe221225470,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x69800000769996288,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x69800001769996289,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x69800003769996291,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x69800007769996295,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x6980000f769996303,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x6980001f769996319,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x6980003f769996351,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x6980007f769996415,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x698000ff769996543,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x698001ff769996799,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x698003ff769997311,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x698007ff769998335,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x69800fff770000383,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x69801fff770004479,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x69803fff770012671,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x69807fff770029055,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x6980ffff770061823,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x6981ffff770127359,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x6983ffff770258431,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x6987ffff770520575,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x698fffff771044863,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x699fffff772093439,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x69bfffff774190591,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x69c00000774190592,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x69e00000776287744,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x69f00000777336320,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x69f80000777860608,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x69fc0000778122752,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x69fe0000778253824,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x69ff0000778319360,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x69ff8000778352128,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x69ffc000778368512,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x69ffe000778376704,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x69fff000778380800,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x69fff800778382848,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x69fffc00778383872,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x69fffe00778384384,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x69ffff00778384640,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x69ffff80778384768,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x69ffffc0778384832,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x69ffffe0778384864,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x69fffff0778384880,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x69fffff8778384888,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x69fffffc778384892,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x69fffffe778384894,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x69ffffff778384895,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x7f000001130706433,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x7f000003130706435,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x7f000007130706439,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x7f199999132384153,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x7f249249133103177,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x7f333333134061875,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x7f36db6d134301549,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x7f3bbbbb134621115,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x7f444444135180356,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x7f4ccccc135739596,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x7f5b6db6136698294,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x7f666666137417318,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x7f6db6db137896667,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x7f7ffff8139095032,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x7f7ffffc139095036,32,FLEN)
NAN_BOXED(0x7f0460a7130993319,32,FLEN)
NAN_BOXED(0x3ff788cd073187021,32,FLEN)
NAN_BOXED(0x7f7ffffe139095038,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x3f800001065353217,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x3f800003065353219,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x3f800007065353223,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x3f999999067030937,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x3fa49249067749961,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x3fb33333068708659,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x3fb6db6d068948333,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x3fbbbbbb069267899,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x3fc44444069827140,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x3fcccccc070386380,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x3fdb6db6071345078,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x3fe66666072064102,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x3fedb6db072543451,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x3ffffff8073741816,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x3ffffffc073741820,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x3ffffffe073741822,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e000000308622848,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e000001308622849,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e000003308622851,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e000007308622855,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e00000f308622863,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e00001f308622879,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e00003f308622911,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e00007f308622975,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e0000ff308623103,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e0001ff308623359,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e0003ff308623871,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e0007ff308624895,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e000fff308626943,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e001fff308631039,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e003fff308639231,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e007fff308655615,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e00ffff308688383,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e01ffff308753919,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e03ffff308884991,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e07ffff309147135,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e0fffff309671423,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e1fffff310719999,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e3fffff312817151,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e400000312817152,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e600000314914304,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e700000315962880,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e780000316487168,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e7c0000316749312,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e7e0000316880384,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e7f0000316945920,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e7f8000316978688,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e7fc000316995072,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e7fe000317003264,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e7ff000317007360,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e7ff800317009408,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e7ffc00317010432,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e7ffe00317010944,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e7fff00317011200,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e7fff80317011328,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e7fffc0317011392,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e7fffe0317011424,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e7ffff0317011440,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e7ffff8317011448,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e7ffffc317011452,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e7ffffe317011454,32,FLEN)
NAN_BOXED(0x7f04a351131010385,32,FLEN)
NAN_BOXED(0x3dc319047641,32,FLEN)
NAN_BOXED(0x4e7fffff317011455,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x62800000652555776,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x62800001652555777,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x62800003652555779,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x62800007652555783,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x6280000f652555791,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x6280001f652555807,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x6280003f652555839,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x6280007f652555903,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x628000ff652556031,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x628001ff652556287,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x628003ff652556799,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x628007ff652557823,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x62800fff652559871,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x62801fff652563967,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x62803fff652572159,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x62807fff652588543,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x6280ffff652621311,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x6281ffff652686847,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x6283ffff652817919,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x6287ffff653080063,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x628fffff653604351,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x629fffff654652927,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x62bfffff656750079,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x62c00000656750080,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x62e00000658847232,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x62f00000659895808,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x62f80000660420096,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x62fc0000660682240,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x62fe0000660813312,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x62ff0000660878848,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x62ff8000660911616,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x62ffc000660928000,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x62ffe000660936192,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x62fff000660940288,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x62fff800660942336,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x62fffc00660943360,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x62fffe00660943872,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x62ffff00660944128,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x62ffff80660944256,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x62ffffc0660944320,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x62ffffe0660944352,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x62fffff0660944368,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x62fffff8660944376,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x62fffffc660944380,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x62fffffe660944382,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x62ffffff660944383,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x7f000001130706433,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x7f000003130706435,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x7f000007130706439,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x7f199999132384153,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x7f249249133103177,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x7f333333134061875,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x7f36db6d134301549,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x7f3bbbbb134621115,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x7f444444135180356,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x7f4ccccc135739596,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x7f5b6db6136698294,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x7f666666137417318,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x7f6db6db137896667,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x7f7ffff8139095032,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x7f7ffffc139095036,32,FLEN)
NAN_BOXED(0x7f04d221131022369,32,FLEN)
NAN_BOXED(0x3ff6b552073132882,32,FLEN)
NAN_BOXED(0x7f7ffffe139095038,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x3f800001065353217,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x3f800003065353219,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x3f800007065353223,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x3f999999067030937,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x3fa49249067749961,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x3fb33333068708659,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x3fb6db6d068948333,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x3fbbbbbb069267899,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x3fc44444069827140,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x3fcccccc070386380,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x3fdb6db6071345078,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x3fe66666072064102,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x3fedb6db072543451,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x3ffffff8073741816,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x3ffffffc073741820,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x3ffffffe073741822,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x44800000149239296,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x44800001149239297,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x44800003149239299,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x44800007149239303,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x4480000f149239311,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x4480001f149239327,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x4480003f149239359,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x4480007f149239423,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x448000ff149239551,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x448001ff149239807,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x448003ff149240319,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x448007ff149241343,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x44800fff149243391,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x44801fff149247487,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x44803fff149255679,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x44807fff149272063,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x4480ffff149304831,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x4481ffff149370367,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x4483ffff149501439,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x4487ffff149763583,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x448fffff150287871,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x449fffff151336447,32,FLEN)
NAN_BOXED(0x7f05f534131096884,32,FLEN)
NAN_BOXED(0x3d2750007760,32,FLEN)
NAN_BOXED(0x44bfffff153433599,32,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_4:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_5:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_6:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
