
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.7.1
// timestamp : Fri Jun 17 15:28:39 2022 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /scratch/pawan/work/normalised/RV32D/fnmadd.d.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the fnmadd.d instruction of the RISC-V RV32FD_Zicsr,RV64FD_Zicsr extension for the fnmadd.d_b2 covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32IFD_Zicsr,RV64IFD_Zicsr")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*D.*);def TEST_CASE_1=True;",fnmadd.d_b2)

RVTEST_FP_ENABLE()
RVTEST_VALBASEUPD(x3,test_dataset_0)
RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1 == rs2 != rs3 and rs1 == rs2 != rd and rd != rs3, rs1==x11, rs2==x11, rs3==x23, rd==x31,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000001 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x6000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x11; op2:x11; op3:x23; dest:x31; op1val:0x1; op2val:0x1;
op3val:0x13; valaddr_reg:x3; val_offset:0*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x11, x11, x23, dyn, 0, 0, x3, 0*FLEN/8, x4, x1, x2)

inst_1:
// rs1 == rs3 != rs2 and rs1 == rs3 != rd and rd != rs2, rs1==x10, rs2==x13, rs3==x10, rd==x8,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000002 and fs2 == 0 and fe2 == 0x431 and fm2 == 0xffffffff80064 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000033 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x10; op2:x13; op3:x10; dest:x8; op1val:0x2; op2val:0x431ffffffff80064;
op3val:0x2; valaddr_reg:x3; val_offset:3*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x8, x10, x13, x10, dyn, 0, 0, x3, 3*FLEN/8, x4, x1, x2)

inst_2:
// rs1 == rs2 == rs3 == rd, rs1==x24, rs2==x24, rs3==x24, rd==x24,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000003 and fs2 == 1 and fe2 == 0x405 and fm2 == 0x26aaaaaaaaaab and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x24; op2:x24; op3:x24; dest:x24; op1val:0x3; op2val:0x3;
op3val:0x3; valaddr_reg:x3; val_offset:6*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x24, x24, x24, x24, dyn, 0, 0, x3, 6*FLEN/8, x4, x1, x2)

inst_3:
// rs1 == rd == rs3 != rs2, rs1==x26, rs2==x9, rs3==x26, rd==x26,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000004 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xc000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x26; op2:x9; op3:x26; dest:x26; op1val:0x4; op2val:0x400c000000000000;
op3val:0x4; valaddr_reg:x3; val_offset:9*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x26, x26, x9, x26, dyn, 0, 0, x3, 9*FLEN/8, x4, x1, x2)

inst_4:
// rs1 == rs2 == rs3 != rd, rs1==x29, rs2==x29, rs3==x29, rd==x10,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000005 and fs2 == 1 and fe2 == 0x412 and fm2 == 0x999799999999a and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000051 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x29; op2:x29; op3:x29; dest:x10; op1val:0x5; op2val:0x5;
op3val:0x5; valaddr_reg:x3; val_offset:12*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x10, x29, x29, x29, dyn, 0, 0, x3, 12*FLEN/8, x4, x1, x2)

inst_5:
// rs2 == rd != rs1 and rs2 == rd != rs3 and rs3 != rs1, rs1==x23, rs2==x17, rs3==x11, rd==x17,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000005 and fs2 == 1 and fe2 == 0x430 and fm2 == 0x9999999999766 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x23; op2:x17; op3:x11; dest:x17; op1val:0x5; op2val:0xc309999999999766;
op3val:0x5f; valaddr_reg:x3; val_offset:15*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x17, x23, x17, x11, dyn, 0, 0, x3, 15*FLEN/8, x4, x1, x2)

inst_6:
// rs1 == rs2 == rd != rs3, rs1==x4, rs2==x4, rs3==x6, rd==x4,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000006 and fs2 == 0 and fe2 == 0x402 and fm2 == 0xd555555555555 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000053 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x4; op2:x4; op3:x6; dest:x4; op1val:0x6; op2val:0x6;
op3val:0x53; valaddr_reg:x3; val_offset:18*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x4, x4, x4, x6, dyn, 0, 0, x3, 18*FLEN/8, x4, x1, x2)

inst_7:
// rs2 == rs3 != rs1 and rs2 == rs3 != rd and rd != rs1, rs1==x22, rs2==x5, rs3==x5, rd==x0,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000007 and fs2 == 1 and fe2 == 0x430 and fm2 == 0x2492492491b00 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x22; op2:x5; op3:x5; dest:x0; op1val:0x7; op2val:0xc302492492491b00;
op3val:0xc302492492491b00; valaddr_reg:x3; val_offset:21*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x0, x22, x5, x5, dyn, 0, 0, x3, 21*FLEN/8, x4, x1, x2)

inst_8:
// rs3 == rd != rs1 and rs3 == rd != rs2 and rs2 != rs1, rs1==x17, rs2==x7, rs3==x12, rd==x12,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000008 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000018 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x17; op2:x7; op3:x12; dest:x12; op1val:0x8; op2val:0xbff2000000000000;
op3val:0x18; valaddr_reg:x3; val_offset:24*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x12, x17, x7, x12, dyn, 0, 0, x3, 24*FLEN/8, x4, x1, x2)

inst_9:
// rs1 == rd != rs2 and rs1 == rd != rs3 and rs3 != rs2, rs1==x27, rs2==x10, rs3==x31, rd==x27,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000008 and fs2 == 1 and fe2 == 0x406 and fm2 == 0xfa00000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000019 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x27; op2:x10; op3:x31; dest:x27; op1val:0x8; op2val:0xc06fa00000000000;
op3val:0x19; valaddr_reg:x3; val_offset:27*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x27, x27, x10, x31, dyn, 0, 0, x3, 27*FLEN/8, x4, x1, x2)

inst_10:
// rs1 != rs2 and rs1 != rd and rs1 != rs3 and rs2 != rs3 and rs2 != rd and rs3 != rd, rs1==x1, rs2==x2, rs3==x28, rd==x5,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000009 and fs2 == 0 and fe2 == 0x40e and fm2 == 0xc7251c71c71c7 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x1; op2:x2; op3:x28; dest:x5; op1val:0x9; op2val:0x40ec7251c71c71c7;
op3val:0x26; valaddr_reg:x3; val_offset:30*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x5, x1, x2, x28, dyn, 0, 0, x3, 30*FLEN/8, x4, x1, x2)

inst_11:
// rd == rs2 == rs3 != rs1, rs1==x31, rs2==x16, rs3==x16, rd==x16,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000a and fs2 == 1 and fe2 == 0x42f and fm2 == 0x99999993332ea and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x31; op2:x16; op3:x16; dest:x16; op1val:0xa; op2val:0xc2f99999993332ea;
op3val:0xc2f99999993332ea; valaddr_reg:x3; val_offset:33*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x16, x31, x16, x16, dyn, 0, 0, x3, 33*FLEN/8, x4, x1, x2)

inst_12:
// rs1==x5, rs2==x19, rs3==x25, rd==x18,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000a and fs2 == 1 and fe2 == 0x42f and fm2 == 0x999999966664a and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000011 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x5; op2:x19; op3:x25; dest:x18; op1val:0xa; op2val:0xc2f999999966664a;
op3val:0x11; valaddr_reg:x3; val_offset:36*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x18, x5, x19, x25, dyn, 0, 0, x3, 36*FLEN/8, x4, x1, x2)

inst_13:
// rs1==x9, rs2==x6, rs3==x15, rd==x20,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000a and fs2 == 1 and fe2 == 0x42f and fm2 == 0x999999998ccaa and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000015 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x9; op2:x6; op3:x15; dest:x20; op1val:0xa; op2val:0xc2f999999998ccaa;
op3val:0x15; valaddr_reg:x3; val_offset:39*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x20, x9, x6, x15, dyn, 0, 0, x3, 39*FLEN/8, x4, x1, x2)

inst_14:
// rs1==x7, rs2==x27, rs3==x1, rd==x21,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000b and fs2 == 0 and fe2 == 0x403 and fm2 == 0x945d1745d1746 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000015 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x7; op2:x27; op3:x1; dest:x21; op1val:0xb; op2val:0x403945d1745d1746;
op3val:0x15; valaddr_reg:x3; val_offset:42*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x21, x7, x27, x1, dyn, 0, 0, x3, 42*FLEN/8, x4, x1, x2)

inst_15:
// rs1==x30, rs2==x26, rs3==x19, rd==x2,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000b and fs2 == 0 and fe2 == 0x411 and fm2 == 0x745e9745d1746 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000041 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x26; op3:x19; dest:x2; op1val:0xb; op2val:0x411745e9745d1746;
op3val:0x41; valaddr_reg:x3; val_offset:45*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x2, x30, x26, x19, dyn, 0, 0, x3, 45*FLEN/8, x4, x1, x2)

inst_16:
// rs1==x6, rs2==x23, rs3==x4, rd==x22,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000c and fs2 == 1 and fe2 == 0x40e and fm2 == 0x554d800000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x6; op2:x23; op3:x4; dest:x22; op1val:0xc; op2val:0xc0e554d800000000;
op3val:0x2f; valaddr_reg:x3; val_offset:48*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x22, x6, x23, x4, dyn, 0, 0, x3, 48*FLEN/8, x4, x1, x2)

inst_17:
// rs1==x13, rs2==x15, rs3==x2, rd==x7,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000d and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x89d89d89d89d9 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000006 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x13; op2:x15; op3:x2; dest:x7; op1val:0xd; op2val:0x3fe89d89d89d89d9;
op3val:0x6; valaddr_reg:x3; val_offset:51*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x7, x13, x15, x2, dyn, 0, 0, x3, 51*FLEN/8, x4, x1, x2)

inst_18:
// rs1==x2, rs2==x22, rs3==x27, rd==x3,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000d and fs2 == 1 and fe2 == 0x40c and fm2 == 0x3ax6c4ec4ec4f and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000030 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x2; op2:x22; op3:x27; dest:x3; op1val:0xd; op2val:0xc0c3ax6c4ec4ec4f;
op3val:0x30; valaddr_reg:x3; val_offset:54*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x3, x2, x22, x27, dyn, 0, 0, x3, 54*FLEN/8, x4, x1, x2)

inst_19:
// rs1==x25, rs2==x28, rs3==x7, rd==x19,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000d and fs2 == 1 and fe2 == 0x411 and fm2 == 0x3b11d3b13b13b and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000061 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x25; op2:x28; op3:x7; dest:x19; op1val:0xd; op2val:0xc113b11d3b13b13b;
op3val:0x61; valaddr_reg:x3; val_offset:57*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x19, x25, x28, x7, dyn, 0, 0, x3, 57*FLEN/8, x4, x1, x2)

inst_20:
// rs1==x28, rs2==x21, rs3==x14, rd==x29,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000f and fs2 == 0 and fe2 == 0x40b and fm2 == 0x1164444444444 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x28; op2:x21; op3:x14; dest:x29; op1val:0xf; op2val:0x40b1164444444444;
op3val:0x4e; valaddr_reg:x3; val_offset:60*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x29, x28, x21, x14, dyn, 0, 0, x3, 60*FLEN/8, x4, x1, x2)

inst_21:
// rs1==x20, rs2==x3, rs3==x18, rd==x14,fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000f and fs2 == 1 and fe2 == 0x42f and fm2 == 0x11111110eeeb6 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000034 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x20; op2:x3; op3:x18; dest:x14; op1val:0xf; op2val:0xc2f11111110eeeb6;
op3val:0x34; valaddr_reg:x3; val_offset:63*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x14, x20, x3, x18, dyn, 0, 0, x3, 63*FLEN/8, x4, x1, x2)

inst_22:
// rs1==x14, rs2==x0, rs3==x8, rd==x15,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000010 and fs2 == 0 and fe2 == 0x408 and fm2 == 0x0060000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x14; op2:x0; op3:x8; dest:x15; op1val:0x10; op2val:0x4080060000000000;
op3val:0xc; valaddr_reg:x3; val_offset:66*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x15, x14, x0, x8, dyn, 0, 0, x3, 66*FLEN/8, x4, x1, x2)

inst_23:
// rs1==x8, rs2==x1, rs3==x0, rd==x9,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000011 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x8787878787878 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x8; op2:x1; op3:x0; dest:x9; op1val:0x11; op2val:0x4028787878787878;
op3val:0x4f; valaddr_reg:x3; val_offset:69*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x9, x8, x1, x0, dyn, 0, 0, x3, 69*FLEN/8, x4, x1, x2)

inst_24:
// rs1==x12, rs2==x8, rs3==x30, rd==x11,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000011 and fs2 == 0 and fe2 == 0x42e and fm2 == 0xe1e1e1e1e1abe and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000036 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x12; op2:x8; op3:x30; dest:x11; op1val:0x11; op2val:0x42ee1e1e1e1e1abe;
op3val:0x36; valaddr_reg:x3; val_offset:72*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x11, x12, x8, x30, dyn, 0, 0, x3, 72*FLEN/8, x4, x1, x2)

inst_25:
// rs1==x19, rs2==x20, rs3==x13, rd==x6,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000012 and fs2 == 0 and fe2 == 0x40f and fm2 == 0xc720b8e38e38e and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x19; op2:x20; op3:x13; dest:x6; op1val:0x12; op2val:0x40fc720b8e38e38e;
op3val:0x4d; valaddr_reg:x3; val_offset:75*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x6, x19, x20, x13, dyn, 0, 0, x3, 75*FLEN/8, x4, x1, x2)

inst_26:
// rs1==x15, rs2==x12, rs3==x3, rd==x30,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000014 and fs2 == 1 and fe2 == 0x406 and fm2 == 0x9633333333333 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x15; op2:x12; op3:x3; dest:x30; op1val:0x14; op2val:0xc069633333333333;
op3val:0x23; valaddr_reg:x3; val_offset:78*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x30, x15, x12, x3, dyn, 0, 0, x3, 78*FLEN/8, x4, x1, x2)

inst_27:
// rs1==x3, rs2==x14, rs3==x9, rd==x25,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000015 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x9249249249249 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x3; op2:x14; op3:x9; dest:x25; op1val:0x15; op2val:0x3ff9249249249249;
op3val:0x26; valaddr_reg:x3; val_offset:81*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x25, x3, x14, x9, dyn, 0, 0, x3, 81*FLEN/8, x4, x1, x2)

inst_28:
// rs1==x16, rs2==x31, rs3==x21, rd==x13,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000017 and fs2 == 1 and fe2 == 0x42e and fm2 == 0x642c8590b1e5d and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x16; op2:x31; op3:x21; dest:x13; op1val:0x17; op2val:0xc2e642c8590b1e5d;
op3val:0x2c; valaddr_reg:x3; val_offset:84*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x13, x16, x31, x21, dyn, 0, 0, x3, 84*FLEN/8, x4, x1, x2)

inst_29:
// rs1==x18, rs2==x25, rs3==x20, rd==x1,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000018 and fs2 == 0 and fe2 == 0x42e and fm2 == 0x555555555557b and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000025 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x18; op2:x25; op3:x20; dest:x1; op1val:0x18; op2val:0x42e555555555557b;
op3val:0x25; valaddr_reg:x3; val_offset:87*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x1, x18, x25, x20, dyn, 0, 0, x3, 87*FLEN/8, x4, x1, x2)

inst_30:
// rs1==x21, rs2==x18, rs3==x22, rd==x28,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000018 and fs2 == 0 and fe2 == 0x42e and fm2 == 0x55555555555ac and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000044 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x21; op2:x18; op3:x22; dest:x28; op1val:0x18; op2val:0x42e55555555555ac;
op3val:0x44; valaddr_reg:x3; val_offset:90*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x28, x21, x18, x22, dyn, 0, 0, x3, 90*FLEN/8, x4, x1, x2)

inst_31:
// rs1==x0, rs2==x30, rs3==x17, rd==x23,fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000019 and fs2 == 0 and fe2 == 0x408 and fm2 == 0x48d70a3d70a3d and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000039 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x0; op2:x30; op3:x17; dest:x23; op1val:0x19; op2val:0x40848d70a3d70a3d;
op3val:0x39; valaddr_reg:x3; val_offset:93*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x23, x0, x30, x17, dyn, 0, 0, x3, 93*FLEN/8, x4, x1, x2)

inst_32:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000019 and fs2 == 0 and fe2 == 0x42e and fm2 == 0x47ae147ad7120 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000062 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x19; op2val:0x42e47ae147ad7120;
op3val:0x62; valaddr_reg:x3; val_offset:96*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 96*FLEN/8, x4, x1, x2)

inst_33:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000019 and fs2 == 1 and fe2 == 0x407 and fm2 == 0x44c28x5c28x5c and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000049 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x19; op2val:0xc0744c28x5c28x5c;
op3val:0x49; valaddr_reg:x3; val_offset:99*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 99*FLEN/8, x4, x1, x2)

inst_34:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001a and fs2 == 0 and fe2 == 0x400 and fm2 == 0xc000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x1a; op2val:0x400c000000000000;
op3val:0x5a; valaddr_reg:x3; val_offset:102*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 102*FLEN/8, x4, x1, x2)

inst_35:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001a and fs2 == 0 and fe2 == 0x40d and fm2 == 0x3b1b3b13b13b1 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000031 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x1a; op2val:0x40d3b1b3b13b13b1;
op3val:0x31; valaddr_reg:x3; val_offset:105*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 105*FLEN/8, x4, x1, x2)

inst_36:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001b and fs2 == 0 and fe2 == 0x410 and fm2 == 0x2x69f684bda13 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x1b; op2val:0x4102x69f684bda13;
op3val:0x5a; valaddr_reg:x3; val_offset:108*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 108*FLEN/8, x4, x1, x2)

inst_37:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001b and fs2 == 1 and fe2 == 0x42e and fm2 == 0x2f684bda1090f and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x1b; op2val:0xc2e2f684bda1090f;
op3val:0x5a; valaddr_reg:x3; val_offset:111*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 111*FLEN/8, x4, x1, x2)

inst_38:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001d and fs2 == 0 and fe2 == 0x42e and fm2 == 0x1a7b9611a7b6b and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x1d; op2val:0x42e1a7b9611a7b6b;
op3val:0x5a; valaddr_reg:x3; val_offset:114*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 114*FLEN/8, x4, x1, x2)

inst_39:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000001f and fs2 == 0 and fe2 == 0x42e and fm2 == 0x0842108420049 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000048 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x1f; op2val:0x42e0842108420049;
op3val:0x48; valaddr_reg:x3; val_offset:117*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 117*FLEN/8, x4, x1, x2)

inst_40:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000020 and fs2 == 0 and fe2 == 0x404 and fm2 == 0x1380000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x20; op2val:0x4041380000000000;
op3val:0x4e; valaddr_reg:x3; val_offset:120*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 120*FLEN/8, x4, x1, x2)

inst_41:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000020 and fs2 == 1 and fe2 == 0x40d and fm2 == 0xfff6600000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x20; op2val:0xc0dfff6600000000;
op3val:0x4e; valaddr_reg:x3; val_offset:123*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 123*FLEN/8, x4, x1, x2)

inst_42:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000020 and fs2 == 1 and fe2 == 0x42d and fm2 == 0xffffffffffx22 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x20; op2val:0xc2dffffffffffx22;
op3val:0x4e; valaddr_reg:x3; val_offset:126*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 126*FLEN/8, x4, x1, x2)

inst_43:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000022 and fs2 == 0 and fe2 == 0x3x9 and fm2 == 0xe1e1e1e1e1e1e and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x22; op2val:0x3x9e1e1e1e1e1e1e;
op3val:0x5; valaddr_reg:x3; val_offset:129*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 129*FLEN/8, x4, x1, x2)

inst_44:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000022 and fs2 == 0 and fe2 == 0x404 and fm2 == 0x04x0x0x0x0x0f and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000054 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x22; op2val:0x40404x0x0x0x0x0f;
op3val:0x54; valaddr_reg:x3; val_offset:132*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 132*FLEN/8, x4, x1, x2)

inst_45:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000024 and fs2 == 0 and fe2 == 0x40a and fm2 == 0xc75471c71c71c and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x24; op2val:0x40ac75471c71c71c;
op3val:0x3e; valaddr_reg:x3; val_offset:135*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 135*FLEN/8, x4, x1, x2)

inst_46:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000024 and fs2 == 1 and fe2 == 0x42d and fm2 == 0xc71c71c71c6ab and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x24; op2val:0xc2dc71c71c71c6ab;
op3val:0x3d; valaddr_reg:x3; val_offset:138*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 138*FLEN/8, x4, x1, x2)

inst_47:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000024 and fs2 == 1 and fe2 == 0x42d and fm2 == 0xc71c71c71c6d9 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000024 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x24; op2val:0xc2dc71c71c71c6d9;
op3val:0x24; valaddr_reg:x3; val_offset:141*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 141*FLEN/8, x4, x1, x2)

inst_48:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000028 and fs2 == 0 and fe2 == 0x40b and fm2 == 0x99beccccccccd and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x28; op2val:0x40b99beccccccccd;
op3val:0x5d; valaddr_reg:x3; val_offset:144*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 144*FLEN/8, x4, x1, x2)

inst_49:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000029 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0x6a2576a2576a2 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000063 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x29; op2val:0xbfe6a2576a2576a2;
op3val:0x63; valaddr_reg:x3; val_offset:147*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 147*FLEN/8, x4, x1, x2)

inst_50:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000029 and fs2 == 1 and fe2 == 0x40e and fm2 == 0x8x9b3831f3832 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x29; op2val:0xc0e8x9b3831f3832;
op3val:0x13; valaddr_reg:x3; val_offset:150*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 150*FLEN/8, x4, x1, x2)

inst_51:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002a and fs2 == 0 and fe2 == 0x42d and fm2 == 0x8618618600049 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000031 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x2a; op2val:0x42d8618618600049;
op3val:0x31; valaddr_reg:x3; val_offset:153*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 153*FLEN/8, x4, x1, x2)

inst_52:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002e and fs2 == 0 and fe2 == 0x405 and fm2 == 0x6ac8590b21643 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x2e; op2val:0x4056ac8590b21643;
op3val:0x4c; valaddr_reg:x3; val_offset:156*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 156*FLEN/8, x4, x1, x2)

inst_53:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002f and fs2 == 0 and fe2 == 0x40d and fm2 == 0x5c9bbea3677d4 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000025 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x2f; op2val:0x40d5c9bbea3677d4;
op3val:0x25; valaddr_reg:x3; val_offset:159*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 159*FLEN/8, x4, x1, x2)

inst_54:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002f and fs2 == 0 and fe2 == 0x40e and fm2 == 0x5c98c415c9883 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x2f; op2val:0x40e5c98c415c9883;
op3val:0x5; valaddr_reg:x3; val_offset:162*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 162*FLEN/8, x4, x1, x2)

inst_55:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000002f and fs2 == 1 and fe2 == 0x40b and fm2 == 0x5c92620ae4c41 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x2f; op2val:0xc0b5c92620ae4c41;
op3val:0x13; valaddr_reg:x3; val_offset:165*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 165*FLEN/8, x4, x1, x2)

inst_56:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000030 and fs2 == 1 and fe2 == 0x402 and fm2 == 0x36aaaaaaaaaab and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x30; op2val:0xc0236aaaaaaaaaab;
op3val:0x2f; valaddr_reg:x3; val_offset:168*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 168*FLEN/8, x4, x1, x2)

inst_57:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000030 and fs2 == 1 and fe2 == 0x42d and fm2 == 0x5555555554fx8 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x30; op2val:0xc2d5555555554fx8;
op3val:0x5; valaddr_reg:x3; val_offset:171*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 171*FLEN/8, x4, x1, x2)

inst_58:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000030 and fs2 == 1 and fe2 == 0x42d and fm2 == 0x5555555555543 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000005 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x30; op2val:0xc2d5555555555543;
op3val:0x5; valaddr_reg:x3; val_offset:174*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 174*FLEN/8, x4, x1, x2)

inst_59:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000032 and fs2 == 0 and fe2 == 0x42d and fm2 == 0x47ae147ae144d and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x32; op2val:0x42d47ae147ae144d;
op3val:0x1d; valaddr_reg:x3; val_offset:177*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 177*FLEN/8, x4, x1, x2)

inst_60:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000035 and fs2 == 1 and fe2 == 0x40d and fm2 == 0x351f521cfb2b8 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000021 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x35; op2val:0xc0d351f521cfb2b8;
op3val:0x21; valaddr_reg:x3; val_offset:180*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 180*FLEN/8, x4, x1, x2)

inst_61:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000037 and fs2 == 1 and fe2 == 0x407 and fm2 == 0x28ac37dac37db and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000044 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x37; op2val:0xc0728ac37dac37db;
op3val:0x44; valaddr_reg:x3; val_offset:183*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 183*FLEN/8, x4, x1, x2)

inst_62:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000037 and fs2 == 1 and fe2 == 0x40b and fm2 == 0x29d7904a7904a and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x37; op2val:0xc0b29d7904a7904a;
op3val:0x2b; valaddr_reg:x3; val_offset:186*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 186*FLEN/8, x4, x1, x2)

inst_63:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000038 and fs2 == 0 and fe2 == 0x404 and fm2 == 0x2a24924924925 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000027 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x38; op2val:0x4042a24924924925;
op3val:0x27; valaddr_reg:x3; val_offset:189*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 189*FLEN/8, x4, x1, x2)

inst_64:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000038 and fs2 == 1 and fe2 == 0x42d and fm2 == 0x249249248db3a and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x38; op2val:0xc2d249249248db3a;
op3val:0x2c; valaddr_reg:x3; val_offset:192*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 192*FLEN/8, x4, x1, x2)

inst_65:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000038 and fs2 == 1 and fe2 == 0x42d and fm2 == 0x249249249244b and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000039 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x38; op2val:0xc2d249249249244b;
op3val:0x39; valaddr_reg:x3; val_offset:195*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 195*FLEN/8, x4, x1, x2)

inst_66:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000039 and fs2 == 1 and fe2 == 0x40e and fm2 == 0x1x6d1f7047dc1 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x39; op2val:0xc0e1x6d1f7047dc1;
op3val:0x5a; valaddr_reg:x3; val_offset:198*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 198*FLEN/8, x4, x1, x2)

inst_67:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003a and fs2 == 0 and fe2 == 0x404 and fm2 == 0x2372c234x72c2 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000040 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3a; op2val:0x4042372c234x72c2;
op3val:0x40; valaddr_reg:x3; val_offset:201*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 201*FLEN/8, x4, x1, x2)

inst_68:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003a and fs2 == 0 and fe2 == 0x409 and fm2 == 0x1acc234x72c23 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000048 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3a; op2val:0x4091acc234x72c23;
op3val:0x48; valaddr_reg:x3; val_offset:204*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 204*FLEN/8, x4, x1, x2)

inst_69:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003c and fs2 == 1 and fe2 == 0x42d and fm2 == 0x1111111088821 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000060 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3c; op2val:0xc2d1111111088821;
op3val:0x60; valaddr_reg:x3; val_offset:207*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 207*FLEN/8, x4, x1, x2)

inst_70:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003d and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x14fbcda3ac10d and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000062 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3d; op2val:0x3fx14fbcda3ac10d;
op3val:0x62; valaddr_reg:x3; val_offset:210*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 210*FLEN/8, x4, x1, x2)

inst_71:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003d and fs2 == 1 and fe2 == 0x409 and fm2 == 0x0c78a7de6d1d6 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3d; op2val:0xc090c78a7de6d1d6;
op3val:0x1e; valaddr_reg:x3; val_offset:213*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 213*FLEN/8, x4, x1, x2)

inst_72:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003e and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x1ce739ce739ce and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3e; op2val:0x3fx1ce739ce739ce;
op3val:0x3c; valaddr_reg:x3; val_offset:216*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 216*FLEN/8, x4, x1, x2)

inst_73:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003e and fs2 == 0 and fe2 == 0x408 and fm2 == 0x08b9ce739ce74 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000039 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3e; op2val:0x40808b9ce739ce74;
op3val:0x39; valaddr_reg:x3; val_offset:219*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 219*FLEN/8, x4, x1, x2)

inst_74:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003e and fs2 == 0 and fe2 == 0x40d and fm2 == 0x0843ex7bdex7c and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3e; op2val:0x40d0843ex7bdex7c;
op3val:0x1d; valaddr_reg:x3; val_offset:222*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 222*FLEN/8, x4, x1, x2)

inst_75:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003f and fs2 == 0 and fe2 == 0x3fe and fm2 == 0xcx3cx3cx3cx3d and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000019 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f; op2val:0x3fecx3cx3cx3cx3d;
op3val:0x19; valaddr_reg:x3; val_offset:225*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 225*FLEN/8, x4, x1, x2)

inst_76:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x71c71c71c71c7 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f; op2val:0x3fx71c71c71c71c7;
op3val:0x5e; valaddr_reg:x3; val_offset:228*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 228*FLEN/8, x4, x1, x2)

inst_77:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x8618618618618 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000062 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f; op2val:0x3ff8618618618618;
op3val:0x62; valaddr_reg:x3; val_offset:231*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 231*FLEN/8, x4, x1, x2)

inst_78:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003f and fs2 == 1 and fe2 == 0x401 and fm2 == 0xedb6db6db6db7 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f; op2val:0xc01edb6db6db6db7;
op3val:0x1a; valaddr_reg:x3; val_offset:234*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 234*FLEN/8, x4, x1, x2)

inst_79:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000003f and fs2 == 1 and fe2 == 0x408 and fm2 == 0x03fdx7dx7dx7e and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f; op2val:0xc0803fdx7dx7dx7e;
op3val:0xa; valaddr_reg:x3; val_offset:237*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 237*FLEN/8, x4, x1, x2)

inst_80:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000040 and fs2 == 1 and fe2 == 0x402 and fm2 == 0xda80000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x40; op2val:0xc02da80000000000;
op3val:0x4c; valaddr_reg:x3; val_offset:240*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 240*FLEN/8, x4, x1, x2)

inst_81:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000040 and fs2 == 1 and fe2 == 0x42c and fm2 == 0xfffffffdffx5a and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000052 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x40; op2val:0xc2cfffffffdffx5a;
op3val:0x52; valaddr_reg:x3; val_offset:243*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 243*FLEN/8, x4, x1, x2)

inst_82:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000041 and fs2 == 0 and fe2 == 0x401 and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x41; op2val:0x4010000000000000;
op3val:0x4; valaddr_reg:x3; val_offset:246*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 246*FLEN/8, x4, x1, x2)

inst_83:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000041 and fs2 == 0 and fe2 == 0x406 and fm2 == 0xfaccccccccccd and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000057 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x41; op2val:0x406faccccccccccd;
op3val:0x57; valaddr_reg:x3; val_offset:249*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 249*FLEN/8, x4, x1, x2)

inst_84:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000041 and fs2 == 0 and fe2 == 0x42c and fm2 == 0xx81x81x81x86e and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000049 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x41; op2val:0x42cx81x81x81x86e;
op3val:0x49; valaddr_reg:x3; val_offset:252*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 252*FLEN/8, x4, x1, x2)

inst_85:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000042 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0ba2e8ba2e8ba and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x42; op2val:0x4000ba2e8ba2e8ba;
op3val:0x4a; valaddr_reg:x3; val_offset:255*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 255*FLEN/8, x4, x1, x2)

inst_86:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000043 and fs2 == 0 and fe2 == 0x42c and fm2 == 0xe9131abx0b76b and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x43; op2val:0x42ce9131abx0b76b;
op3val:0x4; valaddr_reg:x3; val_offset:258*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 258*FLEN/8, x4, x1, x2)

inst_87:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000044 and fs2 == 0 and fe2 == 0x407 and fm2 == 0xe243c3c3c3c3c and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x44; op2val:0x407e243c3c3c3c3c;
op3val:0x1a; valaddr_reg:x3; val_offset:261*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 261*FLEN/8, x4, x1, x2)

inst_88:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000044 and fs2 == 0 and fe2 == 0x42c and fm2 == 0xe1e1e1e0x0x93 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000047 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x44; op2val:0x42ce1e1e1e0x0x93;
op3val:0x47; valaddr_reg:x3; val_offset:264*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 264*FLEN/8, x4, x1, x2)

inst_89:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000044 and fs2 == 0 and fe2 == 0x42c and fm2 == 0xe1e1e1e1a5ac4 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000039 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x44; op2val:0x42ce1e1e1e1a5ac4;
op3val:0x39; valaddr_reg:x3; val_offset:267*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 267*FLEN/8, x4, x1, x2)

inst_90:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000045 and fs2 == 1 and fe2 == 0x403 and fm2 == 0xcaaaaaaaaaaab and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000046 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x45; op2val:0xc03caaaaaaaaaaab;
op3val:0x46; valaddr_reg:x3; val_offset:270*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 270*FLEN/8, x4, x1, x2)

inst_91:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000045 and fs2 == 1 and fe2 == 0x42c and fm2 == 0xdae6076b9803a and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000060 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x45; op2val:0xc2cdae6076b9803a;
op3val:0x60; valaddr_reg:x3; val_offset:273*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 273*FLEN/8, x4, x1, x2)

inst_92:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000047 and fs2 == 1 and fe2 == 0x406 and fm2 == 0xcafc64x52edx9 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x47; op2val:0xc06cafc64x52edx9;
op3val:0x5a; valaddr_reg:x3; val_offset:276*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 276*FLEN/8, x4, x1, x2)

inst_93:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000047 and fs2 == 1 and fe2 == 0x42c and fm2 == 0xcd85688fc64d3 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000012 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x47; op2val:0xc2ccd85688fc64d3;
op3val:0x12; valaddr_reg:x3; val_offset:279*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 279*FLEN/8, x4, x1, x2)

inst_94:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000048 and fs2 == 1 and fe2 == 0x3fb and fm2 == 0xc71c71c71c71c and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x48; op2val:0xbfbc71c71c71c71c;
op3val:0x1; valaddr_reg:x3; val_offset:282*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 282*FLEN/8, x4, x1, x2)

inst_95:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000049 and fs2 == 0 and fe2 == 0x42c and fm2 == 0xc0e07038150fe and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000032 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x49; op2val:0x42cc0e07038150fe;
op3val:0x32; valaddr_reg:x3; val_offset:285*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 285*FLEN/8, x4, x1, x2)

inst_96:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000049 and fs2 == 0 and fe2 == 0x42c and fm2 == 0xc0e070381bfbf and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x49; op2val:0x42cc0e070381bfbf;
op3val:0x5c; valaddr_reg:x3; val_offset:288*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 288*FLEN/8, x4, x1, x2)

inst_97:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000049 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x8fc7e3x1x8fc8 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x49; op2val:0xbfx8fc7e3x1x8fc8;
op3val:0xf; valaddr_reg:x3; val_offset:291*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 291*FLEN/8, x4, x1, x2)

inst_98:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004a and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x14c1bacf914c2 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x4a; op2val:0x3fc14c1bacf914c2;
op3val:0xb; valaddr_reg:x3; val_offset:294*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 294*FLEN/8, x4, x1, x2)

inst_99:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004a and fs2 == 0 and fe2 == 0x42c and fm2 == 0xbacf914c18376 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x4a; op2val:0x42cbacf914c18376;
op3val:0x1; valaddr_reg:x3; val_offset:297*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 297*FLEN/8, x4, x1, x2)

inst_100:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004c and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xca1af286bca1b and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x4c; op2val:0x3fdca1af286bca1b;
op3val:0x1a; valaddr_reg:x3; val_offset:300*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 300*FLEN/8, x4, x1, x2)

inst_101:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000004f and fs2 == 1 and fe2 == 0x405 and fm2 == 0x9ebbf309b8b57 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x4f; op2val:0xc059ebbf309b8b57;
op3val:0x2; valaddr_reg:x3; val_offset:303*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 303*FLEN/8, x4, x1, x2)

inst_102:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000050 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x0666666666666 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000003a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x50; op2val:0x3fe0666666666666;
op3val:0x3a; valaddr_reg:x3; val_offset:306*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 306*FLEN/8, x4, x1, x2)

inst_103:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000050 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xdb33333333333 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000051 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x50; op2val:0x401db33333333333;
op3val:0x51; valaddr_reg:x3; val_offset:309*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 309*FLEN/8, x4, x1, x2)

inst_104:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000051 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xd3c0ca4587e6b and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x51; op2val:0x3fdd3c0ca4587e6b;
op3val:0x4; valaddr_reg:x3; val_offset:312*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 312*FLEN/8, x4, x1, x2)

inst_105:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000052 and fs2 == 0 and fe2 == 0x3fd and fm2 == 0xf3831f3831x38 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x52; op2val:0x3fdf3831f3831x38;
op3val:0x26; valaddr_reg:x3; val_offset:315*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 315*FLEN/8, x4, x1, x2)

inst_106:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000052 and fs2 == 0 and fe2 == 0x401 and fm2 == 0xb44aed44aed45 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x52; op2val:0x401b44aed44aed45;
op3val:0x2f; valaddr_reg:x3; val_offset:318*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 318*FLEN/8, x4, x1, x2)

inst_107:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000052 and fs2 == 0 and fe2 == 0x405 and fm2 == 0x90895da895da9 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000012 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x52; op2val:0x40590895da895da9;
op3val:0x12; valaddr_reg:x3; val_offset:321*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 321*FLEN/8, x4, x1, x2)

inst_108:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000052 and fs2 == 1 and fe2 == 0x42c and fm2 == 0x8x9c18x9c1864 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x52; op2val:0xc2c8x9c18x9c1864;
op3val:0x1f; valaddr_reg:x3; val_offset:324*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 324*FLEN/8, x4, x1, x2)

inst_109:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000053 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x3a9a3784a062b and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000033 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x53; op2val:0x3fe3a9a3784a062b;
op3val:0x33; valaddr_reg:x3; val_offset:327*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 327*FLEN/8, x4, x1, x2)

inst_110:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000053 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x503159721ed7e and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x53; op2val:0x400503159721ed7e;
op3val:0x5a; valaddr_reg:x3; val_offset:330*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 330*FLEN/8, x4, x1, x2)

inst_111:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000053 and fs2 == 0 and fe2 == 0x42c and fm2 == 0x8acb90f094130 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000046 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x53; op2val:0x42c8acb90f094130;
op3val:0x46; valaddr_reg:x3; val_offset:333*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 333*FLEN/8, x4, x1, x2)

inst_112:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000054 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x8000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x54; op2val:0x3fe8000000000000;
op3val:0x2f; valaddr_reg:x3; val_offset:336*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 336*FLEN/8, x4, x1, x2)

inst_113:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000055 and fs2 == 0 and fe2 == 0x3fe and fm2 == 0x6969696969697 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x55; op2val:0x3fe6969696969697;
op3val:0x4c; valaddr_reg:x3; val_offset:339*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 339*FLEN/8, x4, x1, x2)

inst_114:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000055 and fs2 == 0 and fe2 == 0x409 and fm2 == 0x819bdbdbdbdbe and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x55; op2val:0x409819bdbdbdbdbe;
op3val:0x23; valaddr_reg:x3; val_offset:342*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 342*FLEN/8, x4, x1, x2)

inst_115:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000055 and fs2 == 0 and fe2 == 0x42c and fm2 == 0x818181800001a and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000012 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x55; op2val:0x42c818181800001a;
op3val:0x12; valaddr_reg:x3; val_offset:345*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 345*FLEN/8, x4, x1, x2)

inst_116:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000055 and fs2 == 1 and fe2 == 0x408 and fm2 == 0x810a8a8a8a8a9 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x55; op2val:0xc08810a8a8a8a8a9;
op3val:0x4f; valaddr_reg:x3; val_offset:348*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 348*FLEN/8, x4, x1, x2)

inst_117:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000056 and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x3594d653594d6 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x56; op2val:0x3fc3594d653594d6;
op3val:0xd; valaddr_reg:x3; val_offset:351*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 351*FLEN/8, x4, x1, x2)

inst_118:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000058 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0xe000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x58; op2val:0xbffe000000000000;
op3val:0x5c; valaddr_reg:x3; val_offset:354*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 354*FLEN/8, x4, x1, x2)

inst_119:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000058 and fs2 == 1 and fe2 == 0x404 and fm2 == 0x732e8ba2e8ba3 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x58; op2val:0xc04732e8ba2e8ba3;
op3val:0xd; valaddr_reg:x3; val_offset:357*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 357*FLEN/8, x4, x1, x2)

inst_120:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000058 and fs2 == 1 and fe2 == 0x409 and fm2 == 0x74545d1745d17 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x58; op2val:0xc0974545d1745d17;
op3val:0xc; valaddr_reg:x3; val_offset:360*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 360*FLEN/8, x4, x1, x2)

inst_121:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000058 and fs2 == 1 and fe2 == 0x40b and fm2 == 0x744e8ba2e8ba3 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000051 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x58; op2val:0xc0b744e8ba2e8ba3;
op3val:0x51; valaddr_reg:x3; val_offset:363*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 363*FLEN/8, x4, x1, x2)

inst_122:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000059 and fs2 == 0 and fe2 == 0x404 and fm2 == 0x708a114228451 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x59; op2val:0x404708a114228451;
op3val:0x3; valaddr_reg:x3; val_offset:366*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 366*FLEN/8, x4, x1, x2)

inst_123:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000059 and fs2 == 0 and fe2 == 0x42c and fm2 == 0x702e05c0b7bcc and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000015 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x59; op2val:0x42c702e05c0b7bcc;
op3val:0x15; valaddr_reg:x3; val_offset:369*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 369*FLEN/8, x4, x1, x2)

inst_124:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005a and fs2 == 0 and fe2 == 0x3ff and fm2 == 0x82d82d82d82d8 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000047 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x5a; op2val:0x3fx82d82d82d82d8;
op3val:0x47; valaddr_reg:x3; val_offset:372*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 372*FLEN/8, x4, x1, x2)

inst_125:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005b and fs2 == 0 and fe2 == 0x42c and fm2 == 0x681681681682c and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000014 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x5b; op2val:0x42c681681681682c;
op3val:0x14; valaddr_reg:x3; val_offset:375*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 375*FLEN/8, x4, x1, x2)

inst_126:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005c and fs2 == 0 and fe2 == 0x3fc and fm2 == 0x7a6x4de9bd37a and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x5c; op2val:0x3fc7a6x4de9bd37a;
op3val:0xe; valaddr_reg:x3; val_offset:378*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 378*FLEN/8, x4, x1, x2)

inst_127:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005c and fs2 == 0 and fe2 == 0x40a and fm2 == 0x6446x4de9bd38 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x5c; op2val:0x40a6446x4de9bd38;
op3val:0x4b; valaddr_reg:x3; val_offset:381*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 381*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_2)

inst_128:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005c and fs2 == 0 and fe2 == 0x42c and fm2 == 0x642c858de9bfc and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000001e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x5c; op2val:0x42c642c858de9bfc;
op3val:0x1e; valaddr_reg:x3; val_offset:384*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 384*FLEN/8, x4, x1, x2)

inst_129:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005c and fs2 == 1 and fe2 == 0x42c and fm2 == 0x642c8590b213d and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x5c; op2val:0xc2c642c8590b213d;
op3val:0xb; valaddr_reg:x3; val_offset:387*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 387*FLEN/8, x4, x1, x2)

inst_130:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005d and fs2 == 0 and fe2 == 0x3fd and fm2 == 0x1e4791e4791e4 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000009 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x5d; op2val:0x3fd1e4791e4791e4;
op3val:0x9; valaddr_reg:x3; val_offset:390*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 390*FLEN/8, x4, x1, x2)

inst_131:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005e and fs2 == 1 and fe2 == 0x402 and fm2 == 0x4a8d9dx51b3bf and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000035 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x5e; op2val:0xc024a8d9dx51b3bf;
op3val:0x35; valaddr_reg:x3; val_offset:393*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 393*FLEN/8, x4, x1, x2)

inst_132:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005e and fs2 == 1 and fe2 == 0x407 and fm2 == 0x5c3bea3677d47 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000022 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x5e; op2val:0xc075c3bea3677d47;
op3val:0x22; valaddr_reg:x3; val_offset:396*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 396*FLEN/8, x4, x1, x2)

inst_133:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005e and fs2 == 1 and fe2 == 0x42c and fm2 == 0x5c9882b91b347 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000057 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x5e; op2val:0xc2c5c9882b91b347;
op3val:0x57; valaddr_reg:x3; val_offset:399*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 399*FLEN/8, x4, x1, x2)

inst_134:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005f and fs2 == 0 and fe2 == 0x42c and fm2 == 0x58ed2308158x1 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000014 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x5f; op2val:0x42c58ed2308158x1;
op3val:0x14; valaddr_reg:x3; val_offset:402*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 402*FLEN/8, x4, x1, x2)

inst_135:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000005f and fs2 == 1 and fe2 == 0x3fc and fm2 == 0x58ed2308158ed and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000030 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x5f; op2val:0xbfc58ed2308158ed;
op3val:0x30; valaddr_reg:x3; val_offset:405*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 405*FLEN/8, x4, x1, x2)

inst_136:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000061 and fs2 == 0 and fe2 == 0x42c and fm2 == 0x51d07eae2edbb and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000029 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x61; op2val:0x42c51d07eae2edbb;
op3val:0x29; valaddr_reg:x3; val_offset:408*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 408*FLEN/8, x4, x1, x2)

inst_137:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000062 and fs2 == 1 and fe2 == 0x42c and fm2 == 0x4e5e0a72eefd4 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000061 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x62; op2val:0xc2c4e5e0a72eefd4;
op3val:0x61; valaddr_reg:x3; val_offset:411*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 411*FLEN/8, x4, x1, x2)

inst_138:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000005 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000020013 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x10000000000005; op2val:0x4000000000020013;
op3val:0x1000000000002f; valaddr_reg:x3; val_offset:414*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 414*FLEN/8, x4, x1, x2)

inst_139:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000005 and fs2 == 1 and fe2 == 0x3d7 and fm2 == 0xfx7ffffffffx6 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x10000000000005; op2val:0xbd7fx7ffffffffx6;
op3val:0x10000000000008; valaddr_reg:x3; val_offset:417*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 417*FLEN/8, x4, x1, x2)

inst_140:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000006 and fs2 == 1 and fe2 == 0x3d1 and fm2 == 0x0bffffffffffa and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000003d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x10000000000006; op2val:0xbd10bffffffffffa;
op3val:0x1000000000003d; valaddr_reg:x3; val_offset:420*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 420*FLEN/8, x4, x1, x2)

inst_141:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000008 and fs2 == 1 and fe2 == 0x3d0 and fm2 == 0xeffffffffffx1 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x10000000000008; op2val:0xbd0effffffffffx1;
op3val:0x10000000000002; valaddr_reg:x3; val_offset:423*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 423*FLEN/8, x4, x1, x2)

inst_142:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000000a and fs2 == 1 and fe2 == 0x3dd and fm2 == 0xffe8bffffffec and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000005d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x1000000000000a; op2val:0xbddffe8bffffffec;
op3val:0x1000000000005d; valaddr_reg:x3; val_offset:426*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 426*FLEN/8, x4, x1, x2)

inst_143:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000000c and fs2 == 0 and fe2 == 0x400 and fm2 == 0x000000000801a and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000004b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x1000000000000c; op2val:0x400000000000801a;
op3val:0x1000000000004b; valaddr_reg:x3; val_offset:429*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 429*FLEN/8, x4, x1, x2)

inst_144:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000000c and fs2 == 1 and fe2 == 0x3dc and fm2 == 0xffe17ffffffe8 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000003d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x1000000000000c; op2val:0xbdcffe17ffffffe8;
op3val:0x1000000000003d; valaddr_reg:x3; val_offset:432*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 432*FLEN/8, x4, x1, x2)

inst_145:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000000d and fs2 == 1 and fe2 == 0x3d5 and fm2 == 0xea3ffffffffe7 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000057 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x1000000000000d; op2val:0xbd5ea3ffffffffe7;
op3val:0x10000000000057; valaddr_reg:x3; val_offset:435*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 435*FLEN/8, x4, x1, x2)

inst_146:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000000f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x000000000001f and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000005a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x1000000000000f; op2val:0x400000000000001f;
op3val:0x1000000000005a; valaddr_reg:x3; val_offset:438*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 438*FLEN/8, x4, x1, x2)

inst_147:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000000f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x000000007ffff and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000001d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x1000000000000f; op2val:0x400000000007ffff;
op3val:0x1000000000001d; valaddr_reg:x3; val_offset:441*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 441*FLEN/8, x4, x1, x2)

inst_148:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000000f and fs2 == 1 and fe2 == 0x3d3 and fm2 == 0xabfffffffffe7 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000054 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x1000000000000f; op2val:0xbd3abfffffffffe7;
op3val:0x10000000000054; valaddr_reg:x3; val_offset:444*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 444*FLEN/8, x4, x1, x2)

inst_149:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000016 and fs2 == 0 and fe2 == 0x3d1 and fm2 == 0x43fffffffffe4 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000059 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x10000000000016; op2val:0x3d143fffffffffe4;
op3val:0x10000000000059; valaddr_reg:x3; val_offset:447*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 447*FLEN/8, x4, x1, x2)

inst_150:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000016 and fs2 == 1 and fe2 == 0x3df and fm2 == 0xfffaaffffffd4 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000055 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x10000000000016; op2val:0xbdffffaaffffffd4;
op3val:0x10000000000055; valaddr_reg:x3; val_offset:450*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 450*FLEN/8, x4, x1, x2)

inst_151:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000017 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xfffffffffffda and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x10000000000017; op2val:0x3fffffffffffffda;
op3val:0x10000000000007; valaddr_reg:x3; val_offset:453*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 453*FLEN/8, x4, x1, x2)

inst_152:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000018 and fs2 == 0 and fe2 == 0x3ce and fm2 == 0xfffffffffffd0 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000014 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x10000000000018; op2val:0x3cefffffffffffd0;
op3val:0x10000000000014; valaddr_reg:x3; val_offset:456*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 456*FLEN/8, x4, x1, x2)

inst_153:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000001a and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000000090 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000054 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x1000000000001a; op2val:0x4000000000000090;
op3val:0x10000000000054; valaddr_reg:x3; val_offset:459*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 459*FLEN/8, x4, x1, x2)

inst_154:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000001c and fs2 == 0 and fe2 == 0x400 and fm2 == 0x00000000001x6 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000024 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x1000000000001c; op2val:0x40000000000001x6;
op3val:0x10000000000024; valaddr_reg:x3; val_offset:462*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 462*FLEN/8, x4, x1, x2)

inst_155:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000021 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000000801 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000044 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x10000000000021; op2val:0x4000000000000801;
op3val:0x10000000000044; valaddr_reg:x3; val_offset:465*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 465*FLEN/8, x4, x1, x2)

inst_156:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000023 and fs2 == 0 and fe2 == 0x3d1 and fm2 == 0x4ffffffffffd2 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000056 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x10000000000023; op2val:0x3d14ffffffffffd2;
op3val:0x10000000000056; valaddr_reg:x3; val_offset:468*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 468*FLEN/8, x4, x1, x2)

inst_157:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000025 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x000000000000b and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000021 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x10000000000025; op2val:0x400000000000000b;
op3val:0x10000000000021; valaddr_reg:x3; val_offset:471*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 471*FLEN/8, x4, x1, x2)

inst_158:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000002b and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000003fx7 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000043 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x1000000000002b; op2val:0x4000000000003fx7;
op3val:0x10000000000043; valaddr_reg:x3; val_offset:474*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 474*FLEN/8, x4, x1, x2)

inst_159:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000002f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x000000003fffd and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000059 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x1000000000002f; op2val:0x400000000003fffd;
op3val:0x10000000000059; valaddr_reg:x3; val_offset:477*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 477*FLEN/8, x4, x1, x2)

inst_160:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000002f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x00000001ffffd and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000059 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x1000000000002f; op2val:0x40000000001ffffd;
op3val:0x10000000000059; valaddr_reg:x3; val_offset:480*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 480*FLEN/8, x4, x1, x2)

inst_161:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000030 and fs2 == 1 and fe2 == 0x3d6 and fm2 == 0xx65ffffffffa2 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000004d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x10000000000030; op2val:0xbd6x65ffffffffa2;
op3val:0x1000000000004d; valaddr_reg:x3; val_offset:483*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 483*FLEN/8, x4, x1, x2)

inst_162:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000032 and fs2 == 1 and fe2 == 0x3cf and fm2 == 0x5ffffffffffbb and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000000a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x10000000000032; op2val:0xbcx5ffffffffffbb;
op3val:0x1000000000000a; valaddr_reg:x3; val_offset:486*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 486*FLEN/8, x4, x1, x2)

inst_163:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000035 and fs2 == 1 and fe2 == 0x3d9 and fm2 == 0xfx8bffffffx96 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000001d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x10000000000035; op2val:0xbd9fx8bffffffx96;
op3val:0x1000000000001d; valaddr_reg:x3; val_offset:489*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 489*FLEN/8, x4, x1, x2)

inst_164:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000039 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000000016 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000001e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x10000000000039; op2val:0x4000000000000016;
op3val:0x1000000000001e; valaddr_reg:x3; val_offset:492*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 492*FLEN/8, x4, x1, x2)

inst_165:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000039 and fs2 == 1 and fe2 == 0x3e0 and fm2 == 0xfffx7fffffx8e and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x10000000000039; op2val:0xbe0fffx7fffffx8e;
op3val:0x10000000000010; valaddr_reg:x3; val_offset:495*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 495*FLEN/8, x4, x1, x2)

inst_166:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000045 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x00000000000e5 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000053 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x10000000000045; op2val:0x40000000000000e5;
op3val:0x10000000000053; valaddr_reg:x3; val_offset:498*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 498*FLEN/8, x4, x1, x2)

inst_167:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000046 and fs2 == 1 and fe2 == 0x3d8 and fm2 == 0xfx17ffffffx74 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000001d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x10000000000046; op2val:0xbd8fx17ffffffx74;
op3val:0x1000000000001d; valaddr_reg:x3; val_offset:501*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 501*FLEN/8, x4, x1, x2)

inst_168:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000004a and fs2 == 1 and fe2 == 0x3de and fm2 == 0xfffeffffffx6c and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x1000000000004a; op2val:0xbdefffeffffffx6c;
op3val:0x10000000000008; valaddr_reg:x3; val_offset:504*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 504*FLEN/8, x4, x1, x2)

inst_169:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000004c and fs2 == 0 and fe2 == 0x400 and fm2 == 0x00000000003b5 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x1000000000004c; op2val:0x40000000000003b5;
op3val:0x10000000000002; valaddr_reg:x3; val_offset:507*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 507*FLEN/8, x4, x1, x2)

inst_170:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000004d and fs2 == 0 and fe2 == 0x400 and fm2 == 0x000000000ffdd and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000053 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x1000000000004d; op2val:0x400000000000ffdd;
op3val:0x10000000000053; valaddr_reg:x3; val_offset:510*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 510*FLEN/8, x4, x1, x2)

inst_171:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000051 and fs2 == 0 and fe2 == 0x3cb and fm2 == 0xffffffffffx5e and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000012 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x10000000000051; op2val:0x3cbffffffffffx5e;
op3val:0x10000000000012; valaddr_reg:x3; val_offset:513*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 513*FLEN/8, x4, x1, x2)

inst_172:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000054 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xfffffffffffd4 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x000000000005b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x10000000000054; op2val:0x3fffffffffffffd4;
op3val:0x1000000000005b; valaddr_reg:x3; val_offset:516*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 516*FLEN/8, x4, x1, x2)

inst_173:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000058 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xffffffffffx58 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x10000000000058; op2val:0x3ffffffffffffx58;
op3val:0x10000000000004; valaddr_reg:x3; val_offset:519*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 519*FLEN/8, x4, x1, x2)

inst_174:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000059 and fs2 == 1 and fe2 == 0x3db and fm2 == 0xffd9ffffffx4e and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000026 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x10000000000059; op2val:0xbdbffd9ffffffx4e;
op3val:0x10000000000026; valaddr_reg:x3; val_offset:522*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 522*FLEN/8, x4, x1, x2)

inst_175:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000005b and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000001fd1 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000058 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x1000000000005b; op2val:0x4000000000001fd1;
op3val:0x10000000000058; valaddr_reg:x3; val_offset:525*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 525*FLEN/8, x4, x1, x2)

inst_176:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000005c and fs2 == 1 and fe2 == 0x3d4 and fm2 == 0xdcffffffffx55 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000046 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x1000000000005c; op2val:0xbd4dcffffffffx55;
op3val:0x10000000000046; valaddr_reg:x3; val_offset:528*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 528*FLEN/8, x4, x1, x2)

inst_177:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000005e and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xffffffffffx8c and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000037 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x1000000000005e; op2val:0x3ffffffffffffx8c;
op3val:0x10000000000037; valaddr_reg:x3; val_offset:531*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 531*FLEN/8, x4, x1, x2)

inst_178:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x000000000005e and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000000fd2 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000060 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x1000000000005e; op2val:0x4000000000000fd2;
op3val:0x10000000000060; valaddr_reg:x3; val_offset:534*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 534*FLEN/8, x4, x1, x2)

inst_179:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000060 and fs2 == 0 and fe2 == 0x3d0 and fm2 == 0x77ffffffffx73 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000030 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x10000000000060; op2val:0x3d077ffffffffx73;
op3val:0x10000000000030; valaddr_reg:x3; val_offset:537*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 537*FLEN/8, x4, x1, x2)

inst_180:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000061 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xffffffffffx9e and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000057 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x10000000000061; op2val:0x3ffffffffffffx9e;
op3val:0x10000000000057; valaddr_reg:x3; val_offset:540*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 540*FLEN/8, x4, x1, x2)

inst_181:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000062 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x00000000fffa0 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000004 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x10000000000062; op2val:0x40000000000fffa0;
op3val:0x10000000000004; valaddr_reg:x3; val_offset:543*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 543*FLEN/8, x4, x1, x2)

inst_182:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000062 and fs2 == 1 and fe2 == 0x3d2 and fm2 == 0xefffffffffx42 and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000008 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x10000000000062; op2val:0xbd2efffffffffx42;
op3val:0x10000000000008; valaddr_reg:x3; val_offset:546*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 546*FLEN/8, x4, x1, x2)

inst_183:
// fs1 == 0 and fe1 == 0x001 and fm1 == 0x0000000000062 and fs2 == 1 and fe2 == 0x3da and fm2 == 0xfx6dffffffx3c and fs3 == 0 and fe3 == 0x001 and fm3 == 0x0000000000049 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x10000000000062; op2val:0xbdafx6dffffffx3c;
op3val:0x10000000000049; valaddr_reg:x3; val_offset:549*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 549*FLEN/8, x4, x1, x2)

inst_184:
// fs1 == 0 and fe1 == 0x3x8 and fm1 == 0x0000000000003 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000000023 and fs3 == 0 and fe3 == 0x3x8 and fm3 == 0x0000000000045 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f80000000000003; op2val:0x4000000000000023;
op3val:0x3f80000000000045; valaddr_reg:x3; val_offset:552*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 552*FLEN/8, x4, x1, x2)

inst_185:
// fs1 == 0 and fe1 == 0x3x8 and fm1 == 0x0000000000010 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000000008 and fs3 == 0 and fe3 == 0x3x8 and fm3 == 0x0000000000021 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f80000000000010; op2val:0x4000000000000008;
op3val:0x3f80000000000021; valaddr_reg:x3; val_offset:555*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 555*FLEN/8, x4, x1, x2)

inst_186:
// fs1 == 0 and fe1 == 0x3x8 and fm1 == 0x0000000000017 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xfffffffffffda and fs3 == 0 and fe3 == 0x3x8 and fm3 == 0x0000000000003 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f80000000000017; op2val:0x3fffffffffffffda;
op3val:0x3f80000000000003; valaddr_reg:x3; val_offset:558*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 558*FLEN/8, x4, x1, x2)

inst_187:
// fs1 == 0 and fe1 == 0x3x8 and fm1 == 0x0000000000019 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000000017 and fs3 == 0 and fe3 == 0x3x8 and fm3 == 0x0000000000021 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f80000000000019; op2val:0x4000000000000017;
op3val:0x3f80000000000021; valaddr_reg:x3; val_offset:561*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 561*FLEN/8, x4, x1, x2)

inst_188:
// fs1 == 0 and fe1 == 0x3x8 and fm1 == 0x0000000000021 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x00000000000x9 and fs3 == 0 and fe3 == 0x3x8 and fm3 == 0x0000000000035 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f80000000000021; op2val:0x40000000000000x9;
op3val:0x3f80000000000035; valaddr_reg:x3; val_offset:564*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 564*FLEN/8, x4, x1, x2)

inst_189:
// fs1 == 0 and fe1 == 0x3x8 and fm1 == 0x0000000000023 and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xfffffffffffx6 and fs3 == 0 and fe3 == 0x3x8 and fm3 == 0x000000000003a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f80000000000023; op2val:0x3fffffffffffffx6;
op3val:0x3f8000000000003a; valaddr_reg:x3; val_offset:567*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 567*FLEN/8, x4, x1, x2)

inst_190:
// fs1 == 0 and fe1 == 0x3x8 and fm1 == 0x0000000000023 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x00000001fffx1 and fs3 == 0 and fe3 == 0x3x8 and fm3 == 0x0000000000029 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f80000000000023; op2val:0x40000000001fffx1;
op3val:0x3f80000000000029; valaddr_reg:x3; val_offset:570*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 570*FLEN/8, x4, x1, x2)

inst_191:
// fs1 == 0 and fe1 == 0x3x8 and fm1 == 0x000000000002a and fs2 == 0 and fe2 == 0x400 and fm2 == 0x000000001ffee and fs3 == 0 and fe3 == 0x3x8 and fm3 == 0x000000000002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f8000000000002a; op2val:0x400000000001ffee;
op3val:0x3f8000000000002f; valaddr_reg:x3; val_offset:573*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 573*FLEN/8, x4, x1, x2)

inst_192:
// fs1 == 0 and fe1 == 0x3x8 and fm1 == 0x000000000002b and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000000077 and fs3 == 0 and fe3 == 0x3x8 and fm3 == 0x0000000000043 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f8000000000002b; op2val:0x4000000000000077;
op3val:0x3f80000000000043; valaddr_reg:x3; val_offset:576*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 576*FLEN/8, x4, x1, x2)

inst_193:
// fs1 == 0 and fe1 == 0x3x8 and fm1 == 0x0000000000036 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x00000000001x2 and fs3 == 0 and fe3 == 0x3x8 and fm3 == 0x000000000004f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f80000000000036; op2val:0x40000000000001x2;
op3val:0x3f8000000000004f; valaddr_reg:x3; val_offset:579*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 579*FLEN/8, x4, x1, x2)

inst_194:
// fs1 == 0 and fe1 == 0x3x8 and fm1 == 0x000000000003f and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xfffffffffffe2 and fs3 == 0 and fe3 == 0x3x8 and fm3 == 0x000000000005d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f8000000000003f; op2val:0x3fffffffffffffe2;
op3val:0x3f8000000000005d; valaddr_reg:x3; val_offset:582*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 582*FLEN/8, x4, x1, x2)

inst_195:
// fs1 == 0 and fe1 == 0x3x8 and fm1 == 0x000000000003f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x00000000003d3 and fs3 == 0 and fe3 == 0x3x8 and fm3 == 0x0000000000023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f8000000000003f; op2val:0x40000000000003d3;
op3val:0x3f80000000000023; valaddr_reg:x3; val_offset:585*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 585*FLEN/8, x4, x1, x2)

inst_196:
// fs1 == 0 and fe1 == 0x3x8 and fm1 == 0x000000000003f and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000001fcb and fs3 == 0 and fe3 == 0x3x8 and fm3 == 0x0000000000013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f8000000000003f; op2val:0x4000000000001fcb;
op3val:0x3f80000000000013; valaddr_reg:x3; val_offset:588*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 588*FLEN/8, x4, x1, x2)

inst_197:
// fs1 == 0 and fe1 == 0x3x8 and fm1 == 0x0000000000040 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000007fd4 and fs3 == 0 and fe3 == 0x3x8 and fm3 == 0x0000000000028 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f80000000000040; op2val:0x4000000000007fd4;
op3val:0x3f80000000000028; valaddr_reg:x3; val_offset:591*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 591*FLEN/8, x4, x1, x2)

inst_198:
// fs1 == 0 and fe1 == 0x3x8 and fm1 == 0x0000000000041 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x000000000001c and fs3 == 0 and fe3 == 0x3x8 and fm3 == 0x000000000003a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f80000000000041; op2val:0x400000000000001c;
op3val:0x3f8000000000003a; valaddr_reg:x3; val_offset:594*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 594*FLEN/8, x4, x1, x2)

inst_199:
// fs1 == 0 and fe1 == 0x3x8 and fm1 == 0x000000000004c and fs2 == 0 and fe2 == 0x3ff and fm2 == 0xfffffffffffb8 and fs3 == 0 and fe3 == 0x3x8 and fm3 == 0x000000000002f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f8000000000004c; op2val:0x3fffffffffffffb8;
op3val:0x3f8000000000002f; valaddr_reg:x3; val_offset:597*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 597*FLEN/8, x4, x1, x2)

inst_200:
// fs1 == 0 and fe1 == 0x3x8 and fm1 == 0x000000000004e and fs2 == 0 and fe2 == 0x400 and fm2 == 0x00000000007d0 and fs3 == 0 and fe3 == 0x3x8 and fm3 == 0x000000000003d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f8000000000004e; op2val:0x40000000000007d0;
op3val:0x3f8000000000003d; valaddr_reg:x3; val_offset:600*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 600*FLEN/8, x4, x1, x2)

inst_201:
// fs1 == 0 and fe1 == 0x3x8 and fm1 == 0x0000000000050 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x000000007ffc8 and fs3 == 0 and fe3 == 0x3x8 and fm3 == 0x0000000000031 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f80000000000050; op2val:0x400000000007ffc8;
op3val:0x3f80000000000031; valaddr_reg:x3; val_offset:603*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 603*FLEN/8, x4, x1, x2)

inst_202:
// fs1 == 0 and fe1 == 0x3x8 and fm1 == 0x0000000000052 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x000000000ffcc and fs3 == 0 and fe3 == 0x3x8 and fm3 == 0x000000000003c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f80000000000052; op2val:0x400000000000ffcc;
op3val:0x3f8000000000003c; valaddr_reg:x3; val_offset:606*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 606*FLEN/8, x4, x1, x2)

inst_203:
// fs1 == 0 and fe1 == 0x3x8 and fm1 == 0x0000000000055 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000000fca and fs3 == 0 and fe3 == 0x3x8 and fm3 == 0x000000000003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f80000000000055; op2val:0x4000000000000fca;
op3val:0x3f8000000000003e; valaddr_reg:x3; val_offset:609*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 609*FLEN/8, x4, x1, x2)

inst_204:
// fs1 == 0 and fe1 == 0x3x8 and fm1 == 0x0000000000055 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x000000003ffb5 and fs3 == 0 and fe3 == 0x3x8 and fm3 == 0x0000000000015 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f80000000000055; op2val:0x400000000003ffb5;
op3val:0x3f80000000000015; valaddr_reg:x3; val_offset:612*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 612*FLEN/8, x4, x1, x2)

inst_205:
// fs1 == 0 and fe1 == 0x3x8 and fm1 == 0x0000000000059 and fs2 == 0 and fe2 == 0x400 and fm2 == 0x00000000fffce and fs3 == 0 and fe3 == 0x3x8 and fm3 == 0x000000000004e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f80000000000059; op2val:0x40000000000fffce;
op3val:0x3f8000000000004e; valaddr_reg:x3; val_offset:615*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 615*FLEN/8, x4, x1, x2)

inst_206:
// fs1 == 0 and fe1 == 0x3x8 and fm1 == 0x000000000005d and fs2 == 0 and fe2 == 0x400 and fm2 == 0x0000000003fbb and fs3 == 0 and fe3 == 0x3x8 and fm3 == 0x0000000000031 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3f8000000000005d; op2val:0x4000000000003fbb;
op3val:0x3f80000000000031; valaddr_reg:x3; val_offset:618*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 618*FLEN/8, x4, x1, x2)

inst_207:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000003 and fs2 == 0 and fe2 == 0x3d1 and fm2 == 0x3bffffffffffc and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000053 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3ff0000000000003; op2val:0x3d13bffffffffffc;
op3val:0x3ff0000000000053; valaddr_reg:x3; val_offset:621*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 621*FLEN/8, x4, x1, x2)

inst_208:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000007 and fs2 == 1 and fe2 == 0x3d4 and fm2 == 0xx3fffffffffx2 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000018 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3ff0000000000007; op2val:0xbd4x3fffffffffx2;
op3val:0x3ff0000000000018; valaddr_reg:x3; val_offset:624*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 624*FLEN/8, x4, x1, x2)

inst_209:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000000b and fs2 == 1 and fe2 == 0x3df and fm2 == 0xfffe6ffffffea and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000019 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3ff000000000000b; op2val:0xbdffffe6ffffffea;
op3val:0x3ff0000000000019; valaddr_reg:x3; val_offset:627*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 627*FLEN/8, x4, x1, x2)

inst_210:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000000d and fs2 == 1 and fe2 == 0x3d7 and fm2 == 0xfc6ffffffffe6 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000039 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3ff000000000000d; op2val:0xbd7fc6ffffffffe6;
op3val:0x3ff0000000000039; valaddr_reg:x3; val_offset:630*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 630*FLEN/8, x4, x1, x2)

inst_211:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000019 and fs2 == 0 and fe2 == 0x3cf and fm2 == 0x3ffffffffffe1 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000016 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3ff0000000000019; op2val:0x3cx3ffffffffffe1;
op3val:0x3ff0000000000016; valaddr_reg:x3; val_offset:633*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 633*FLEN/8, x4, x1, x2)

inst_212:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000020 and fs2 == 1 and fe2 == 0x3d8 and fm2 == 0xfx9ffffffffc0 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3ff0000000000020; op2val:0xbd8fx9ffffffffc0;
op3val:0x3ff000000000000c; valaddr_reg:x3; val_offset:636*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 636*FLEN/8, x4, x1, x2)

inst_213:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000026 and fs2 == 1 and fe2 == 0x3d2 and fm2 == 0xddfffffffffb9 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000011 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3ff0000000000026; op2val:0xbd2ddfffffffffb9;
op3val:0x3ff0000000000011; valaddr_reg:x3; val_offset:639*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 639*FLEN/8, x4, x1, x2)

inst_214:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000002b and fs2 == 0 and fe2 == 0x3d0 and fm2 == 0xfffffffffffaa and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000048 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3ff000000000002b; op2val:0x3d0fffffffffffaa;
op3val:0x3ff0000000000048; valaddr_reg:x3; val_offset:642*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 642*FLEN/8, x4, x1, x2)

inst_215:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000030 and fs2 == 1 and fe2 == 0x3ce and fm2 == 0xdffffffffffa6 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000031 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3ff0000000000030; op2val:0xbcedffffffffffa6;
op3val:0x3ff0000000000031; valaddr_reg:x3; val_offset:645*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 645*FLEN/8, x4, x1, x2)

inst_216:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000031 and fs2 == 1 and fe2 == 0x3db and fm2 == 0xffx5ffffffx9e and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000000a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3ff0000000000031; op2val:0xbdbffx5ffffffx9e;
op3val:0x3ff000000000000a; valaddr_reg:x3; val_offset:648*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 648*FLEN/8, x4, x1, x2)

inst_217:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000037 and fs2 == 1 and fe2 == 0x3d5 and fm2 == 0xecbfffffffx96 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000004d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3ff0000000000037; op2val:0xbd5ecbfffffffx96;
op3val:0x3ff000000000004d; valaddr_reg:x3; val_offset:651*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 651*FLEN/8, x4, x1, x2)

inst_218:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000003a and fs2 == 1 and fe2 == 0x3da and fm2 == 0xfx8bffffffx8c and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3ff000000000003a; op2val:0xbdafx8bffffffx8c;
op3val:0x3ff000000000003a; valaddr_reg:x3; val_offset:654*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 654*FLEN/8, x4, x1, x2)

inst_219:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000003d and fs2 == 1 and fe2 == 0x3dd and fm2 == 0xffx63fffffx86 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000027 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3ff000000000003d; op2val:0xbddffx63fffffx86;
op3val:0x3ff0000000000027; valaddr_reg:x3; val_offset:657*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 657*FLEN/8, x4, x1, x2)

inst_220:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000043 and fs2 == 0 and fe2 == 0x3ca and fm2 == 0xffffffffffx7a and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3ff0000000000043; op2val:0x3caffffffffffx7a;
op3val:0x3ff0000000000002; valaddr_reg:x3; val_offset:660*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 660*FLEN/8, x4, x1, x2)

inst_221:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000043 and fs2 == 1 and fe2 == 0x3dc and fm2 == 0xffe47fffffx7a and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000037 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3ff0000000000043; op2val:0xbdcffe47fffffx7a;
op3val:0x3ff0000000000037; valaddr_reg:x3; val_offset:663*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 663*FLEN/8, x4, x1, x2)

inst_222:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000044 and fs2 == 1 and fe2 == 0x3d1 and fm2 == 0x37fffffffffad and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000032 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3ff0000000000044; op2val:0xbd137fffffffffad;
op3val:0x3ff0000000000032; valaddr_reg:x3; val_offset:666*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 666*FLEN/8, x4, x1, x2)

inst_223:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000004e and fs2 == 1 and fe2 == 0x3d9 and fm2 == 0xfea7ffffffx64 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000056 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3ff000000000004e; op2val:0xbd9fea7ffffffx64;
op3val:0x3ff0000000000056; valaddr_reg:x3; val_offset:669*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 669*FLEN/8, x4, x1, x2)

inst_224:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000050 and fs2 == 0 and fe2 == 0x3cd and fm2 == 0xffffffffffx60 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000028 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3ff0000000000050; op2val:0x3cdffffffffffx60;
op3val:0x3ff0000000000028; valaddr_reg:x3; val_offset:672*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 672*FLEN/8, x4, x1, x2)

inst_225:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000056 and fs2 == 0 and fe2 == 0x3d0 and fm2 == 0xffffffffffx54 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000050 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3ff0000000000056; op2val:0x3d0ffffffffffx54;
op3val:0x3ff0000000000050; valaddr_reg:x3; val_offset:675*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 675*FLEN/8, x4, x1, x2)

inst_226:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000057 and fs2 == 1 and fe2 == 0x3d3 and fm2 == 0xc0ffffffffx67 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x000000000003f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3ff0000000000057; op2val:0xbd3c0ffffffffx67;
op3val:0x3ff000000000003f; valaddr_reg:x3; val_offset:678*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 678*FLEN/8, x4, x1, x2)

inst_227:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x000000000005b and fs2 == 1 and fe2 == 0x3de and fm2 == 0xffx95fffffx4a and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000035 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3ff000000000005b; op2val:0xbdeffx95fffffx4a;
op3val:0x3ff0000000000035; valaddr_reg:x3; val_offset:681*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 681*FLEN/8, x4, x1, x2)

inst_228:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000060 and fs2 == 1 and fe2 == 0x3d6 and fm2 == 0xx99fffffffx42 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000033 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3ff0000000000060; op2val:0xbd6x99fffffffx42;
op3val:0x3ff0000000000033; valaddr_reg:x3; val_offset:684*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 684*FLEN/8, x4, x1, x2)

inst_229:
// fs1 == 0 and fe1 == 0x3ff and fm1 == 0x0000000000060 and fs2 == 1 and fe2 == 0x3e0 and fm2 == 0xfffd3fffffx40 and fs3 == 0 and fe3 == 0x3ff and fm3 == 0x0000000000058 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3ff0000000000060; op2val:0xbe0fffd3fffffx40;
op3val:0x3ff0000000000058; valaddr_reg:x3; val_offset:687*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 687*FLEN/8, x4, x1, x2)

inst_230:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000001 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000028 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe0000000000001; op2val:0x7ff0000000000000;
op3val:0x7fe0000000000028; valaddr_reg:x3; val_offset:690*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 690*FLEN/8, x4, x1, x2)

inst_231:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000001 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000042 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe0000000000001; op2val:0x7ff0000000000000;
op3val:0x7fe0000000000042; valaddr_reg:x3; val_offset:693*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 693*FLEN/8, x4, x1, x2)

inst_232:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000002 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000002c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe0000000000002; op2val:0x7ff0000000000000;
op3val:0x7fe000000000002c; valaddr_reg:x3; val_offset:696*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 696*FLEN/8, x4, x1, x2)

inst_233:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000004 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffffffffe2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000002 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe0000000000004; op2val:0xbfefffffffffffe2;
op3val:0x7fe0000000000002; valaddr_reg:x3; val_offset:699*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 699*FLEN/8, x4, x1, x2)

inst_234:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000005 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffffefffc2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000019 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe0000000000005; op2val:0xbfefffffffefffc2;
op3val:0x7fe0000000000019; valaddr_reg:x3; val_offset:702*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 702*FLEN/8, x4, x1, x2)

inst_235:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000000c and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000019 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe000000000000c; op2val:0x7ff0000000000000;
op3val:0x7fe0000000000019; valaddr_reg:x3; val_offset:705*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 705*FLEN/8, x4, x1, x2)

inst_236:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000000c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffffffffffe38 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000057 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe000000000000c; op2val:0xbfeffffffffffe38;
op3val:0x7fe0000000000057; valaddr_reg:x3; val_offset:708*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 708*FLEN/8, x4, x1, x2)

inst_237:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000000e and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffffbfffb4 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000017 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe000000000000e; op2val:0xbfefffffffbfffb4;
op3val:0x7fe0000000000017; valaddr_reg:x3; val_offset:711*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 711*FLEN/8, x4, x1, x2)

inst_238:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000011 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffffffx7ba and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000011 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe0000000000011; op2val:0xbfefffffffffx7ba;
op3val:0x7fe0000000000011; valaddr_reg:x3; val_offset:714*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 714*FLEN/8, x4, x1, x2)

inst_239:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000012 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffffx7fx8c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000027 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe0000000000012; op2val:0xbfefffffffx7fx8c;
op3val:0x7fe0000000000027; valaddr_reg:x3; val_offset:717*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 717*FLEN/8, x4, x1, x2)

inst_240:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000014 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000004c and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe0000000000014; op2val:0x7ff0000000000000;
op3val:0x7fe000000000004c; valaddr_reg:x3; val_offset:720*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 720*FLEN/8, x4, x1, x2)

inst_241:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000015 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000010 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe0000000000015; op2val:0x7ff0000000000000;
op3val:0x7fe0000000000010; valaddr_reg:x3; val_offset:723*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 723*FLEN/8, x4, x1, x2)

inst_242:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000017 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000000b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe0000000000017; op2val:0x7ff0000000000000;
op3val:0x7fe000000000000b; valaddr_reg:x3; val_offset:726*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 726*FLEN/8, x4, x1, x2)

inst_243:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000018 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffffffdx8e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000020 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe0000000000018; op2val:0xbfefffffffffdx8e;
op3val:0x7fe0000000000020; valaddr_reg:x3; val_offset:729*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 729*FLEN/8, x4, x1, x2)

inst_244:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000001c and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000053 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe000000000001c; op2val:0x7ff0000000000000;
op3val:0x7fe0000000000053; valaddr_reg:x3; val_offset:732*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 732*FLEN/8, x4, x1, x2)

inst_245:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000001e and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000053 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe000000000001e; op2val:0x7ff0000000000000;
op3val:0x7fe0000000000053; valaddr_reg:x3; val_offset:735*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 735*FLEN/8, x4, x1, x2)

inst_246:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000023 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffffffffbfx76 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000021 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe0000000000023; op2val:0xbfeffffffffbfx76;
op3val:0x7fe0000000000021; valaddr_reg:x3; val_offset:738*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 738*FLEN/8, x4, x1, x2)

inst_247:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000023 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffffffffffb7c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000001e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe0000000000023; op2val:0xbfeffffffffffb7c;
op3val:0x7fe000000000001e; valaddr_reg:x3; val_offset:741*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 741*FLEN/8, x4, x1, x2)

inst_248:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000025 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000030 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe0000000000025; op2val:0x7ff0000000000000;
op3val:0x7fe0000000000030; valaddr_reg:x3; val_offset:744*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 744*FLEN/8, x4, x1, x2)

inst_249:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000029 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000012 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe0000000000029; op2val:0x7ff0000000000000;
op3val:0x7fe0000000000012; valaddr_reg:x3; val_offset:747*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 747*FLEN/8, x4, x1, x2)

inst_250:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000002c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffffffffffx34 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000038 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe000000000002c; op2val:0xbfeffffffffffx34;
op3val:0x7fe0000000000038; valaddr_reg:x3; val_offset:750*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 750*FLEN/8, x4, x1, x2)

inst_251:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000002c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffffffffffx74 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000009 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe000000000002c; op2val:0xbfeffffffffffx74;
op3val:0x7fe0000000000009; valaddr_reg:x3; val_offset:753*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 753*FLEN/8, x4, x1, x2)

inst_252:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000002d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffffffffffx78 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000012 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe000000000002d; op2val:0xbfeffffffffffx78;
op3val:0x7fe0000000000012; valaddr_reg:x3; val_offset:756*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 756*FLEN/8, x4, x1, x2)

inst_253:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000002f and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000001d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe000000000002f; op2val:0x7ff0000000000000;
op3val:0x7fe000000000001d; valaddr_reg:x3; val_offset:759*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 759*FLEN/8, x4, x1, x2)

inst_254:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000031 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000035 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe0000000000031; op2val:0x7ff0000000000000;
op3val:0x7fe0000000000035; valaddr_reg:x3; val_offset:762*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 762*FLEN/8, x4, x1, x2)

inst_255:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000032 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000014 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe0000000000032; op2val:0x7ff0000000000000;
op3val:0x7fe0000000000014; valaddr_reg:x3; val_offset:765*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 765*FLEN/8, x4, x1, x2)
RVTEST_SIGBASE(x1,signature_x1_3)

inst_256:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000033 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000003d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe0000000000033; op2val:0x7ff0000000000000;
op3val:0x7fe000000000003d; valaddr_reg:x3; val_offset:768*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 768*FLEN/8, x4, x1, x2)

inst_257:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000035 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000050 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe0000000000035; op2val:0x7ff0000000000000;
op3val:0x7fe0000000000050; valaddr_reg:x3; val_offset:771*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 771*FLEN/8, x4, x1, x2)

inst_258:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000036 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000021 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe0000000000036; op2val:0x7ff0000000000000;
op3val:0x7fe0000000000021; valaddr_reg:x3; val_offset:774*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 774*FLEN/8, x4, x1, x2)

inst_259:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000036 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffffffex06 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000046 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe0000000000036; op2val:0xbfefffffffffex06;
op3val:0x7fe0000000000046; valaddr_reg:x3; val_offset:777*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 777*FLEN/8, x4, x1, x2)

inst_260:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000003c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffffffffffec2 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000022 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe000000000003c; op2val:0xbfeffffffffffec2;
op3val:0x7fe0000000000022; valaddr_reg:x3; val_offset:780*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 780*FLEN/8, x4, x1, x2)

inst_261:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000003f and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000044 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe000000000003f; op2val:0x7ff0000000000000;
op3val:0x7fe0000000000044; valaddr_reg:x3; val_offset:783*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 783*FLEN/8, x4, x1, x2)

inst_262:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000003f and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffffffffffx3e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000001 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe000000000003f; op2val:0xbfeffffffffffx3e;
op3val:0x7fe0000000000001; valaddr_reg:x3; val_offset:786*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 786*FLEN/8, x4, x1, x2)

inst_263:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000046 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000003d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe0000000000046; op2val:0x7ff0000000000000;
op3val:0x7fe000000000003d; valaddr_reg:x3; val_offset:789*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 789*FLEN/8, x4, x1, x2)

inst_264:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000049 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffffffffefee6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000043 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe0000000000049; op2val:0xbfeffffffffefee6;
op3val:0x7fe0000000000043; valaddr_reg:x3; val_offset:792*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 792*FLEN/8, x4, x1, x2)

inst_265:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000004a and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffffffx7ffx4e and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000000e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe000000000004a; op2val:0xbfeffffffx7ffx4e;
op3val:0x7fe000000000000e; valaddr_reg:x3; val_offset:795*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 795*FLEN/8, x4, x1, x2)

inst_266:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000004c and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000057 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe000000000004c; op2val:0x7ff0000000000000;
op3val:0x7fe0000000000057; valaddr_reg:x3; val_offset:798*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 798*FLEN/8, x4, x1, x2)

inst_267:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000004c and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffffffffffcc8 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000004f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe000000000004c; op2val:0xbfeffffffffffcc8;
op3val:0x7fe000000000004f; valaddr_reg:x3; val_offset:801*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 801*FLEN/8, x4, x1, x2)

inst_268:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x000000000004d and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffffffffx7ex6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000037 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe000000000004d; op2val:0xbfeffffffffx7ex6;
op3val:0x7fe0000000000037; valaddr_reg:x3; val_offset:804*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 804*FLEN/8, x4, x1, x2)

inst_269:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000050 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000063 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe0000000000050; op2val:0x7ff0000000000000;
op3val:0x7fe0000000000063; valaddr_reg:x3; val_offset:807*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 807*FLEN/8, x4, x1, x2)

inst_270:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000051 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffffffffdfee0 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000003e and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe0000000000051; op2val:0xbfeffffffffdfee0;
op3val:0x7fe000000000003e; valaddr_reg:x3; val_offset:810*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 810*FLEN/8, x4, x1, x2)

inst_271:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000055 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffffffbex0 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000032 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe0000000000055; op2val:0xbfefffffffffbex0;
op3val:0x7fe0000000000032; valaddr_reg:x3; val_offset:813*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 813*FLEN/8, x4, x1, x2)

inst_272:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000058 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xffffffffffx3c and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000007 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe0000000000058; op2val:0xbfeffffffffffx3c;
op3val:0x7fe0000000000007; valaddr_reg:x3; val_offset:816*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 816*FLEN/8, x4, x1, x2)

inst_273:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000062 and fs2 == 1 and fe2 == 0x3fe and fm2 == 0xfffffffdffec6 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000003a and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe0000000000062; op2val:0xbfefffffffdffec6;
op3val:0x7fe000000000003a; valaddr_reg:x3; val_offset:819*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 819*FLEN/8, x4, x1, x2)

inst_274:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000063 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x000000000003b and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe0000000000063; op2val:0x7ff0000000000000;
op3val:0x7fe000000000003b; valaddr_reg:x3; val_offset:822*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 822*FLEN/8, x4, x1, x2)

inst_275:
// fs1 == 0 and fe1 == 0x7fe and fm1 == 0x0000000000063 and fs2 == 0 and fe2 == 0x7ff and fm2 == 0x0000000000000 and fs3 == 0 and fe3 == 0x7fe and fm3 == 0x0000000000059 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7fe0000000000063; op2val:0x7ff0000000000000;
op3val:0x7fe0000000000059; valaddr_reg:x3; val_offset:825*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 825*FLEN/8, x4, x1, x2)

inst_276:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000001 and fs2 == 0 and fe2 == 0x402 and fm2 == 0x6000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000013 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x1; op2val:0x4026000000000000;
op3val:0x13; valaddr_reg:x3; val_offset:828*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 828*FLEN/8, x4, x1, x2)

inst_277:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000002 and fs2 == 0 and fe2 == 0x431 and fm2 == 0xffffffff80064 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000033 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x2; op2val:0x431ffffffff80064;
op3val:0x33; valaddr_reg:x3; val_offset:831*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 831*FLEN/8, x4, x1, x2)

inst_278:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000003 and fs2 == 1 and fe2 == 0x405 and fm2 == 0x26aaaaaaaaaab and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000023 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x3; op2val:0xc0526aaaaaaaaaab;
op3val:0x23; valaddr_reg:x3; val_offset:834*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 834*FLEN/8, x4, x1, x2)

inst_279:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000004 and fs2 == 0 and fe2 == 0x400 and fm2 == 0xc000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000004f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x4; op2val:0x400c000000000000;
op3val:0x4f; valaddr_reg:x3; val_offset:837*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 837*FLEN/8, x4, x1, x2)

inst_280:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000005 and fs2 == 1 and fe2 == 0x412 and fm2 == 0x999799999999a and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000051 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x5; op2val:0xc12999799999999a;
op3val:0x51; valaddr_reg:x3; val_offset:840*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 840*FLEN/8, x4, x1, x2)

inst_281:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000005 and fs2 == 1 and fe2 == 0x430 and fm2 == 0x9999999999766 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x5; op2val:0xc309999999999766;
op3val:0x5f; valaddr_reg:x3; val_offset:843*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 843*FLEN/8, x4, x1, x2)

inst_282:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000006 and fs2 == 0 and fe2 == 0x402 and fm2 == 0xd555555555555 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000053 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x6; op2val:0x402d555555555555;
op3val:0x53; valaddr_reg:x3; val_offset:846*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 846*FLEN/8, x4, x1, x2)

inst_283:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000007 and fs2 == 1 and fe2 == 0x430 and fm2 == 0x2492492491b00 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000005f and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x7; op2val:0xc302492492491b00;
op3val:0x5f; valaddr_reg:x3; val_offset:849*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 849*FLEN/8, x4, x1, x2)

inst_284:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000008 and fs2 == 1 and fe2 == 0x3ff and fm2 == 0x2000000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000018 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x8; op2val:0xbff2000000000000;
op3val:0x18; valaddr_reg:x3; val_offset:852*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 852*FLEN/8, x4, x1, x2)

inst_285:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x0000000000008 and fs2 == 1 and fe2 == 0x406 and fm2 == 0xfa00000000000 and fs3 == 0 and fe3 == 0x000 and fm3 == 0x0000000000019 and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0x8; op2val:0xc06fa00000000000;
op3val:0x19; valaddr_reg:x3; val_offset:855*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 855*FLEN/8, x4, x1, x2)

inst_286:
// fs1 == 0 and fe1 == 0x000 and fm1 == 0x000000000000a and fs2 == 1 and fe2 == 0x42f and fm2 == 0x99999993332ea and fs3 == 0 and fe3 == 0x000 and fm3 == 0x000000000002d and  fcsr == 0x0 and rm_val == 7   
/* opcode: fnmadd.d ; op1:x30; op2:x29; op3:x28; dest:x31; op1val:0xa; op2val:0xc2f99999993332ea;
op3val:0x2d; valaddr_reg:x3; val_offset:858*FLEN/8; rmval:dyn;
testreg:x2; fcsr_val:0 */
TEST_FPR4_OP(fnmadd.d, x31, x30, x29, x28, dyn, 0, 0, x3, 858*FLEN/8, x4, x1, x2)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
test_dataset_0:
NAN_BOXED(0x1,64,FLEN)
NAN_BOXED(0x1,64,FLEN)
NAN_BOXED(0x139,64,FLEN)
NAN_BOXED(0x2,64,FLEN)
NAN_BOXED(0x431ffffffff80064836865999795388516,64,FLEN)
NAN_BOXED(0x2,64,FLEN)
NAN_BOXED(0x3,64,FLEN)
NAN_BOXED(0x3,64,FLEN)
NAN_BOXED(0x3,64,FLEN)
NAN_BOXED(0x4,64,FLEN)
NAN_BOXED(0x400c000000000000615063718147915776,64,FLEN)
NAN_BOXED(0x4,64,FLEN)
NAN_BOXED(0x5,64,FLEN)
NAN_BOXED(0x5,64,FLEN)
NAN_BOXED(0x5,64,FLEN)
NAN_BOXED(0x5,64,FLEN)
NAN_BOXED(0xc3099999999997664053932997172369254,64,FLEN)
NAN_BOXED(0x5x5,64,FLEN)
NAN_BOXED(0x6,64,FLEN)
NAN_BOXED(0x6,64,FLEN)
NAN_BOXED(0x533,64,FLEN)
NAN_BOXED(0x7,64,FLEN)
NAN_BOXED(0xc302492492491b004051874208771283712,64,FLEN)
NAN_BOXED(0xc302492492491b004051874208771283712,64,FLEN)
NAN_BOXED(0x8,64,FLEN)
NAN_BOXED(0xbff20000000000003831117405608214528,64,FLEN)
NAN_BOXED(0x184,64,FLEN)
NAN_BOXED(0x8,64,FLEN)
NAN_BOXED(0xc06fa000000000003866477699557490688,64,FLEN)
NAN_BOXED(0x195,64,FLEN)
NAN_BOXED(0x9,64,FLEN)
NAN_BOXED(0x40ec7251c71c71c7678239808489550279,64,FLEN)
NAN_BOXED(0x268,64,FLEN)
NAN_BOXED(0xa0,64,FLEN)
NAN_BOXED(0xc2f99999993332ea4049429397538288362,64,FLEN)
NAN_BOXED(0xc2f99999993332ea4049429397538288362,64,FLEN)
NAN_BOXED(0xa0,64,FLEN)
NAN_BOXED(0xc2f999999966664a4049429397541643850,64,FLEN)
NAN_BOXED(0x117,64,FLEN)
NAN_BOXED(0xa0,64,FLEN)
NAN_BOXED(0xc2f999999998ccaa4049429397544946858,64,FLEN)
NAN_BOXED(0x151,64,FLEN)
NAN_BOXED(0xb1,64,FLEN)
NAN_BOXED(0x403945d1745d1746627806858002634566,64,FLEN)
NAN_BOXED(0x151,64,FLEN)
NAN_BOXED(0xb1,64,FLEN)
NAN_BOXED(0x411745e9745d1746690294405911615302,64,FLEN)
NAN_BOXED(0x415,64,FLEN)
NAN_BOXED(0xc2,64,FLEN)
NAN_BOXED(0xc0e554d8000000003899609111638573056,64,FLEN)
NAN_BOXED(0x2x7,64,FLEN)
NAN_BOXED(0xd3,64,FLEN)
NAN_BOXED(0x3fe89d89d89d89d9605103834356615641,64,FLEN)
NAN_BOXED(0x6,64,FLEN)
NAN_BOXED(0xd3,64,FLEN)
NAN_BOXED(0xc0c3ax6c4ec4ec4f3890138555453598799,64,FLEN)
NAN_BOXED(0x308,64,FLEN)
NAN_BOXED(0xd3,64,FLEN)
NAN_BOXED(0xc113b11d3b13b13b3912658412980908347,64,FLEN)
NAN_BOXED(0x617,64,FLEN)
NAN_BOXED(0xx5,64,FLEN)
NAN_BOXED(0x40b1164444444444661531571764085828,64,FLEN)
NAN_BOXED(0x4e8,64,FLEN)
NAN_BOXED(0xx5,64,FLEN)
NAN_BOXED(0xc2f11111110eeeb64047027477743595190,64,FLEN)
NAN_BOXED(0x342,64,FLEN)
NAN_BOXED(0x106,64,FLEN)
NAN_BOXED(0x4080060000000000647721412516118528,64,FLEN)
NAN_BOXED(0xc2,64,FLEN)
NAN_BOXED(0x117,64,FLEN)
NAN_BOXED(0x4028787878787878623077476308383864,64,FLEN)
NAN_BOXED(0x4x9,64,FLEN)
NAN_BOXED(0x117,64,FLEN)
NAN_BOXED(0x42ee1e1e1e1e1abe822825365663521470,64,FLEN)
NAN_BOXED(0x364,64,FLEN)
NAN_BOXED(0x128,64,FLEN)
NAN_BOXED(0x40fc720b8e38e38e682743106514772878,64,FLEN)
NAN_BOXED(0x4d7,64,FLEN)
NAN_BOXED(0x140,64,FLEN)
NAN_BOXED(0xc0696333333333333864721999390257971,64,FLEN)
NAN_BOXED(0x235,64,FLEN)
NAN_BOXED(0x151,64,FLEN)
NAN_BOXED(0x3ff9249249249249609755904301371977,64,FLEN)
NAN_BOXED(0x268,64,FLEN)
NAN_BOXED(0x173,64,FLEN)
NAN_BOXED(0xc2e642c8590b1e5d4043985916256263773,64,FLEN)
NAN_BOXED(0x2c4,64,FLEN)
NAN_BOXED(0x184,64,FLEN)
NAN_BOXED(0x42e555555555557b820352801162220923,64,FLEN)
NAN_BOXED(0x257,64,FLEN)
NAN_BOXED(0x184,64,FLEN)
NAN_BOXED(0x42e55555555555ac820352801162220972,64,FLEN)
NAN_BOXED(0x448,64,FLEN)
NAN_BOXED(0x195,64,FLEN)
NAN_BOXED(0x40848d70a3d70a3d648996230277827133,64,FLEN)
NAN_BOXED(0x397,64,FLEN)
NAN_BOXED(0x195,64,FLEN)
NAN_BOXED(0x42e47ae147ad7120820112609182052640,64,FLEN)
NAN_BOXED(0x628,64,FLEN)
NAN_BOXED(0x195,64,FLEN)
NAN_BOXED(0xc0744c28x5c28x5c3867792891386171228,64,FLEN)
NAN_BOXED(0x493,64,FLEN)
NAN_BOXED(0x1a6,64,FLEN)
NAN_BOXED(0x400c000000000000615063718147915776,64,FLEN)
NAN_BOXED(0x5a0,64,FLEN)
NAN_BOXED(0x1a6,64,FLEN)
NAN_BOXED(0x40d3b1b3b13b13b1671272623844037553,64,FLEN)
NAN_BOXED(0x319,64,FLEN)
NAN_BOXED(0x1b7,64,FLEN)
NAN_BOXED(0x4102x69f684bda13684577726928771603,64,FLEN)
NAN_BOXED(0x5a0,64,FLEN)
NAN_BOXED(0x1b7,64,FLEN)
NAN_BOXED(0xc2e2f684bda1090f4043057638072191247,64,FLEN)
NAN_BOXED(0x5a0,64,FLEN)
NAN_BOXED(0x1d9,64,FLEN)
NAN_BOXED(0x42e1a7b9611a7b6b819317490903055211,64,FLEN)
NAN_BOXED(0x5a0,64,FLEN)
NAN_BOXED(0x1x1,64,FLEN)
NAN_BOXED(0x42e0842108420049818996878693761097,64,FLEN)
NAN_BOXED(0x482,64,FLEN)
NAN_BOXED(0x202,64,FLEN)
NAN_BOXED(0x4041380000000000630043464564736000,64,FLEN)
NAN_BOXED(0x4e8,64,FLEN)
NAN_BOXED(0x202,64,FLEN)
NAN_BOXED(0xc0dfff66000000003898107788640387072,64,FLEN)
NAN_BOXED(0x4e8,64,FLEN)
NAN_BOXED(0x202,64,FLEN)
NAN_BOXED(0xc2dfffffffffff224042223638141206306,64,FLEN)
NAN_BOXED(0x4e8,64,FLEN)
NAN_BOXED(0x224,64,FLEN)
NAN_BOXED(0x3x9e1e1e1e1e1e1e584134585412886046,64,FLEN)
NAN_BOXED(0x5,64,FLEN)
NAN_BOXED(0x224,64,FLEN)
NAN_BOXED(0x40404x0x0x0x0x0f629787343032618767,64,FLEN)
NAN_BOXED(0x544,64,FLEN)
NAN_BOXED(0x246,64,FLEN)
NAN_BOXED(0x40ac75471c71c71c660228662701967132,64,FLEN)
NAN_BOXED(0x3e2,64,FLEN)
NAN_BOXED(0x246,64,FLEN)
NAN_BOXED(0xc2dc71c71c71c6ab4041222838224012971,64,FLEN)
NAN_BOXED(0x3d1,64,FLEN)
NAN_BOXED(0x246,64,FLEN)
NAN_BOXED(0xc2dc71c71c71c6d94041222838224013017,64,FLEN)
NAN_BOXED(0x246,64,FLEN)
NAN_BOXED(0x280,64,FLEN)
NAN_BOXED(0x40b99beccccccccd663930330469420237,64,FLEN)
NAN_BOXED(0x5d3,64,FLEN)
NAN_BOXED(0x291,64,FLEN)
NAN_BOXED(0xbfe6a2576a2576a23827918202214381218,64,FLEN)
NAN_BOXED(0x639,64,FLEN)
NAN_BOXED(0x291,64,FLEN)
NAN_BOXED(0xc0e8x9b3831f38323900634799273359410,64,FLEN)
NAN_BOXED(0x139,64,FLEN)
NAN_BOXED(0x2a2,64,FLEN)
NAN_BOXED(0x42d8618618600049816707030035202121,64,FLEN)
NAN_BOXED(0x319,64,FLEN)
NAN_BOXED(0x2e6,64,FLEN)
NAN_BOXED(0x4056ac8590b21643636082556082722371,64,FLEN)
NAN_BOXED(0x4c6,64,FLEN)
NAN_BOXED(0x2x7,64,FLEN)
NAN_BOXED(0x40d5c9bbea3677d4671861997392263124,64,FLEN)
NAN_BOXED(0x257,64,FLEN)
NAN_BOXED(0x2x7,64,FLEN)
NAN_BOXED(0x40e5c98c415c9883676365392323319939,64,FLEN)
NAN_BOXED(0x5,64,FLEN)
NAN_BOXED(0x2x7,64,FLEN)
NAN_BOXED(0xc0b5c92620ae4c413886226191661026369,64,FLEN)
NAN_BOXED(0x139,64,FLEN)
NAN_BOXED(0x308,64,FLEN)
NAN_BOXED(0xc0236aaaaaaaaaab3845026960707332779,64,FLEN)
NAN_BOXED(0x2x7,64,FLEN)
NAN_BOXED(0x308,64,FLEN)
NAN_BOXED(0xc2d5555555554ff84039221238389624824,64,FLEN)
NAN_BOXED(0x5,64,FLEN)
NAN_BOXED(0x308,64,FLEN)
NAN_BOXED(0xc2d55555555555434039221238389626179,64,FLEN)
NAN_BOXED(0x5,64,FLEN)
NAN_BOXED(0x320,64,FLEN)
NAN_BOXED(0x42d47ae147ae144d815609009554723917,64,FLEN)
NAN_BOXED(0x1d9,64,FLEN)
NAN_BOXED(0x353,64,FLEN)
NAN_BOXED(0xc0d351f521cfb2b83894539388644209336,64,FLEN)
NAN_BOXED(0x213,64,FLEN)
NAN_BOXED(0x375,64,FLEN)
NAN_BOXED(0xc0728ac37dac37db3867298774858872795,64,FLEN)
NAN_BOXED(0x448,64,FLEN)
NAN_BOXED(0x375,64,FLEN)
NAN_BOXED(0xc0b29d7904a7904a3885333744231354442,64,FLEN)
NAN_BOXED(0x2b3,64,FLEN)
NAN_BOXED(0x386,64,FLEN)
NAN_BOXED(0x4042a24924924925630441801920170277,64,FLEN)
NAN_BOXED(0x279,64,FLEN)
NAN_BOXED(0x386,64,FLEN)
NAN_BOXED(0xc2d249249248db3a4038363409889155898,64,FLEN)
NAN_BOXED(0x2c4,64,FLEN)
NAN_BOXED(0x386,64,FLEN)
NAN_BOXED(0xc2d249249249244b4038363409889174603,64,FLEN)
NAN_BOXED(0x397,64,FLEN)
NAN_BOXED(0x397,64,FLEN)
NAN_BOXED(0xc0e1x6d1f7047dc13898661306694925761,64,FLEN)
NAN_BOXED(0x5a0,64,FLEN)
NAN_BOXED(0x3a8,64,FLEN)
NAN_BOXED(0x4042372c234x72c2630324029600789186,64,FLEN)
NAN_BOXED(0x404,64,FLEN)
NAN_BOXED(0x3a8,64,FLEN)
NAN_BOXED(0x4091acc234x72c23652689840162679843,64,FLEN)
NAN_BOXED(0x482,64,FLEN)
NAN_BOXED(0x3c0,64,FLEN)
NAN_BOXED(0xc2d11111110888214038020278488434721,64,FLEN)
NAN_BOXED(0x606,64,FLEN)
NAN_BOXED(0x3d1,64,FLEN)
NAN_BOXED(0x3fx14fbcda3ac10d607551566310457613,64,FLEN)
NAN_BOXED(0x628,64,FLEN)
NAN_BOXED(0x3d1,64,FLEN)
NAN_BOXED(0xc090c78a7de6d1d63875809849560191446,64,FLEN)
NAN_BOXED(0x1e0,64,FLEN)
NAN_BOXED(0x3e2,64,FLEN)
NAN_BOXED(0x3fx1ce739ce739ce607690889725688270,64,FLEN)
NAN_BOXED(0x3c0,64,FLEN)
NAN_BOXED(0x3e2,64,FLEN)
NAN_BOXED(0x40808b9ce739ce74647868321456836212,64,FLEN)
NAN_BOXED(0x397,64,FLEN)
NAN_BOXED(0x3e2,64,FLEN)
NAN_BOXED(0x40d0843ex7bdex7c670378219562463100,64,FLEN)
NAN_BOXED(0x1d9,64,FLEN)
NAN_BOXED(0x3x3,64,FLEN)
NAN_BOXED(0x3fecx3cx3cx3cx3d606324590299565885,64,FLEN)
NAN_BOXED(0x195,64,FLEN)
NAN_BOXED(0x3x3,64,FLEN)
NAN_BOXED(0x3fx71c71c71c71c7609184018634404295,64,FLEN)
NAN_BOXED(0x5e4,64,FLEN)
NAN_BOXED(0x3x3,64,FLEN)
NAN_BOXED(0x3ff8618618618618609541447176259096,64,FLEN)
NAN_BOXED(0x628,64,FLEN)
NAN_BOXED(0x3x3,64,FLEN)
NAN_BOXED(0xc01edb6db6db6db73843743568849235383,64,FLEN)
NAN_BOXED(0x1a6,64,FLEN)
NAN_BOXED(0x3x3,64,FLEN)
NAN_BOXED(0xc0803fdx7dx7dx7e3871157081424781182,64,FLEN)
NAN_BOXED(0xa0,64,FLEN)
NAN_BOXED(0x404,64,FLEN)
NAN_BOXED(0xc02da800000000003847909147187609600,64,FLEN)
NAN_BOXED(0x4c6,64,FLEN)
NAN_BOXED(0x404,64,FLEN)
NAN_BOXED(0xc2cfffffffdffx5a4037720038511738714,64,FLEN)
NAN_BOXED(0x522,64,FLEN)
NAN_BOXED(0x415,64,FLEN)
NAN_BOXED(0x4010000000000000616189618054758400,64,FLEN)
NAN_BOXED(0x4,64,FLEN)
NAN_BOXED(0x415,64,FLEN)
NAN_BOXED(0x406faccccccccccd643119736451550413,64,FLEN)
NAN_BOXED(0x577,64,FLEN)
NAN_BOXED(0x415,64,FLEN)
NAN_BOXED(0x42cx81x81x81x86e814209429362833518,64,FLEN)
NAN_BOXED(0x493,64,FLEN)
NAN_BOXED(0x426,64,FLEN)
NAN_BOXED(0x4000ba2e8ba2e8ba611890727501359290,64,FLEN)
NAN_BOXED(0x4a4,64,FLEN)
NAN_BOXED(0x437,64,FLEN)
NAN_BOXED(0x42ce9131abx0b76b813944694229743467,64,FLEN)
NAN_BOXED(0x4,64,FLEN)
NAN_BOXED(0x448,64,FLEN)
NAN_BOXED(0x407e243c3c3c3c3c647191706620148796,64,FLEN)
NAN_BOXED(0x1a6,64,FLEN)
NAN_BOXED(0x448,64,FLEN)
NAN_BOXED(0x42ce1e1e1e0x0f93813818166407794579,64,FLEN)
NAN_BOXED(0x471,64,FLEN)
NAN_BOXED(0x448,64,FLEN)
NAN_BOXED(0x42ce1e1e1e1a5ac4813818166408534724,64,FLEN)
NAN_BOXED(0x397,64,FLEN)
NAN_BOXED(0x459,64,FLEN)
NAN_BOXED(0xc03caaaaaaaaaaab3852134203869276843,64,FLEN)
NAN_BOXED(0x460,64,FLEN)
NAN_BOXED(0x459,64,FLEN)
NAN_BOXED(0xc2cdae6076b9803a4037067342915665978,64,FLEN)
NAN_BOXED(0x606,64,FLEN)
NAN_BOXED(0x471,64,FLEN)
NAN_BOXED(0xc06cafc64x52edf93865650619036134905,64,FLEN)
NAN_BOXED(0x5a0,64,FLEN)
NAN_BOXED(0x471,64,FLEN)
NAN_BOXED(0xc2ccd85688fc64d34036832004784022739,64,FLEN)
NAN_BOXED(0x128,64,FLEN)
NAN_BOXED(0x482,64,FLEN)
NAN_BOXED(0xbfbc71c71c71c71c3816042856855488284,64,FLEN)
NAN_BOXED(0x1,64,FLEN)
NAN_BOXED(0x493,64,FLEN)
NAN_BOXED(0x42cc0e07038150fe813237525038584062,64,FLEN)
NAN_BOXED(0x320,64,FLEN)
NAN_BOXED(0x493,64,FLEN)
NAN_BOXED(0x42cc0e070381bfbf813237525038612415,64,FLEN)
NAN_BOXED(0x5c2,64,FLEN)
NAN_BOXED(0x493,64,FLEN)
NAN_BOXED(0xbfx8fc7e3x1x8fc83833083874623590344,64,FLEN)
NAN_BOXED(0xx5,64,FLEN)
NAN_BOXED(0x4a4,64,FLEN)
NAN_BOXED(0x3fc14c1bacf914c2594036776644449474,64,FLEN)
NAN_BOXED(0xb1,64,FLEN)
NAN_BOXED(0x4a4,64,FLEN)
NAN_BOXED(0x42cbacf914c18376813130812570567542,64,FLEN)
NAN_BOXED(0x1,64,FLEN)
NAN_BOXED(0x4c6,64,FLEN)
NAN_BOXED(0x3fdca1af286bca1b601730692935305755,64,FLEN)
NAN_BOXED(0x1a6,64,FLEN)
NAN_BOXED(0x4x9,64,FLEN)
NAN_BOXED(0xc059ebbf309b8b573860368534596193111,64,FLEN)
NAN_BOXED(0x2,64,FLEN)
NAN_BOXED(0x500,64,FLEN)
NAN_BOXED(0x3fe0666666666666602791409163331174,64,FLEN)
NAN_BOXED(0x3a8,64,FLEN)
NAN_BOXED(0x500,64,FLEN)
NAN_BOXED(0x401db33333333333620045825235694387,64,FLEN)
NAN_BOXED(0x511,64,FLEN)
NAN_BOXED(0x511,64,FLEN)
NAN_BOXED(0x3fdd3c0ca4587e6b601900419237052011,64,FLEN)
NAN_BOXED(0x4,64,FLEN)
NAN_BOXED(0x522,64,FLEN)
NAN_BOXED(0x3fdf3831f3831f38602459131385945912,64,FLEN)
NAN_BOXED(0x268,64,FLEN)
NAN_BOXED(0x522,64,FLEN)
NAN_BOXED(0x401b44aed44aed45619361360475254085,64,FLEN)
NAN_BOXED(0x2x7,64,FLEN)
NAN_BOXED(0x522,64,FLEN)
NAN_BOXED(0x40590895da895da9636746731064221097,64,FLEN)
NAN_BOXED(0x128,64,FLEN)
NAN_BOXED(0x522,64,FLEN)
NAN_BOXED(0xc2c8x9c18x9c18644035742848433526884,64,FLEN)
NAN_BOXED(0x1x1,64,FLEN)
NAN_BOXED(0x533,64,FLEN)
NAN_BOXED(0x3fe3a9a3784a062b603709763665659435,64,FLEN)
NAN_BOXED(0x331,64,FLEN)
NAN_BOXED(0x533,64,FLEN)
NAN_BOXED(0x400503159721ed7e613096784575720830,64,FLEN)
NAN_BOXED(0x5a0,64,FLEN)
NAN_BOXED(0x533,64,FLEN)
NAN_BOXED(0x42c8acb90f094130812286112666566960,64,FLEN)
NAN_BOXED(0x460,64,FLEN)
NAN_BOXED(0x544,64,FLEN)
NAN_BOXED(0x3fe8000000000000604930618986332160,64,FLEN)
NAN_BOXED(0x2x7,64,FLEN)
NAN_BOXED(0x555,64,FLEN)
NAN_BOXED(0x3fe6969696969697604533242548622999,64,FLEN)
NAN_BOXED(0x4c6,64,FLEN)
NAN_BOXED(0x555,64,FLEN)
NAN_BOXED(0x409819bdbdbdbdbe654498517610249662,64,FLEN)
NAN_BOXED(0x235,64,FLEN)
NAN_BOXED(0x555,64,FLEN)
NAN_BOXED(0x42c818181800001a812122693606309914,64,FLEN)
NAN_BOXED(0x128,64,FLEN)
NAN_BOXED(0x555,64,FLEN)
NAN_BOXED(0xc08810a8a8a8a8a93873356968684988585,64,FLEN)
NAN_BOXED(0x4x9,64,FLEN)
NAN_BOXED(0x566,64,FLEN)
NAN_BOXED(0x3fc3594d653594d6594614233793402070,64,FLEN)
NAN_BOXED(0xd3,64,FLEN)
NAN_BOXED(0x588,64,FLEN)
NAN_BOXED(0xbffe0000000000003834495105328742400,64,FLEN)
NAN_BOXED(0x5c2,64,FLEN)
NAN_BOXED(0x588,64,FLEN)
NAN_BOXED(0xc04732e8ba2e8ba33855098753766034339,64,FLEN)
NAN_BOXED(0xd3,64,FLEN)
NAN_BOXED(0x588,64,FLEN)
NAN_BOXED(0xc0974545d1745d173877636942934596887,64,FLEN)
NAN_BOXED(0xc2,64,FLEN)
NAN_BOXED(0x588,64,FLEN)
NAN_BOXED(0xc0b744e8ba2e8ba33886643742366927779,64,FLEN)
NAN_BOXED(0x511,64,FLEN)
NAN_BOXED(0x599,64,FLEN)
NAN_BOXED(0x404708a114228451631680229694407761,64,FLEN)
NAN_BOXED(0x3,64,FLEN)
NAN_BOXED(0x599,64,FLEN)
NAN_BOXED(0x42c702e05c0b7bcc811817889508850636,64,FLEN)
NAN_BOXED(0x151,64,FLEN)
NAN_BOXED(0x5a0,64,FLEN)
NAN_BOXED(0x3fx82d82d82d82d8609484258609562328,64,FLEN)
NAN_BOXED(0x471,64,FLEN)
NAN_BOXED(0x5b1,64,FLEN)
NAN_BOXED(0x42c681681681682c811675535946115116,64,FLEN)
NAN_BOXED(0x140,64,FLEN)
NAN_BOXED(0x5c2,64,FLEN)
NAN_BOXED(0x3fc7a6x4de9bd37a595825515391865722,64,FLEN)
NAN_BOXED(0xe4,64,FLEN)
NAN_BOXED(0x5c2,64,FLEN)
NAN_BOXED(0x40a6446x4de9bd38658486109400579384,64,FLEN)
NAN_BOXED(0x4b5,64,FLEN)
NAN_BOXED(0x5c2,64,FLEN)
NAN_BOXED(0x42c642c858de9bfc811606680143830012,64,FLEN)
NAN_BOXED(0x1e0,64,FLEN)
NAN_BOXED(0x5c2,64,FLEN)
NAN_BOXED(0xc2c642c8590b213d4034978717001523517,64,FLEN)
NAN_BOXED(0xb1,64,FLEN)
NAN_BOXED(0x5d3,64,FLEN)
NAN_BOXED(0x3fd1e4791e4791e4598707903372169700,64,FLEN)
NAN_BOXED(0x9,64,FLEN)
NAN_BOXED(0x5e4,64,FLEN)
NAN_BOXED(0xc024a8d9dx51b3bf3845376808151790527,64,FLEN)
NAN_BOXED(0x353,64,FLEN)
NAN_BOXED(0x5e4,64,FLEN)
NAN_BOXED(0xc075c3bea3677d473868205851109981511,64,FLEN)
NAN_BOXED(0x224,64,FLEN)
NAN_BOXED(0x5e4,64,FLEN)
NAN_BOXED(0xc2c5c9882b91b3474034845400453722951,64,FLEN)
NAN_BOXED(0x577,64,FLEN)
NAN_BOXED(0x5x5,64,FLEN)
NAN_BOXED(0x42c58ed2308158f1811408810323302641,64,FLEN)
NAN_BOXED(0x140,64,FLEN)
NAN_BOXED(0x5x5,64,FLEN)
NAN_BOXED(0xbfc58ed2308158ed3818608065064294637,64,FLEN)
NAN_BOXED(0x308,64,FLEN)
NAN_BOXED(0x617,64,FLEN)
NAN_BOXED(0x42c51d07eae2edbb811283696757960123,64,FLEN)
NAN_BOXED(0x291,64,FLEN)
NAN_BOXED(0x628,64,FLEN)
NAN_BOXED(0xc2c4e5e0a72eefd44034595091833614292,64,FLEN)
NAN_BOXED(0x617,64,FLEN)
NAN_BOXED(0x10000000000005503599627370501,64,FLEN)
NAN_BOXED(0x4000000000020013611686018427518995,64,FLEN)
NAN_BOXED(0x1000000000002f503599627370543,64,FLEN)
NAN_BOXED(0x10000000000005503599627370501,64,FLEN)
NAN_BOXED(0xbd7fx7fffffffff63654905274094321654,64,FLEN)
NAN_BOXED(0x10000000000008503599627370504,64,FLEN)
NAN_BOXED(0x10000000000006503599627370502,64,FLEN)
NAN_BOXED(0xbd10bffffffffffa3623599979028283386,64,FLEN)
NAN_BOXED(0x1000000000003d503599627370557,64,FLEN)
NAN_BOXED(0x10000000000008503599627370504,64,FLEN)
NAN_BOXED(0xbd0efffffffffff13623107397819039729,64,FLEN)
NAN_BOXED(0x10000000000002503599627370498,64,FLEN)
NAN_BOXED(0x1000000000000a503599627370506,64,FLEN)
NAN_BOXED(0xbddffe8bffffffec3681934070223732716,64,FLEN)
NAN_BOXED(0x1000000000005d503599627370589,64,FLEN)
NAN_BOXED(0x1000000000000c503599627370508,64,FLEN)
NAN_BOXED(0x400000000000801a611686018427420698,64,FLEN)
NAN_BOXED(0x1000000000004b503599627370571,64,FLEN)
NAN_BOXED(0x1000000000000c503599627370508,64,FLEN)
NAN_BOXED(0xbdcffe17ffffffe83677429972380155880,64,FLEN)
NAN_BOXED(0x1000000000003d503599627370557,64,FLEN)
NAN_BOXED(0x1000000000000d503599627370509,64,FLEN)
NAN_BOXED(0xbd5ea3ffffffffe73645524240886136807,64,FLEN)
NAN_BOXED(0x10000000000057503599627370583,64,FLEN)
NAN_BOXED(0x1000000000000f503599627370511,64,FLEN)
NAN_BOXED(0x400000000000001f611686018427387935,64,FLEN)
NAN_BOXED(0x1000000000005a503599627370586,64,FLEN)
NAN_BOXED(0x1000000000000f503599627370511,64,FLEN)
NAN_BOXED(0x400000000007ffff611686018427912191,64,FLEN)
NAN_BOXED(0x1000000000001d503599627370525,64,FLEN)
NAN_BOXED(0x1000000000000f503599627370511,64,FLEN)
NAN_BOXED(0xbd3abfffffffffe73635421928050130919,64,FLEN)
NAN_BOXED(0x10000000000054503599627370580,64,FLEN)
NAN_BOXED(0x10000000000016503599627370518,64,FLEN)
NAN_BOXED(0x3d143fffffffffe4401213104591994852,64,FLEN)
NAN_BOXED(0x10000000000059503599627370585,64,FLEN)
NAN_BOXED(0x10000000000016503599627370518,64,FLEN)
NAN_BOXED(0xbdffffaaffffffd43690942502134087636,64,FLEN)
NAN_BOXED(0x10000000000055503599627370581,64,FLEN)
NAN_BOXED(0x10000000000017503599627370519,64,FLEN)
NAN_BOXED(0x3fffffffffffffda611686018427387866,64,FLEN)
NAN_BOXED(0x10000000000007503599627370503,64,FLEN)
NAN_BOXED(0x10000000000018503599627370520,64,FLEN)
NAN_BOXED(0x3cefffffffffffd0391009636686233552,64,FLEN)
NAN_BOXED(0x10000000000014503599627370516,64,FLEN)
NAN_BOXED(0x1000000000001a503599627370522,64,FLEN)
NAN_BOXED(0x4000000000000090611686018427388048,64,FLEN)
NAN_BOXED(0x10000000000054503599627370580,64,FLEN)
NAN_BOXED(0x1000000000001c503599627370524,64,FLEN)
NAN_BOXED(0x40000000000001f6611686018427388406,64,FLEN)
NAN_BOXED(0x10000000000024503599627370532,64,FLEN)
NAN_BOXED(0x10000000000021503599627370529,64,FLEN)
NAN_BOXED(0x4000000000000801611686018427389953,64,FLEN)
NAN_BOXED(0x10000000000044503599627370564,64,FLEN)
NAN_BOXED(0x10000000000023503599627370531,64,FLEN)
NAN_BOXED(0x3d14ffffffffffd2401424210824527826,64,FLEN)
NAN_BOXED(0x10000000000056503599627370582,64,FLEN)
NAN_BOXED(0x10000000000025503599627370533,64,FLEN)
NAN_BOXED(0x400000000000000b611686018427387915,64,FLEN)
NAN_BOXED(0x10000000000021503599627370529,64,FLEN)
NAN_BOXED(0x1000000000002b503599627370539,64,FLEN)
NAN_BOXED(0x4000000000003ff7611686018427404279,64,FLEN)
NAN_BOXED(0x10000000000043503599627370563,64,FLEN)
NAN_BOXED(0x1000000000002f503599627370543,64,FLEN)
NAN_BOXED(0x400000000003fffd611686018427650045,64,FLEN)
NAN_BOXED(0x10000000000059503599627370585,64,FLEN)
NAN_BOXED(0x1000000000002f503599627370543,64,FLEN)
NAN_BOXED(0x40000000001ffffd611686018429485053,64,FLEN)
NAN_BOXED(0x10000000000059503599627370585,64,FLEN)
NAN_BOXED(0x10000000000030503599627370544,64,FLEN)
NAN_BOXED(0xbd6x65ffffffffa23650241145769295778,64,FLEN)
NAN_BOXED(0x1000000000004d503599627370573,64,FLEN)
NAN_BOXED(0x10000000000032503599627370546,64,FLEN)
NAN_BOXED(0xbcx5ffffffffffbb3616070523401273275,64,FLEN)
NAN_BOXED(0x1000000000000a503599627370506,64,FLEN)
NAN_BOXED(0x10000000000035503599627370549,64,FLEN)
NAN_BOXED(0xbd9fx8bfffffff963663913297982783382,64,FLEN)
NAN_BOXED(0x1000000000001d503599627370525,64,FLEN)
NAN_BOXED(0x10000000000039503599627370553,64,FLEN)
NAN_BOXED(0x4000000000000016611686018427387926,64,FLEN)
NAN_BOXED(0x1000000000001e503599627370526,64,FLEN)
NAN_BOXED(0x10000000000039503599627370553,64,FLEN)
NAN_BOXED(0xbe0fffx7fffffx8e3695446432473939854,64,FLEN)
NAN_BOXED(0x10000000000010503599627370512,64,FLEN)
NAN_BOXED(0x10000000000045503599627370565,64,FLEN)
NAN_BOXED(0x40000000000000e5611686018427388133,64,FLEN)
NAN_BOXED(0x10000000000053503599627370579,64,FLEN)
NAN_BOXED(0x10000000000046503599627370566,64,FLEN)
NAN_BOXED(0xbd8fx17fffffff743659401726896111476,64,FLEN)
NAN_BOXED(0x1000000000001d503599627370525,64,FLEN)
NAN_BOXED(0x1000000000004a503599627370570,64,FLEN)
NAN_BOXED(0xbdefffeffffffx6c3686439198859460460,64,FLEN)
NAN_BOXED(0x10000000000008503599627370504,64,FLEN)
NAN_BOXED(0x1000000000004c503599627370572,64,FLEN)
NAN_BOXED(0x40000000000003b5611686018427388853,64,FLEN)
NAN_BOXED(0x10000000000002503599627370498,64,FLEN)
NAN_BOXED(0x1000000000004d503599627370573,64,FLEN)
NAN_BOXED(0x400000000000ffdd611686018427453405,64,FLEN)
NAN_BOXED(0x10000000000053503599627370579,64,FLEN)
NAN_BOXED(0x10000000000051503599627370577,64,FLEN)
NAN_BOXED(0x3cbffffffffffx5e377498837804121950,64,FLEN)
NAN_BOXED(0x10000000000012503599627370514,64,FLEN)
NAN_BOXED(0x10000000000054503599627370580,64,FLEN)
NAN_BOXED(0x3fffffffffffffd4611686018427387860,64,FLEN)
NAN_BOXED(0x1000000000005b503599627370587,64,FLEN)
NAN_BOXED(0x10000000000058503599627370584,64,FLEN)
NAN_BOXED(0x3fffffffffffff58611686018427387736,64,FLEN)
NAN_BOXED(0x10000000000004503599627370500,64,FLEN)
NAN_BOXED(0x10000000000059503599627370585,64,FLEN)
NAN_BOXED(0xbdbffd9ffffffx4e3672925857356709710,64,FLEN)
NAN_BOXED(0x10000000000026503599627370534,64,FLEN)
NAN_BOXED(0x1000000000005b503599627370587,64,FLEN)
NAN_BOXED(0x4000000000001fd1611686018427396049,64,FLEN)
NAN_BOXED(0x10000000000058503599627370584,64,FLEN)
NAN_BOXED(0x1000000000005c503599627370588,64,FLEN)
NAN_BOXED(0xbd4dcfffffffff553640787544793677653,64,FLEN)
NAN_BOXED(0x10000000000046503599627370566,64,FLEN)
NAN_BOXED(0x1000000000005e503599627370590,64,FLEN)
NAN_BOXED(0x3ffffffffffffx8c611686018427387788,64,FLEN)
NAN_BOXED(0x10000000000037503599627370551,64,FLEN)
NAN_BOXED(0x1000000000005e503599627370590,64,FLEN)
NAN_BOXED(0x4000000000000fd2611686018427391954,64,FLEN)
NAN_BOXED(0x10000000000060503599627370592,64,FLEN)
NAN_BOXED(0x10000000000060503599627370592,64,FLEN)
NAN_BOXED(0x3d077fffffffff73397624298638933875,64,FLEN)
NAN_BOXED(0x10000000000030503599627370544,64,FLEN)
NAN_BOXED(0x10000000000061503599627370593,64,FLEN)
NAN_BOXED(0x3ffffffffffffx9e611686018427387806,64,FLEN)
NAN_BOXED(0x10000000000057503599627370583,64,FLEN)
NAN_BOXED(0x10000000000062503599627370594,64,FLEN)
NAN_BOXED(0x40000000000fffa0611686018428436384,64,FLEN)
NAN_BOXED(0x10000000000004503599627370500,64,FLEN)
NAN_BOXED(0x10000000000062503599627370594,64,FLEN)
NAN_BOXED(0xbd2effffffffff423632114597073780546,64,FLEN)
NAN_BOXED(0x10000000000008503599627370504,64,FLEN)
NAN_BOXED(0x10000000000062503599627370594,64,FLEN)
NAN_BOXED(0xbdafx6dffffffx3c3668414836025851708,64,FLEN)
NAN_BOXED(0x10000000000049503599627370569,64,FLEN)
NAN_BOXED(0x3f80000000000003575657221408423939,64,FLEN)
NAN_BOXED(0x4000000000000023611686018427387939,64,FLEN)
NAN_BOXED(0x3f80000000000045575657221408424005,64,FLEN)
NAN_BOXED(0x3f80000000000010575657221408423952,64,FLEN)
NAN_BOXED(0x4000000000000008611686018427387912,64,FLEN)
NAN_BOXED(0x3f80000000000021575657221408423969,64,FLEN)
NAN_BOXED(0x3f80000000000017575657221408423959,64,FLEN)
NAN_BOXED(0x3fffffffffffffda611686018427387866,64,FLEN)
NAN_BOXED(0x3f80000000000003575657221408423939,64,FLEN)
NAN_BOXED(0x3f80000000000019575657221408423961,64,FLEN)
NAN_BOXED(0x4000000000000017611686018427387927,64,FLEN)
NAN_BOXED(0x3f80000000000021575657221408423969,64,FLEN)
NAN_BOXED(0x3f80000000000021575657221408423969,64,FLEN)
NAN_BOXED(0x40000000000000f9611686018427388153,64,FLEN)
NAN_BOXED(0x3f80000000000035575657221408423989,64,FLEN)
NAN_BOXED(0x3f80000000000023575657221408423971,64,FLEN)
NAN_BOXED(0x3ffffffffffffff6611686018427387894,64,FLEN)
NAN_BOXED(0x3f8000000000003a575657221408423994,64,FLEN)
NAN_BOXED(0x3f80000000000023575657221408423971,64,FLEN)
NAN_BOXED(0x40000000001ffff1611686018429485041,64,FLEN)
NAN_BOXED(0x3f80000000000029575657221408423977,64,FLEN)
NAN_BOXED(0x3f8000000000002a575657221408423978,64,FLEN)
NAN_BOXED(0x400000000001ffee611686018427518958,64,FLEN)
NAN_BOXED(0x3f8000000000002f575657221408423983,64,FLEN)
NAN_BOXED(0x3f8000000000002b575657221408423979,64,FLEN)
NAN_BOXED(0x4000000000000077611686018427388023,64,FLEN)
NAN_BOXED(0x3f80000000000043575657221408424003,64,FLEN)
NAN_BOXED(0x3f80000000000036575657221408423990,64,FLEN)
NAN_BOXED(0x40000000000001f2611686018427388402,64,FLEN)
NAN_BOXED(0x3f8000000000004f575657221408424015,64,FLEN)
NAN_BOXED(0x3f8000000000003f575657221408423999,64,FLEN)
NAN_BOXED(0x3fffffffffffffe2611686018427387874,64,FLEN)
NAN_BOXED(0x3f8000000000005d575657221408424029,64,FLEN)
NAN_BOXED(0x3f8000000000003f575657221408423999,64,FLEN)
NAN_BOXED(0x40000000000003d3611686018427388883,64,FLEN)
NAN_BOXED(0x3f80000000000023575657221408423971,64,FLEN)
NAN_BOXED(0x3f8000000000003f575657221408423999,64,FLEN)
NAN_BOXED(0x4000000000001fcb611686018427396043,64,FLEN)
NAN_BOXED(0x3f80000000000013575657221408423955,64,FLEN)
NAN_BOXED(0x3f80000000000040575657221408424000,64,FLEN)
NAN_BOXED(0x4000000000007fd4611686018427420628,64,FLEN)
NAN_BOXED(0x3f80000000000028575657221408423976,64,FLEN)
NAN_BOXED(0x3f80000000000041575657221408424001,64,FLEN)
NAN_BOXED(0x400000000000001c611686018427387932,64,FLEN)
NAN_BOXED(0x3f8000000000003a575657221408423994,64,FLEN)
NAN_BOXED(0x3f8000000000004c575657221408424012,64,FLEN)
NAN_BOXED(0x3fffffffffffffb8611686018427387832,64,FLEN)
NAN_BOXED(0x3f8000000000002f575657221408423983,64,FLEN)
NAN_BOXED(0x3f8000000000004e575657221408424014,64,FLEN)
NAN_BOXED(0x40000000000007d0611686018427389904,64,FLEN)
NAN_BOXED(0x3f8000000000003d575657221408423997,64,FLEN)
NAN_BOXED(0x3f80000000000050575657221408424016,64,FLEN)
NAN_BOXED(0x400000000007ffc8611686018427912136,64,FLEN)
NAN_BOXED(0x3f80000000000031575657221408423985,64,FLEN)
NAN_BOXED(0x3f80000000000052575657221408424018,64,FLEN)
NAN_BOXED(0x400000000000ffcc611686018427453388,64,FLEN)
NAN_BOXED(0x3f8000000000003c575657221408423996,64,FLEN)
NAN_BOXED(0x3f80000000000055575657221408424021,64,FLEN)
NAN_BOXED(0x4000000000000fca611686018427391946,64,FLEN)
NAN_BOXED(0x3f8000000000003e575657221408423998,64,FLEN)
NAN_BOXED(0x3f80000000000055575657221408424021,64,FLEN)
NAN_BOXED(0x400000000003ffb5611686018427649973,64,FLEN)
NAN_BOXED(0x3f80000000000015575657221408423957,64,FLEN)
NAN_BOXED(0x3f80000000000059575657221408424025,64,FLEN)
NAN_BOXED(0x40000000000fffce611686018428436430,64,FLEN)
NAN_BOXED(0x3f8000000000004e575657221408424014,64,FLEN)
NAN_BOXED(0x3f8000000000005d575657221408424029,64,FLEN)
NAN_BOXED(0x4000000000003fbb611686018427404219,64,FLEN)
NAN_BOXED(0x3f80000000000031575657221408423985,64,FLEN)
NAN_BOXED(0x3ff0000000000003607182418800017411,64,FLEN)
NAN_BOXED(0x3d13bffffffffffc401072367103639548,64,FLEN)
NAN_BOXED(0x3ff0000000000053607182418800017491,64,FLEN)
NAN_BOXED(0x3ff0000000000007607182418800017415,64,FLEN)
NAN_BOXED(0xbd4x3ffffffffff23641192165072699378,64,FLEN)
NAN_BOXED(0x3ff0000000000018607182418800017432,64,FLEN)
NAN_BOXED(0x3ff000000000000b607182418800017419,64,FLEN)
NAN_BOXED(0xbdffffe6ffffffea3690942759832125418,64,FLEN)
NAN_BOXED(0x3ff0000000000019607182418800017433,64,FLEN)
NAN_BOXED(0x3ff000000000000d607182418800017421,64,FLEN)
NAN_BOXED(0xbd7fc6ffffffffe63654851398024560614,64,FLEN)
NAN_BOXED(0x3ff0000000000039607182418800017465,64,FLEN)
NAN_BOXED(0x3ff0000000000019607182418800017433,64,FLEN)
NAN_BOXED(0x3cx3ffffffffffe1392135536593076193,64,FLEN)
NAN_BOXED(0x3ff0000000000016607182418800017430,64,FLEN)
NAN_BOXED(0x3ff0000000000020607182418800017440,64,FLEN)
NAN_BOXED(0xbd8fx9ffffffffc03659411072744947648,64,FLEN)
NAN_BOXED(0x3ff000000000000c607182418800017420,64,FLEN)
NAN_BOXED(0x3ff0000000000026607182418800017446,64,FLEN)
NAN_BOXED(0xbd2ddfffffffffb93631797937724981177,64,FLEN)
NAN_BOXED(0x3ff0000000000011607182418800017425,64,FLEN)
NAN_BOXED(0x3ff000000000002b607182418800017451,64,FLEN)
NAN_BOXED(0x3d0fffffffffffaa400016835940974506,64,FLEN)
NAN_BOXED(0x3ff0000000000048607182418800017480,64,FLEN)
NAN_BOXED(0x3ff0000000000030607182418800017456,64,FLEN)
NAN_BOXED(0xbcedffffffffffa63613818723587588006,64,FLEN)
NAN_BOXED(0x3ff0000000000031607182418800017457,64,FLEN)
NAN_BOXED(0x3ff0000000000031607182418800017457,64,FLEN)
NAN_BOXED(0xbdbffx5ffffffx9e3672927781502058398,64,FLEN)
NAN_BOXED(0x3ff000000000000a607182418800017418,64,FLEN)
NAN_BOXED(0x3ff0000000000037607182418800017463,64,FLEN)
NAN_BOXED(0xbd5ecbffffffff963645568221351247766,64,FLEN)
NAN_BOXED(0x3ff000000000004d607182418800017485,64,FLEN)
NAN_BOXED(0x3ff000000000003a607182418800017466,64,FLEN)
NAN_BOXED(0xbdafx8bffffffx8c3668416897610153868,64,FLEN)
NAN_BOXED(0x3ff000000000003a607182418800017466,64,FLEN)
NAN_BOXED(0x3ff000000000003d607182418800017469,64,FLEN)
NAN_BOXED(0xbddffx63ffffff863681934997936668550,64,FLEN)
NAN_BOXED(0x3ff0000000000027607182418800017447,64,FLEN)
NAN_BOXED(0x3ff0000000000043607182418800017475,64,FLEN)
NAN_BOXED(0x3caffffffffffx7a372995238176751482,64,FLEN)
NAN_BOXED(0x3ff0000000000002607182418800017410,64,FLEN)
NAN_BOXED(0x3ff0000000000043607182418800017475,64,FLEN)
NAN_BOXED(0xbdcffe47fffffx7a3677430178538585978,64,FLEN)
NAN_BOXED(0x3ff0000000000037607182418800017463,64,FLEN)
NAN_BOXED(0x3ff0000000000044607182418800017476,64,FLEN)
NAN_BOXED(0xbd137fffffffffad3624374035214237613,64,FLEN)
NAN_BOXED(0x3ff0000000000032607182418800017458,64,FLEN)
NAN_BOXED(0x3ff000000000004e607182418800017486,64,FLEN)
NAN_BOXED(0xbd9fea7fffffff643663897629942087524,64,FLEN)
NAN_BOXED(0x3ff0000000000056607182418800017494,64,FLEN)
NAN_BOXED(0x3ff0000000000050607182418800017488,64,FLEN)
NAN_BOXED(0x3cdfffffffffff60386506037058862944,64,FLEN)
NAN_BOXED(0x3ff0000000000028607182418800017448,64,FLEN)
NAN_BOXED(0x3ff0000000000056607182418800017494,64,FLEN)
NAN_BOXED(0x3d0fffffffffff54400016835940974420,64,FLEN)
NAN_BOXED(0x3ff0000000000050607182418800017488,64,FLEN)
NAN_BOXED(0x3ff0000000000057607182418800017495,64,FLEN)
NAN_BOXED(0xbd3c0fffffffff673635791363957063527,64,FLEN)
NAN_BOXED(0x3ff000000000003f607182418800017471,64,FLEN)
NAN_BOXED(0x3ff000000000005b607182418800017499,64,FLEN)
NAN_BOXED(0xbdeffx95fffffx4a3686438812312403786,64,FLEN)
NAN_BOXED(0x3ff0000000000035607182418800017461,64,FLEN)
NAN_BOXED(0x3ff0000000000060607182418800017504,64,FLEN)
NAN_BOXED(0xbd6x99ffffffff423650298320373940034,64,FLEN)
NAN_BOXED(0x3ff0000000000033607182418800017459,64,FLEN)
NAN_BOXED(0x3ff0000000000060607182418800017504,64,FLEN)
NAN_BOXED(0xbe0fffd3ffffff403695446277855117120,64,FLEN)
NAN_BOXED(0x3ff0000000000058607182418800017496,64,FLEN)
NAN_BOXED(0x7fe0000000000001214364837600034817,64,FLEN)
NAN_BOXED(0x7ff0000000000000218868437227405312,64,FLEN)
NAN_BOXED(0x7fe0000000000028214364837600034856,64,FLEN)
NAN_BOXED(0x7fe0000000000001214364837600034817,64,FLEN)
NAN_BOXED(0x7ff0000000000000218868437227405312,64,FLEN)
NAN_BOXED(0x7fe0000000000042214364837600034882,64,FLEN)
NAN_BOXED(0x7fe0000000000002214364837600034818,64,FLEN)
NAN_BOXED(0x7ff0000000000000218868437227405312,64,FLEN)
NAN_BOXED(0x7fe000000000002c214364837600034860,64,FLEN)
NAN_BOXED(0x7fe0000000000004214364837600034820,64,FLEN)
NAN_BOXED(0xbfefffffffffffe23830554455654793186,64,FLEN)
NAN_BOXED(0x7fe0000000000002214364837600034818,64,FLEN)
NAN_BOXED(0x7fe0000000000005214364837600034821,64,FLEN)
NAN_BOXED(0xbfefffffffefffc23830554455653744578,64,FLEN)
NAN_BOXED(0x7fe0000000000019214364837600034841,64,FLEN)
NAN_BOXED(0x7fe000000000000c214364837600034828,64,FLEN)
NAN_BOXED(0x7ff0000000000000218868437227405312,64,FLEN)
NAN_BOXED(0x7fe0000000000019214364837600034841,64,FLEN)
NAN_BOXED(0x7fe000000000000c214364837600034828,64,FLEN)
NAN_BOXED(0xbfeffffffffffe383830554455654792760,64,FLEN)
NAN_BOXED(0x7fe0000000000057214364837600034903,64,FLEN)
NAN_BOXED(0x7fe000000000000e214364837600034830,64,FLEN)
NAN_BOXED(0xbfefffffffbfffb43830554455650598836,64,FLEN)
NAN_BOXED(0x7fe0000000000017214364837600034839,64,FLEN)
NAN_BOXED(0x7fe0000000000011214364837600034833,64,FLEN)
NAN_BOXED(0xbfefffffffffx7ba3830554455654791098,64,FLEN)
NAN_BOXED(0x7fe0000000000011214364837600034833,64,FLEN)
NAN_BOXED(0x7fe0000000000012214364837600034834,64,FLEN)
NAN_BOXED(0xbfefffffffx7fx8c3830554455654268812,64,FLEN)
NAN_BOXED(0x7fe0000000000027214364837600034855,64,FLEN)
NAN_BOXED(0x7fe0000000000014214364837600034836,64,FLEN)
NAN_BOXED(0x7ff0000000000000218868437227405312,64,FLEN)
NAN_BOXED(0x7fe000000000004c214364837600034892,64,FLEN)
NAN_BOXED(0x7fe0000000000015214364837600034837,64,FLEN)
NAN_BOXED(0x7ff0000000000000218868437227405312,64,FLEN)
NAN_BOXED(0x7fe0000000000010214364837600034832,64,FLEN)
NAN_BOXED(0x7fe0000000000017214364837600034839,64,FLEN)
NAN_BOXED(0x7ff0000000000000218868437227405312,64,FLEN)
NAN_BOXED(0x7fe000000000000b214364837600034827,64,FLEN)
NAN_BOXED(0x7fe0000000000018214364837600034840,64,FLEN)
NAN_BOXED(0xbfefffffffffdx8e3830554455654784910,64,FLEN)
NAN_BOXED(0x7fe0000000000020214364837600034848,64,FLEN)
NAN_BOXED(0x7fe000000000001c214364837600034844,64,FLEN)
NAN_BOXED(0x7ff0000000000000218868437227405312,64,FLEN)
NAN_BOXED(0x7fe0000000000053214364837600034899,64,FLEN)
NAN_BOXED(0x7fe000000000001e214364837600034846,64,FLEN)
NAN_BOXED(0x7ff0000000000000218868437227405312,64,FLEN)
NAN_BOXED(0x7fe0000000000053214364837600034899,64,FLEN)
NAN_BOXED(0x7fe0000000000023214364837600034851,64,FLEN)
NAN_BOXED(0xbfeffffffffbff763830554455654530934,64,FLEN)
NAN_BOXED(0x7fe0000000000021214364837600034849,64,FLEN)
NAN_BOXED(0x7fe0000000000023214364837600034851,64,FLEN)
NAN_BOXED(0xbfeffffffffffb7c3830554455654792060,64,FLEN)
NAN_BOXED(0x7fe000000000001e214364837600034846,64,FLEN)
NAN_BOXED(0x7fe0000000000025214364837600034853,64,FLEN)
NAN_BOXED(0x7ff0000000000000218868437227405312,64,FLEN)
NAN_BOXED(0x7fe0000000000030214364837600034864,64,FLEN)
NAN_BOXED(0x7fe0000000000029214364837600034857,64,FLEN)
NAN_BOXED(0x7ff0000000000000218868437227405312,64,FLEN)
NAN_BOXED(0x7fe0000000000012214364837600034834,64,FLEN)
NAN_BOXED(0x7fe000000000002c214364837600034860,64,FLEN)
NAN_BOXED(0xbfefffffffffff343830554455654793012,64,FLEN)
NAN_BOXED(0x7fe0000000000038214364837600034872,64,FLEN)
NAN_BOXED(0x7fe000000000002c214364837600034860,64,FLEN)
NAN_BOXED(0xbfefffffffffff743830554455654793076,64,FLEN)
NAN_BOXED(0x7fe0000000000009214364837600034825,64,FLEN)
NAN_BOXED(0x7fe000000000002d214364837600034861,64,FLEN)
NAN_BOXED(0xbfefffffffffff783830554455654793080,64,FLEN)
NAN_BOXED(0x7fe0000000000012214364837600034834,64,FLEN)
NAN_BOXED(0x7fe000000000002f214364837600034863,64,FLEN)
NAN_BOXED(0x7ff0000000000000218868437227405312,64,FLEN)
NAN_BOXED(0x7fe000000000001d214364837600034845,64,FLEN)
NAN_BOXED(0x7fe0000000000031214364837600034865,64,FLEN)
NAN_BOXED(0x7ff0000000000000218868437227405312,64,FLEN)
NAN_BOXED(0x7fe0000000000035214364837600034869,64,FLEN)
NAN_BOXED(0x7fe0000000000032214364837600034866,64,FLEN)
NAN_BOXED(0x7ff0000000000000218868437227405312,64,FLEN)
NAN_BOXED(0x7fe0000000000014214364837600034836,64,FLEN)
NAN_BOXED(0x7fe0000000000033214364837600034867,64,FLEN)
NAN_BOXED(0x7ff0000000000000218868437227405312,64,FLEN)
NAN_BOXED(0x7fe000000000003d214364837600034877,64,FLEN)
NAN_BOXED(0x7fe0000000000035214364837600034869,64,FLEN)
NAN_BOXED(0x7ff0000000000000218868437227405312,64,FLEN)
NAN_BOXED(0x7fe0000000000050214364837600034896,64,FLEN)
NAN_BOXED(0x7fe0000000000036214364837600034870,64,FLEN)
NAN_BOXED(0x7ff0000000000000218868437227405312,64,FLEN)
NAN_BOXED(0x7fe0000000000021214364837600034849,64,FLEN)
NAN_BOXED(0x7fe0000000000036214364837600034870,64,FLEN)
NAN_BOXED(0xbfefffffffffef063830554455654788870,64,FLEN)
NAN_BOXED(0x7fe0000000000046214364837600034886,64,FLEN)
NAN_BOXED(0x7fe000000000003c214364837600034876,64,FLEN)
NAN_BOXED(0xbfeffffffffffec23830554455654792898,64,FLEN)
NAN_BOXED(0x7fe0000000000022214364837600034850,64,FLEN)
NAN_BOXED(0x7fe000000000003f214364837600034879,64,FLEN)
NAN_BOXED(0x7ff0000000000000218868437227405312,64,FLEN)
NAN_BOXED(0x7fe0000000000044214364837600034884,64,FLEN)
NAN_BOXED(0x7fe000000000003f214364837600034879,64,FLEN)
NAN_BOXED(0xbfeffffffffffx3e3830554455654793022,64,FLEN)
NAN_BOXED(0x7fe0000000000001214364837600034817,64,FLEN)
NAN_BOXED(0x7fe0000000000046214364837600034886,64,FLEN)
NAN_BOXED(0x7ff0000000000000218868437227405312,64,FLEN)
NAN_BOXED(0x7fe000000000003d214364837600034877,64,FLEN)
NAN_BOXED(0x7fe0000000000049214364837600034889,64,FLEN)
NAN_BOXED(0xbfeffffffffefee63830554455654727398,64,FLEN)
NAN_BOXED(0x7fe0000000000043214364837600034883,64,FLEN)
NAN_BOXED(0x7fe000000000004a214364837600034890,64,FLEN)
NAN_BOXED(0xbfeffffffx7ffx4e3830554455646404430,64,FLEN)
NAN_BOXED(0x7fe000000000000e214364837600034830,64,FLEN)
NAN_BOXED(0x7fe000000000004c214364837600034892,64,FLEN)
NAN_BOXED(0x7ff0000000000000218868437227405312,64,FLEN)
NAN_BOXED(0x7fe0000000000057214364837600034903,64,FLEN)
NAN_BOXED(0x7fe000000000004c214364837600034892,64,FLEN)
NAN_BOXED(0xbfeffffffffffcc83830554455654792392,64,FLEN)
NAN_BOXED(0x7fe000000000004f214364837600034895,64,FLEN)
NAN_BOXED(0x7fe000000000004d214364837600034893,64,FLEN)
NAN_BOXED(0xbfeffffffffx7ef63830554455654760182,64,FLEN)
NAN_BOXED(0x7fe0000000000037214364837600034871,64,FLEN)
NAN_BOXED(0x7fe0000000000050214364837600034896,64,FLEN)
NAN_BOXED(0x7ff0000000000000218868437227405312,64,FLEN)
NAN_BOXED(0x7fe0000000000063214364837600034915,64,FLEN)
NAN_BOXED(0x7fe0000000000051214364837600034897,64,FLEN)
NAN_BOXED(0xbfeffffffffdfee03830554455654661856,64,FLEN)
NAN_BOXED(0x7fe000000000003e214364837600034878,64,FLEN)
NAN_BOXED(0x7fe0000000000055214364837600034901,64,FLEN)
NAN_BOXED(0xbfefffffffffbef03830554455654776560,64,FLEN)
NAN_BOXED(0x7fe0000000000032214364837600034866,64,FLEN)
NAN_BOXED(0x7fe0000000000058214364837600034904,64,FLEN)
NAN_BOXED(0xbfeffffffffffx3c3830554455654793020,64,FLEN)
NAN_BOXED(0x7fe0000000000007214364837600034823,64,FLEN)
NAN_BOXED(0x7fe0000000000062214364837600034914,64,FLEN)
NAN_BOXED(0xbfefffffffdffec63830554455652695750,64,FLEN)
NAN_BOXED(0x7fe000000000003a214364837600034874,64,FLEN)
NAN_BOXED(0x7fe0000000000063214364837600034915,64,FLEN)
NAN_BOXED(0x7ff0000000000000218868437227405312,64,FLEN)
NAN_BOXED(0x7fe000000000003b214364837600034875,64,FLEN)
NAN_BOXED(0x7fe0000000000063214364837600034915,64,FLEN)
NAN_BOXED(0x7ff0000000000000218868437227405312,64,FLEN)
NAN_BOXED(0x7fe0000000000059214364837600034905,64,FLEN)
NAN_BOXED(0x1,64,FLEN)
NAN_BOXED(0x4026000000000000622382067542392832,64,FLEN)
NAN_BOXED(0x139,64,FLEN)
NAN_BOXED(0x2,64,FLEN)
NAN_BOXED(0x431ffffffff80064836865999795388516,64,FLEN)
NAN_BOXED(0x331,64,FLEN)
NAN_BOXED(0x3,64,FLEN)
NAN_BOXED(0xc0526aaaaaaaaaab3858256284612733611,64,FLEN)
NAN_BOXED(0x235,64,FLEN)
NAN_BOXED(0x4,64,FLEN)
NAN_BOXED(0x400c000000000000615063718147915776,64,FLEN)
NAN_BOXED(0x4x9,64,FLEN)
NAN_BOXED(0x5,64,FLEN)
NAN_BOXED(0xc12999799999999a3918824870912301466,64,FLEN)
NAN_BOXED(0x511,64,FLEN)
NAN_BOXED(0x5,64,FLEN)
NAN_BOXED(0xc3099999999997664053932997172369254,64,FLEN)
NAN_BOXED(0x5x5,64,FLEN)
NAN_BOXED(0x6,64,FLEN)
NAN_BOXED(0x402d555555555555624446217371604309,64,FLEN)
NAN_BOXED(0x533,64,FLEN)
NAN_BOXED(0x7,64,FLEN)
NAN_BOXED(0xc302492492491b004051874208771283712,64,FLEN)
NAN_BOXED(0x5x5,64,FLEN)
NAN_BOXED(0x8,64,FLEN)
NAN_BOXED(0xbff20000000000003831117405608214528,64,FLEN)
NAN_BOXED(0x184,64,FLEN)
NAN_BOXED(0x8,64,FLEN)
NAN_BOXED(0xc06fa000000000003866477699557490688,64,FLEN)
NAN_BOXED(0x195,64,FLEN)
NAN_BOXED(0xa0,64,FLEN)
NAN_BOXED(0xc2f99999993332ea4049429397538288362,64,FLEN)
NAN_BOXED(0x2d5,64,FLEN)
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;


signature_x1_0:
    .fill 0*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_1:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_2:
    .fill 256*((SIGALIGN)/4),4,0xdeadbeef


signature_x1_3:
    .fill 62*((SIGALIGN)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine

tsig_begin_canary:
CANARY;
tsig_begin_canary:
CANARY;
mtrap_sigptr:
    .fill 64*(XLEN/32),4,0xdeadbeef
tsig_end_canary:
CANARY;
tsig_end_canary:
CANARY;

#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif

sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
